
Inventario_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016060  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008fc  08016120  08016120  00026120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a1c  08016a1c  00030438  2**0
                  CONTENTS
  4 .ARM          00000008  08016a1c  08016a1c  00026a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a24  08016a24  00030438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a24  08016a24  00026a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a28  08016a28  00026a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000438  20000000  08016a2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003404  20000438  08016e64  00030438  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000383c  08016e64  0003383c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030438  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043173  00000000  00000000  00030460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005380  00000000  00000000  000735d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  00078958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d38  00000000  00000000  0007a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e008  00000000  00000000  0007c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000242b6  00000000  00000000  0009a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9966  00000000  00000000  000be886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001681ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008470  00000000  00000000  00168240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000438 	.word	0x20000438
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08016108 	.word	0x08016108

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000043c 	.word	0x2000043c
 8000104:	08016108 	.word	0x08016108

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd35 	bl	8001eac <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc7f 	bl	8001d50 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd27 	bl	8001eac <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd1d 	bl	8001eac <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fca1 	bl	8001dc8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc97 	bl	8001dc8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f846 	bl	8000568 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	0415      	lsls	r5, r2, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	000f      	movs	r7, r1
 80004f0:	0001      	movs	r1, r0
 80004f2:	002e      	movs	r6, r5
 80004f4:	46c6      	mov	lr, r8
 80004f6:	4684      	mov	ip, r0
 80004f8:	0400      	lsls	r0, r0, #16
 80004fa:	0c14      	lsrs	r4, r2, #16
 80004fc:	0c00      	lsrs	r0, r0, #16
 80004fe:	0c09      	lsrs	r1, r1, #16
 8000500:	4346      	muls	r6, r0
 8000502:	434d      	muls	r5, r1
 8000504:	4360      	muls	r0, r4
 8000506:	4361      	muls	r1, r4
 8000508:	1940      	adds	r0, r0, r5
 800050a:	0c34      	lsrs	r4, r6, #16
 800050c:	1824      	adds	r4, r4, r0
 800050e:	b500      	push	{lr}
 8000510:	42a5      	cmp	r5, r4
 8000512:	d903      	bls.n	800051c <__aeabi_lmul+0x34>
 8000514:	2080      	movs	r0, #128	; 0x80
 8000516:	0240      	lsls	r0, r0, #9
 8000518:	4680      	mov	r8, r0
 800051a:	4441      	add	r1, r8
 800051c:	0c25      	lsrs	r5, r4, #16
 800051e:	186d      	adds	r5, r5, r1
 8000520:	4661      	mov	r1, ip
 8000522:	4359      	muls	r1, r3
 8000524:	437a      	muls	r2, r7
 8000526:	0430      	lsls	r0, r6, #16
 8000528:	1949      	adds	r1, r1, r5
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	0c00      	lsrs	r0, r0, #16
 800052e:	1820      	adds	r0, r4, r0
 8000530:	1889      	adds	r1, r1, r2
 8000532:	bc80      	pop	{r7}
 8000534:	46b8      	mov	r8, r7
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000538 <__aeabi_f2uiz>:
 8000538:	219e      	movs	r1, #158	; 0x9e
 800053a:	b510      	push	{r4, lr}
 800053c:	05c9      	lsls	r1, r1, #23
 800053e:	1c04      	adds	r4, r0, #0
 8000540:	f002 fc84 	bl	8002e4c <__aeabi_fcmpge>
 8000544:	2800      	cmp	r0, #0
 8000546:	d103      	bne.n	8000550 <__aeabi_f2uiz+0x18>
 8000548:	1c20      	adds	r0, r4, #0
 800054a:	f000 fd49 	bl	8000fe0 <__aeabi_f2iz>
 800054e:	bd10      	pop	{r4, pc}
 8000550:	219e      	movs	r1, #158	; 0x9e
 8000552:	1c20      	adds	r0, r4, #0
 8000554:	05c9      	lsls	r1, r1, #23
 8000556:	f000 fb7b 	bl	8000c50 <__aeabi_fsub>
 800055a:	f000 fd41 	bl	8000fe0 <__aeabi_f2iz>
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	061b      	lsls	r3, r3, #24
 8000562:	469c      	mov	ip, r3
 8000564:	4460      	add	r0, ip
 8000566:	e7f2      	b.n	800054e <__aeabi_f2uiz+0x16>

08000568 <__udivmoddi4>:
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	4657      	mov	r7, sl
 800056c:	464e      	mov	r6, r9
 800056e:	4645      	mov	r5, r8
 8000570:	46de      	mov	lr, fp
 8000572:	b5e0      	push	{r5, r6, r7, lr}
 8000574:	0004      	movs	r4, r0
 8000576:	000d      	movs	r5, r1
 8000578:	4692      	mov	sl, r2
 800057a:	4699      	mov	r9, r3
 800057c:	b083      	sub	sp, #12
 800057e:	428b      	cmp	r3, r1
 8000580:	d830      	bhi.n	80005e4 <__udivmoddi4+0x7c>
 8000582:	d02d      	beq.n	80005e0 <__udivmoddi4+0x78>
 8000584:	4649      	mov	r1, r9
 8000586:	4650      	mov	r0, sl
 8000588:	f002 fc88 	bl	8002e9c <__clzdi2>
 800058c:	0029      	movs	r1, r5
 800058e:	0006      	movs	r6, r0
 8000590:	0020      	movs	r0, r4
 8000592:	f002 fc83 	bl	8002e9c <__clzdi2>
 8000596:	1a33      	subs	r3, r6, r0
 8000598:	4698      	mov	r8, r3
 800059a:	3b20      	subs	r3, #32
 800059c:	469b      	mov	fp, r3
 800059e:	d433      	bmi.n	8000608 <__udivmoddi4+0xa0>
 80005a0:	465a      	mov	r2, fp
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	4642      	mov	r2, r8
 80005a8:	001f      	movs	r7, r3
 80005aa:	4653      	mov	r3, sl
 80005ac:	4093      	lsls	r3, r2
 80005ae:	001e      	movs	r6, r3
 80005b0:	42af      	cmp	r7, r5
 80005b2:	d83a      	bhi.n	800062a <__udivmoddi4+0xc2>
 80005b4:	42af      	cmp	r7, r5
 80005b6:	d100      	bne.n	80005ba <__udivmoddi4+0x52>
 80005b8:	e078      	b.n	80006ac <__udivmoddi4+0x144>
 80005ba:	465b      	mov	r3, fp
 80005bc:	1ba4      	subs	r4, r4, r6
 80005be:	41bd      	sbcs	r5, r7
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	da00      	bge.n	80005c6 <__udivmoddi4+0x5e>
 80005c4:	e075      	b.n	80006b2 <__udivmoddi4+0x14a>
 80005c6:	2200      	movs	r2, #0
 80005c8:	2300      	movs	r3, #0
 80005ca:	9200      	str	r2, [sp, #0]
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	465a      	mov	r2, fp
 80005d2:	4093      	lsls	r3, r2
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2301      	movs	r3, #1
 80005d8:	4642      	mov	r2, r8
 80005da:	4093      	lsls	r3, r2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	e028      	b.n	8000632 <__udivmoddi4+0xca>
 80005e0:	4282      	cmp	r2, r0
 80005e2:	d9cf      	bls.n	8000584 <__udivmoddi4+0x1c>
 80005e4:	2200      	movs	r2, #0
 80005e6:	2300      	movs	r3, #0
 80005e8:	9200      	str	r2, [sp, #0]
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <__udivmoddi4+0x8e>
 80005f2:	601c      	str	r4, [r3, #0]
 80005f4:	605d      	str	r5, [r3, #4]
 80005f6:	9800      	ldr	r0, [sp, #0]
 80005f8:	9901      	ldr	r1, [sp, #4]
 80005fa:	b003      	add	sp, #12
 80005fc:	bcf0      	pop	{r4, r5, r6, r7}
 80005fe:	46bb      	mov	fp, r7
 8000600:	46b2      	mov	sl, r6
 8000602:	46a9      	mov	r9, r5
 8000604:	46a0      	mov	r8, r4
 8000606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	4652      	mov	r2, sl
 8000610:	40da      	lsrs	r2, r3
 8000612:	4641      	mov	r1, r8
 8000614:	0013      	movs	r3, r2
 8000616:	464a      	mov	r2, r9
 8000618:	408a      	lsls	r2, r1
 800061a:	0017      	movs	r7, r2
 800061c:	4642      	mov	r2, r8
 800061e:	431f      	orrs	r7, r3
 8000620:	4653      	mov	r3, sl
 8000622:	4093      	lsls	r3, r2
 8000624:	001e      	movs	r6, r3
 8000626:	42af      	cmp	r7, r5
 8000628:	d9c4      	bls.n	80005b4 <__udivmoddi4+0x4c>
 800062a:	2200      	movs	r2, #0
 800062c:	2300      	movs	r3, #0
 800062e:	9200      	str	r2, [sp, #0]
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	4643      	mov	r3, r8
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0d9      	beq.n	80005ec <__udivmoddi4+0x84>
 8000638:	07fb      	lsls	r3, r7, #31
 800063a:	0872      	lsrs	r2, r6, #1
 800063c:	431a      	orrs	r2, r3
 800063e:	4646      	mov	r6, r8
 8000640:	087b      	lsrs	r3, r7, #1
 8000642:	e00e      	b.n	8000662 <__udivmoddi4+0xfa>
 8000644:	42ab      	cmp	r3, r5
 8000646:	d101      	bne.n	800064c <__udivmoddi4+0xe4>
 8000648:	42a2      	cmp	r2, r4
 800064a:	d80c      	bhi.n	8000666 <__udivmoddi4+0xfe>
 800064c:	1aa4      	subs	r4, r4, r2
 800064e:	419d      	sbcs	r5, r3
 8000650:	2001      	movs	r0, #1
 8000652:	1924      	adds	r4, r4, r4
 8000654:	416d      	adcs	r5, r5
 8000656:	2100      	movs	r1, #0
 8000658:	3e01      	subs	r6, #1
 800065a:	1824      	adds	r4, r4, r0
 800065c:	414d      	adcs	r5, r1
 800065e:	2e00      	cmp	r6, #0
 8000660:	d006      	beq.n	8000670 <__udivmoddi4+0x108>
 8000662:	42ab      	cmp	r3, r5
 8000664:	d9ee      	bls.n	8000644 <__udivmoddi4+0xdc>
 8000666:	3e01      	subs	r6, #1
 8000668:	1924      	adds	r4, r4, r4
 800066a:	416d      	adcs	r5, r5
 800066c:	2e00      	cmp	r6, #0
 800066e:	d1f8      	bne.n	8000662 <__udivmoddi4+0xfa>
 8000670:	9800      	ldr	r0, [sp, #0]
 8000672:	9901      	ldr	r1, [sp, #4]
 8000674:	465b      	mov	r3, fp
 8000676:	1900      	adds	r0, r0, r4
 8000678:	4169      	adcs	r1, r5
 800067a:	2b00      	cmp	r3, #0
 800067c:	db24      	blt.n	80006c8 <__udivmoddi4+0x160>
 800067e:	002b      	movs	r3, r5
 8000680:	465a      	mov	r2, fp
 8000682:	4644      	mov	r4, r8
 8000684:	40d3      	lsrs	r3, r2
 8000686:	002a      	movs	r2, r5
 8000688:	40e2      	lsrs	r2, r4
 800068a:	001c      	movs	r4, r3
 800068c:	465b      	mov	r3, fp
 800068e:	0015      	movs	r5, r2
 8000690:	2b00      	cmp	r3, #0
 8000692:	db2a      	blt.n	80006ea <__udivmoddi4+0x182>
 8000694:	0026      	movs	r6, r4
 8000696:	409e      	lsls	r6, r3
 8000698:	0033      	movs	r3, r6
 800069a:	0026      	movs	r6, r4
 800069c:	4647      	mov	r7, r8
 800069e:	40be      	lsls	r6, r7
 80006a0:	0032      	movs	r2, r6
 80006a2:	1a80      	subs	r0, r0, r2
 80006a4:	4199      	sbcs	r1, r3
 80006a6:	9000      	str	r0, [sp, #0]
 80006a8:	9101      	str	r1, [sp, #4]
 80006aa:	e79f      	b.n	80005ec <__udivmoddi4+0x84>
 80006ac:	42a3      	cmp	r3, r4
 80006ae:	d8bc      	bhi.n	800062a <__udivmoddi4+0xc2>
 80006b0:	e783      	b.n	80005ba <__udivmoddi4+0x52>
 80006b2:	4642      	mov	r2, r8
 80006b4:	2320      	movs	r3, #32
 80006b6:	2100      	movs	r1, #0
 80006b8:	1a9b      	subs	r3, r3, r2
 80006ba:	2200      	movs	r2, #0
 80006bc:	9100      	str	r1, [sp, #0]
 80006be:	9201      	str	r2, [sp, #4]
 80006c0:	2201      	movs	r2, #1
 80006c2:	40da      	lsrs	r2, r3
 80006c4:	9201      	str	r2, [sp, #4]
 80006c6:	e786      	b.n	80005d6 <__udivmoddi4+0x6e>
 80006c8:	4642      	mov	r2, r8
 80006ca:	2320      	movs	r3, #32
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	002a      	movs	r2, r5
 80006d0:	4646      	mov	r6, r8
 80006d2:	409a      	lsls	r2, r3
 80006d4:	0023      	movs	r3, r4
 80006d6:	40f3      	lsrs	r3, r6
 80006d8:	4644      	mov	r4, r8
 80006da:	4313      	orrs	r3, r2
 80006dc:	002a      	movs	r2, r5
 80006de:	40e2      	lsrs	r2, r4
 80006e0:	001c      	movs	r4, r3
 80006e2:	465b      	mov	r3, fp
 80006e4:	0015      	movs	r5, r2
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	dad4      	bge.n	8000694 <__udivmoddi4+0x12c>
 80006ea:	4642      	mov	r2, r8
 80006ec:	002f      	movs	r7, r5
 80006ee:	2320      	movs	r3, #32
 80006f0:	0026      	movs	r6, r4
 80006f2:	4097      	lsls	r7, r2
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	40de      	lsrs	r6, r3
 80006f8:	003b      	movs	r3, r7
 80006fa:	4333      	orrs	r3, r6
 80006fc:	e7cd      	b.n	800069a <__udivmoddi4+0x132>
 80006fe:	46c0      	nop			; (mov r8, r8)

08000700 <__aeabi_fadd>:
 8000700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000702:	4646      	mov	r6, r8
 8000704:	46d6      	mov	lr, sl
 8000706:	464f      	mov	r7, r9
 8000708:	024d      	lsls	r5, r1, #9
 800070a:	0242      	lsls	r2, r0, #9
 800070c:	b5c0      	push	{r6, r7, lr}
 800070e:	0a52      	lsrs	r2, r2, #9
 8000710:	0a6e      	lsrs	r6, r5, #9
 8000712:	0047      	lsls	r7, r0, #1
 8000714:	46b0      	mov	r8, r6
 8000716:	0e3f      	lsrs	r7, r7, #24
 8000718:	004e      	lsls	r6, r1, #1
 800071a:	0fc4      	lsrs	r4, r0, #31
 800071c:	00d0      	lsls	r0, r2, #3
 800071e:	4694      	mov	ip, r2
 8000720:	003b      	movs	r3, r7
 8000722:	4682      	mov	sl, r0
 8000724:	0e36      	lsrs	r6, r6, #24
 8000726:	0fc9      	lsrs	r1, r1, #31
 8000728:	09ad      	lsrs	r5, r5, #6
 800072a:	428c      	cmp	r4, r1
 800072c:	d06d      	beq.n	800080a <__aeabi_fadd+0x10a>
 800072e:	1bb8      	subs	r0, r7, r6
 8000730:	4681      	mov	r9, r0
 8000732:	2800      	cmp	r0, #0
 8000734:	dd4d      	ble.n	80007d2 <__aeabi_fadd+0xd2>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d100      	bne.n	800073c <__aeabi_fadd+0x3c>
 800073a:	e088      	b.n	800084e <__aeabi_fadd+0x14e>
 800073c:	2fff      	cmp	r7, #255	; 0xff
 800073e:	d05a      	beq.n	80007f6 <__aeabi_fadd+0xf6>
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	04db      	lsls	r3, r3, #19
 8000744:	431d      	orrs	r5, r3
 8000746:	464b      	mov	r3, r9
 8000748:	2201      	movs	r2, #1
 800074a:	2b1b      	cmp	r3, #27
 800074c:	dc0a      	bgt.n	8000764 <__aeabi_fadd+0x64>
 800074e:	002b      	movs	r3, r5
 8000750:	464a      	mov	r2, r9
 8000752:	4649      	mov	r1, r9
 8000754:	40d3      	lsrs	r3, r2
 8000756:	2220      	movs	r2, #32
 8000758:	1a52      	subs	r2, r2, r1
 800075a:	4095      	lsls	r5, r2
 800075c:	002a      	movs	r2, r5
 800075e:	1e55      	subs	r5, r2, #1
 8000760:	41aa      	sbcs	r2, r5
 8000762:	431a      	orrs	r2, r3
 8000764:	4653      	mov	r3, sl
 8000766:	1a9a      	subs	r2, r3, r2
 8000768:	0153      	lsls	r3, r2, #5
 800076a:	d400      	bmi.n	800076e <__aeabi_fadd+0x6e>
 800076c:	e0b9      	b.n	80008e2 <__aeabi_fadd+0x1e2>
 800076e:	0192      	lsls	r2, r2, #6
 8000770:	0996      	lsrs	r6, r2, #6
 8000772:	0030      	movs	r0, r6
 8000774:	f002 fb74 	bl	8002e60 <__clzsi2>
 8000778:	3805      	subs	r0, #5
 800077a:	4086      	lsls	r6, r0
 800077c:	4287      	cmp	r7, r0
 800077e:	dd00      	ble.n	8000782 <__aeabi_fadd+0x82>
 8000780:	e0d4      	b.n	800092c <__aeabi_fadd+0x22c>
 8000782:	0033      	movs	r3, r6
 8000784:	1bc7      	subs	r7, r0, r7
 8000786:	2020      	movs	r0, #32
 8000788:	3701      	adds	r7, #1
 800078a:	40fb      	lsrs	r3, r7
 800078c:	1bc7      	subs	r7, r0, r7
 800078e:	40be      	lsls	r6, r7
 8000790:	0032      	movs	r2, r6
 8000792:	1e56      	subs	r6, r2, #1
 8000794:	41b2      	sbcs	r2, r6
 8000796:	2700      	movs	r7, #0
 8000798:	431a      	orrs	r2, r3
 800079a:	0753      	lsls	r3, r2, #29
 800079c:	d004      	beq.n	80007a8 <__aeabi_fadd+0xa8>
 800079e:	230f      	movs	r3, #15
 80007a0:	4013      	ands	r3, r2
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fadd+0xa8>
 80007a6:	3204      	adds	r2, #4
 80007a8:	0153      	lsls	r3, r2, #5
 80007aa:	d400      	bmi.n	80007ae <__aeabi_fadd+0xae>
 80007ac:	e09c      	b.n	80008e8 <__aeabi_fadd+0x1e8>
 80007ae:	1c7b      	adds	r3, r7, #1
 80007b0:	2ffe      	cmp	r7, #254	; 0xfe
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fadd+0xb6>
 80007b4:	e09a      	b.n	80008ec <__aeabi_fadd+0x1ec>
 80007b6:	0192      	lsls	r2, r2, #6
 80007b8:	0a52      	lsrs	r2, r2, #9
 80007ba:	4694      	mov	ip, r2
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	05d8      	lsls	r0, r3, #23
 80007c0:	4663      	mov	r3, ip
 80007c2:	07e4      	lsls	r4, r4, #31
 80007c4:	4318      	orrs	r0, r3
 80007c6:	4320      	orrs	r0, r4
 80007c8:	bce0      	pop	{r5, r6, r7}
 80007ca:	46ba      	mov	sl, r7
 80007cc:	46b1      	mov	r9, r6
 80007ce:	46a8      	mov	r8, r5
 80007d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d049      	beq.n	800086a <__aeabi_fadd+0x16a>
 80007d6:	1bf3      	subs	r3, r6, r7
 80007d8:	2f00      	cmp	r7, #0
 80007da:	d000      	beq.n	80007de <__aeabi_fadd+0xde>
 80007dc:	e0b6      	b.n	800094c <__aeabi_fadd+0x24c>
 80007de:	4652      	mov	r2, sl
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	d060      	beq.n	80008a6 <__aeabi_fadd+0x1a6>
 80007e4:	3b01      	subs	r3, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_fadd+0xec>
 80007ea:	e0fc      	b.n	80009e6 <__aeabi_fadd+0x2e6>
 80007ec:	2eff      	cmp	r6, #255	; 0xff
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fadd+0xf2>
 80007f0:	e0b4      	b.n	800095c <__aeabi_fadd+0x25c>
 80007f2:	000c      	movs	r4, r1
 80007f4:	4642      	mov	r2, r8
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d078      	beq.n	80008ec <__aeabi_fadd+0x1ec>
 80007fa:	2080      	movs	r0, #128	; 0x80
 80007fc:	03c0      	lsls	r0, r0, #15
 80007fe:	4310      	orrs	r0, r2
 8000800:	0242      	lsls	r2, r0, #9
 8000802:	0a53      	lsrs	r3, r2, #9
 8000804:	469c      	mov	ip, r3
 8000806:	23ff      	movs	r3, #255	; 0xff
 8000808:	e7d9      	b.n	80007be <__aeabi_fadd+0xbe>
 800080a:	1bb9      	subs	r1, r7, r6
 800080c:	2900      	cmp	r1, #0
 800080e:	dd71      	ble.n	80008f4 <__aeabi_fadd+0x1f4>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d03f      	beq.n	8000894 <__aeabi_fadd+0x194>
 8000814:	2fff      	cmp	r7, #255	; 0xff
 8000816:	d0ee      	beq.n	80007f6 <__aeabi_fadd+0xf6>
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	04db      	lsls	r3, r3, #19
 800081c:	431d      	orrs	r5, r3
 800081e:	2201      	movs	r2, #1
 8000820:	291b      	cmp	r1, #27
 8000822:	dc07      	bgt.n	8000834 <__aeabi_fadd+0x134>
 8000824:	002a      	movs	r2, r5
 8000826:	2320      	movs	r3, #32
 8000828:	40ca      	lsrs	r2, r1
 800082a:	1a59      	subs	r1, r3, r1
 800082c:	408d      	lsls	r5, r1
 800082e:	1e6b      	subs	r3, r5, #1
 8000830:	419d      	sbcs	r5, r3
 8000832:	432a      	orrs	r2, r5
 8000834:	4452      	add	r2, sl
 8000836:	0153      	lsls	r3, r2, #5
 8000838:	d553      	bpl.n	80008e2 <__aeabi_fadd+0x1e2>
 800083a:	3701      	adds	r7, #1
 800083c:	2fff      	cmp	r7, #255	; 0xff
 800083e:	d055      	beq.n	80008ec <__aeabi_fadd+0x1ec>
 8000840:	2301      	movs	r3, #1
 8000842:	497b      	ldr	r1, [pc, #492]	; (8000a30 <__aeabi_fadd+0x330>)
 8000844:	4013      	ands	r3, r2
 8000846:	0852      	lsrs	r2, r2, #1
 8000848:	400a      	ands	r2, r1
 800084a:	431a      	orrs	r2, r3
 800084c:	e7a5      	b.n	800079a <__aeabi_fadd+0x9a>
 800084e:	2d00      	cmp	r5, #0
 8000850:	d02c      	beq.n	80008ac <__aeabi_fadd+0x1ac>
 8000852:	2301      	movs	r3, #1
 8000854:	425b      	negs	r3, r3
 8000856:	469c      	mov	ip, r3
 8000858:	44e1      	add	r9, ip
 800085a:	464b      	mov	r3, r9
 800085c:	2b00      	cmp	r3, #0
 800085e:	d100      	bne.n	8000862 <__aeabi_fadd+0x162>
 8000860:	e0ad      	b.n	80009be <__aeabi_fadd+0x2be>
 8000862:	2fff      	cmp	r7, #255	; 0xff
 8000864:	d000      	beq.n	8000868 <__aeabi_fadd+0x168>
 8000866:	e76e      	b.n	8000746 <__aeabi_fadd+0x46>
 8000868:	e7c5      	b.n	80007f6 <__aeabi_fadd+0xf6>
 800086a:	20fe      	movs	r0, #254	; 0xfe
 800086c:	1c7e      	adds	r6, r7, #1
 800086e:	4230      	tst	r0, r6
 8000870:	d160      	bne.n	8000934 <__aeabi_fadd+0x234>
 8000872:	2f00      	cmp	r7, #0
 8000874:	d000      	beq.n	8000878 <__aeabi_fadd+0x178>
 8000876:	e093      	b.n	80009a0 <__aeabi_fadd+0x2a0>
 8000878:	4652      	mov	r2, sl
 800087a:	2a00      	cmp	r2, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_fadd+0x180>
 800087e:	e0b6      	b.n	80009ee <__aeabi_fadd+0x2ee>
 8000880:	2d00      	cmp	r5, #0
 8000882:	d09c      	beq.n	80007be <__aeabi_fadd+0xbe>
 8000884:	1b52      	subs	r2, r2, r5
 8000886:	0150      	lsls	r0, r2, #5
 8000888:	d400      	bmi.n	800088c <__aeabi_fadd+0x18c>
 800088a:	e0c3      	b.n	8000a14 <__aeabi_fadd+0x314>
 800088c:	4653      	mov	r3, sl
 800088e:	000c      	movs	r4, r1
 8000890:	1aea      	subs	r2, r5, r3
 8000892:	e782      	b.n	800079a <__aeabi_fadd+0x9a>
 8000894:	2d00      	cmp	r5, #0
 8000896:	d009      	beq.n	80008ac <__aeabi_fadd+0x1ac>
 8000898:	3901      	subs	r1, #1
 800089a:	2900      	cmp	r1, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_fadd+0x1a0>
 800089e:	e08b      	b.n	80009b8 <__aeabi_fadd+0x2b8>
 80008a0:	2fff      	cmp	r7, #255	; 0xff
 80008a2:	d1bc      	bne.n	800081e <__aeabi_fadd+0x11e>
 80008a4:	e7a7      	b.n	80007f6 <__aeabi_fadd+0xf6>
 80008a6:	000c      	movs	r4, r1
 80008a8:	4642      	mov	r2, r8
 80008aa:	0037      	movs	r7, r6
 80008ac:	2fff      	cmp	r7, #255	; 0xff
 80008ae:	d0a2      	beq.n	80007f6 <__aeabi_fadd+0xf6>
 80008b0:	0252      	lsls	r2, r2, #9
 80008b2:	0a53      	lsrs	r3, r2, #9
 80008b4:	469c      	mov	ip, r3
 80008b6:	b2fb      	uxtb	r3, r7
 80008b8:	e781      	b.n	80007be <__aeabi_fadd+0xbe>
 80008ba:	21fe      	movs	r1, #254	; 0xfe
 80008bc:	3701      	adds	r7, #1
 80008be:	4239      	tst	r1, r7
 80008c0:	d165      	bne.n	800098e <__aeabi_fadd+0x28e>
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d17e      	bne.n	80009c4 <__aeabi_fadd+0x2c4>
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d100      	bne.n	80008cc <__aeabi_fadd+0x1cc>
 80008ca:	e0aa      	b.n	8000a22 <__aeabi_fadd+0x322>
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fadd+0x1d2>
 80008d0:	e775      	b.n	80007be <__aeabi_fadd+0xbe>
 80008d2:	002a      	movs	r2, r5
 80008d4:	4452      	add	r2, sl
 80008d6:	2700      	movs	r7, #0
 80008d8:	0153      	lsls	r3, r2, #5
 80008da:	d502      	bpl.n	80008e2 <__aeabi_fadd+0x1e2>
 80008dc:	4b55      	ldr	r3, [pc, #340]	; (8000a34 <__aeabi_fadd+0x334>)
 80008de:	3701      	adds	r7, #1
 80008e0:	401a      	ands	r2, r3
 80008e2:	0753      	lsls	r3, r2, #29
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fadd+0x1e8>
 80008e6:	e75a      	b.n	800079e <__aeabi_fadd+0x9e>
 80008e8:	08d2      	lsrs	r2, r2, #3
 80008ea:	e7df      	b.n	80008ac <__aeabi_fadd+0x1ac>
 80008ec:	2200      	movs	r2, #0
 80008ee:	23ff      	movs	r3, #255	; 0xff
 80008f0:	4694      	mov	ip, r2
 80008f2:	e764      	b.n	80007be <__aeabi_fadd+0xbe>
 80008f4:	2900      	cmp	r1, #0
 80008f6:	d0e0      	beq.n	80008ba <__aeabi_fadd+0x1ba>
 80008f8:	1bf3      	subs	r3, r6, r7
 80008fa:	2f00      	cmp	r7, #0
 80008fc:	d03e      	beq.n	800097c <__aeabi_fadd+0x27c>
 80008fe:	2eff      	cmp	r6, #255	; 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x204>
 8000902:	e777      	b.n	80007f4 <__aeabi_fadd+0xf4>
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	0001      	movs	r1, r0
 8000908:	04d2      	lsls	r2, r2, #19
 800090a:	4311      	orrs	r1, r2
 800090c:	468a      	mov	sl, r1
 800090e:	2201      	movs	r2, #1
 8000910:	2b1b      	cmp	r3, #27
 8000912:	dc08      	bgt.n	8000926 <__aeabi_fadd+0x226>
 8000914:	4652      	mov	r2, sl
 8000916:	2120      	movs	r1, #32
 8000918:	4650      	mov	r0, sl
 800091a:	40da      	lsrs	r2, r3
 800091c:	1acb      	subs	r3, r1, r3
 800091e:	4098      	lsls	r0, r3
 8000920:	1e43      	subs	r3, r0, #1
 8000922:	4198      	sbcs	r0, r3
 8000924:	4302      	orrs	r2, r0
 8000926:	0037      	movs	r7, r6
 8000928:	1952      	adds	r2, r2, r5
 800092a:	e784      	b.n	8000836 <__aeabi_fadd+0x136>
 800092c:	4a41      	ldr	r2, [pc, #260]	; (8000a34 <__aeabi_fadd+0x334>)
 800092e:	1a3f      	subs	r7, r7, r0
 8000930:	4032      	ands	r2, r6
 8000932:	e732      	b.n	800079a <__aeabi_fadd+0x9a>
 8000934:	4653      	mov	r3, sl
 8000936:	1b5e      	subs	r6, r3, r5
 8000938:	0173      	lsls	r3, r6, #5
 800093a:	d42d      	bmi.n	8000998 <__aeabi_fadd+0x298>
 800093c:	2e00      	cmp	r6, #0
 800093e:	d000      	beq.n	8000942 <__aeabi_fadd+0x242>
 8000940:	e717      	b.n	8000772 <__aeabi_fadd+0x72>
 8000942:	2200      	movs	r2, #0
 8000944:	2400      	movs	r4, #0
 8000946:	2300      	movs	r3, #0
 8000948:	4694      	mov	ip, r2
 800094a:	e738      	b.n	80007be <__aeabi_fadd+0xbe>
 800094c:	2eff      	cmp	r6, #255	; 0xff
 800094e:	d100      	bne.n	8000952 <__aeabi_fadd+0x252>
 8000950:	e74f      	b.n	80007f2 <__aeabi_fadd+0xf2>
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	4650      	mov	r0, sl
 8000956:	04d2      	lsls	r2, r2, #19
 8000958:	4310      	orrs	r0, r2
 800095a:	4682      	mov	sl, r0
 800095c:	2201      	movs	r2, #1
 800095e:	2b1b      	cmp	r3, #27
 8000960:	dc08      	bgt.n	8000974 <__aeabi_fadd+0x274>
 8000962:	4652      	mov	r2, sl
 8000964:	2420      	movs	r4, #32
 8000966:	4650      	mov	r0, sl
 8000968:	40da      	lsrs	r2, r3
 800096a:	1ae3      	subs	r3, r4, r3
 800096c:	4098      	lsls	r0, r3
 800096e:	1e43      	subs	r3, r0, #1
 8000970:	4198      	sbcs	r0, r3
 8000972:	4302      	orrs	r2, r0
 8000974:	000c      	movs	r4, r1
 8000976:	0037      	movs	r7, r6
 8000978:	1aaa      	subs	r2, r5, r2
 800097a:	e6f5      	b.n	8000768 <__aeabi_fadd+0x68>
 800097c:	2800      	cmp	r0, #0
 800097e:	d093      	beq.n	80008a8 <__aeabi_fadd+0x1a8>
 8000980:	3b01      	subs	r3, #1
 8000982:	2b00      	cmp	r3, #0
 8000984:	d04f      	beq.n	8000a26 <__aeabi_fadd+0x326>
 8000986:	2eff      	cmp	r6, #255	; 0xff
 8000988:	d1c1      	bne.n	800090e <__aeabi_fadd+0x20e>
 800098a:	4642      	mov	r2, r8
 800098c:	e733      	b.n	80007f6 <__aeabi_fadd+0xf6>
 800098e:	2fff      	cmp	r7, #255	; 0xff
 8000990:	d0ac      	beq.n	80008ec <__aeabi_fadd+0x1ec>
 8000992:	4455      	add	r5, sl
 8000994:	086a      	lsrs	r2, r5, #1
 8000996:	e7a4      	b.n	80008e2 <__aeabi_fadd+0x1e2>
 8000998:	4653      	mov	r3, sl
 800099a:	000c      	movs	r4, r1
 800099c:	1aee      	subs	r6, r5, r3
 800099e:	e6e8      	b.n	8000772 <__aeabi_fadd+0x72>
 80009a0:	4653      	mov	r3, sl
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d128      	bne.n	80009f8 <__aeabi_fadd+0x2f8>
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d000      	beq.n	80009ac <__aeabi_fadd+0x2ac>
 80009aa:	e722      	b.n	80007f2 <__aeabi_fadd+0xf2>
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	03db      	lsls	r3, r3, #15
 80009b0:	469c      	mov	ip, r3
 80009b2:	2400      	movs	r4, #0
 80009b4:	23ff      	movs	r3, #255	; 0xff
 80009b6:	e702      	b.n	80007be <__aeabi_fadd+0xbe>
 80009b8:	002a      	movs	r2, r5
 80009ba:	4452      	add	r2, sl
 80009bc:	e73b      	b.n	8000836 <__aeabi_fadd+0x136>
 80009be:	4653      	mov	r3, sl
 80009c0:	1b5a      	subs	r2, r3, r5
 80009c2:	e6d1      	b.n	8000768 <__aeabi_fadd+0x68>
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d100      	bne.n	80009ca <__aeabi_fadd+0x2ca>
 80009c8:	e714      	b.n	80007f4 <__aeabi_fadd+0xf4>
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fadd+0x2d0>
 80009ce:	e712      	b.n	80007f6 <__aeabi_fadd+0xf6>
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	03db      	lsls	r3, r3, #15
 80009d4:	421a      	tst	r2, r3
 80009d6:	d100      	bne.n	80009da <__aeabi_fadd+0x2da>
 80009d8:	e70d      	b.n	80007f6 <__aeabi_fadd+0xf6>
 80009da:	4641      	mov	r1, r8
 80009dc:	4219      	tst	r1, r3
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x2e2>
 80009e0:	e709      	b.n	80007f6 <__aeabi_fadd+0xf6>
 80009e2:	4642      	mov	r2, r8
 80009e4:	e707      	b.n	80007f6 <__aeabi_fadd+0xf6>
 80009e6:	000c      	movs	r4, r1
 80009e8:	0037      	movs	r7, r6
 80009ea:	1aaa      	subs	r2, r5, r2
 80009ec:	e6bc      	b.n	8000768 <__aeabi_fadd+0x68>
 80009ee:	2d00      	cmp	r5, #0
 80009f0:	d013      	beq.n	8000a1a <__aeabi_fadd+0x31a>
 80009f2:	000c      	movs	r4, r1
 80009f4:	46c4      	mov	ip, r8
 80009f6:	e6e2      	b.n	80007be <__aeabi_fadd+0xbe>
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_fadd+0x2fe>
 80009fc:	e6fb      	b.n	80007f6 <__aeabi_fadd+0xf6>
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	03db      	lsls	r3, r3, #15
 8000a02:	421a      	tst	r2, r3
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fadd+0x308>
 8000a06:	e6f6      	b.n	80007f6 <__aeabi_fadd+0xf6>
 8000a08:	4640      	mov	r0, r8
 8000a0a:	4218      	tst	r0, r3
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_fadd+0x310>
 8000a0e:	e6f2      	b.n	80007f6 <__aeabi_fadd+0xf6>
 8000a10:	000c      	movs	r4, r1
 8000a12:	e6ef      	b.n	80007f4 <__aeabi_fadd+0xf4>
 8000a14:	2a00      	cmp	r2, #0
 8000a16:	d000      	beq.n	8000a1a <__aeabi_fadd+0x31a>
 8000a18:	e763      	b.n	80008e2 <__aeabi_fadd+0x1e2>
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2400      	movs	r4, #0
 8000a1e:	4694      	mov	ip, r2
 8000a20:	e6cd      	b.n	80007be <__aeabi_fadd+0xbe>
 8000a22:	46c4      	mov	ip, r8
 8000a24:	e6cb      	b.n	80007be <__aeabi_fadd+0xbe>
 8000a26:	002a      	movs	r2, r5
 8000a28:	0037      	movs	r7, r6
 8000a2a:	4452      	add	r2, sl
 8000a2c:	e703      	b.n	8000836 <__aeabi_fadd+0x136>
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	7dffffff 	.word	0x7dffffff
 8000a34:	fbffffff 	.word	0xfbffffff

08000a38 <__aeabi_fdiv>:
 8000a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a3a:	464f      	mov	r7, r9
 8000a3c:	4646      	mov	r6, r8
 8000a3e:	46d6      	mov	lr, sl
 8000a40:	0245      	lsls	r5, r0, #9
 8000a42:	b5c0      	push	{r6, r7, lr}
 8000a44:	0047      	lsls	r7, r0, #1
 8000a46:	1c0c      	adds	r4, r1, #0
 8000a48:	0a6d      	lsrs	r5, r5, #9
 8000a4a:	0e3f      	lsrs	r7, r7, #24
 8000a4c:	0fc6      	lsrs	r6, r0, #31
 8000a4e:	2f00      	cmp	r7, #0
 8000a50:	d066      	beq.n	8000b20 <__aeabi_fdiv+0xe8>
 8000a52:	2fff      	cmp	r7, #255	; 0xff
 8000a54:	d06c      	beq.n	8000b30 <__aeabi_fdiv+0xf8>
 8000a56:	2300      	movs	r3, #0
 8000a58:	00ea      	lsls	r2, r5, #3
 8000a5a:	2580      	movs	r5, #128	; 0x80
 8000a5c:	4699      	mov	r9, r3
 8000a5e:	469a      	mov	sl, r3
 8000a60:	04ed      	lsls	r5, r5, #19
 8000a62:	4315      	orrs	r5, r2
 8000a64:	3f7f      	subs	r7, #127	; 0x7f
 8000a66:	0260      	lsls	r0, r4, #9
 8000a68:	0061      	lsls	r1, r4, #1
 8000a6a:	0a43      	lsrs	r3, r0, #9
 8000a6c:	4698      	mov	r8, r3
 8000a6e:	0e09      	lsrs	r1, r1, #24
 8000a70:	0fe4      	lsrs	r4, r4, #31
 8000a72:	2900      	cmp	r1, #0
 8000a74:	d048      	beq.n	8000b08 <__aeabi_fdiv+0xd0>
 8000a76:	29ff      	cmp	r1, #255	; 0xff
 8000a78:	d010      	beq.n	8000a9c <__aeabi_fdiv+0x64>
 8000a7a:	2280      	movs	r2, #128	; 0x80
 8000a7c:	00d8      	lsls	r0, r3, #3
 8000a7e:	04d2      	lsls	r2, r2, #19
 8000a80:	4302      	orrs	r2, r0
 8000a82:	4690      	mov	r8, r2
 8000a84:	2000      	movs	r0, #0
 8000a86:	397f      	subs	r1, #127	; 0x7f
 8000a88:	464a      	mov	r2, r9
 8000a8a:	0033      	movs	r3, r6
 8000a8c:	1a7f      	subs	r7, r7, r1
 8000a8e:	4302      	orrs	r2, r0
 8000a90:	496c      	ldr	r1, [pc, #432]	; (8000c44 <__aeabi_fdiv+0x20c>)
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	588a      	ldr	r2, [r1, r2]
 8000a96:	4063      	eors	r3, r4
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4697      	mov	pc, r2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d16d      	bne.n	8000b7c <__aeabi_fdiv+0x144>
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	3fff      	subs	r7, #255	; 0xff
 8000aa4:	e033      	b.n	8000b0e <__aeabi_fdiv+0xd6>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	4698      	mov	r8, r3
 8000aaa:	0026      	movs	r6, r4
 8000aac:	4645      	mov	r5, r8
 8000aae:	4682      	mov	sl, r0
 8000ab0:	4653      	mov	r3, sl
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fdiv+0x80>
 8000ab6:	e07f      	b.n	8000bb8 <__aeabi_fdiv+0x180>
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d100      	bne.n	8000abe <__aeabi_fdiv+0x86>
 8000abc:	e094      	b.n	8000be8 <__aeabi_fdiv+0x1b0>
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d017      	beq.n	8000af2 <__aeabi_fdiv+0xba>
 8000ac2:	0038      	movs	r0, r7
 8000ac4:	307f      	adds	r0, #127	; 0x7f
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	dd5f      	ble.n	8000b8a <__aeabi_fdiv+0x152>
 8000aca:	076b      	lsls	r3, r5, #29
 8000acc:	d004      	beq.n	8000ad8 <__aeabi_fdiv+0xa0>
 8000ace:	230f      	movs	r3, #15
 8000ad0:	402b      	ands	r3, r5
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	d000      	beq.n	8000ad8 <__aeabi_fdiv+0xa0>
 8000ad6:	3504      	adds	r5, #4
 8000ad8:	012b      	lsls	r3, r5, #4
 8000ada:	d503      	bpl.n	8000ae4 <__aeabi_fdiv+0xac>
 8000adc:	0038      	movs	r0, r7
 8000ade:	4b5a      	ldr	r3, [pc, #360]	; (8000c48 <__aeabi_fdiv+0x210>)
 8000ae0:	3080      	adds	r0, #128	; 0x80
 8000ae2:	401d      	ands	r5, r3
 8000ae4:	28fe      	cmp	r0, #254	; 0xfe
 8000ae6:	dc67      	bgt.n	8000bb8 <__aeabi_fdiv+0x180>
 8000ae8:	01ad      	lsls	r5, r5, #6
 8000aea:	0a6d      	lsrs	r5, r5, #9
 8000aec:	b2c0      	uxtb	r0, r0
 8000aee:	e002      	b.n	8000af6 <__aeabi_fdiv+0xbe>
 8000af0:	001e      	movs	r6, r3
 8000af2:	2000      	movs	r0, #0
 8000af4:	2500      	movs	r5, #0
 8000af6:	05c0      	lsls	r0, r0, #23
 8000af8:	4328      	orrs	r0, r5
 8000afa:	07f6      	lsls	r6, r6, #31
 8000afc:	4330      	orrs	r0, r6
 8000afe:	bce0      	pop	{r5, r6, r7}
 8000b00:	46ba      	mov	sl, r7
 8000b02:	46b1      	mov	r9, r6
 8000b04:	46a8      	mov	r8, r5
 8000b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d12b      	bne.n	8000b64 <__aeabi_fdiv+0x12c>
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	464a      	mov	r2, r9
 8000b10:	0033      	movs	r3, r6
 8000b12:	494e      	ldr	r1, [pc, #312]	; (8000c4c <__aeabi_fdiv+0x214>)
 8000b14:	4302      	orrs	r2, r0
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	588a      	ldr	r2, [r1, r2]
 8000b1a:	4063      	eors	r3, r4
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4697      	mov	pc, r2
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d113      	bne.n	8000b4c <__aeabi_fdiv+0x114>
 8000b24:	2304      	movs	r3, #4
 8000b26:	4699      	mov	r9, r3
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	2700      	movs	r7, #0
 8000b2c:	469a      	mov	sl, r3
 8000b2e:	e79a      	b.n	8000a66 <__aeabi_fdiv+0x2e>
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d105      	bne.n	8000b40 <__aeabi_fdiv+0x108>
 8000b34:	2308      	movs	r3, #8
 8000b36:	4699      	mov	r9, r3
 8000b38:	3b06      	subs	r3, #6
 8000b3a:	27ff      	movs	r7, #255	; 0xff
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	e792      	b.n	8000a66 <__aeabi_fdiv+0x2e>
 8000b40:	230c      	movs	r3, #12
 8000b42:	4699      	mov	r9, r3
 8000b44:	3b09      	subs	r3, #9
 8000b46:	27ff      	movs	r7, #255	; 0xff
 8000b48:	469a      	mov	sl, r3
 8000b4a:	e78c      	b.n	8000a66 <__aeabi_fdiv+0x2e>
 8000b4c:	0028      	movs	r0, r5
 8000b4e:	f002 f987 	bl	8002e60 <__clzsi2>
 8000b52:	2776      	movs	r7, #118	; 0x76
 8000b54:	1f43      	subs	r3, r0, #5
 8000b56:	409d      	lsls	r5, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	427f      	negs	r7, r7
 8000b5c:	4699      	mov	r9, r3
 8000b5e:	469a      	mov	sl, r3
 8000b60:	1a3f      	subs	r7, r7, r0
 8000b62:	e780      	b.n	8000a66 <__aeabi_fdiv+0x2e>
 8000b64:	0018      	movs	r0, r3
 8000b66:	f002 f97b 	bl	8002e60 <__clzsi2>
 8000b6a:	4642      	mov	r2, r8
 8000b6c:	1f43      	subs	r3, r0, #5
 8000b6e:	2176      	movs	r1, #118	; 0x76
 8000b70:	409a      	lsls	r2, r3
 8000b72:	4249      	negs	r1, r1
 8000b74:	1a09      	subs	r1, r1, r0
 8000b76:	4690      	mov	r8, r2
 8000b78:	2000      	movs	r0, #0
 8000b7a:	e785      	b.n	8000a88 <__aeabi_fdiv+0x50>
 8000b7c:	21ff      	movs	r1, #255	; 0xff
 8000b7e:	2003      	movs	r0, #3
 8000b80:	e782      	b.n	8000a88 <__aeabi_fdiv+0x50>
 8000b82:	001e      	movs	r6, r3
 8000b84:	20ff      	movs	r0, #255	; 0xff
 8000b86:	2500      	movs	r5, #0
 8000b88:	e7b5      	b.n	8000af6 <__aeabi_fdiv+0xbe>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	1a1b      	subs	r3, r3, r0
 8000b8e:	2b1b      	cmp	r3, #27
 8000b90:	dcaf      	bgt.n	8000af2 <__aeabi_fdiv+0xba>
 8000b92:	379e      	adds	r7, #158	; 0x9e
 8000b94:	0029      	movs	r1, r5
 8000b96:	40bd      	lsls	r5, r7
 8000b98:	40d9      	lsrs	r1, r3
 8000b9a:	1e6a      	subs	r2, r5, #1
 8000b9c:	4195      	sbcs	r5, r2
 8000b9e:	430d      	orrs	r5, r1
 8000ba0:	076b      	lsls	r3, r5, #29
 8000ba2:	d004      	beq.n	8000bae <__aeabi_fdiv+0x176>
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	402b      	ands	r3, r5
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d000      	beq.n	8000bae <__aeabi_fdiv+0x176>
 8000bac:	3504      	adds	r5, #4
 8000bae:	016b      	lsls	r3, r5, #5
 8000bb0:	d544      	bpl.n	8000c3c <__aeabi_fdiv+0x204>
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	2500      	movs	r5, #0
 8000bb6:	e79e      	b.n	8000af6 <__aeabi_fdiv+0xbe>
 8000bb8:	20ff      	movs	r0, #255	; 0xff
 8000bba:	2500      	movs	r5, #0
 8000bbc:	e79b      	b.n	8000af6 <__aeabi_fdiv+0xbe>
 8000bbe:	2580      	movs	r5, #128	; 0x80
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	20ff      	movs	r0, #255	; 0xff
 8000bc4:	03ed      	lsls	r5, r5, #15
 8000bc6:	e796      	b.n	8000af6 <__aeabi_fdiv+0xbe>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	4698      	mov	r8, r3
 8000bcc:	2080      	movs	r0, #128	; 0x80
 8000bce:	03c0      	lsls	r0, r0, #15
 8000bd0:	4205      	tst	r5, r0
 8000bd2:	d009      	beq.n	8000be8 <__aeabi_fdiv+0x1b0>
 8000bd4:	4643      	mov	r3, r8
 8000bd6:	4203      	tst	r3, r0
 8000bd8:	d106      	bne.n	8000be8 <__aeabi_fdiv+0x1b0>
 8000bda:	4645      	mov	r5, r8
 8000bdc:	4305      	orrs	r5, r0
 8000bde:	026d      	lsls	r5, r5, #9
 8000be0:	0026      	movs	r6, r4
 8000be2:	20ff      	movs	r0, #255	; 0xff
 8000be4:	0a6d      	lsrs	r5, r5, #9
 8000be6:	e786      	b.n	8000af6 <__aeabi_fdiv+0xbe>
 8000be8:	2080      	movs	r0, #128	; 0x80
 8000bea:	03c0      	lsls	r0, r0, #15
 8000bec:	4305      	orrs	r5, r0
 8000bee:	026d      	lsls	r5, r5, #9
 8000bf0:	20ff      	movs	r0, #255	; 0xff
 8000bf2:	0a6d      	lsrs	r5, r5, #9
 8000bf4:	e77f      	b.n	8000af6 <__aeabi_fdiv+0xbe>
 8000bf6:	4641      	mov	r1, r8
 8000bf8:	016a      	lsls	r2, r5, #5
 8000bfa:	0148      	lsls	r0, r1, #5
 8000bfc:	4282      	cmp	r2, r0
 8000bfe:	d219      	bcs.n	8000c34 <__aeabi_fdiv+0x1fc>
 8000c00:	211b      	movs	r1, #27
 8000c02:	2500      	movs	r5, #0
 8000c04:	3f01      	subs	r7, #1
 8000c06:	2601      	movs	r6, #1
 8000c08:	0014      	movs	r4, r2
 8000c0a:	006d      	lsls	r5, r5, #1
 8000c0c:	0052      	lsls	r2, r2, #1
 8000c0e:	2c00      	cmp	r4, #0
 8000c10:	db01      	blt.n	8000c16 <__aeabi_fdiv+0x1de>
 8000c12:	4290      	cmp	r0, r2
 8000c14:	d801      	bhi.n	8000c1a <__aeabi_fdiv+0x1e2>
 8000c16:	1a12      	subs	r2, r2, r0
 8000c18:	4335      	orrs	r5, r6
 8000c1a:	3901      	subs	r1, #1
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d1f3      	bne.n	8000c08 <__aeabi_fdiv+0x1d0>
 8000c20:	1e50      	subs	r0, r2, #1
 8000c22:	4182      	sbcs	r2, r0
 8000c24:	0038      	movs	r0, r7
 8000c26:	307f      	adds	r0, #127	; 0x7f
 8000c28:	001e      	movs	r6, r3
 8000c2a:	4315      	orrs	r5, r2
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	dd00      	ble.n	8000c32 <__aeabi_fdiv+0x1fa>
 8000c30:	e74b      	b.n	8000aca <__aeabi_fdiv+0x92>
 8000c32:	e7aa      	b.n	8000b8a <__aeabi_fdiv+0x152>
 8000c34:	211a      	movs	r1, #26
 8000c36:	2501      	movs	r5, #1
 8000c38:	1a12      	subs	r2, r2, r0
 8000c3a:	e7e4      	b.n	8000c06 <__aeabi_fdiv+0x1ce>
 8000c3c:	01ad      	lsls	r5, r5, #6
 8000c3e:	2000      	movs	r0, #0
 8000c40:	0a6d      	lsrs	r5, r5, #9
 8000c42:	e758      	b.n	8000af6 <__aeabi_fdiv+0xbe>
 8000c44:	08016184 	.word	0x08016184
 8000c48:	f7ffffff 	.word	0xf7ffffff
 8000c4c:	080161c4 	.word	0x080161c4

08000c50 <__aeabi_fsub>:
 8000c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c52:	4646      	mov	r6, r8
 8000c54:	46d6      	mov	lr, sl
 8000c56:	464f      	mov	r7, r9
 8000c58:	0243      	lsls	r3, r0, #9
 8000c5a:	0a5b      	lsrs	r3, r3, #9
 8000c5c:	00da      	lsls	r2, r3, #3
 8000c5e:	4694      	mov	ip, r2
 8000c60:	024a      	lsls	r2, r1, #9
 8000c62:	b5c0      	push	{r6, r7, lr}
 8000c64:	0044      	lsls	r4, r0, #1
 8000c66:	0a56      	lsrs	r6, r2, #9
 8000c68:	1c05      	adds	r5, r0, #0
 8000c6a:	46b0      	mov	r8, r6
 8000c6c:	0e24      	lsrs	r4, r4, #24
 8000c6e:	004e      	lsls	r6, r1, #1
 8000c70:	0992      	lsrs	r2, r2, #6
 8000c72:	001f      	movs	r7, r3
 8000c74:	0020      	movs	r0, r4
 8000c76:	4692      	mov	sl, r2
 8000c78:	0fed      	lsrs	r5, r5, #31
 8000c7a:	0e36      	lsrs	r6, r6, #24
 8000c7c:	0fc9      	lsrs	r1, r1, #31
 8000c7e:	2eff      	cmp	r6, #255	; 0xff
 8000c80:	d100      	bne.n	8000c84 <__aeabi_fsub+0x34>
 8000c82:	e07f      	b.n	8000d84 <__aeabi_fsub+0x134>
 8000c84:	2201      	movs	r2, #1
 8000c86:	4051      	eors	r1, r2
 8000c88:	428d      	cmp	r5, r1
 8000c8a:	d051      	beq.n	8000d30 <__aeabi_fsub+0xe0>
 8000c8c:	1ba2      	subs	r2, r4, r6
 8000c8e:	4691      	mov	r9, r2
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	dc00      	bgt.n	8000c96 <__aeabi_fsub+0x46>
 8000c94:	e07e      	b.n	8000d94 <__aeabi_fsub+0x144>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d100      	bne.n	8000c9c <__aeabi_fsub+0x4c>
 8000c9a:	e099      	b.n	8000dd0 <__aeabi_fsub+0x180>
 8000c9c:	2cff      	cmp	r4, #255	; 0xff
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_fsub+0x52>
 8000ca0:	e08c      	b.n	8000dbc <__aeabi_fsub+0x16c>
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	4652      	mov	r2, sl
 8000ca6:	04db      	lsls	r3, r3, #19
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	4692      	mov	sl, r2
 8000cac:	464a      	mov	r2, r9
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2a1b      	cmp	r2, #27
 8000cb2:	dc08      	bgt.n	8000cc6 <__aeabi_fsub+0x76>
 8000cb4:	4653      	mov	r3, sl
 8000cb6:	2120      	movs	r1, #32
 8000cb8:	40d3      	lsrs	r3, r2
 8000cba:	1a89      	subs	r1, r1, r2
 8000cbc:	4652      	mov	r2, sl
 8000cbe:	408a      	lsls	r2, r1
 8000cc0:	1e51      	subs	r1, r2, #1
 8000cc2:	418a      	sbcs	r2, r1
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	4662      	mov	r2, ip
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	015a      	lsls	r2, r3, #5
 8000ccc:	d400      	bmi.n	8000cd0 <__aeabi_fsub+0x80>
 8000cce:	e0f3      	b.n	8000eb8 <__aeabi_fsub+0x268>
 8000cd0:	019b      	lsls	r3, r3, #6
 8000cd2:	099e      	lsrs	r6, r3, #6
 8000cd4:	0030      	movs	r0, r6
 8000cd6:	f002 f8c3 	bl	8002e60 <__clzsi2>
 8000cda:	3805      	subs	r0, #5
 8000cdc:	4086      	lsls	r6, r0
 8000cde:	4284      	cmp	r4, r0
 8000ce0:	dd00      	ble.n	8000ce4 <__aeabi_fsub+0x94>
 8000ce2:	e0f7      	b.n	8000ed4 <__aeabi_fsub+0x284>
 8000ce4:	0032      	movs	r2, r6
 8000ce6:	1b04      	subs	r4, r0, r4
 8000ce8:	2020      	movs	r0, #32
 8000cea:	3401      	adds	r4, #1
 8000cec:	40e2      	lsrs	r2, r4
 8000cee:	1b04      	subs	r4, r0, r4
 8000cf0:	40a6      	lsls	r6, r4
 8000cf2:	0033      	movs	r3, r6
 8000cf4:	1e5e      	subs	r6, r3, #1
 8000cf6:	41b3      	sbcs	r3, r6
 8000cf8:	2400      	movs	r4, #0
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	075a      	lsls	r2, r3, #29
 8000cfe:	d004      	beq.n	8000d0a <__aeabi_fsub+0xba>
 8000d00:	220f      	movs	r2, #15
 8000d02:	401a      	ands	r2, r3
 8000d04:	2a04      	cmp	r2, #4
 8000d06:	d000      	beq.n	8000d0a <__aeabi_fsub+0xba>
 8000d08:	3304      	adds	r3, #4
 8000d0a:	015a      	lsls	r2, r3, #5
 8000d0c:	d400      	bmi.n	8000d10 <__aeabi_fsub+0xc0>
 8000d0e:	e0d6      	b.n	8000ebe <__aeabi_fsub+0x26e>
 8000d10:	1c62      	adds	r2, r4, #1
 8000d12:	2cfe      	cmp	r4, #254	; 0xfe
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fsub+0xc8>
 8000d16:	e0da      	b.n	8000ece <__aeabi_fsub+0x27e>
 8000d18:	019b      	lsls	r3, r3, #6
 8000d1a:	0a5f      	lsrs	r7, r3, #9
 8000d1c:	b2d0      	uxtb	r0, r2
 8000d1e:	05c0      	lsls	r0, r0, #23
 8000d20:	4338      	orrs	r0, r7
 8000d22:	07ed      	lsls	r5, r5, #31
 8000d24:	4328      	orrs	r0, r5
 8000d26:	bce0      	pop	{r5, r6, r7}
 8000d28:	46ba      	mov	sl, r7
 8000d2a:	46b1      	mov	r9, r6
 8000d2c:	46a8      	mov	r8, r5
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d30:	1ba2      	subs	r2, r4, r6
 8000d32:	4691      	mov	r9, r2
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	dd63      	ble.n	8000e00 <__aeabi_fsub+0x1b0>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_fsub+0xee>
 8000d3c:	e099      	b.n	8000e72 <__aeabi_fsub+0x222>
 8000d3e:	2cff      	cmp	r4, #255	; 0xff
 8000d40:	d03c      	beq.n	8000dbc <__aeabi_fsub+0x16c>
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	4652      	mov	r2, sl
 8000d46:	04db      	lsls	r3, r3, #19
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	4692      	mov	sl, r2
 8000d4c:	464a      	mov	r2, r9
 8000d4e:	2301      	movs	r3, #1
 8000d50:	2a1b      	cmp	r2, #27
 8000d52:	dc08      	bgt.n	8000d66 <__aeabi_fsub+0x116>
 8000d54:	4653      	mov	r3, sl
 8000d56:	2120      	movs	r1, #32
 8000d58:	40d3      	lsrs	r3, r2
 8000d5a:	1a89      	subs	r1, r1, r2
 8000d5c:	4652      	mov	r2, sl
 8000d5e:	408a      	lsls	r2, r1
 8000d60:	1e51      	subs	r1, r2, #1
 8000d62:	418a      	sbcs	r2, r1
 8000d64:	4313      	orrs	r3, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	015a      	lsls	r2, r3, #5
 8000d6a:	d400      	bmi.n	8000d6e <__aeabi_fsub+0x11e>
 8000d6c:	e0a4      	b.n	8000eb8 <__aeabi_fsub+0x268>
 8000d6e:	3401      	adds	r4, #1
 8000d70:	2cff      	cmp	r4, #255	; 0xff
 8000d72:	d100      	bne.n	8000d76 <__aeabi_fsub+0x126>
 8000d74:	e0ab      	b.n	8000ece <__aeabi_fsub+0x27e>
 8000d76:	2201      	movs	r2, #1
 8000d78:	4997      	ldr	r1, [pc, #604]	; (8000fd8 <__aeabi_fsub+0x388>)
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	085b      	lsrs	r3, r3, #1
 8000d7e:	400b      	ands	r3, r1
 8000d80:	4313      	orrs	r3, r2
 8000d82:	e7bb      	b.n	8000cfc <__aeabi_fsub+0xac>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	d032      	beq.n	8000dee <__aeabi_fsub+0x19e>
 8000d88:	428d      	cmp	r5, r1
 8000d8a:	d035      	beq.n	8000df8 <__aeabi_fsub+0x1a8>
 8000d8c:	22ff      	movs	r2, #255	; 0xff
 8000d8e:	4252      	negs	r2, r2
 8000d90:	4691      	mov	r9, r2
 8000d92:	44a1      	add	r9, r4
 8000d94:	464a      	mov	r2, r9
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	d051      	beq.n	8000e3e <__aeabi_fsub+0x1ee>
 8000d9a:	1b30      	subs	r0, r6, r4
 8000d9c:	2c00      	cmp	r4, #0
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_fsub+0x152>
 8000da0:	e09c      	b.n	8000edc <__aeabi_fsub+0x28c>
 8000da2:	4663      	mov	r3, ip
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d100      	bne.n	8000daa <__aeabi_fsub+0x15a>
 8000da8:	e0df      	b.n	8000f6a <__aeabi_fsub+0x31a>
 8000daa:	3801      	subs	r0, #1
 8000dac:	2800      	cmp	r0, #0
 8000dae:	d100      	bne.n	8000db2 <__aeabi_fsub+0x162>
 8000db0:	e0f7      	b.n	8000fa2 <__aeabi_fsub+0x352>
 8000db2:	2eff      	cmp	r6, #255	; 0xff
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fsub+0x168>
 8000db6:	e099      	b.n	8000eec <__aeabi_fsub+0x29c>
 8000db8:	000d      	movs	r5, r1
 8000dba:	4643      	mov	r3, r8
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_fsub+0x172>
 8000dc0:	e085      	b.n	8000ece <__aeabi_fsub+0x27e>
 8000dc2:	2780      	movs	r7, #128	; 0x80
 8000dc4:	03ff      	lsls	r7, r7, #15
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	027f      	lsls	r7, r7, #9
 8000dca:	20ff      	movs	r0, #255	; 0xff
 8000dcc:	0a7f      	lsrs	r7, r7, #9
 8000dce:	e7a6      	b.n	8000d1e <__aeabi_fsub+0xce>
 8000dd0:	4652      	mov	r2, sl
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d074      	beq.n	8000ec0 <__aeabi_fsub+0x270>
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4252      	negs	r2, r2
 8000dda:	4690      	mov	r8, r2
 8000ddc:	44c1      	add	r9, r8
 8000dde:	464a      	mov	r2, r9
 8000de0:	2a00      	cmp	r2, #0
 8000de2:	d100      	bne.n	8000de6 <__aeabi_fsub+0x196>
 8000de4:	e0c8      	b.n	8000f78 <__aeabi_fsub+0x328>
 8000de6:	2cff      	cmp	r4, #255	; 0xff
 8000de8:	d000      	beq.n	8000dec <__aeabi_fsub+0x19c>
 8000dea:	e75f      	b.n	8000cac <__aeabi_fsub+0x5c>
 8000dec:	e7e6      	b.n	8000dbc <__aeabi_fsub+0x16c>
 8000dee:	2201      	movs	r2, #1
 8000df0:	4051      	eors	r1, r2
 8000df2:	42a9      	cmp	r1, r5
 8000df4:	d000      	beq.n	8000df8 <__aeabi_fsub+0x1a8>
 8000df6:	e749      	b.n	8000c8c <__aeabi_fsub+0x3c>
 8000df8:	22ff      	movs	r2, #255	; 0xff
 8000dfa:	4252      	negs	r2, r2
 8000dfc:	4691      	mov	r9, r2
 8000dfe:	44a1      	add	r9, r4
 8000e00:	464a      	mov	r2, r9
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d043      	beq.n	8000e8e <__aeabi_fsub+0x23e>
 8000e06:	1b31      	subs	r1, r6, r4
 8000e08:	2c00      	cmp	r4, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_fsub+0x1be>
 8000e0c:	e08c      	b.n	8000f28 <__aeabi_fsub+0x2d8>
 8000e0e:	2eff      	cmp	r6, #255	; 0xff
 8000e10:	d100      	bne.n	8000e14 <__aeabi_fsub+0x1c4>
 8000e12:	e092      	b.n	8000f3a <__aeabi_fsub+0x2ea>
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	4662      	mov	r2, ip
 8000e18:	04db      	lsls	r3, r3, #19
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	4694      	mov	ip, r2
 8000e1e:	2301      	movs	r3, #1
 8000e20:	291b      	cmp	r1, #27
 8000e22:	dc09      	bgt.n	8000e38 <__aeabi_fsub+0x1e8>
 8000e24:	2020      	movs	r0, #32
 8000e26:	4663      	mov	r3, ip
 8000e28:	4662      	mov	r2, ip
 8000e2a:	40cb      	lsrs	r3, r1
 8000e2c:	1a41      	subs	r1, r0, r1
 8000e2e:	408a      	lsls	r2, r1
 8000e30:	0011      	movs	r1, r2
 8000e32:	1e48      	subs	r0, r1, #1
 8000e34:	4181      	sbcs	r1, r0
 8000e36:	430b      	orrs	r3, r1
 8000e38:	0034      	movs	r4, r6
 8000e3a:	4453      	add	r3, sl
 8000e3c:	e794      	b.n	8000d68 <__aeabi_fsub+0x118>
 8000e3e:	22fe      	movs	r2, #254	; 0xfe
 8000e40:	1c66      	adds	r6, r4, #1
 8000e42:	4232      	tst	r2, r6
 8000e44:	d164      	bne.n	8000f10 <__aeabi_fsub+0x2c0>
 8000e46:	2c00      	cmp	r4, #0
 8000e48:	d000      	beq.n	8000e4c <__aeabi_fsub+0x1fc>
 8000e4a:	e082      	b.n	8000f52 <__aeabi_fsub+0x302>
 8000e4c:	4663      	mov	r3, ip
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d100      	bne.n	8000e54 <__aeabi_fsub+0x204>
 8000e52:	e0ab      	b.n	8000fac <__aeabi_fsub+0x35c>
 8000e54:	4653      	mov	r3, sl
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_fsub+0x20c>
 8000e5a:	e760      	b.n	8000d1e <__aeabi_fsub+0xce>
 8000e5c:	4663      	mov	r3, ip
 8000e5e:	4652      	mov	r2, sl
 8000e60:	1a9b      	subs	r3, r3, r2
 8000e62:	015a      	lsls	r2, r3, #5
 8000e64:	d400      	bmi.n	8000e68 <__aeabi_fsub+0x218>
 8000e66:	e0aa      	b.n	8000fbe <__aeabi_fsub+0x36e>
 8000e68:	4663      	mov	r3, ip
 8000e6a:	4652      	mov	r2, sl
 8000e6c:	000d      	movs	r5, r1
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	e744      	b.n	8000cfc <__aeabi_fsub+0xac>
 8000e72:	4652      	mov	r2, sl
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d023      	beq.n	8000ec0 <__aeabi_fsub+0x270>
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4252      	negs	r2, r2
 8000e7c:	4690      	mov	r8, r2
 8000e7e:	44c1      	add	r9, r8
 8000e80:	464a      	mov	r2, r9
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d075      	beq.n	8000f72 <__aeabi_fsub+0x322>
 8000e86:	2cff      	cmp	r4, #255	; 0xff
 8000e88:	d000      	beq.n	8000e8c <__aeabi_fsub+0x23c>
 8000e8a:	e75f      	b.n	8000d4c <__aeabi_fsub+0xfc>
 8000e8c:	e796      	b.n	8000dbc <__aeabi_fsub+0x16c>
 8000e8e:	26fe      	movs	r6, #254	; 0xfe
 8000e90:	3401      	adds	r4, #1
 8000e92:	4226      	tst	r6, r4
 8000e94:	d153      	bne.n	8000f3e <__aeabi_fsub+0x2ee>
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d172      	bne.n	8000f80 <__aeabi_fsub+0x330>
 8000e9a:	4663      	mov	r3, ip
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_fsub+0x252>
 8000ea0:	e093      	b.n	8000fca <__aeabi_fsub+0x37a>
 8000ea2:	4653      	mov	r3, sl
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_fsub+0x25a>
 8000ea8:	e739      	b.n	8000d1e <__aeabi_fsub+0xce>
 8000eaa:	4463      	add	r3, ip
 8000eac:	2400      	movs	r4, #0
 8000eae:	015a      	lsls	r2, r3, #5
 8000eb0:	d502      	bpl.n	8000eb8 <__aeabi_fsub+0x268>
 8000eb2:	4a4a      	ldr	r2, [pc, #296]	; (8000fdc <__aeabi_fsub+0x38c>)
 8000eb4:	3401      	adds	r4, #1
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	075a      	lsls	r2, r3, #29
 8000eba:	d000      	beq.n	8000ebe <__aeabi_fsub+0x26e>
 8000ebc:	e720      	b.n	8000d00 <__aeabi_fsub+0xb0>
 8000ebe:	08db      	lsrs	r3, r3, #3
 8000ec0:	2cff      	cmp	r4, #255	; 0xff
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x276>
 8000ec4:	e77a      	b.n	8000dbc <__aeabi_fsub+0x16c>
 8000ec6:	025b      	lsls	r3, r3, #9
 8000ec8:	0a5f      	lsrs	r7, r3, #9
 8000eca:	b2e0      	uxtb	r0, r4
 8000ecc:	e727      	b.n	8000d1e <__aeabi_fsub+0xce>
 8000ece:	20ff      	movs	r0, #255	; 0xff
 8000ed0:	2700      	movs	r7, #0
 8000ed2:	e724      	b.n	8000d1e <__aeabi_fsub+0xce>
 8000ed4:	4b41      	ldr	r3, [pc, #260]	; (8000fdc <__aeabi_fsub+0x38c>)
 8000ed6:	1a24      	subs	r4, r4, r0
 8000ed8:	4033      	ands	r3, r6
 8000eda:	e70f      	b.n	8000cfc <__aeabi_fsub+0xac>
 8000edc:	2eff      	cmp	r6, #255	; 0xff
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_fsub+0x292>
 8000ee0:	e76a      	b.n	8000db8 <__aeabi_fsub+0x168>
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	4662      	mov	r2, ip
 8000ee6:	04db      	lsls	r3, r3, #19
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	4694      	mov	ip, r2
 8000eec:	2301      	movs	r3, #1
 8000eee:	281b      	cmp	r0, #27
 8000ef0:	dc09      	bgt.n	8000f06 <__aeabi_fsub+0x2b6>
 8000ef2:	2420      	movs	r4, #32
 8000ef4:	4663      	mov	r3, ip
 8000ef6:	4662      	mov	r2, ip
 8000ef8:	40c3      	lsrs	r3, r0
 8000efa:	1a20      	subs	r0, r4, r0
 8000efc:	4082      	lsls	r2, r0
 8000efe:	0010      	movs	r0, r2
 8000f00:	1e44      	subs	r4, r0, #1
 8000f02:	41a0      	sbcs	r0, r4
 8000f04:	4303      	orrs	r3, r0
 8000f06:	4652      	mov	r2, sl
 8000f08:	000d      	movs	r5, r1
 8000f0a:	0034      	movs	r4, r6
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	e6dc      	b.n	8000cca <__aeabi_fsub+0x7a>
 8000f10:	4663      	mov	r3, ip
 8000f12:	4652      	mov	r2, sl
 8000f14:	1a9e      	subs	r6, r3, r2
 8000f16:	0173      	lsls	r3, r6, #5
 8000f18:	d417      	bmi.n	8000f4a <__aeabi_fsub+0x2fa>
 8000f1a:	2e00      	cmp	r6, #0
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_fsub+0x2d0>
 8000f1e:	e6d9      	b.n	8000cd4 <__aeabi_fsub+0x84>
 8000f20:	2500      	movs	r5, #0
 8000f22:	2000      	movs	r0, #0
 8000f24:	2700      	movs	r7, #0
 8000f26:	e6fa      	b.n	8000d1e <__aeabi_fsub+0xce>
 8000f28:	4663      	mov	r3, ip
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d044      	beq.n	8000fb8 <__aeabi_fsub+0x368>
 8000f2e:	3901      	subs	r1, #1
 8000f30:	2900      	cmp	r1, #0
 8000f32:	d04c      	beq.n	8000fce <__aeabi_fsub+0x37e>
 8000f34:	2eff      	cmp	r6, #255	; 0xff
 8000f36:	d000      	beq.n	8000f3a <__aeabi_fsub+0x2ea>
 8000f38:	e771      	b.n	8000e1e <__aeabi_fsub+0x1ce>
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	e73e      	b.n	8000dbc <__aeabi_fsub+0x16c>
 8000f3e:	2cff      	cmp	r4, #255	; 0xff
 8000f40:	d0c5      	beq.n	8000ece <__aeabi_fsub+0x27e>
 8000f42:	4652      	mov	r2, sl
 8000f44:	4462      	add	r2, ip
 8000f46:	0853      	lsrs	r3, r2, #1
 8000f48:	e7b6      	b.n	8000eb8 <__aeabi_fsub+0x268>
 8000f4a:	4663      	mov	r3, ip
 8000f4c:	000d      	movs	r5, r1
 8000f4e:	1ad6      	subs	r6, r2, r3
 8000f50:	e6c0      	b.n	8000cd4 <__aeabi_fsub+0x84>
 8000f52:	4662      	mov	r2, ip
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	d116      	bne.n	8000f86 <__aeabi_fsub+0x336>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_fsub+0x310>
 8000f5e:	e72b      	b.n	8000db8 <__aeabi_fsub+0x168>
 8000f60:	2780      	movs	r7, #128	; 0x80
 8000f62:	2500      	movs	r5, #0
 8000f64:	20ff      	movs	r0, #255	; 0xff
 8000f66:	03ff      	lsls	r7, r7, #15
 8000f68:	e6d9      	b.n	8000d1e <__aeabi_fsub+0xce>
 8000f6a:	000d      	movs	r5, r1
 8000f6c:	4643      	mov	r3, r8
 8000f6e:	0034      	movs	r4, r6
 8000f70:	e7a6      	b.n	8000ec0 <__aeabi_fsub+0x270>
 8000f72:	4653      	mov	r3, sl
 8000f74:	4463      	add	r3, ip
 8000f76:	e6f7      	b.n	8000d68 <__aeabi_fsub+0x118>
 8000f78:	4663      	mov	r3, ip
 8000f7a:	4652      	mov	r2, sl
 8000f7c:	1a9b      	subs	r3, r3, r2
 8000f7e:	e6a4      	b.n	8000cca <__aeabi_fsub+0x7a>
 8000f80:	4662      	mov	r2, ip
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d0d9      	beq.n	8000f3a <__aeabi_fsub+0x2ea>
 8000f86:	4652      	mov	r2, sl
 8000f88:	2a00      	cmp	r2, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_fsub+0x33e>
 8000f8c:	e716      	b.n	8000dbc <__aeabi_fsub+0x16c>
 8000f8e:	2280      	movs	r2, #128	; 0x80
 8000f90:	03d2      	lsls	r2, r2, #15
 8000f92:	4213      	tst	r3, r2
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0x348>
 8000f96:	e711      	b.n	8000dbc <__aeabi_fsub+0x16c>
 8000f98:	4640      	mov	r0, r8
 8000f9a:	4210      	tst	r0, r2
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_fsub+0x350>
 8000f9e:	e70d      	b.n	8000dbc <__aeabi_fsub+0x16c>
 8000fa0:	e70a      	b.n	8000db8 <__aeabi_fsub+0x168>
 8000fa2:	4652      	mov	r2, sl
 8000fa4:	000d      	movs	r5, r1
 8000fa6:	0034      	movs	r4, r6
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	e68e      	b.n	8000cca <__aeabi_fsub+0x7a>
 8000fac:	4653      	mov	r3, sl
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d008      	beq.n	8000fc4 <__aeabi_fsub+0x374>
 8000fb2:	000d      	movs	r5, r1
 8000fb4:	4647      	mov	r7, r8
 8000fb6:	e6b2      	b.n	8000d1e <__aeabi_fsub+0xce>
 8000fb8:	4643      	mov	r3, r8
 8000fba:	0034      	movs	r4, r6
 8000fbc:	e780      	b.n	8000ec0 <__aeabi_fsub+0x270>
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d000      	beq.n	8000fc4 <__aeabi_fsub+0x374>
 8000fc2:	e779      	b.n	8000eb8 <__aeabi_fsub+0x268>
 8000fc4:	2500      	movs	r5, #0
 8000fc6:	2700      	movs	r7, #0
 8000fc8:	e6a9      	b.n	8000d1e <__aeabi_fsub+0xce>
 8000fca:	4647      	mov	r7, r8
 8000fcc:	e6a7      	b.n	8000d1e <__aeabi_fsub+0xce>
 8000fce:	4653      	mov	r3, sl
 8000fd0:	0034      	movs	r4, r6
 8000fd2:	4463      	add	r3, ip
 8000fd4:	e6c8      	b.n	8000d68 <__aeabi_fsub+0x118>
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	7dffffff 	.word	0x7dffffff
 8000fdc:	fbffffff 	.word	0xfbffffff

08000fe0 <__aeabi_f2iz>:
 8000fe0:	0241      	lsls	r1, r0, #9
 8000fe2:	0042      	lsls	r2, r0, #1
 8000fe4:	0fc3      	lsrs	r3, r0, #31
 8000fe6:	0a49      	lsrs	r1, r1, #9
 8000fe8:	2000      	movs	r0, #0
 8000fea:	0e12      	lsrs	r2, r2, #24
 8000fec:	2a7e      	cmp	r2, #126	; 0x7e
 8000fee:	d903      	bls.n	8000ff8 <__aeabi_f2iz+0x18>
 8000ff0:	2a9d      	cmp	r2, #157	; 0x9d
 8000ff2:	d902      	bls.n	8000ffa <__aeabi_f2iz+0x1a>
 8000ff4:	4a09      	ldr	r2, [pc, #36]	; (800101c <__aeabi_f2iz+0x3c>)
 8000ff6:	1898      	adds	r0, r3, r2
 8000ff8:	4770      	bx	lr
 8000ffa:	2080      	movs	r0, #128	; 0x80
 8000ffc:	0400      	lsls	r0, r0, #16
 8000ffe:	4301      	orrs	r1, r0
 8001000:	2a95      	cmp	r2, #149	; 0x95
 8001002:	dc07      	bgt.n	8001014 <__aeabi_f2iz+0x34>
 8001004:	2096      	movs	r0, #150	; 0x96
 8001006:	1a82      	subs	r2, r0, r2
 8001008:	40d1      	lsrs	r1, r2
 800100a:	4248      	negs	r0, r1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f3      	bne.n	8000ff8 <__aeabi_f2iz+0x18>
 8001010:	0008      	movs	r0, r1
 8001012:	e7f1      	b.n	8000ff8 <__aeabi_f2iz+0x18>
 8001014:	3a96      	subs	r2, #150	; 0x96
 8001016:	4091      	lsls	r1, r2
 8001018:	e7f7      	b.n	800100a <__aeabi_f2iz+0x2a>
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	7fffffff 	.word	0x7fffffff

08001020 <__aeabi_i2f>:
 8001020:	b570      	push	{r4, r5, r6, lr}
 8001022:	2800      	cmp	r0, #0
 8001024:	d013      	beq.n	800104e <__aeabi_i2f+0x2e>
 8001026:	17c3      	asrs	r3, r0, #31
 8001028:	18c5      	adds	r5, r0, r3
 800102a:	405d      	eors	r5, r3
 800102c:	0fc4      	lsrs	r4, r0, #31
 800102e:	0028      	movs	r0, r5
 8001030:	f001 ff16 	bl	8002e60 <__clzsi2>
 8001034:	239e      	movs	r3, #158	; 0x9e
 8001036:	0001      	movs	r1, r0
 8001038:	1a1b      	subs	r3, r3, r0
 800103a:	2b96      	cmp	r3, #150	; 0x96
 800103c:	dc0f      	bgt.n	800105e <__aeabi_i2f+0x3e>
 800103e:	2808      	cmp	r0, #8
 8001040:	dd01      	ble.n	8001046 <__aeabi_i2f+0x26>
 8001042:	3908      	subs	r1, #8
 8001044:	408d      	lsls	r5, r1
 8001046:	026d      	lsls	r5, r5, #9
 8001048:	0a6d      	lsrs	r5, r5, #9
 800104a:	b2d8      	uxtb	r0, r3
 800104c:	e002      	b.n	8001054 <__aeabi_i2f+0x34>
 800104e:	2400      	movs	r4, #0
 8001050:	2000      	movs	r0, #0
 8001052:	2500      	movs	r5, #0
 8001054:	05c0      	lsls	r0, r0, #23
 8001056:	4328      	orrs	r0, r5
 8001058:	07e4      	lsls	r4, r4, #31
 800105a:	4320      	orrs	r0, r4
 800105c:	bd70      	pop	{r4, r5, r6, pc}
 800105e:	2b99      	cmp	r3, #153	; 0x99
 8001060:	dd0b      	ble.n	800107a <__aeabi_i2f+0x5a>
 8001062:	2205      	movs	r2, #5
 8001064:	002e      	movs	r6, r5
 8001066:	1a12      	subs	r2, r2, r0
 8001068:	40d6      	lsrs	r6, r2
 800106a:	0002      	movs	r2, r0
 800106c:	321b      	adds	r2, #27
 800106e:	4095      	lsls	r5, r2
 8001070:	0028      	movs	r0, r5
 8001072:	1e45      	subs	r5, r0, #1
 8001074:	41a8      	sbcs	r0, r5
 8001076:	0035      	movs	r5, r6
 8001078:	4305      	orrs	r5, r0
 800107a:	2905      	cmp	r1, #5
 800107c:	dd01      	ble.n	8001082 <__aeabi_i2f+0x62>
 800107e:	1f4a      	subs	r2, r1, #5
 8001080:	4095      	lsls	r5, r2
 8001082:	002a      	movs	r2, r5
 8001084:	4e08      	ldr	r6, [pc, #32]	; (80010a8 <__aeabi_i2f+0x88>)
 8001086:	4032      	ands	r2, r6
 8001088:	0768      	lsls	r0, r5, #29
 800108a:	d009      	beq.n	80010a0 <__aeabi_i2f+0x80>
 800108c:	200f      	movs	r0, #15
 800108e:	4028      	ands	r0, r5
 8001090:	2804      	cmp	r0, #4
 8001092:	d005      	beq.n	80010a0 <__aeabi_i2f+0x80>
 8001094:	3204      	adds	r2, #4
 8001096:	0150      	lsls	r0, r2, #5
 8001098:	d502      	bpl.n	80010a0 <__aeabi_i2f+0x80>
 800109a:	239f      	movs	r3, #159	; 0x9f
 800109c:	4032      	ands	r2, r6
 800109e:	1a5b      	subs	r3, r3, r1
 80010a0:	0192      	lsls	r2, r2, #6
 80010a2:	0a55      	lsrs	r5, r2, #9
 80010a4:	b2d8      	uxtb	r0, r3
 80010a6:	e7d5      	b.n	8001054 <__aeabi_i2f+0x34>
 80010a8:	fbffffff 	.word	0xfbffffff

080010ac <__aeabi_dadd>:
 80010ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ae:	464f      	mov	r7, r9
 80010b0:	46d6      	mov	lr, sl
 80010b2:	4646      	mov	r6, r8
 80010b4:	000d      	movs	r5, r1
 80010b6:	0001      	movs	r1, r0
 80010b8:	0018      	movs	r0, r3
 80010ba:	b5c0      	push	{r6, r7, lr}
 80010bc:	0017      	movs	r7, r2
 80010be:	032b      	lsls	r3, r5, #12
 80010c0:	0a5a      	lsrs	r2, r3, #9
 80010c2:	0f4b      	lsrs	r3, r1, #29
 80010c4:	4313      	orrs	r3, r2
 80010c6:	00ca      	lsls	r2, r1, #3
 80010c8:	4691      	mov	r9, r2
 80010ca:	0302      	lsls	r2, r0, #12
 80010cc:	006e      	lsls	r6, r5, #1
 80010ce:	0041      	lsls	r1, r0, #1
 80010d0:	0a52      	lsrs	r2, r2, #9
 80010d2:	0fec      	lsrs	r4, r5, #31
 80010d4:	0f7d      	lsrs	r5, r7, #29
 80010d6:	4315      	orrs	r5, r2
 80010d8:	0d76      	lsrs	r6, r6, #21
 80010da:	0d49      	lsrs	r1, r1, #21
 80010dc:	0fc0      	lsrs	r0, r0, #31
 80010de:	4682      	mov	sl, r0
 80010e0:	46ac      	mov	ip, r5
 80010e2:	00ff      	lsls	r7, r7, #3
 80010e4:	1a72      	subs	r2, r6, r1
 80010e6:	4284      	cmp	r4, r0
 80010e8:	d100      	bne.n	80010ec <__aeabi_dadd+0x40>
 80010ea:	e098      	b.n	800121e <__aeabi_dadd+0x172>
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	dc00      	bgt.n	80010f2 <__aeabi_dadd+0x46>
 80010f0:	e081      	b.n	80011f6 <__aeabi_dadd+0x14a>
 80010f2:	2900      	cmp	r1, #0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_dadd+0x4c>
 80010f6:	e0b6      	b.n	8001266 <__aeabi_dadd+0x1ba>
 80010f8:	49c9      	ldr	r1, [pc, #804]	; (8001420 <__aeabi_dadd+0x374>)
 80010fa:	428e      	cmp	r6, r1
 80010fc:	d100      	bne.n	8001100 <__aeabi_dadd+0x54>
 80010fe:	e172      	b.n	80013e6 <__aeabi_dadd+0x33a>
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	0028      	movs	r0, r5
 8001104:	0409      	lsls	r1, r1, #16
 8001106:	4308      	orrs	r0, r1
 8001108:	4684      	mov	ip, r0
 800110a:	2a38      	cmp	r2, #56	; 0x38
 800110c:	dd00      	ble.n	8001110 <__aeabi_dadd+0x64>
 800110e:	e15e      	b.n	80013ce <__aeabi_dadd+0x322>
 8001110:	2a1f      	cmp	r2, #31
 8001112:	dd00      	ble.n	8001116 <__aeabi_dadd+0x6a>
 8001114:	e1ee      	b.n	80014f4 <__aeabi_dadd+0x448>
 8001116:	2020      	movs	r0, #32
 8001118:	0039      	movs	r1, r7
 800111a:	4665      	mov	r5, ip
 800111c:	1a80      	subs	r0, r0, r2
 800111e:	4087      	lsls	r7, r0
 8001120:	40d1      	lsrs	r1, r2
 8001122:	4085      	lsls	r5, r0
 8001124:	430d      	orrs	r5, r1
 8001126:	0039      	movs	r1, r7
 8001128:	1e4f      	subs	r7, r1, #1
 800112a:	41b9      	sbcs	r1, r7
 800112c:	4667      	mov	r7, ip
 800112e:	40d7      	lsrs	r7, r2
 8001130:	4329      	orrs	r1, r5
 8001132:	1bdb      	subs	r3, r3, r7
 8001134:	464a      	mov	r2, r9
 8001136:	1a55      	subs	r5, r2, r1
 8001138:	45a9      	cmp	r9, r5
 800113a:	4189      	sbcs	r1, r1
 800113c:	4249      	negs	r1, r1
 800113e:	1a5b      	subs	r3, r3, r1
 8001140:	4698      	mov	r8, r3
 8001142:	4643      	mov	r3, r8
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	d400      	bmi.n	800114a <__aeabi_dadd+0x9e>
 8001148:	e0cc      	b.n	80012e4 <__aeabi_dadd+0x238>
 800114a:	4643      	mov	r3, r8
 800114c:	025b      	lsls	r3, r3, #9
 800114e:	0a5b      	lsrs	r3, r3, #9
 8001150:	4698      	mov	r8, r3
 8001152:	4643      	mov	r3, r8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d100      	bne.n	800115a <__aeabi_dadd+0xae>
 8001158:	e12c      	b.n	80013b4 <__aeabi_dadd+0x308>
 800115a:	4640      	mov	r0, r8
 800115c:	f001 fe80 	bl	8002e60 <__clzsi2>
 8001160:	0001      	movs	r1, r0
 8001162:	3908      	subs	r1, #8
 8001164:	2220      	movs	r2, #32
 8001166:	0028      	movs	r0, r5
 8001168:	4643      	mov	r3, r8
 800116a:	1a52      	subs	r2, r2, r1
 800116c:	408b      	lsls	r3, r1
 800116e:	40d0      	lsrs	r0, r2
 8001170:	408d      	lsls	r5, r1
 8001172:	4303      	orrs	r3, r0
 8001174:	428e      	cmp	r6, r1
 8001176:	dd00      	ble.n	800117a <__aeabi_dadd+0xce>
 8001178:	e117      	b.n	80013aa <__aeabi_dadd+0x2fe>
 800117a:	1b8e      	subs	r6, r1, r6
 800117c:	1c72      	adds	r2, r6, #1
 800117e:	2a1f      	cmp	r2, #31
 8001180:	dd00      	ble.n	8001184 <__aeabi_dadd+0xd8>
 8001182:	e1a7      	b.n	80014d4 <__aeabi_dadd+0x428>
 8001184:	2120      	movs	r1, #32
 8001186:	0018      	movs	r0, r3
 8001188:	002e      	movs	r6, r5
 800118a:	1a89      	subs	r1, r1, r2
 800118c:	408d      	lsls	r5, r1
 800118e:	4088      	lsls	r0, r1
 8001190:	40d6      	lsrs	r6, r2
 8001192:	40d3      	lsrs	r3, r2
 8001194:	1e69      	subs	r1, r5, #1
 8001196:	418d      	sbcs	r5, r1
 8001198:	4330      	orrs	r0, r6
 800119a:	4698      	mov	r8, r3
 800119c:	2600      	movs	r6, #0
 800119e:	4305      	orrs	r5, r0
 80011a0:	076b      	lsls	r3, r5, #29
 80011a2:	d009      	beq.n	80011b8 <__aeabi_dadd+0x10c>
 80011a4:	230f      	movs	r3, #15
 80011a6:	402b      	ands	r3, r5
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d005      	beq.n	80011b8 <__aeabi_dadd+0x10c>
 80011ac:	1d2b      	adds	r3, r5, #4
 80011ae:	42ab      	cmp	r3, r5
 80011b0:	41ad      	sbcs	r5, r5
 80011b2:	426d      	negs	r5, r5
 80011b4:	44a8      	add	r8, r5
 80011b6:	001d      	movs	r5, r3
 80011b8:	4643      	mov	r3, r8
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	d400      	bmi.n	80011c0 <__aeabi_dadd+0x114>
 80011be:	e094      	b.n	80012ea <__aeabi_dadd+0x23e>
 80011c0:	4b97      	ldr	r3, [pc, #604]	; (8001420 <__aeabi_dadd+0x374>)
 80011c2:	1c72      	adds	r2, r6, #1
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d100      	bne.n	80011ca <__aeabi_dadd+0x11e>
 80011c8:	e09d      	b.n	8001306 <__aeabi_dadd+0x25a>
 80011ca:	4641      	mov	r1, r8
 80011cc:	4b95      	ldr	r3, [pc, #596]	; (8001424 <__aeabi_dadd+0x378>)
 80011ce:	08ed      	lsrs	r5, r5, #3
 80011d0:	4019      	ands	r1, r3
 80011d2:	000b      	movs	r3, r1
 80011d4:	0552      	lsls	r2, r2, #21
 80011d6:	0749      	lsls	r1, r1, #29
 80011d8:	025b      	lsls	r3, r3, #9
 80011da:	4329      	orrs	r1, r5
 80011dc:	0b1b      	lsrs	r3, r3, #12
 80011de:	0d52      	lsrs	r2, r2, #21
 80011e0:	0512      	lsls	r2, r2, #20
 80011e2:	4313      	orrs	r3, r2
 80011e4:	07e4      	lsls	r4, r4, #31
 80011e6:	4323      	orrs	r3, r4
 80011e8:	0008      	movs	r0, r1
 80011ea:	0019      	movs	r1, r3
 80011ec:	bce0      	pop	{r5, r6, r7}
 80011ee:	46ba      	mov	sl, r7
 80011f0:	46b1      	mov	r9, r6
 80011f2:	46a8      	mov	r8, r5
 80011f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d043      	beq.n	8001282 <__aeabi_dadd+0x1d6>
 80011fa:	1b8a      	subs	r2, r1, r6
 80011fc:	2e00      	cmp	r6, #0
 80011fe:	d000      	beq.n	8001202 <__aeabi_dadd+0x156>
 8001200:	e12a      	b.n	8001458 <__aeabi_dadd+0x3ac>
 8001202:	464c      	mov	r4, r9
 8001204:	431c      	orrs	r4, r3
 8001206:	d100      	bne.n	800120a <__aeabi_dadd+0x15e>
 8001208:	e1d1      	b.n	80015ae <__aeabi_dadd+0x502>
 800120a:	1e54      	subs	r4, r2, #1
 800120c:	2a01      	cmp	r2, #1
 800120e:	d100      	bne.n	8001212 <__aeabi_dadd+0x166>
 8001210:	e21f      	b.n	8001652 <__aeabi_dadd+0x5a6>
 8001212:	4d83      	ldr	r5, [pc, #524]	; (8001420 <__aeabi_dadd+0x374>)
 8001214:	42aa      	cmp	r2, r5
 8001216:	d100      	bne.n	800121a <__aeabi_dadd+0x16e>
 8001218:	e272      	b.n	8001700 <__aeabi_dadd+0x654>
 800121a:	0022      	movs	r2, r4
 800121c:	e123      	b.n	8001466 <__aeabi_dadd+0x3ba>
 800121e:	2a00      	cmp	r2, #0
 8001220:	dc00      	bgt.n	8001224 <__aeabi_dadd+0x178>
 8001222:	e098      	b.n	8001356 <__aeabi_dadd+0x2aa>
 8001224:	2900      	cmp	r1, #0
 8001226:	d042      	beq.n	80012ae <__aeabi_dadd+0x202>
 8001228:	497d      	ldr	r1, [pc, #500]	; (8001420 <__aeabi_dadd+0x374>)
 800122a:	428e      	cmp	r6, r1
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0x184>
 800122e:	e0da      	b.n	80013e6 <__aeabi_dadd+0x33a>
 8001230:	2180      	movs	r1, #128	; 0x80
 8001232:	0028      	movs	r0, r5
 8001234:	0409      	lsls	r1, r1, #16
 8001236:	4308      	orrs	r0, r1
 8001238:	4684      	mov	ip, r0
 800123a:	2a38      	cmp	r2, #56	; 0x38
 800123c:	dd00      	ble.n	8001240 <__aeabi_dadd+0x194>
 800123e:	e129      	b.n	8001494 <__aeabi_dadd+0x3e8>
 8001240:	2a1f      	cmp	r2, #31
 8001242:	dc00      	bgt.n	8001246 <__aeabi_dadd+0x19a>
 8001244:	e187      	b.n	8001556 <__aeabi_dadd+0x4aa>
 8001246:	0011      	movs	r1, r2
 8001248:	4665      	mov	r5, ip
 800124a:	3920      	subs	r1, #32
 800124c:	40cd      	lsrs	r5, r1
 800124e:	2a20      	cmp	r2, #32
 8001250:	d004      	beq.n	800125c <__aeabi_dadd+0x1b0>
 8001252:	2040      	movs	r0, #64	; 0x40
 8001254:	4661      	mov	r1, ip
 8001256:	1a82      	subs	r2, r0, r2
 8001258:	4091      	lsls	r1, r2
 800125a:	430f      	orrs	r7, r1
 800125c:	0039      	movs	r1, r7
 800125e:	1e4f      	subs	r7, r1, #1
 8001260:	41b9      	sbcs	r1, r7
 8001262:	430d      	orrs	r5, r1
 8001264:	e11b      	b.n	800149e <__aeabi_dadd+0x3f2>
 8001266:	0029      	movs	r1, r5
 8001268:	4339      	orrs	r1, r7
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x1c2>
 800126c:	e0b5      	b.n	80013da <__aeabi_dadd+0x32e>
 800126e:	1e51      	subs	r1, r2, #1
 8001270:	2a01      	cmp	r2, #1
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x1ca>
 8001274:	e1ab      	b.n	80015ce <__aeabi_dadd+0x522>
 8001276:	486a      	ldr	r0, [pc, #424]	; (8001420 <__aeabi_dadd+0x374>)
 8001278:	4282      	cmp	r2, r0
 800127a:	d100      	bne.n	800127e <__aeabi_dadd+0x1d2>
 800127c:	e1b2      	b.n	80015e4 <__aeabi_dadd+0x538>
 800127e:	000a      	movs	r2, r1
 8001280:	e743      	b.n	800110a <__aeabi_dadd+0x5e>
 8001282:	4969      	ldr	r1, [pc, #420]	; (8001428 <__aeabi_dadd+0x37c>)
 8001284:	1c75      	adds	r5, r6, #1
 8001286:	420d      	tst	r5, r1
 8001288:	d000      	beq.n	800128c <__aeabi_dadd+0x1e0>
 800128a:	e0cf      	b.n	800142c <__aeabi_dadd+0x380>
 800128c:	2e00      	cmp	r6, #0
 800128e:	d000      	beq.n	8001292 <__aeabi_dadd+0x1e6>
 8001290:	e193      	b.n	80015ba <__aeabi_dadd+0x50e>
 8001292:	4649      	mov	r1, r9
 8001294:	4319      	orrs	r1, r3
 8001296:	d100      	bne.n	800129a <__aeabi_dadd+0x1ee>
 8001298:	e1d1      	b.n	800163e <__aeabi_dadd+0x592>
 800129a:	4661      	mov	r1, ip
 800129c:	4339      	orrs	r1, r7
 800129e:	d000      	beq.n	80012a2 <__aeabi_dadd+0x1f6>
 80012a0:	e1e3      	b.n	800166a <__aeabi_dadd+0x5be>
 80012a2:	4649      	mov	r1, r9
 80012a4:	0758      	lsls	r0, r3, #29
 80012a6:	08c9      	lsrs	r1, r1, #3
 80012a8:	4301      	orrs	r1, r0
 80012aa:	08db      	lsrs	r3, r3, #3
 80012ac:	e026      	b.n	80012fc <__aeabi_dadd+0x250>
 80012ae:	0029      	movs	r1, r5
 80012b0:	4339      	orrs	r1, r7
 80012b2:	d100      	bne.n	80012b6 <__aeabi_dadd+0x20a>
 80012b4:	e091      	b.n	80013da <__aeabi_dadd+0x32e>
 80012b6:	1e51      	subs	r1, r2, #1
 80012b8:	2a01      	cmp	r2, #1
 80012ba:	d005      	beq.n	80012c8 <__aeabi_dadd+0x21c>
 80012bc:	4858      	ldr	r0, [pc, #352]	; (8001420 <__aeabi_dadd+0x374>)
 80012be:	4282      	cmp	r2, r0
 80012c0:	d100      	bne.n	80012c4 <__aeabi_dadd+0x218>
 80012c2:	e18f      	b.n	80015e4 <__aeabi_dadd+0x538>
 80012c4:	000a      	movs	r2, r1
 80012c6:	e7b8      	b.n	800123a <__aeabi_dadd+0x18e>
 80012c8:	003d      	movs	r5, r7
 80012ca:	444d      	add	r5, r9
 80012cc:	454d      	cmp	r5, r9
 80012ce:	4189      	sbcs	r1, r1
 80012d0:	4463      	add	r3, ip
 80012d2:	4698      	mov	r8, r3
 80012d4:	4249      	negs	r1, r1
 80012d6:	4488      	add	r8, r1
 80012d8:	4643      	mov	r3, r8
 80012da:	2602      	movs	r6, #2
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	d500      	bpl.n	80012e2 <__aeabi_dadd+0x236>
 80012e0:	e0eb      	b.n	80014ba <__aeabi_dadd+0x40e>
 80012e2:	3e01      	subs	r6, #1
 80012e4:	076b      	lsls	r3, r5, #29
 80012e6:	d000      	beq.n	80012ea <__aeabi_dadd+0x23e>
 80012e8:	e75c      	b.n	80011a4 <__aeabi_dadd+0xf8>
 80012ea:	4643      	mov	r3, r8
 80012ec:	08e9      	lsrs	r1, r5, #3
 80012ee:	075a      	lsls	r2, r3, #29
 80012f0:	4311      	orrs	r1, r2
 80012f2:	0032      	movs	r2, r6
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	484a      	ldr	r0, [pc, #296]	; (8001420 <__aeabi_dadd+0x374>)
 80012f8:	4282      	cmp	r2, r0
 80012fa:	d021      	beq.n	8001340 <__aeabi_dadd+0x294>
 80012fc:	031b      	lsls	r3, r3, #12
 80012fe:	0552      	lsls	r2, r2, #21
 8001300:	0b1b      	lsrs	r3, r3, #12
 8001302:	0d52      	lsrs	r2, r2, #21
 8001304:	e76c      	b.n	80011e0 <__aeabi_dadd+0x134>
 8001306:	2300      	movs	r3, #0
 8001308:	2100      	movs	r1, #0
 800130a:	e769      	b.n	80011e0 <__aeabi_dadd+0x134>
 800130c:	002a      	movs	r2, r5
 800130e:	433a      	orrs	r2, r7
 8001310:	d069      	beq.n	80013e6 <__aeabi_dadd+0x33a>
 8001312:	464a      	mov	r2, r9
 8001314:	0758      	lsls	r0, r3, #29
 8001316:	08d1      	lsrs	r1, r2, #3
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	031b      	lsls	r3, r3, #12
 800131e:	4308      	orrs	r0, r1
 8001320:	421a      	tst	r2, r3
 8001322:	d007      	beq.n	8001334 <__aeabi_dadd+0x288>
 8001324:	0029      	movs	r1, r5
 8001326:	08ed      	lsrs	r5, r5, #3
 8001328:	421d      	tst	r5, r3
 800132a:	d103      	bne.n	8001334 <__aeabi_dadd+0x288>
 800132c:	002a      	movs	r2, r5
 800132e:	08ff      	lsrs	r7, r7, #3
 8001330:	0748      	lsls	r0, r1, #29
 8001332:	4338      	orrs	r0, r7
 8001334:	0f43      	lsrs	r3, r0, #29
 8001336:	00c1      	lsls	r1, r0, #3
 8001338:	075b      	lsls	r3, r3, #29
 800133a:	08c9      	lsrs	r1, r1, #3
 800133c:	4319      	orrs	r1, r3
 800133e:	0013      	movs	r3, r2
 8001340:	000a      	movs	r2, r1
 8001342:	431a      	orrs	r2, r3
 8001344:	d100      	bne.n	8001348 <__aeabi_dadd+0x29c>
 8001346:	e213      	b.n	8001770 <__aeabi_dadd+0x6c4>
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	0312      	lsls	r2, r2, #12
 800134c:	4313      	orrs	r3, r2
 800134e:	031b      	lsls	r3, r3, #12
 8001350:	4a33      	ldr	r2, [pc, #204]	; (8001420 <__aeabi_dadd+0x374>)
 8001352:	0b1b      	lsrs	r3, r3, #12
 8001354:	e744      	b.n	80011e0 <__aeabi_dadd+0x134>
 8001356:	2a00      	cmp	r2, #0
 8001358:	d04b      	beq.n	80013f2 <__aeabi_dadd+0x346>
 800135a:	1b8a      	subs	r2, r1, r6
 800135c:	2e00      	cmp	r6, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0x2b6>
 8001360:	e0e7      	b.n	8001532 <__aeabi_dadd+0x486>
 8001362:	482f      	ldr	r0, [pc, #188]	; (8001420 <__aeabi_dadd+0x374>)
 8001364:	4281      	cmp	r1, r0
 8001366:	d100      	bne.n	800136a <__aeabi_dadd+0x2be>
 8001368:	e195      	b.n	8001696 <__aeabi_dadd+0x5ea>
 800136a:	2080      	movs	r0, #128	; 0x80
 800136c:	0400      	lsls	r0, r0, #16
 800136e:	4303      	orrs	r3, r0
 8001370:	2a38      	cmp	r2, #56	; 0x38
 8001372:	dd00      	ble.n	8001376 <__aeabi_dadd+0x2ca>
 8001374:	e143      	b.n	80015fe <__aeabi_dadd+0x552>
 8001376:	2a1f      	cmp	r2, #31
 8001378:	dd00      	ble.n	800137c <__aeabi_dadd+0x2d0>
 800137a:	e1db      	b.n	8001734 <__aeabi_dadd+0x688>
 800137c:	2020      	movs	r0, #32
 800137e:	001d      	movs	r5, r3
 8001380:	464e      	mov	r6, r9
 8001382:	1a80      	subs	r0, r0, r2
 8001384:	4085      	lsls	r5, r0
 8001386:	40d6      	lsrs	r6, r2
 8001388:	4335      	orrs	r5, r6
 800138a:	464e      	mov	r6, r9
 800138c:	4086      	lsls	r6, r0
 800138e:	0030      	movs	r0, r6
 8001390:	40d3      	lsrs	r3, r2
 8001392:	1e46      	subs	r6, r0, #1
 8001394:	41b0      	sbcs	r0, r6
 8001396:	449c      	add	ip, r3
 8001398:	4305      	orrs	r5, r0
 800139a:	19ed      	adds	r5, r5, r7
 800139c:	42bd      	cmp	r5, r7
 800139e:	419b      	sbcs	r3, r3
 80013a0:	425b      	negs	r3, r3
 80013a2:	4463      	add	r3, ip
 80013a4:	4698      	mov	r8, r3
 80013a6:	000e      	movs	r6, r1
 80013a8:	e07f      	b.n	80014aa <__aeabi_dadd+0x3fe>
 80013aa:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <__aeabi_dadd+0x378>)
 80013ac:	1a76      	subs	r6, r6, r1
 80013ae:	4013      	ands	r3, r2
 80013b0:	4698      	mov	r8, r3
 80013b2:	e6f5      	b.n	80011a0 <__aeabi_dadd+0xf4>
 80013b4:	0028      	movs	r0, r5
 80013b6:	f001 fd53 	bl	8002e60 <__clzsi2>
 80013ba:	0001      	movs	r1, r0
 80013bc:	3118      	adds	r1, #24
 80013be:	291f      	cmp	r1, #31
 80013c0:	dc00      	bgt.n	80013c4 <__aeabi_dadd+0x318>
 80013c2:	e6cf      	b.n	8001164 <__aeabi_dadd+0xb8>
 80013c4:	002b      	movs	r3, r5
 80013c6:	3808      	subs	r0, #8
 80013c8:	4083      	lsls	r3, r0
 80013ca:	2500      	movs	r5, #0
 80013cc:	e6d2      	b.n	8001174 <__aeabi_dadd+0xc8>
 80013ce:	4662      	mov	r2, ip
 80013d0:	433a      	orrs	r2, r7
 80013d2:	0011      	movs	r1, r2
 80013d4:	1e4f      	subs	r7, r1, #1
 80013d6:	41b9      	sbcs	r1, r7
 80013d8:	e6ac      	b.n	8001134 <__aeabi_dadd+0x88>
 80013da:	4649      	mov	r1, r9
 80013dc:	0758      	lsls	r0, r3, #29
 80013de:	08c9      	lsrs	r1, r1, #3
 80013e0:	4301      	orrs	r1, r0
 80013e2:	08db      	lsrs	r3, r3, #3
 80013e4:	e787      	b.n	80012f6 <__aeabi_dadd+0x24a>
 80013e6:	4649      	mov	r1, r9
 80013e8:	075a      	lsls	r2, r3, #29
 80013ea:	08c9      	lsrs	r1, r1, #3
 80013ec:	4311      	orrs	r1, r2
 80013ee:	08db      	lsrs	r3, r3, #3
 80013f0:	e7a6      	b.n	8001340 <__aeabi_dadd+0x294>
 80013f2:	490d      	ldr	r1, [pc, #52]	; (8001428 <__aeabi_dadd+0x37c>)
 80013f4:	1c70      	adds	r0, r6, #1
 80013f6:	4208      	tst	r0, r1
 80013f8:	d000      	beq.n	80013fc <__aeabi_dadd+0x350>
 80013fa:	e0bb      	b.n	8001574 <__aeabi_dadd+0x4c8>
 80013fc:	2e00      	cmp	r6, #0
 80013fe:	d000      	beq.n	8001402 <__aeabi_dadd+0x356>
 8001400:	e114      	b.n	800162c <__aeabi_dadd+0x580>
 8001402:	4649      	mov	r1, r9
 8001404:	4319      	orrs	r1, r3
 8001406:	d100      	bne.n	800140a <__aeabi_dadd+0x35e>
 8001408:	e175      	b.n	80016f6 <__aeabi_dadd+0x64a>
 800140a:	0029      	movs	r1, r5
 800140c:	4339      	orrs	r1, r7
 800140e:	d000      	beq.n	8001412 <__aeabi_dadd+0x366>
 8001410:	e17e      	b.n	8001710 <__aeabi_dadd+0x664>
 8001412:	4649      	mov	r1, r9
 8001414:	0758      	lsls	r0, r3, #29
 8001416:	08c9      	lsrs	r1, r1, #3
 8001418:	4301      	orrs	r1, r0
 800141a:	08db      	lsrs	r3, r3, #3
 800141c:	e76e      	b.n	80012fc <__aeabi_dadd+0x250>
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	000007ff 	.word	0x000007ff
 8001424:	ff7fffff 	.word	0xff7fffff
 8001428:	000007fe 	.word	0x000007fe
 800142c:	4649      	mov	r1, r9
 800142e:	1bcd      	subs	r5, r1, r7
 8001430:	4661      	mov	r1, ip
 8001432:	1a58      	subs	r0, r3, r1
 8001434:	45a9      	cmp	r9, r5
 8001436:	4189      	sbcs	r1, r1
 8001438:	4249      	negs	r1, r1
 800143a:	4688      	mov	r8, r1
 800143c:	0001      	movs	r1, r0
 800143e:	4640      	mov	r0, r8
 8001440:	1a09      	subs	r1, r1, r0
 8001442:	4688      	mov	r8, r1
 8001444:	0209      	lsls	r1, r1, #8
 8001446:	d500      	bpl.n	800144a <__aeabi_dadd+0x39e>
 8001448:	e0a6      	b.n	8001598 <__aeabi_dadd+0x4ec>
 800144a:	4641      	mov	r1, r8
 800144c:	4329      	orrs	r1, r5
 800144e:	d000      	beq.n	8001452 <__aeabi_dadd+0x3a6>
 8001450:	e67f      	b.n	8001152 <__aeabi_dadd+0xa6>
 8001452:	2300      	movs	r3, #0
 8001454:	2400      	movs	r4, #0
 8001456:	e751      	b.n	80012fc <__aeabi_dadd+0x250>
 8001458:	4cc7      	ldr	r4, [pc, #796]	; (8001778 <__aeabi_dadd+0x6cc>)
 800145a:	42a1      	cmp	r1, r4
 800145c:	d100      	bne.n	8001460 <__aeabi_dadd+0x3b4>
 800145e:	e0c7      	b.n	80015f0 <__aeabi_dadd+0x544>
 8001460:	2480      	movs	r4, #128	; 0x80
 8001462:	0424      	lsls	r4, r4, #16
 8001464:	4323      	orrs	r3, r4
 8001466:	2a38      	cmp	r2, #56	; 0x38
 8001468:	dc54      	bgt.n	8001514 <__aeabi_dadd+0x468>
 800146a:	2a1f      	cmp	r2, #31
 800146c:	dd00      	ble.n	8001470 <__aeabi_dadd+0x3c4>
 800146e:	e0cc      	b.n	800160a <__aeabi_dadd+0x55e>
 8001470:	2420      	movs	r4, #32
 8001472:	4648      	mov	r0, r9
 8001474:	1aa4      	subs	r4, r4, r2
 8001476:	001d      	movs	r5, r3
 8001478:	464e      	mov	r6, r9
 800147a:	40a0      	lsls	r0, r4
 800147c:	40d6      	lsrs	r6, r2
 800147e:	40a5      	lsls	r5, r4
 8001480:	0004      	movs	r4, r0
 8001482:	40d3      	lsrs	r3, r2
 8001484:	4662      	mov	r2, ip
 8001486:	4335      	orrs	r5, r6
 8001488:	1e66      	subs	r6, r4, #1
 800148a:	41b4      	sbcs	r4, r6
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	469c      	mov	ip, r3
 8001490:	4325      	orrs	r5, r4
 8001492:	e044      	b.n	800151e <__aeabi_dadd+0x472>
 8001494:	4662      	mov	r2, ip
 8001496:	433a      	orrs	r2, r7
 8001498:	0015      	movs	r5, r2
 800149a:	1e6f      	subs	r7, r5, #1
 800149c:	41bd      	sbcs	r5, r7
 800149e:	444d      	add	r5, r9
 80014a0:	454d      	cmp	r5, r9
 80014a2:	4189      	sbcs	r1, r1
 80014a4:	4249      	negs	r1, r1
 80014a6:	4688      	mov	r8, r1
 80014a8:	4498      	add	r8, r3
 80014aa:	4643      	mov	r3, r8
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	d400      	bmi.n	80014b2 <__aeabi_dadd+0x406>
 80014b0:	e718      	b.n	80012e4 <__aeabi_dadd+0x238>
 80014b2:	4bb1      	ldr	r3, [pc, #708]	; (8001778 <__aeabi_dadd+0x6cc>)
 80014b4:	3601      	adds	r6, #1
 80014b6:	429e      	cmp	r6, r3
 80014b8:	d049      	beq.n	800154e <__aeabi_dadd+0x4a2>
 80014ba:	4642      	mov	r2, r8
 80014bc:	4baf      	ldr	r3, [pc, #700]	; (800177c <__aeabi_dadd+0x6d0>)
 80014be:	2101      	movs	r1, #1
 80014c0:	401a      	ands	r2, r3
 80014c2:	0013      	movs	r3, r2
 80014c4:	086a      	lsrs	r2, r5, #1
 80014c6:	400d      	ands	r5, r1
 80014c8:	4315      	orrs	r5, r2
 80014ca:	07d9      	lsls	r1, r3, #31
 80014cc:	085b      	lsrs	r3, r3, #1
 80014ce:	4698      	mov	r8, r3
 80014d0:	430d      	orrs	r5, r1
 80014d2:	e665      	b.n	80011a0 <__aeabi_dadd+0xf4>
 80014d4:	0018      	movs	r0, r3
 80014d6:	3e1f      	subs	r6, #31
 80014d8:	40f0      	lsrs	r0, r6
 80014da:	2a20      	cmp	r2, #32
 80014dc:	d003      	beq.n	80014e6 <__aeabi_dadd+0x43a>
 80014de:	2140      	movs	r1, #64	; 0x40
 80014e0:	1a8a      	subs	r2, r1, r2
 80014e2:	4093      	lsls	r3, r2
 80014e4:	431d      	orrs	r5, r3
 80014e6:	1e69      	subs	r1, r5, #1
 80014e8:	418d      	sbcs	r5, r1
 80014ea:	2300      	movs	r3, #0
 80014ec:	2600      	movs	r6, #0
 80014ee:	4698      	mov	r8, r3
 80014f0:	4305      	orrs	r5, r0
 80014f2:	e6f7      	b.n	80012e4 <__aeabi_dadd+0x238>
 80014f4:	0011      	movs	r1, r2
 80014f6:	4665      	mov	r5, ip
 80014f8:	3920      	subs	r1, #32
 80014fa:	40cd      	lsrs	r5, r1
 80014fc:	2a20      	cmp	r2, #32
 80014fe:	d004      	beq.n	800150a <__aeabi_dadd+0x45e>
 8001500:	2040      	movs	r0, #64	; 0x40
 8001502:	4661      	mov	r1, ip
 8001504:	1a82      	subs	r2, r0, r2
 8001506:	4091      	lsls	r1, r2
 8001508:	430f      	orrs	r7, r1
 800150a:	0039      	movs	r1, r7
 800150c:	1e4f      	subs	r7, r1, #1
 800150e:	41b9      	sbcs	r1, r7
 8001510:	4329      	orrs	r1, r5
 8001512:	e60f      	b.n	8001134 <__aeabi_dadd+0x88>
 8001514:	464a      	mov	r2, r9
 8001516:	4313      	orrs	r3, r2
 8001518:	001d      	movs	r5, r3
 800151a:	1e6b      	subs	r3, r5, #1
 800151c:	419d      	sbcs	r5, r3
 800151e:	1b7d      	subs	r5, r7, r5
 8001520:	42af      	cmp	r7, r5
 8001522:	419b      	sbcs	r3, r3
 8001524:	4662      	mov	r2, ip
 8001526:	425b      	negs	r3, r3
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	4698      	mov	r8, r3
 800152c:	4654      	mov	r4, sl
 800152e:	000e      	movs	r6, r1
 8001530:	e607      	b.n	8001142 <__aeabi_dadd+0x96>
 8001532:	4648      	mov	r0, r9
 8001534:	4318      	orrs	r0, r3
 8001536:	d100      	bne.n	800153a <__aeabi_dadd+0x48e>
 8001538:	e0b3      	b.n	80016a2 <__aeabi_dadd+0x5f6>
 800153a:	1e50      	subs	r0, r2, #1
 800153c:	2a01      	cmp	r2, #1
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x496>
 8001540:	e10d      	b.n	800175e <__aeabi_dadd+0x6b2>
 8001542:	4d8d      	ldr	r5, [pc, #564]	; (8001778 <__aeabi_dadd+0x6cc>)
 8001544:	42aa      	cmp	r2, r5
 8001546:	d100      	bne.n	800154a <__aeabi_dadd+0x49e>
 8001548:	e0a5      	b.n	8001696 <__aeabi_dadd+0x5ea>
 800154a:	0002      	movs	r2, r0
 800154c:	e710      	b.n	8001370 <__aeabi_dadd+0x2c4>
 800154e:	0032      	movs	r2, r6
 8001550:	2300      	movs	r3, #0
 8001552:	2100      	movs	r1, #0
 8001554:	e644      	b.n	80011e0 <__aeabi_dadd+0x134>
 8001556:	2120      	movs	r1, #32
 8001558:	0038      	movs	r0, r7
 800155a:	1a89      	subs	r1, r1, r2
 800155c:	4665      	mov	r5, ip
 800155e:	408f      	lsls	r7, r1
 8001560:	408d      	lsls	r5, r1
 8001562:	40d0      	lsrs	r0, r2
 8001564:	1e79      	subs	r1, r7, #1
 8001566:	418f      	sbcs	r7, r1
 8001568:	4305      	orrs	r5, r0
 800156a:	433d      	orrs	r5, r7
 800156c:	4667      	mov	r7, ip
 800156e:	40d7      	lsrs	r7, r2
 8001570:	19db      	adds	r3, r3, r7
 8001572:	e794      	b.n	800149e <__aeabi_dadd+0x3f2>
 8001574:	4a80      	ldr	r2, [pc, #512]	; (8001778 <__aeabi_dadd+0x6cc>)
 8001576:	4290      	cmp	r0, r2
 8001578:	d100      	bne.n	800157c <__aeabi_dadd+0x4d0>
 800157a:	e0ec      	b.n	8001756 <__aeabi_dadd+0x6aa>
 800157c:	0039      	movs	r1, r7
 800157e:	4449      	add	r1, r9
 8001580:	4549      	cmp	r1, r9
 8001582:	4192      	sbcs	r2, r2
 8001584:	4463      	add	r3, ip
 8001586:	4252      	negs	r2, r2
 8001588:	189b      	adds	r3, r3, r2
 800158a:	07dd      	lsls	r5, r3, #31
 800158c:	0849      	lsrs	r1, r1, #1
 800158e:	085b      	lsrs	r3, r3, #1
 8001590:	4698      	mov	r8, r3
 8001592:	0006      	movs	r6, r0
 8001594:	430d      	orrs	r5, r1
 8001596:	e6a5      	b.n	80012e4 <__aeabi_dadd+0x238>
 8001598:	464a      	mov	r2, r9
 800159a:	1abd      	subs	r5, r7, r2
 800159c:	42af      	cmp	r7, r5
 800159e:	4189      	sbcs	r1, r1
 80015a0:	4662      	mov	r2, ip
 80015a2:	4249      	negs	r1, r1
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	1a5b      	subs	r3, r3, r1
 80015a8:	4698      	mov	r8, r3
 80015aa:	4654      	mov	r4, sl
 80015ac:	e5d1      	b.n	8001152 <__aeabi_dadd+0xa6>
 80015ae:	076c      	lsls	r4, r5, #29
 80015b0:	08f9      	lsrs	r1, r7, #3
 80015b2:	4321      	orrs	r1, r4
 80015b4:	08eb      	lsrs	r3, r5, #3
 80015b6:	0004      	movs	r4, r0
 80015b8:	e69d      	b.n	80012f6 <__aeabi_dadd+0x24a>
 80015ba:	464a      	mov	r2, r9
 80015bc:	431a      	orrs	r2, r3
 80015be:	d175      	bne.n	80016ac <__aeabi_dadd+0x600>
 80015c0:	4661      	mov	r1, ip
 80015c2:	4339      	orrs	r1, r7
 80015c4:	d114      	bne.n	80015f0 <__aeabi_dadd+0x544>
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	2400      	movs	r4, #0
 80015ca:	031b      	lsls	r3, r3, #12
 80015cc:	e6bc      	b.n	8001348 <__aeabi_dadd+0x29c>
 80015ce:	464a      	mov	r2, r9
 80015d0:	1bd5      	subs	r5, r2, r7
 80015d2:	45a9      	cmp	r9, r5
 80015d4:	4189      	sbcs	r1, r1
 80015d6:	4662      	mov	r2, ip
 80015d8:	4249      	negs	r1, r1
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	1a5b      	subs	r3, r3, r1
 80015de:	4698      	mov	r8, r3
 80015e0:	2601      	movs	r6, #1
 80015e2:	e5ae      	b.n	8001142 <__aeabi_dadd+0x96>
 80015e4:	464a      	mov	r2, r9
 80015e6:	08d1      	lsrs	r1, r2, #3
 80015e8:	075a      	lsls	r2, r3, #29
 80015ea:	4311      	orrs	r1, r2
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	e6a7      	b.n	8001340 <__aeabi_dadd+0x294>
 80015f0:	4663      	mov	r3, ip
 80015f2:	08f9      	lsrs	r1, r7, #3
 80015f4:	075a      	lsls	r2, r3, #29
 80015f6:	4654      	mov	r4, sl
 80015f8:	4311      	orrs	r1, r2
 80015fa:	08db      	lsrs	r3, r3, #3
 80015fc:	e6a0      	b.n	8001340 <__aeabi_dadd+0x294>
 80015fe:	464a      	mov	r2, r9
 8001600:	4313      	orrs	r3, r2
 8001602:	001d      	movs	r5, r3
 8001604:	1e6b      	subs	r3, r5, #1
 8001606:	419d      	sbcs	r5, r3
 8001608:	e6c7      	b.n	800139a <__aeabi_dadd+0x2ee>
 800160a:	0014      	movs	r4, r2
 800160c:	001e      	movs	r6, r3
 800160e:	3c20      	subs	r4, #32
 8001610:	40e6      	lsrs	r6, r4
 8001612:	2a20      	cmp	r2, #32
 8001614:	d005      	beq.n	8001622 <__aeabi_dadd+0x576>
 8001616:	2440      	movs	r4, #64	; 0x40
 8001618:	1aa2      	subs	r2, r4, r2
 800161a:	4093      	lsls	r3, r2
 800161c:	464a      	mov	r2, r9
 800161e:	431a      	orrs	r2, r3
 8001620:	4691      	mov	r9, r2
 8001622:	464d      	mov	r5, r9
 8001624:	1e6b      	subs	r3, r5, #1
 8001626:	419d      	sbcs	r5, r3
 8001628:	4335      	orrs	r5, r6
 800162a:	e778      	b.n	800151e <__aeabi_dadd+0x472>
 800162c:	464a      	mov	r2, r9
 800162e:	431a      	orrs	r2, r3
 8001630:	d000      	beq.n	8001634 <__aeabi_dadd+0x588>
 8001632:	e66b      	b.n	800130c <__aeabi_dadd+0x260>
 8001634:	076b      	lsls	r3, r5, #29
 8001636:	08f9      	lsrs	r1, r7, #3
 8001638:	4319      	orrs	r1, r3
 800163a:	08eb      	lsrs	r3, r5, #3
 800163c:	e680      	b.n	8001340 <__aeabi_dadd+0x294>
 800163e:	4661      	mov	r1, ip
 8001640:	4339      	orrs	r1, r7
 8001642:	d054      	beq.n	80016ee <__aeabi_dadd+0x642>
 8001644:	4663      	mov	r3, ip
 8001646:	08f9      	lsrs	r1, r7, #3
 8001648:	075c      	lsls	r4, r3, #29
 800164a:	4321      	orrs	r1, r4
 800164c:	08db      	lsrs	r3, r3, #3
 800164e:	0004      	movs	r4, r0
 8001650:	e654      	b.n	80012fc <__aeabi_dadd+0x250>
 8001652:	464a      	mov	r2, r9
 8001654:	1abd      	subs	r5, r7, r2
 8001656:	42af      	cmp	r7, r5
 8001658:	4189      	sbcs	r1, r1
 800165a:	4662      	mov	r2, ip
 800165c:	4249      	negs	r1, r1
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	1a5b      	subs	r3, r3, r1
 8001662:	4698      	mov	r8, r3
 8001664:	0004      	movs	r4, r0
 8001666:	2601      	movs	r6, #1
 8001668:	e56b      	b.n	8001142 <__aeabi_dadd+0x96>
 800166a:	464a      	mov	r2, r9
 800166c:	1bd5      	subs	r5, r2, r7
 800166e:	45a9      	cmp	r9, r5
 8001670:	4189      	sbcs	r1, r1
 8001672:	4662      	mov	r2, ip
 8001674:	4249      	negs	r1, r1
 8001676:	1a9a      	subs	r2, r3, r2
 8001678:	1a52      	subs	r2, r2, r1
 800167a:	4690      	mov	r8, r2
 800167c:	0212      	lsls	r2, r2, #8
 800167e:	d532      	bpl.n	80016e6 <__aeabi_dadd+0x63a>
 8001680:	464a      	mov	r2, r9
 8001682:	1abd      	subs	r5, r7, r2
 8001684:	42af      	cmp	r7, r5
 8001686:	4189      	sbcs	r1, r1
 8001688:	4662      	mov	r2, ip
 800168a:	4249      	negs	r1, r1
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1a5b      	subs	r3, r3, r1
 8001690:	4698      	mov	r8, r3
 8001692:	0004      	movs	r4, r0
 8001694:	e584      	b.n	80011a0 <__aeabi_dadd+0xf4>
 8001696:	4663      	mov	r3, ip
 8001698:	08f9      	lsrs	r1, r7, #3
 800169a:	075a      	lsls	r2, r3, #29
 800169c:	4311      	orrs	r1, r2
 800169e:	08db      	lsrs	r3, r3, #3
 80016a0:	e64e      	b.n	8001340 <__aeabi_dadd+0x294>
 80016a2:	08f9      	lsrs	r1, r7, #3
 80016a4:	0768      	lsls	r0, r5, #29
 80016a6:	4301      	orrs	r1, r0
 80016a8:	08eb      	lsrs	r3, r5, #3
 80016aa:	e624      	b.n	80012f6 <__aeabi_dadd+0x24a>
 80016ac:	4662      	mov	r2, ip
 80016ae:	433a      	orrs	r2, r7
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dadd+0x608>
 80016b2:	e698      	b.n	80013e6 <__aeabi_dadd+0x33a>
 80016b4:	464a      	mov	r2, r9
 80016b6:	08d1      	lsrs	r1, r2, #3
 80016b8:	075a      	lsls	r2, r3, #29
 80016ba:	4311      	orrs	r1, r2
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	031b      	lsls	r3, r3, #12
 80016c2:	421a      	tst	r2, r3
 80016c4:	d008      	beq.n	80016d8 <__aeabi_dadd+0x62c>
 80016c6:	4660      	mov	r0, ip
 80016c8:	08c5      	lsrs	r5, r0, #3
 80016ca:	421d      	tst	r5, r3
 80016cc:	d104      	bne.n	80016d8 <__aeabi_dadd+0x62c>
 80016ce:	4654      	mov	r4, sl
 80016d0:	002a      	movs	r2, r5
 80016d2:	08f9      	lsrs	r1, r7, #3
 80016d4:	0743      	lsls	r3, r0, #29
 80016d6:	4319      	orrs	r1, r3
 80016d8:	0f4b      	lsrs	r3, r1, #29
 80016da:	00c9      	lsls	r1, r1, #3
 80016dc:	075b      	lsls	r3, r3, #29
 80016de:	08c9      	lsrs	r1, r1, #3
 80016e0:	4319      	orrs	r1, r3
 80016e2:	0013      	movs	r3, r2
 80016e4:	e62c      	b.n	8001340 <__aeabi_dadd+0x294>
 80016e6:	4641      	mov	r1, r8
 80016e8:	4329      	orrs	r1, r5
 80016ea:	d000      	beq.n	80016ee <__aeabi_dadd+0x642>
 80016ec:	e5fa      	b.n	80012e4 <__aeabi_dadd+0x238>
 80016ee:	2300      	movs	r3, #0
 80016f0:	000a      	movs	r2, r1
 80016f2:	2400      	movs	r4, #0
 80016f4:	e602      	b.n	80012fc <__aeabi_dadd+0x250>
 80016f6:	076b      	lsls	r3, r5, #29
 80016f8:	08f9      	lsrs	r1, r7, #3
 80016fa:	4319      	orrs	r1, r3
 80016fc:	08eb      	lsrs	r3, r5, #3
 80016fe:	e5fd      	b.n	80012fc <__aeabi_dadd+0x250>
 8001700:	4663      	mov	r3, ip
 8001702:	08f9      	lsrs	r1, r7, #3
 8001704:	075b      	lsls	r3, r3, #29
 8001706:	4319      	orrs	r1, r3
 8001708:	4663      	mov	r3, ip
 800170a:	0004      	movs	r4, r0
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	e617      	b.n	8001340 <__aeabi_dadd+0x294>
 8001710:	003d      	movs	r5, r7
 8001712:	444d      	add	r5, r9
 8001714:	4463      	add	r3, ip
 8001716:	454d      	cmp	r5, r9
 8001718:	4189      	sbcs	r1, r1
 800171a:	4698      	mov	r8, r3
 800171c:	4249      	negs	r1, r1
 800171e:	4488      	add	r8, r1
 8001720:	4643      	mov	r3, r8
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	d400      	bmi.n	8001728 <__aeabi_dadd+0x67c>
 8001726:	e5dd      	b.n	80012e4 <__aeabi_dadd+0x238>
 8001728:	4642      	mov	r2, r8
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <__aeabi_dadd+0x6d0>)
 800172c:	2601      	movs	r6, #1
 800172e:	401a      	ands	r2, r3
 8001730:	4690      	mov	r8, r2
 8001732:	e5d7      	b.n	80012e4 <__aeabi_dadd+0x238>
 8001734:	0010      	movs	r0, r2
 8001736:	001e      	movs	r6, r3
 8001738:	3820      	subs	r0, #32
 800173a:	40c6      	lsrs	r6, r0
 800173c:	2a20      	cmp	r2, #32
 800173e:	d005      	beq.n	800174c <__aeabi_dadd+0x6a0>
 8001740:	2040      	movs	r0, #64	; 0x40
 8001742:	1a82      	subs	r2, r0, r2
 8001744:	4093      	lsls	r3, r2
 8001746:	464a      	mov	r2, r9
 8001748:	431a      	orrs	r2, r3
 800174a:	4691      	mov	r9, r2
 800174c:	464d      	mov	r5, r9
 800174e:	1e6b      	subs	r3, r5, #1
 8001750:	419d      	sbcs	r5, r3
 8001752:	4335      	orrs	r5, r6
 8001754:	e621      	b.n	800139a <__aeabi_dadd+0x2ee>
 8001756:	0002      	movs	r2, r0
 8001758:	2300      	movs	r3, #0
 800175a:	2100      	movs	r1, #0
 800175c:	e540      	b.n	80011e0 <__aeabi_dadd+0x134>
 800175e:	464a      	mov	r2, r9
 8001760:	19d5      	adds	r5, r2, r7
 8001762:	42bd      	cmp	r5, r7
 8001764:	4189      	sbcs	r1, r1
 8001766:	4463      	add	r3, ip
 8001768:	4698      	mov	r8, r3
 800176a:	4249      	negs	r1, r1
 800176c:	4488      	add	r8, r1
 800176e:	e5b3      	b.n	80012d8 <__aeabi_dadd+0x22c>
 8001770:	2100      	movs	r1, #0
 8001772:	4a01      	ldr	r2, [pc, #4]	; (8001778 <__aeabi_dadd+0x6cc>)
 8001774:	000b      	movs	r3, r1
 8001776:	e533      	b.n	80011e0 <__aeabi_dadd+0x134>
 8001778:	000007ff 	.word	0x000007ff
 800177c:	ff7fffff 	.word	0xff7fffff

08001780 <__aeabi_ddiv>:
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	4657      	mov	r7, sl
 8001784:	464e      	mov	r6, r9
 8001786:	4645      	mov	r5, r8
 8001788:	46de      	mov	lr, fp
 800178a:	b5e0      	push	{r5, r6, r7, lr}
 800178c:	4681      	mov	r9, r0
 800178e:	0005      	movs	r5, r0
 8001790:	030c      	lsls	r4, r1, #12
 8001792:	0048      	lsls	r0, r1, #1
 8001794:	4692      	mov	sl, r2
 8001796:	001f      	movs	r7, r3
 8001798:	b085      	sub	sp, #20
 800179a:	0b24      	lsrs	r4, r4, #12
 800179c:	0d40      	lsrs	r0, r0, #21
 800179e:	0fce      	lsrs	r6, r1, #31
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d059      	beq.n	8001858 <__aeabi_ddiv+0xd8>
 80017a4:	4b87      	ldr	r3, [pc, #540]	; (80019c4 <__aeabi_ddiv+0x244>)
 80017a6:	4298      	cmp	r0, r3
 80017a8:	d100      	bne.n	80017ac <__aeabi_ddiv+0x2c>
 80017aa:	e098      	b.n	80018de <__aeabi_ddiv+0x15e>
 80017ac:	0f6b      	lsrs	r3, r5, #29
 80017ae:	00e4      	lsls	r4, r4, #3
 80017b0:	431c      	orrs	r4, r3
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	041b      	lsls	r3, r3, #16
 80017b6:	4323      	orrs	r3, r4
 80017b8:	4698      	mov	r8, r3
 80017ba:	4b83      	ldr	r3, [pc, #524]	; (80019c8 <__aeabi_ddiv+0x248>)
 80017bc:	00ed      	lsls	r5, r5, #3
 80017be:	469b      	mov	fp, r3
 80017c0:	2300      	movs	r3, #0
 80017c2:	4699      	mov	r9, r3
 80017c4:	4483      	add	fp, r0
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	033c      	lsls	r4, r7, #12
 80017ca:	007b      	lsls	r3, r7, #1
 80017cc:	4650      	mov	r0, sl
 80017ce:	0b24      	lsrs	r4, r4, #12
 80017d0:	0d5b      	lsrs	r3, r3, #21
 80017d2:	0fff      	lsrs	r7, r7, #31
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d067      	beq.n	80018a8 <__aeabi_ddiv+0x128>
 80017d8:	4a7a      	ldr	r2, [pc, #488]	; (80019c4 <__aeabi_ddiv+0x244>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d018      	beq.n	8001810 <__aeabi_ddiv+0x90>
 80017de:	497a      	ldr	r1, [pc, #488]	; (80019c8 <__aeabi_ddiv+0x248>)
 80017e0:	0f42      	lsrs	r2, r0, #29
 80017e2:	468c      	mov	ip, r1
 80017e4:	00e4      	lsls	r4, r4, #3
 80017e6:	4659      	mov	r1, fp
 80017e8:	4314      	orrs	r4, r2
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	4463      	add	r3, ip
 80017ee:	0412      	lsls	r2, r2, #16
 80017f0:	1acb      	subs	r3, r1, r3
 80017f2:	4314      	orrs	r4, r2
 80017f4:	469b      	mov	fp, r3
 80017f6:	00c2      	lsls	r2, r0, #3
 80017f8:	2000      	movs	r0, #0
 80017fa:	0033      	movs	r3, r6
 80017fc:	407b      	eors	r3, r7
 80017fe:	469a      	mov	sl, r3
 8001800:	464b      	mov	r3, r9
 8001802:	2b0f      	cmp	r3, #15
 8001804:	d900      	bls.n	8001808 <__aeabi_ddiv+0x88>
 8001806:	e0ef      	b.n	80019e8 <__aeabi_ddiv+0x268>
 8001808:	4970      	ldr	r1, [pc, #448]	; (80019cc <__aeabi_ddiv+0x24c>)
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	58cb      	ldr	r3, [r1, r3]
 800180e:	469f      	mov	pc, r3
 8001810:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <__aeabi_ddiv+0x250>)
 8001812:	4652      	mov	r2, sl
 8001814:	469c      	mov	ip, r3
 8001816:	4322      	orrs	r2, r4
 8001818:	44e3      	add	fp, ip
 800181a:	2a00      	cmp	r2, #0
 800181c:	d000      	beq.n	8001820 <__aeabi_ddiv+0xa0>
 800181e:	e095      	b.n	800194c <__aeabi_ddiv+0x1cc>
 8001820:	4649      	mov	r1, r9
 8001822:	2302      	movs	r3, #2
 8001824:	4319      	orrs	r1, r3
 8001826:	4689      	mov	r9, r1
 8001828:	2400      	movs	r4, #0
 800182a:	2002      	movs	r0, #2
 800182c:	e7e5      	b.n	80017fa <__aeabi_ddiv+0x7a>
 800182e:	2300      	movs	r3, #0
 8001830:	2400      	movs	r4, #0
 8001832:	2500      	movs	r5, #0
 8001834:	4652      	mov	r2, sl
 8001836:	051b      	lsls	r3, r3, #20
 8001838:	4323      	orrs	r3, r4
 800183a:	07d2      	lsls	r2, r2, #31
 800183c:	4313      	orrs	r3, r2
 800183e:	0028      	movs	r0, r5
 8001840:	0019      	movs	r1, r3
 8001842:	b005      	add	sp, #20
 8001844:	bcf0      	pop	{r4, r5, r6, r7}
 8001846:	46bb      	mov	fp, r7
 8001848:	46b2      	mov	sl, r6
 800184a:	46a9      	mov	r9, r5
 800184c:	46a0      	mov	r8, r4
 800184e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001850:	2400      	movs	r4, #0
 8001852:	2500      	movs	r5, #0
 8001854:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <__aeabi_ddiv+0x244>)
 8001856:	e7ed      	b.n	8001834 <__aeabi_ddiv+0xb4>
 8001858:	464b      	mov	r3, r9
 800185a:	4323      	orrs	r3, r4
 800185c:	4698      	mov	r8, r3
 800185e:	d100      	bne.n	8001862 <__aeabi_ddiv+0xe2>
 8001860:	e089      	b.n	8001976 <__aeabi_ddiv+0x1f6>
 8001862:	2c00      	cmp	r4, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_ddiv+0xe8>
 8001866:	e1e0      	b.n	8001c2a <__aeabi_ddiv+0x4aa>
 8001868:	0020      	movs	r0, r4
 800186a:	f001 faf9 	bl	8002e60 <__clzsi2>
 800186e:	0001      	movs	r1, r0
 8001870:	0002      	movs	r2, r0
 8001872:	390b      	subs	r1, #11
 8001874:	231d      	movs	r3, #29
 8001876:	1a5b      	subs	r3, r3, r1
 8001878:	4649      	mov	r1, r9
 800187a:	0010      	movs	r0, r2
 800187c:	40d9      	lsrs	r1, r3
 800187e:	3808      	subs	r0, #8
 8001880:	4084      	lsls	r4, r0
 8001882:	000b      	movs	r3, r1
 8001884:	464d      	mov	r5, r9
 8001886:	4323      	orrs	r3, r4
 8001888:	4698      	mov	r8, r3
 800188a:	4085      	lsls	r5, r0
 800188c:	4851      	ldr	r0, [pc, #324]	; (80019d4 <__aeabi_ddiv+0x254>)
 800188e:	033c      	lsls	r4, r7, #12
 8001890:	1a83      	subs	r3, r0, r2
 8001892:	469b      	mov	fp, r3
 8001894:	2300      	movs	r3, #0
 8001896:	4699      	mov	r9, r3
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	007b      	lsls	r3, r7, #1
 800189c:	4650      	mov	r0, sl
 800189e:	0b24      	lsrs	r4, r4, #12
 80018a0:	0d5b      	lsrs	r3, r3, #21
 80018a2:	0fff      	lsrs	r7, r7, #31
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d197      	bne.n	80017d8 <__aeabi_ddiv+0x58>
 80018a8:	4652      	mov	r2, sl
 80018aa:	4322      	orrs	r2, r4
 80018ac:	d055      	beq.n	800195a <__aeabi_ddiv+0x1da>
 80018ae:	2c00      	cmp	r4, #0
 80018b0:	d100      	bne.n	80018b4 <__aeabi_ddiv+0x134>
 80018b2:	e1ca      	b.n	8001c4a <__aeabi_ddiv+0x4ca>
 80018b4:	0020      	movs	r0, r4
 80018b6:	f001 fad3 	bl	8002e60 <__clzsi2>
 80018ba:	0002      	movs	r2, r0
 80018bc:	3a0b      	subs	r2, #11
 80018be:	231d      	movs	r3, #29
 80018c0:	0001      	movs	r1, r0
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	4652      	mov	r2, sl
 80018c6:	3908      	subs	r1, #8
 80018c8:	40da      	lsrs	r2, r3
 80018ca:	408c      	lsls	r4, r1
 80018cc:	4314      	orrs	r4, r2
 80018ce:	4652      	mov	r2, sl
 80018d0:	408a      	lsls	r2, r1
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <__aeabi_ddiv+0x258>)
 80018d4:	4458      	add	r0, fp
 80018d6:	469b      	mov	fp, r3
 80018d8:	4483      	add	fp, r0
 80018da:	2000      	movs	r0, #0
 80018dc:	e78d      	b.n	80017fa <__aeabi_ddiv+0x7a>
 80018de:	464b      	mov	r3, r9
 80018e0:	4323      	orrs	r3, r4
 80018e2:	4698      	mov	r8, r3
 80018e4:	d140      	bne.n	8001968 <__aeabi_ddiv+0x1e8>
 80018e6:	2308      	movs	r3, #8
 80018e8:	4699      	mov	r9, r3
 80018ea:	3b06      	subs	r3, #6
 80018ec:	2500      	movs	r5, #0
 80018ee:	4683      	mov	fp, r0
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	e769      	b.n	80017c8 <__aeabi_ddiv+0x48>
 80018f4:	46b2      	mov	sl, r6
 80018f6:	9b00      	ldr	r3, [sp, #0]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d0a9      	beq.n	8001850 <__aeabi_ddiv+0xd0>
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d100      	bne.n	8001902 <__aeabi_ddiv+0x182>
 8001900:	e211      	b.n	8001d26 <__aeabi_ddiv+0x5a6>
 8001902:	2b01      	cmp	r3, #1
 8001904:	d093      	beq.n	800182e <__aeabi_ddiv+0xae>
 8001906:	4a35      	ldr	r2, [pc, #212]	; (80019dc <__aeabi_ddiv+0x25c>)
 8001908:	445a      	add	r2, fp
 800190a:	2a00      	cmp	r2, #0
 800190c:	dc00      	bgt.n	8001910 <__aeabi_ddiv+0x190>
 800190e:	e13c      	b.n	8001b8a <__aeabi_ddiv+0x40a>
 8001910:	076b      	lsls	r3, r5, #29
 8001912:	d000      	beq.n	8001916 <__aeabi_ddiv+0x196>
 8001914:	e1a7      	b.n	8001c66 <__aeabi_ddiv+0x4e6>
 8001916:	08ed      	lsrs	r5, r5, #3
 8001918:	4643      	mov	r3, r8
 800191a:	01db      	lsls	r3, r3, #7
 800191c:	d506      	bpl.n	800192c <__aeabi_ddiv+0x1ac>
 800191e:	4642      	mov	r2, r8
 8001920:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <__aeabi_ddiv+0x260>)
 8001922:	401a      	ands	r2, r3
 8001924:	4690      	mov	r8, r2
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	00d2      	lsls	r2, r2, #3
 800192a:	445a      	add	r2, fp
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <__aeabi_ddiv+0x264>)
 800192e:	429a      	cmp	r2, r3
 8001930:	dc8e      	bgt.n	8001850 <__aeabi_ddiv+0xd0>
 8001932:	4643      	mov	r3, r8
 8001934:	0552      	lsls	r2, r2, #21
 8001936:	0758      	lsls	r0, r3, #29
 8001938:	025c      	lsls	r4, r3, #9
 800193a:	4305      	orrs	r5, r0
 800193c:	0b24      	lsrs	r4, r4, #12
 800193e:	0d53      	lsrs	r3, r2, #21
 8001940:	e778      	b.n	8001834 <__aeabi_ddiv+0xb4>
 8001942:	46ba      	mov	sl, r7
 8001944:	46a0      	mov	r8, r4
 8001946:	0015      	movs	r5, r2
 8001948:	9000      	str	r0, [sp, #0]
 800194a:	e7d4      	b.n	80018f6 <__aeabi_ddiv+0x176>
 800194c:	464a      	mov	r2, r9
 800194e:	2303      	movs	r3, #3
 8001950:	431a      	orrs	r2, r3
 8001952:	4691      	mov	r9, r2
 8001954:	2003      	movs	r0, #3
 8001956:	4652      	mov	r2, sl
 8001958:	e74f      	b.n	80017fa <__aeabi_ddiv+0x7a>
 800195a:	4649      	mov	r1, r9
 800195c:	2301      	movs	r3, #1
 800195e:	4319      	orrs	r1, r3
 8001960:	4689      	mov	r9, r1
 8001962:	2400      	movs	r4, #0
 8001964:	2001      	movs	r0, #1
 8001966:	e748      	b.n	80017fa <__aeabi_ddiv+0x7a>
 8001968:	230c      	movs	r3, #12
 800196a:	4699      	mov	r9, r3
 800196c:	3b09      	subs	r3, #9
 800196e:	46a0      	mov	r8, r4
 8001970:	4683      	mov	fp, r0
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	e728      	b.n	80017c8 <__aeabi_ddiv+0x48>
 8001976:	2304      	movs	r3, #4
 8001978:	4699      	mov	r9, r3
 800197a:	2300      	movs	r3, #0
 800197c:	469b      	mov	fp, r3
 800197e:	3301      	adds	r3, #1
 8001980:	2500      	movs	r5, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	e720      	b.n	80017c8 <__aeabi_ddiv+0x48>
 8001986:	2300      	movs	r3, #0
 8001988:	2480      	movs	r4, #128	; 0x80
 800198a:	469a      	mov	sl, r3
 800198c:	2500      	movs	r5, #0
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <__aeabi_ddiv+0x244>)
 8001990:	0324      	lsls	r4, r4, #12
 8001992:	e74f      	b.n	8001834 <__aeabi_ddiv+0xb4>
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	4641      	mov	r1, r8
 8001998:	031b      	lsls	r3, r3, #12
 800199a:	4219      	tst	r1, r3
 800199c:	d008      	beq.n	80019b0 <__aeabi_ddiv+0x230>
 800199e:	421c      	tst	r4, r3
 80019a0:	d106      	bne.n	80019b0 <__aeabi_ddiv+0x230>
 80019a2:	431c      	orrs	r4, r3
 80019a4:	0324      	lsls	r4, r4, #12
 80019a6:	46ba      	mov	sl, r7
 80019a8:	0015      	movs	r5, r2
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <__aeabi_ddiv+0x244>)
 80019ac:	0b24      	lsrs	r4, r4, #12
 80019ae:	e741      	b.n	8001834 <__aeabi_ddiv+0xb4>
 80019b0:	2480      	movs	r4, #128	; 0x80
 80019b2:	4643      	mov	r3, r8
 80019b4:	0324      	lsls	r4, r4, #12
 80019b6:	431c      	orrs	r4, r3
 80019b8:	0324      	lsls	r4, r4, #12
 80019ba:	46b2      	mov	sl, r6
 80019bc:	4b01      	ldr	r3, [pc, #4]	; (80019c4 <__aeabi_ddiv+0x244>)
 80019be:	0b24      	lsrs	r4, r4, #12
 80019c0:	e738      	b.n	8001834 <__aeabi_ddiv+0xb4>
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	000007ff 	.word	0x000007ff
 80019c8:	fffffc01 	.word	0xfffffc01
 80019cc:	08016204 	.word	0x08016204
 80019d0:	fffff801 	.word	0xfffff801
 80019d4:	fffffc0d 	.word	0xfffffc0d
 80019d8:	000003f3 	.word	0x000003f3
 80019dc:	000003ff 	.word	0x000003ff
 80019e0:	feffffff 	.word	0xfeffffff
 80019e4:	000007fe 	.word	0x000007fe
 80019e8:	4544      	cmp	r4, r8
 80019ea:	d200      	bcs.n	80019ee <__aeabi_ddiv+0x26e>
 80019ec:	e116      	b.n	8001c1c <__aeabi_ddiv+0x49c>
 80019ee:	d100      	bne.n	80019f2 <__aeabi_ddiv+0x272>
 80019f0:	e111      	b.n	8001c16 <__aeabi_ddiv+0x496>
 80019f2:	2301      	movs	r3, #1
 80019f4:	425b      	negs	r3, r3
 80019f6:	469c      	mov	ip, r3
 80019f8:	002e      	movs	r6, r5
 80019fa:	4640      	mov	r0, r8
 80019fc:	2500      	movs	r5, #0
 80019fe:	44e3      	add	fp, ip
 8001a00:	0223      	lsls	r3, r4, #8
 8001a02:	0e14      	lsrs	r4, r2, #24
 8001a04:	431c      	orrs	r4, r3
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4699      	mov	r9, r3
 8001a0a:	0423      	lsls	r3, r4, #16
 8001a0c:	0c1f      	lsrs	r7, r3, #16
 8001a0e:	0212      	lsls	r2, r2, #8
 8001a10:	4649      	mov	r1, r9
 8001a12:	9200      	str	r2, [sp, #0]
 8001a14:	9701      	str	r7, [sp, #4]
 8001a16:	f7fe fc19 	bl	800024c <__aeabi_uidivmod>
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	437a      	muls	r2, r7
 8001a1e:	040b      	lsls	r3, r1, #16
 8001a20:	0c31      	lsrs	r1, r6, #16
 8001a22:	4680      	mov	r8, r0
 8001a24:	4319      	orrs	r1, r3
 8001a26:	428a      	cmp	r2, r1
 8001a28:	d90b      	bls.n	8001a42 <__aeabi_ddiv+0x2c2>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	425b      	negs	r3, r3
 8001a2e:	469c      	mov	ip, r3
 8001a30:	1909      	adds	r1, r1, r4
 8001a32:	44e0      	add	r8, ip
 8001a34:	428c      	cmp	r4, r1
 8001a36:	d804      	bhi.n	8001a42 <__aeabi_ddiv+0x2c2>
 8001a38:	428a      	cmp	r2, r1
 8001a3a:	d902      	bls.n	8001a42 <__aeabi_ddiv+0x2c2>
 8001a3c:	1e83      	subs	r3, r0, #2
 8001a3e:	4698      	mov	r8, r3
 8001a40:	1909      	adds	r1, r1, r4
 8001a42:	1a88      	subs	r0, r1, r2
 8001a44:	4649      	mov	r1, r9
 8001a46:	f7fe fc01 	bl	800024c <__aeabi_uidivmod>
 8001a4a:	0409      	lsls	r1, r1, #16
 8001a4c:	468c      	mov	ip, r1
 8001a4e:	0431      	lsls	r1, r6, #16
 8001a50:	4666      	mov	r6, ip
 8001a52:	9a01      	ldr	r2, [sp, #4]
 8001a54:	0c09      	lsrs	r1, r1, #16
 8001a56:	4342      	muls	r2, r0
 8001a58:	0003      	movs	r3, r0
 8001a5a:	4331      	orrs	r1, r6
 8001a5c:	428a      	cmp	r2, r1
 8001a5e:	d904      	bls.n	8001a6a <__aeabi_ddiv+0x2ea>
 8001a60:	1909      	adds	r1, r1, r4
 8001a62:	3b01      	subs	r3, #1
 8001a64:	428c      	cmp	r4, r1
 8001a66:	d800      	bhi.n	8001a6a <__aeabi_ddiv+0x2ea>
 8001a68:	e111      	b.n	8001c8e <__aeabi_ddiv+0x50e>
 8001a6a:	1a89      	subs	r1, r1, r2
 8001a6c:	4642      	mov	r2, r8
 8001a6e:	9e00      	ldr	r6, [sp, #0]
 8001a70:	0412      	lsls	r2, r2, #16
 8001a72:	431a      	orrs	r2, r3
 8001a74:	0c33      	lsrs	r3, r6, #16
 8001a76:	001f      	movs	r7, r3
 8001a78:	0c10      	lsrs	r0, r2, #16
 8001a7a:	4690      	mov	r8, r2
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	0413      	lsls	r3, r2, #16
 8001a80:	0432      	lsls	r2, r6, #16
 8001a82:	0c16      	lsrs	r6, r2, #16
 8001a84:	0032      	movs	r2, r6
 8001a86:	0c1b      	lsrs	r3, r3, #16
 8001a88:	435a      	muls	r2, r3
 8001a8a:	9603      	str	r6, [sp, #12]
 8001a8c:	437b      	muls	r3, r7
 8001a8e:	4346      	muls	r6, r0
 8001a90:	4378      	muls	r0, r7
 8001a92:	0c17      	lsrs	r7, r2, #16
 8001a94:	46bc      	mov	ip, r7
 8001a96:	199b      	adds	r3, r3, r6
 8001a98:	4463      	add	r3, ip
 8001a9a:	429e      	cmp	r6, r3
 8001a9c:	d903      	bls.n	8001aa6 <__aeabi_ddiv+0x326>
 8001a9e:	2680      	movs	r6, #128	; 0x80
 8001aa0:	0276      	lsls	r6, r6, #9
 8001aa2:	46b4      	mov	ip, r6
 8001aa4:	4460      	add	r0, ip
 8001aa6:	0c1e      	lsrs	r6, r3, #16
 8001aa8:	1830      	adds	r0, r6, r0
 8001aaa:	0416      	lsls	r6, r2, #16
 8001aac:	041b      	lsls	r3, r3, #16
 8001aae:	0c36      	lsrs	r6, r6, #16
 8001ab0:	199e      	adds	r6, r3, r6
 8001ab2:	4281      	cmp	r1, r0
 8001ab4:	d200      	bcs.n	8001ab8 <__aeabi_ddiv+0x338>
 8001ab6:	e09c      	b.n	8001bf2 <__aeabi_ddiv+0x472>
 8001ab8:	d100      	bne.n	8001abc <__aeabi_ddiv+0x33c>
 8001aba:	e097      	b.n	8001bec <__aeabi_ddiv+0x46c>
 8001abc:	1bae      	subs	r6, r5, r6
 8001abe:	1a09      	subs	r1, r1, r0
 8001ac0:	42b5      	cmp	r5, r6
 8001ac2:	4180      	sbcs	r0, r0
 8001ac4:	4240      	negs	r0, r0
 8001ac6:	1a08      	subs	r0, r1, r0
 8001ac8:	4284      	cmp	r4, r0
 8001aca:	d100      	bne.n	8001ace <__aeabi_ddiv+0x34e>
 8001acc:	e111      	b.n	8001cf2 <__aeabi_ddiv+0x572>
 8001ace:	4649      	mov	r1, r9
 8001ad0:	f7fe fbbc 	bl	800024c <__aeabi_uidivmod>
 8001ad4:	9a01      	ldr	r2, [sp, #4]
 8001ad6:	040b      	lsls	r3, r1, #16
 8001ad8:	4342      	muls	r2, r0
 8001ada:	0c31      	lsrs	r1, r6, #16
 8001adc:	0005      	movs	r5, r0
 8001ade:	4319      	orrs	r1, r3
 8001ae0:	428a      	cmp	r2, r1
 8001ae2:	d907      	bls.n	8001af4 <__aeabi_ddiv+0x374>
 8001ae4:	1909      	adds	r1, r1, r4
 8001ae6:	3d01      	subs	r5, #1
 8001ae8:	428c      	cmp	r4, r1
 8001aea:	d803      	bhi.n	8001af4 <__aeabi_ddiv+0x374>
 8001aec:	428a      	cmp	r2, r1
 8001aee:	d901      	bls.n	8001af4 <__aeabi_ddiv+0x374>
 8001af0:	1e85      	subs	r5, r0, #2
 8001af2:	1909      	adds	r1, r1, r4
 8001af4:	1a88      	subs	r0, r1, r2
 8001af6:	4649      	mov	r1, r9
 8001af8:	f7fe fba8 	bl	800024c <__aeabi_uidivmod>
 8001afc:	0409      	lsls	r1, r1, #16
 8001afe:	468c      	mov	ip, r1
 8001b00:	0431      	lsls	r1, r6, #16
 8001b02:	4666      	mov	r6, ip
 8001b04:	9a01      	ldr	r2, [sp, #4]
 8001b06:	0c09      	lsrs	r1, r1, #16
 8001b08:	4342      	muls	r2, r0
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	4331      	orrs	r1, r6
 8001b0e:	428a      	cmp	r2, r1
 8001b10:	d907      	bls.n	8001b22 <__aeabi_ddiv+0x3a2>
 8001b12:	1909      	adds	r1, r1, r4
 8001b14:	3b01      	subs	r3, #1
 8001b16:	428c      	cmp	r4, r1
 8001b18:	d803      	bhi.n	8001b22 <__aeabi_ddiv+0x3a2>
 8001b1a:	428a      	cmp	r2, r1
 8001b1c:	d901      	bls.n	8001b22 <__aeabi_ddiv+0x3a2>
 8001b1e:	1e83      	subs	r3, r0, #2
 8001b20:	1909      	adds	r1, r1, r4
 8001b22:	9e03      	ldr	r6, [sp, #12]
 8001b24:	1a89      	subs	r1, r1, r2
 8001b26:	0032      	movs	r2, r6
 8001b28:	042d      	lsls	r5, r5, #16
 8001b2a:	431d      	orrs	r5, r3
 8001b2c:	9f02      	ldr	r7, [sp, #8]
 8001b2e:	042b      	lsls	r3, r5, #16
 8001b30:	0c1b      	lsrs	r3, r3, #16
 8001b32:	435a      	muls	r2, r3
 8001b34:	437b      	muls	r3, r7
 8001b36:	469c      	mov	ip, r3
 8001b38:	0c28      	lsrs	r0, r5, #16
 8001b3a:	4346      	muls	r6, r0
 8001b3c:	0c13      	lsrs	r3, r2, #16
 8001b3e:	44b4      	add	ip, r6
 8001b40:	4463      	add	r3, ip
 8001b42:	4378      	muls	r0, r7
 8001b44:	429e      	cmp	r6, r3
 8001b46:	d903      	bls.n	8001b50 <__aeabi_ddiv+0x3d0>
 8001b48:	2680      	movs	r6, #128	; 0x80
 8001b4a:	0276      	lsls	r6, r6, #9
 8001b4c:	46b4      	mov	ip, r6
 8001b4e:	4460      	add	r0, ip
 8001b50:	0c1e      	lsrs	r6, r3, #16
 8001b52:	0412      	lsls	r2, r2, #16
 8001b54:	041b      	lsls	r3, r3, #16
 8001b56:	0c12      	lsrs	r2, r2, #16
 8001b58:	1830      	adds	r0, r6, r0
 8001b5a:	189b      	adds	r3, r3, r2
 8001b5c:	4281      	cmp	r1, r0
 8001b5e:	d306      	bcc.n	8001b6e <__aeabi_ddiv+0x3ee>
 8001b60:	d002      	beq.n	8001b68 <__aeabi_ddiv+0x3e8>
 8001b62:	2301      	movs	r3, #1
 8001b64:	431d      	orrs	r5, r3
 8001b66:	e6ce      	b.n	8001906 <__aeabi_ddiv+0x186>
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_ddiv+0x3ee>
 8001b6c:	e6cb      	b.n	8001906 <__aeabi_ddiv+0x186>
 8001b6e:	1861      	adds	r1, r4, r1
 8001b70:	1e6e      	subs	r6, r5, #1
 8001b72:	42a1      	cmp	r1, r4
 8001b74:	d200      	bcs.n	8001b78 <__aeabi_ddiv+0x3f8>
 8001b76:	e0a4      	b.n	8001cc2 <__aeabi_ddiv+0x542>
 8001b78:	4281      	cmp	r1, r0
 8001b7a:	d200      	bcs.n	8001b7e <__aeabi_ddiv+0x3fe>
 8001b7c:	e0c9      	b.n	8001d12 <__aeabi_ddiv+0x592>
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0x402>
 8001b80:	e0d9      	b.n	8001d36 <__aeabi_ddiv+0x5b6>
 8001b82:	0035      	movs	r5, r6
 8001b84:	e7ed      	b.n	8001b62 <__aeabi_ddiv+0x3e2>
 8001b86:	2501      	movs	r5, #1
 8001b88:	426d      	negs	r5, r5
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	1a89      	subs	r1, r1, r2
 8001b8e:	2938      	cmp	r1, #56	; 0x38
 8001b90:	dd00      	ble.n	8001b94 <__aeabi_ddiv+0x414>
 8001b92:	e64c      	b.n	800182e <__aeabi_ddiv+0xae>
 8001b94:	291f      	cmp	r1, #31
 8001b96:	dc00      	bgt.n	8001b9a <__aeabi_ddiv+0x41a>
 8001b98:	e07f      	b.n	8001c9a <__aeabi_ddiv+0x51a>
 8001b9a:	231f      	movs	r3, #31
 8001b9c:	425b      	negs	r3, r3
 8001b9e:	1a9a      	subs	r2, r3, r2
 8001ba0:	4643      	mov	r3, r8
 8001ba2:	40d3      	lsrs	r3, r2
 8001ba4:	2920      	cmp	r1, #32
 8001ba6:	d004      	beq.n	8001bb2 <__aeabi_ddiv+0x432>
 8001ba8:	4644      	mov	r4, r8
 8001baa:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <__aeabi_ddiv+0x5c0>)
 8001bac:	445a      	add	r2, fp
 8001bae:	4094      	lsls	r4, r2
 8001bb0:	4325      	orrs	r5, r4
 8001bb2:	1e6a      	subs	r2, r5, #1
 8001bb4:	4195      	sbcs	r5, r2
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	432b      	orrs	r3, r5
 8001bba:	0015      	movs	r5, r2
 8001bbc:	2400      	movs	r4, #0
 8001bbe:	401d      	ands	r5, r3
 8001bc0:	421a      	tst	r2, r3
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_ddiv+0x446>
 8001bc4:	e0a1      	b.n	8001d0a <__aeabi_ddiv+0x58a>
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	2400      	movs	r4, #0
 8001bca:	401a      	ands	r2, r3
 8001bcc:	2a04      	cmp	r2, #4
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_ddiv+0x452>
 8001bd0:	e098      	b.n	8001d04 <__aeabi_ddiv+0x584>
 8001bd2:	1d1a      	adds	r2, r3, #4
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	419b      	sbcs	r3, r3
 8001bd8:	425b      	negs	r3, r3
 8001bda:	18e4      	adds	r4, r4, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	0222      	lsls	r2, r4, #8
 8001be0:	d400      	bmi.n	8001be4 <__aeabi_ddiv+0x464>
 8001be2:	e08f      	b.n	8001d04 <__aeabi_ddiv+0x584>
 8001be4:	2301      	movs	r3, #1
 8001be6:	2400      	movs	r4, #0
 8001be8:	2500      	movs	r5, #0
 8001bea:	e623      	b.n	8001834 <__aeabi_ddiv+0xb4>
 8001bec:	42b5      	cmp	r5, r6
 8001bee:	d300      	bcc.n	8001bf2 <__aeabi_ddiv+0x472>
 8001bf0:	e764      	b.n	8001abc <__aeabi_ddiv+0x33c>
 8001bf2:	4643      	mov	r3, r8
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	9b00      	ldr	r3, [sp, #0]
 8001bf8:	469c      	mov	ip, r3
 8001bfa:	4465      	add	r5, ip
 8001bfc:	001f      	movs	r7, r3
 8001bfe:	429d      	cmp	r5, r3
 8001c00:	419b      	sbcs	r3, r3
 8001c02:	425b      	negs	r3, r3
 8001c04:	191b      	adds	r3, r3, r4
 8001c06:	18c9      	adds	r1, r1, r3
 8001c08:	428c      	cmp	r4, r1
 8001c0a:	d23a      	bcs.n	8001c82 <__aeabi_ddiv+0x502>
 8001c0c:	4288      	cmp	r0, r1
 8001c0e:	d863      	bhi.n	8001cd8 <__aeabi_ddiv+0x558>
 8001c10:	d060      	beq.n	8001cd4 <__aeabi_ddiv+0x554>
 8001c12:	4690      	mov	r8, r2
 8001c14:	e752      	b.n	8001abc <__aeabi_ddiv+0x33c>
 8001c16:	42aa      	cmp	r2, r5
 8001c18:	d900      	bls.n	8001c1c <__aeabi_ddiv+0x49c>
 8001c1a:	e6ea      	b.n	80019f2 <__aeabi_ddiv+0x272>
 8001c1c:	4643      	mov	r3, r8
 8001c1e:	07de      	lsls	r6, r3, #31
 8001c20:	0858      	lsrs	r0, r3, #1
 8001c22:	086b      	lsrs	r3, r5, #1
 8001c24:	431e      	orrs	r6, r3
 8001c26:	07ed      	lsls	r5, r5, #31
 8001c28:	e6ea      	b.n	8001a00 <__aeabi_ddiv+0x280>
 8001c2a:	4648      	mov	r0, r9
 8001c2c:	f001 f918 	bl	8002e60 <__clzsi2>
 8001c30:	0001      	movs	r1, r0
 8001c32:	0002      	movs	r2, r0
 8001c34:	3115      	adds	r1, #21
 8001c36:	3220      	adds	r2, #32
 8001c38:	291c      	cmp	r1, #28
 8001c3a:	dc00      	bgt.n	8001c3e <__aeabi_ddiv+0x4be>
 8001c3c:	e61a      	b.n	8001874 <__aeabi_ddiv+0xf4>
 8001c3e:	464b      	mov	r3, r9
 8001c40:	3808      	subs	r0, #8
 8001c42:	4083      	lsls	r3, r0
 8001c44:	2500      	movs	r5, #0
 8001c46:	4698      	mov	r8, r3
 8001c48:	e620      	b.n	800188c <__aeabi_ddiv+0x10c>
 8001c4a:	f001 f909 	bl	8002e60 <__clzsi2>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	001a      	movs	r2, r3
 8001c52:	3215      	adds	r2, #21
 8001c54:	3020      	adds	r0, #32
 8001c56:	2a1c      	cmp	r2, #28
 8001c58:	dc00      	bgt.n	8001c5c <__aeabi_ddiv+0x4dc>
 8001c5a:	e630      	b.n	80018be <__aeabi_ddiv+0x13e>
 8001c5c:	4654      	mov	r4, sl
 8001c5e:	3b08      	subs	r3, #8
 8001c60:	2200      	movs	r2, #0
 8001c62:	409c      	lsls	r4, r3
 8001c64:	e635      	b.n	80018d2 <__aeabi_ddiv+0x152>
 8001c66:	230f      	movs	r3, #15
 8001c68:	402b      	ands	r3, r5
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_ddiv+0x4f0>
 8001c6e:	e652      	b.n	8001916 <__aeabi_ddiv+0x196>
 8001c70:	2305      	movs	r3, #5
 8001c72:	425b      	negs	r3, r3
 8001c74:	42ab      	cmp	r3, r5
 8001c76:	419b      	sbcs	r3, r3
 8001c78:	3504      	adds	r5, #4
 8001c7a:	425b      	negs	r3, r3
 8001c7c:	08ed      	lsrs	r5, r5, #3
 8001c7e:	4498      	add	r8, r3
 8001c80:	e64a      	b.n	8001918 <__aeabi_ddiv+0x198>
 8001c82:	428c      	cmp	r4, r1
 8001c84:	d1c5      	bne.n	8001c12 <__aeabi_ddiv+0x492>
 8001c86:	42af      	cmp	r7, r5
 8001c88:	d9c0      	bls.n	8001c0c <__aeabi_ddiv+0x48c>
 8001c8a:	4690      	mov	r8, r2
 8001c8c:	e716      	b.n	8001abc <__aeabi_ddiv+0x33c>
 8001c8e:	428a      	cmp	r2, r1
 8001c90:	d800      	bhi.n	8001c94 <__aeabi_ddiv+0x514>
 8001c92:	e6ea      	b.n	8001a6a <__aeabi_ddiv+0x2ea>
 8001c94:	1e83      	subs	r3, r0, #2
 8001c96:	1909      	adds	r1, r1, r4
 8001c98:	e6e7      	b.n	8001a6a <__aeabi_ddiv+0x2ea>
 8001c9a:	4a2a      	ldr	r2, [pc, #168]	; (8001d44 <__aeabi_ddiv+0x5c4>)
 8001c9c:	0028      	movs	r0, r5
 8001c9e:	445a      	add	r2, fp
 8001ca0:	4643      	mov	r3, r8
 8001ca2:	4095      	lsls	r5, r2
 8001ca4:	4093      	lsls	r3, r2
 8001ca6:	40c8      	lsrs	r0, r1
 8001ca8:	1e6a      	subs	r2, r5, #1
 8001caa:	4195      	sbcs	r5, r2
 8001cac:	4644      	mov	r4, r8
 8001cae:	4303      	orrs	r3, r0
 8001cb0:	432b      	orrs	r3, r5
 8001cb2:	40cc      	lsrs	r4, r1
 8001cb4:	075a      	lsls	r2, r3, #29
 8001cb6:	d092      	beq.n	8001bde <__aeabi_ddiv+0x45e>
 8001cb8:	220f      	movs	r2, #15
 8001cba:	401a      	ands	r2, r3
 8001cbc:	2a04      	cmp	r2, #4
 8001cbe:	d188      	bne.n	8001bd2 <__aeabi_ddiv+0x452>
 8001cc0:	e78d      	b.n	8001bde <__aeabi_ddiv+0x45e>
 8001cc2:	0035      	movs	r5, r6
 8001cc4:	4281      	cmp	r1, r0
 8001cc6:	d000      	beq.n	8001cca <__aeabi_ddiv+0x54a>
 8001cc8:	e74b      	b.n	8001b62 <__aeabi_ddiv+0x3e2>
 8001cca:	9a00      	ldr	r2, [sp, #0]
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d000      	beq.n	8001cd2 <__aeabi_ddiv+0x552>
 8001cd0:	e747      	b.n	8001b62 <__aeabi_ddiv+0x3e2>
 8001cd2:	e618      	b.n	8001906 <__aeabi_ddiv+0x186>
 8001cd4:	42ae      	cmp	r6, r5
 8001cd6:	d99c      	bls.n	8001c12 <__aeabi_ddiv+0x492>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	425b      	negs	r3, r3
 8001cdc:	469c      	mov	ip, r3
 8001cde:	9b00      	ldr	r3, [sp, #0]
 8001ce0:	44e0      	add	r8, ip
 8001ce2:	469c      	mov	ip, r3
 8001ce4:	4465      	add	r5, ip
 8001ce6:	429d      	cmp	r5, r3
 8001ce8:	419b      	sbcs	r3, r3
 8001cea:	425b      	negs	r3, r3
 8001cec:	191b      	adds	r3, r3, r4
 8001cee:	18c9      	adds	r1, r1, r3
 8001cf0:	e6e4      	b.n	8001abc <__aeabi_ddiv+0x33c>
 8001cf2:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <__aeabi_ddiv+0x5c8>)
 8001cf4:	445a      	add	r2, fp
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	dc00      	bgt.n	8001cfc <__aeabi_ddiv+0x57c>
 8001cfa:	e744      	b.n	8001b86 <__aeabi_ddiv+0x406>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	2500      	movs	r5, #0
 8001d00:	4498      	add	r8, r3
 8001d02:	e609      	b.n	8001918 <__aeabi_ddiv+0x198>
 8001d04:	0765      	lsls	r5, r4, #29
 8001d06:	0264      	lsls	r4, r4, #9
 8001d08:	0b24      	lsrs	r4, r4, #12
 8001d0a:	08db      	lsrs	r3, r3, #3
 8001d0c:	431d      	orrs	r5, r3
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e590      	b.n	8001834 <__aeabi_ddiv+0xb4>
 8001d12:	9e00      	ldr	r6, [sp, #0]
 8001d14:	3d02      	subs	r5, #2
 8001d16:	0072      	lsls	r2, r6, #1
 8001d18:	42b2      	cmp	r2, r6
 8001d1a:	41bf      	sbcs	r7, r7
 8001d1c:	427f      	negs	r7, r7
 8001d1e:	193c      	adds	r4, r7, r4
 8001d20:	1909      	adds	r1, r1, r4
 8001d22:	9200      	str	r2, [sp, #0]
 8001d24:	e7ce      	b.n	8001cc4 <__aeabi_ddiv+0x544>
 8001d26:	2480      	movs	r4, #128	; 0x80
 8001d28:	4643      	mov	r3, r8
 8001d2a:	0324      	lsls	r4, r4, #12
 8001d2c:	431c      	orrs	r4, r3
 8001d2e:	0324      	lsls	r4, r4, #12
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <__aeabi_ddiv+0x5cc>)
 8001d32:	0b24      	lsrs	r4, r4, #12
 8001d34:	e57e      	b.n	8001834 <__aeabi_ddiv+0xb4>
 8001d36:	9a00      	ldr	r2, [sp, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d3ea      	bcc.n	8001d12 <__aeabi_ddiv+0x592>
 8001d3c:	0035      	movs	r5, r6
 8001d3e:	e7c4      	b.n	8001cca <__aeabi_ddiv+0x54a>
 8001d40:	0000043e 	.word	0x0000043e
 8001d44:	0000041e 	.word	0x0000041e
 8001d48:	000003ff 	.word	0x000003ff
 8001d4c:	000007ff 	.word	0x000007ff

08001d50 <__eqdf2>:
 8001d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d52:	464f      	mov	r7, r9
 8001d54:	4646      	mov	r6, r8
 8001d56:	46d6      	mov	lr, sl
 8001d58:	4694      	mov	ip, r2
 8001d5a:	4691      	mov	r9, r2
 8001d5c:	031a      	lsls	r2, r3, #12
 8001d5e:	0b12      	lsrs	r2, r2, #12
 8001d60:	4d18      	ldr	r5, [pc, #96]	; (8001dc4 <__eqdf2+0x74>)
 8001d62:	b5c0      	push	{r6, r7, lr}
 8001d64:	004c      	lsls	r4, r1, #1
 8001d66:	030f      	lsls	r7, r1, #12
 8001d68:	4692      	mov	sl, r2
 8001d6a:	005a      	lsls	r2, r3, #1
 8001d6c:	0006      	movs	r6, r0
 8001d6e:	4680      	mov	r8, r0
 8001d70:	0b3f      	lsrs	r7, r7, #12
 8001d72:	2001      	movs	r0, #1
 8001d74:	0d64      	lsrs	r4, r4, #21
 8001d76:	0fc9      	lsrs	r1, r1, #31
 8001d78:	0d52      	lsrs	r2, r2, #21
 8001d7a:	0fdb      	lsrs	r3, r3, #31
 8001d7c:	42ac      	cmp	r4, r5
 8001d7e:	d00a      	beq.n	8001d96 <__eqdf2+0x46>
 8001d80:	42aa      	cmp	r2, r5
 8001d82:	d003      	beq.n	8001d8c <__eqdf2+0x3c>
 8001d84:	4294      	cmp	r4, r2
 8001d86:	d101      	bne.n	8001d8c <__eqdf2+0x3c>
 8001d88:	4557      	cmp	r7, sl
 8001d8a:	d00d      	beq.n	8001da8 <__eqdf2+0x58>
 8001d8c:	bce0      	pop	{r5, r6, r7}
 8001d8e:	46ba      	mov	sl, r7
 8001d90:	46b1      	mov	r9, r6
 8001d92:	46a8      	mov	r8, r5
 8001d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d96:	003d      	movs	r5, r7
 8001d98:	4335      	orrs	r5, r6
 8001d9a:	d1f7      	bne.n	8001d8c <__eqdf2+0x3c>
 8001d9c:	42a2      	cmp	r2, r4
 8001d9e:	d1f5      	bne.n	8001d8c <__eqdf2+0x3c>
 8001da0:	4652      	mov	r2, sl
 8001da2:	4665      	mov	r5, ip
 8001da4:	432a      	orrs	r2, r5
 8001da6:	d1f1      	bne.n	8001d8c <__eqdf2+0x3c>
 8001da8:	2001      	movs	r0, #1
 8001daa:	45c8      	cmp	r8, r9
 8001dac:	d1ee      	bne.n	8001d8c <__eqdf2+0x3c>
 8001dae:	4299      	cmp	r1, r3
 8001db0:	d006      	beq.n	8001dc0 <__eqdf2+0x70>
 8001db2:	2c00      	cmp	r4, #0
 8001db4:	d1ea      	bne.n	8001d8c <__eqdf2+0x3c>
 8001db6:	433e      	orrs	r6, r7
 8001db8:	0030      	movs	r0, r6
 8001dba:	1e46      	subs	r6, r0, #1
 8001dbc:	41b0      	sbcs	r0, r6
 8001dbe:	e7e5      	b.n	8001d8c <__eqdf2+0x3c>
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	e7e3      	b.n	8001d8c <__eqdf2+0x3c>
 8001dc4:	000007ff 	.word	0x000007ff

08001dc8 <__gedf2>:
 8001dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dca:	464e      	mov	r6, r9
 8001dcc:	4645      	mov	r5, r8
 8001dce:	4657      	mov	r7, sl
 8001dd0:	46de      	mov	lr, fp
 8001dd2:	0004      	movs	r4, r0
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	b5e0      	push	{r5, r6, r7, lr}
 8001dd8:	0016      	movs	r6, r2
 8001dda:	031b      	lsls	r3, r3, #12
 8001ddc:	0b1b      	lsrs	r3, r3, #12
 8001dde:	4d32      	ldr	r5, [pc, #200]	; (8001ea8 <__gedf2+0xe0>)
 8001de0:	030f      	lsls	r7, r1, #12
 8001de2:	004a      	lsls	r2, r1, #1
 8001de4:	4699      	mov	r9, r3
 8001de6:	0043      	lsls	r3, r0, #1
 8001de8:	46a4      	mov	ip, r4
 8001dea:	46b0      	mov	r8, r6
 8001dec:	0b3f      	lsrs	r7, r7, #12
 8001dee:	0d52      	lsrs	r2, r2, #21
 8001df0:	0fc9      	lsrs	r1, r1, #31
 8001df2:	0d5b      	lsrs	r3, r3, #21
 8001df4:	0fc0      	lsrs	r0, r0, #31
 8001df6:	42aa      	cmp	r2, r5
 8001df8:	d029      	beq.n	8001e4e <__gedf2+0x86>
 8001dfa:	42ab      	cmp	r3, r5
 8001dfc:	d018      	beq.n	8001e30 <__gedf2+0x68>
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d12a      	bne.n	8001e58 <__gedf2+0x90>
 8001e02:	433c      	orrs	r4, r7
 8001e04:	46a3      	mov	fp, r4
 8001e06:	4265      	negs	r5, r4
 8001e08:	4165      	adcs	r5, r4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <__gedf2+0x4c>
 8001e0e:	464c      	mov	r4, r9
 8001e10:	4326      	orrs	r6, r4
 8001e12:	d027      	beq.n	8001e64 <__gedf2+0x9c>
 8001e14:	2d00      	cmp	r5, #0
 8001e16:	d115      	bne.n	8001e44 <__gedf2+0x7c>
 8001e18:	4281      	cmp	r1, r0
 8001e1a:	d028      	beq.n	8001e6e <__gedf2+0xa6>
 8001e1c:	2002      	movs	r0, #2
 8001e1e:	3901      	subs	r1, #1
 8001e20:	4008      	ands	r0, r1
 8001e22:	3801      	subs	r0, #1
 8001e24:	bcf0      	pop	{r4, r5, r6, r7}
 8001e26:	46bb      	mov	fp, r7
 8001e28:	46b2      	mov	sl, r6
 8001e2a:	46a9      	mov	r9, r5
 8001e2c:	46a0      	mov	r8, r4
 8001e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e30:	464d      	mov	r5, r9
 8001e32:	432e      	orrs	r6, r5
 8001e34:	d12f      	bne.n	8001e96 <__gedf2+0xce>
 8001e36:	2a00      	cmp	r2, #0
 8001e38:	d1ee      	bne.n	8001e18 <__gedf2+0x50>
 8001e3a:	433c      	orrs	r4, r7
 8001e3c:	4265      	negs	r5, r4
 8001e3e:	4165      	adcs	r5, r4
 8001e40:	2d00      	cmp	r5, #0
 8001e42:	d0e9      	beq.n	8001e18 <__gedf2+0x50>
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d1ed      	bne.n	8001e24 <__gedf2+0x5c>
 8001e48:	2001      	movs	r0, #1
 8001e4a:	4240      	negs	r0, r0
 8001e4c:	e7ea      	b.n	8001e24 <__gedf2+0x5c>
 8001e4e:	003d      	movs	r5, r7
 8001e50:	4325      	orrs	r5, r4
 8001e52:	d120      	bne.n	8001e96 <__gedf2+0xce>
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d0eb      	beq.n	8001e30 <__gedf2+0x68>
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1dd      	bne.n	8001e18 <__gedf2+0x50>
 8001e5c:	464c      	mov	r4, r9
 8001e5e:	4326      	orrs	r6, r4
 8001e60:	d1da      	bne.n	8001e18 <__gedf2+0x50>
 8001e62:	e7db      	b.n	8001e1c <__gedf2+0x54>
 8001e64:	465b      	mov	r3, fp
 8001e66:	2000      	movs	r0, #0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0db      	beq.n	8001e24 <__gedf2+0x5c>
 8001e6c:	e7d6      	b.n	8001e1c <__gedf2+0x54>
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	dc0a      	bgt.n	8001e88 <__gedf2+0xc0>
 8001e72:	dbe7      	blt.n	8001e44 <__gedf2+0x7c>
 8001e74:	454f      	cmp	r7, r9
 8001e76:	d8d1      	bhi.n	8001e1c <__gedf2+0x54>
 8001e78:	d010      	beq.n	8001e9c <__gedf2+0xd4>
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	454f      	cmp	r7, r9
 8001e7e:	d2d1      	bcs.n	8001e24 <__gedf2+0x5c>
 8001e80:	2900      	cmp	r1, #0
 8001e82:	d0e1      	beq.n	8001e48 <__gedf2+0x80>
 8001e84:	0008      	movs	r0, r1
 8001e86:	e7cd      	b.n	8001e24 <__gedf2+0x5c>
 8001e88:	4243      	negs	r3, r0
 8001e8a:	4158      	adcs	r0, r3
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	4240      	negs	r0, r0
 8001e90:	4018      	ands	r0, r3
 8001e92:	3801      	subs	r0, #1
 8001e94:	e7c6      	b.n	8001e24 <__gedf2+0x5c>
 8001e96:	2002      	movs	r0, #2
 8001e98:	4240      	negs	r0, r0
 8001e9a:	e7c3      	b.n	8001e24 <__gedf2+0x5c>
 8001e9c:	45c4      	cmp	ip, r8
 8001e9e:	d8bd      	bhi.n	8001e1c <__gedf2+0x54>
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	45c4      	cmp	ip, r8
 8001ea4:	d2be      	bcs.n	8001e24 <__gedf2+0x5c>
 8001ea6:	e7eb      	b.n	8001e80 <__gedf2+0xb8>
 8001ea8:	000007ff 	.word	0x000007ff

08001eac <__ledf2>:
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eae:	464e      	mov	r6, r9
 8001eb0:	4645      	mov	r5, r8
 8001eb2:	4657      	mov	r7, sl
 8001eb4:	46de      	mov	lr, fp
 8001eb6:	0004      	movs	r4, r0
 8001eb8:	0018      	movs	r0, r3
 8001eba:	b5e0      	push	{r5, r6, r7, lr}
 8001ebc:	0016      	movs	r6, r2
 8001ebe:	031b      	lsls	r3, r3, #12
 8001ec0:	0b1b      	lsrs	r3, r3, #12
 8001ec2:	4d31      	ldr	r5, [pc, #196]	; (8001f88 <__ledf2+0xdc>)
 8001ec4:	030f      	lsls	r7, r1, #12
 8001ec6:	004a      	lsls	r2, r1, #1
 8001ec8:	4699      	mov	r9, r3
 8001eca:	0043      	lsls	r3, r0, #1
 8001ecc:	46a4      	mov	ip, r4
 8001ece:	46b0      	mov	r8, r6
 8001ed0:	0b3f      	lsrs	r7, r7, #12
 8001ed2:	0d52      	lsrs	r2, r2, #21
 8001ed4:	0fc9      	lsrs	r1, r1, #31
 8001ed6:	0d5b      	lsrs	r3, r3, #21
 8001ed8:	0fc0      	lsrs	r0, r0, #31
 8001eda:	42aa      	cmp	r2, r5
 8001edc:	d011      	beq.n	8001f02 <__ledf2+0x56>
 8001ede:	42ab      	cmp	r3, r5
 8001ee0:	d014      	beq.n	8001f0c <__ledf2+0x60>
 8001ee2:	2a00      	cmp	r2, #0
 8001ee4:	d12f      	bne.n	8001f46 <__ledf2+0x9a>
 8001ee6:	433c      	orrs	r4, r7
 8001ee8:	46a3      	mov	fp, r4
 8001eea:	4265      	negs	r5, r4
 8001eec:	4165      	adcs	r5, r4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d114      	bne.n	8001f1c <__ledf2+0x70>
 8001ef2:	464c      	mov	r4, r9
 8001ef4:	4326      	orrs	r6, r4
 8001ef6:	d111      	bne.n	8001f1c <__ledf2+0x70>
 8001ef8:	465b      	mov	r3, fp
 8001efa:	2000      	movs	r0, #0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d017      	beq.n	8001f30 <__ledf2+0x84>
 8001f00:	e010      	b.n	8001f24 <__ledf2+0x78>
 8001f02:	003d      	movs	r5, r7
 8001f04:	4325      	orrs	r5, r4
 8001f06:	d112      	bne.n	8001f2e <__ledf2+0x82>
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d11c      	bne.n	8001f46 <__ledf2+0x9a>
 8001f0c:	464d      	mov	r5, r9
 8001f0e:	432e      	orrs	r6, r5
 8001f10:	d10d      	bne.n	8001f2e <__ledf2+0x82>
 8001f12:	2a00      	cmp	r2, #0
 8001f14:	d104      	bne.n	8001f20 <__ledf2+0x74>
 8001f16:	433c      	orrs	r4, r7
 8001f18:	4265      	negs	r5, r4
 8001f1a:	4165      	adcs	r5, r4
 8001f1c:	2d00      	cmp	r5, #0
 8001f1e:	d10d      	bne.n	8001f3c <__ledf2+0x90>
 8001f20:	4281      	cmp	r1, r0
 8001f22:	d016      	beq.n	8001f52 <__ledf2+0xa6>
 8001f24:	2002      	movs	r0, #2
 8001f26:	3901      	subs	r1, #1
 8001f28:	4008      	ands	r0, r1
 8001f2a:	3801      	subs	r0, #1
 8001f2c:	e000      	b.n	8001f30 <__ledf2+0x84>
 8001f2e:	2002      	movs	r0, #2
 8001f30:	bcf0      	pop	{r4, r5, r6, r7}
 8001f32:	46bb      	mov	fp, r7
 8001f34:	46b2      	mov	sl, r6
 8001f36:	46a9      	mov	r9, r5
 8001f38:	46a0      	mov	r8, r4
 8001f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d1f7      	bne.n	8001f30 <__ledf2+0x84>
 8001f40:	2001      	movs	r0, #1
 8001f42:	4240      	negs	r0, r0
 8001f44:	e7f4      	b.n	8001f30 <__ledf2+0x84>
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1ea      	bne.n	8001f20 <__ledf2+0x74>
 8001f4a:	464c      	mov	r4, r9
 8001f4c:	4326      	orrs	r6, r4
 8001f4e:	d1e7      	bne.n	8001f20 <__ledf2+0x74>
 8001f50:	e7e8      	b.n	8001f24 <__ledf2+0x78>
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dd06      	ble.n	8001f64 <__ledf2+0xb8>
 8001f56:	4243      	negs	r3, r0
 8001f58:	4158      	adcs	r0, r3
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	4240      	negs	r0, r0
 8001f5e:	4018      	ands	r0, r3
 8001f60:	3801      	subs	r0, #1
 8001f62:	e7e5      	b.n	8001f30 <__ledf2+0x84>
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbe9      	blt.n	8001f3c <__ledf2+0x90>
 8001f68:	454f      	cmp	r7, r9
 8001f6a:	d8db      	bhi.n	8001f24 <__ledf2+0x78>
 8001f6c:	d006      	beq.n	8001f7c <__ledf2+0xd0>
 8001f6e:	2000      	movs	r0, #0
 8001f70:	454f      	cmp	r7, r9
 8001f72:	d2dd      	bcs.n	8001f30 <__ledf2+0x84>
 8001f74:	2900      	cmp	r1, #0
 8001f76:	d0e3      	beq.n	8001f40 <__ledf2+0x94>
 8001f78:	0008      	movs	r0, r1
 8001f7a:	e7d9      	b.n	8001f30 <__ledf2+0x84>
 8001f7c:	45c4      	cmp	ip, r8
 8001f7e:	d8d1      	bhi.n	8001f24 <__ledf2+0x78>
 8001f80:	2000      	movs	r0, #0
 8001f82:	45c4      	cmp	ip, r8
 8001f84:	d2d4      	bcs.n	8001f30 <__ledf2+0x84>
 8001f86:	e7f5      	b.n	8001f74 <__ledf2+0xc8>
 8001f88:	000007ff 	.word	0x000007ff

08001f8c <__aeabi_dmul>:
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	4657      	mov	r7, sl
 8001f90:	464e      	mov	r6, r9
 8001f92:	4645      	mov	r5, r8
 8001f94:	46de      	mov	lr, fp
 8001f96:	b5e0      	push	{r5, r6, r7, lr}
 8001f98:	4698      	mov	r8, r3
 8001f9a:	030c      	lsls	r4, r1, #12
 8001f9c:	004b      	lsls	r3, r1, #1
 8001f9e:	0006      	movs	r6, r0
 8001fa0:	4692      	mov	sl, r2
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	0b24      	lsrs	r4, r4, #12
 8001fa6:	0d5b      	lsrs	r3, r3, #21
 8001fa8:	0fcf      	lsrs	r7, r1, #31
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d06c      	beq.n	8002088 <__aeabi_dmul+0xfc>
 8001fae:	4add      	ldr	r2, [pc, #884]	; (8002324 <__aeabi_dmul+0x398>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dmul+0x2a>
 8001fb4:	e086      	b.n	80020c4 <__aeabi_dmul+0x138>
 8001fb6:	0f42      	lsrs	r2, r0, #29
 8001fb8:	00e4      	lsls	r4, r4, #3
 8001fba:	4314      	orrs	r4, r2
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	0412      	lsls	r2, r2, #16
 8001fc0:	4314      	orrs	r4, r2
 8001fc2:	4ad9      	ldr	r2, [pc, #868]	; (8002328 <__aeabi_dmul+0x39c>)
 8001fc4:	00c5      	lsls	r5, r0, #3
 8001fc6:	4694      	mov	ip, r2
 8001fc8:	4463      	add	r3, ip
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	4699      	mov	r9, r3
 8001fd0:	469b      	mov	fp, r3
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	4642      	mov	r2, r8
 8001fd6:	031e      	lsls	r6, r3, #12
 8001fd8:	0fd2      	lsrs	r2, r2, #31
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4650      	mov	r0, sl
 8001fde:	4690      	mov	r8, r2
 8001fe0:	0b36      	lsrs	r6, r6, #12
 8001fe2:	0d5b      	lsrs	r3, r3, #21
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dmul+0x5c>
 8001fe6:	e078      	b.n	80020da <__aeabi_dmul+0x14e>
 8001fe8:	4ace      	ldr	r2, [pc, #824]	; (8002324 <__aeabi_dmul+0x398>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01d      	beq.n	800202a <__aeabi_dmul+0x9e>
 8001fee:	49ce      	ldr	r1, [pc, #824]	; (8002328 <__aeabi_dmul+0x39c>)
 8001ff0:	0f42      	lsrs	r2, r0, #29
 8001ff2:	468c      	mov	ip, r1
 8001ff4:	9900      	ldr	r1, [sp, #0]
 8001ff6:	4463      	add	r3, ip
 8001ff8:	00f6      	lsls	r6, r6, #3
 8001ffa:	468c      	mov	ip, r1
 8001ffc:	4316      	orrs	r6, r2
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	449c      	add	ip, r3
 8002002:	0412      	lsls	r2, r2, #16
 8002004:	4663      	mov	r3, ip
 8002006:	4316      	orrs	r6, r2
 8002008:	00c2      	lsls	r2, r0, #3
 800200a:	2000      	movs	r0, #0
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	9900      	ldr	r1, [sp, #0]
 8002010:	4643      	mov	r3, r8
 8002012:	3101      	adds	r1, #1
 8002014:	468c      	mov	ip, r1
 8002016:	4649      	mov	r1, r9
 8002018:	407b      	eors	r3, r7
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	290f      	cmp	r1, #15
 800201e:	d900      	bls.n	8002022 <__aeabi_dmul+0x96>
 8002020:	e07e      	b.n	8002120 <__aeabi_dmul+0x194>
 8002022:	4bc2      	ldr	r3, [pc, #776]	; (800232c <__aeabi_dmul+0x3a0>)
 8002024:	0089      	lsls	r1, r1, #2
 8002026:	5859      	ldr	r1, [r3, r1]
 8002028:	468f      	mov	pc, r1
 800202a:	4652      	mov	r2, sl
 800202c:	9b00      	ldr	r3, [sp, #0]
 800202e:	4332      	orrs	r2, r6
 8002030:	d000      	beq.n	8002034 <__aeabi_dmul+0xa8>
 8002032:	e156      	b.n	80022e2 <__aeabi_dmul+0x356>
 8002034:	49bb      	ldr	r1, [pc, #748]	; (8002324 <__aeabi_dmul+0x398>)
 8002036:	2600      	movs	r6, #0
 8002038:	468c      	mov	ip, r1
 800203a:	4463      	add	r3, ip
 800203c:	4649      	mov	r1, r9
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2302      	movs	r3, #2
 8002042:	4319      	orrs	r1, r3
 8002044:	4689      	mov	r9, r1
 8002046:	2002      	movs	r0, #2
 8002048:	e7e1      	b.n	800200e <__aeabi_dmul+0x82>
 800204a:	4643      	mov	r3, r8
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	0034      	movs	r4, r6
 8002050:	0015      	movs	r5, r2
 8002052:	4683      	mov	fp, r0
 8002054:	465b      	mov	r3, fp
 8002056:	2b02      	cmp	r3, #2
 8002058:	d05e      	beq.n	8002118 <__aeabi_dmul+0x18c>
 800205a:	2b03      	cmp	r3, #3
 800205c:	d100      	bne.n	8002060 <__aeabi_dmul+0xd4>
 800205e:	e1f3      	b.n	8002448 <__aeabi_dmul+0x4bc>
 8002060:	2b01      	cmp	r3, #1
 8002062:	d000      	beq.n	8002066 <__aeabi_dmul+0xda>
 8002064:	e118      	b.n	8002298 <__aeabi_dmul+0x30c>
 8002066:	2200      	movs	r2, #0
 8002068:	2400      	movs	r4, #0
 800206a:	2500      	movs	r5, #0
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	0512      	lsls	r2, r2, #20
 8002070:	4322      	orrs	r2, r4
 8002072:	07db      	lsls	r3, r3, #31
 8002074:	431a      	orrs	r2, r3
 8002076:	0028      	movs	r0, r5
 8002078:	0011      	movs	r1, r2
 800207a:	b007      	add	sp, #28
 800207c:	bcf0      	pop	{r4, r5, r6, r7}
 800207e:	46bb      	mov	fp, r7
 8002080:	46b2      	mov	sl, r6
 8002082:	46a9      	mov	r9, r5
 8002084:	46a0      	mov	r8, r4
 8002086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002088:	0025      	movs	r5, r4
 800208a:	4305      	orrs	r5, r0
 800208c:	d100      	bne.n	8002090 <__aeabi_dmul+0x104>
 800208e:	e141      	b.n	8002314 <__aeabi_dmul+0x388>
 8002090:	2c00      	cmp	r4, #0
 8002092:	d100      	bne.n	8002096 <__aeabi_dmul+0x10a>
 8002094:	e1ad      	b.n	80023f2 <__aeabi_dmul+0x466>
 8002096:	0020      	movs	r0, r4
 8002098:	f000 fee2 	bl	8002e60 <__clzsi2>
 800209c:	0001      	movs	r1, r0
 800209e:	0002      	movs	r2, r0
 80020a0:	390b      	subs	r1, #11
 80020a2:	231d      	movs	r3, #29
 80020a4:	0010      	movs	r0, r2
 80020a6:	1a5b      	subs	r3, r3, r1
 80020a8:	0031      	movs	r1, r6
 80020aa:	0035      	movs	r5, r6
 80020ac:	3808      	subs	r0, #8
 80020ae:	4084      	lsls	r4, r0
 80020b0:	40d9      	lsrs	r1, r3
 80020b2:	4085      	lsls	r5, r0
 80020b4:	430c      	orrs	r4, r1
 80020b6:	489e      	ldr	r0, [pc, #632]	; (8002330 <__aeabi_dmul+0x3a4>)
 80020b8:	1a83      	subs	r3, r0, r2
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2300      	movs	r3, #0
 80020be:	4699      	mov	r9, r3
 80020c0:	469b      	mov	fp, r3
 80020c2:	e786      	b.n	8001fd2 <__aeabi_dmul+0x46>
 80020c4:	0005      	movs	r5, r0
 80020c6:	4325      	orrs	r5, r4
 80020c8:	d000      	beq.n	80020cc <__aeabi_dmul+0x140>
 80020ca:	e11c      	b.n	8002306 <__aeabi_dmul+0x37a>
 80020cc:	2208      	movs	r2, #8
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2302      	movs	r3, #2
 80020d2:	2400      	movs	r4, #0
 80020d4:	4691      	mov	r9, r2
 80020d6:	469b      	mov	fp, r3
 80020d8:	e77b      	b.n	8001fd2 <__aeabi_dmul+0x46>
 80020da:	4652      	mov	r2, sl
 80020dc:	4332      	orrs	r2, r6
 80020de:	d100      	bne.n	80020e2 <__aeabi_dmul+0x156>
 80020e0:	e10a      	b.n	80022f8 <__aeabi_dmul+0x36c>
 80020e2:	2e00      	cmp	r6, #0
 80020e4:	d100      	bne.n	80020e8 <__aeabi_dmul+0x15c>
 80020e6:	e176      	b.n	80023d6 <__aeabi_dmul+0x44a>
 80020e8:	0030      	movs	r0, r6
 80020ea:	f000 feb9 	bl	8002e60 <__clzsi2>
 80020ee:	0002      	movs	r2, r0
 80020f0:	3a0b      	subs	r2, #11
 80020f2:	231d      	movs	r3, #29
 80020f4:	0001      	movs	r1, r0
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	4652      	mov	r2, sl
 80020fa:	3908      	subs	r1, #8
 80020fc:	40da      	lsrs	r2, r3
 80020fe:	408e      	lsls	r6, r1
 8002100:	4316      	orrs	r6, r2
 8002102:	4652      	mov	r2, sl
 8002104:	408a      	lsls	r2, r1
 8002106:	9b00      	ldr	r3, [sp, #0]
 8002108:	4989      	ldr	r1, [pc, #548]	; (8002330 <__aeabi_dmul+0x3a4>)
 800210a:	1a18      	subs	r0, r3, r0
 800210c:	0003      	movs	r3, r0
 800210e:	468c      	mov	ip, r1
 8002110:	4463      	add	r3, ip
 8002112:	2000      	movs	r0, #0
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	e77a      	b.n	800200e <__aeabi_dmul+0x82>
 8002118:	2400      	movs	r4, #0
 800211a:	2500      	movs	r5, #0
 800211c:	4a81      	ldr	r2, [pc, #516]	; (8002324 <__aeabi_dmul+0x398>)
 800211e:	e7a5      	b.n	800206c <__aeabi_dmul+0xe0>
 8002120:	0c2f      	lsrs	r7, r5, #16
 8002122:	042d      	lsls	r5, r5, #16
 8002124:	0c2d      	lsrs	r5, r5, #16
 8002126:	002b      	movs	r3, r5
 8002128:	0c11      	lsrs	r1, r2, #16
 800212a:	0412      	lsls	r2, r2, #16
 800212c:	0c12      	lsrs	r2, r2, #16
 800212e:	4353      	muls	r3, r2
 8002130:	4698      	mov	r8, r3
 8002132:	0013      	movs	r3, r2
 8002134:	0028      	movs	r0, r5
 8002136:	437b      	muls	r3, r7
 8002138:	4699      	mov	r9, r3
 800213a:	4348      	muls	r0, r1
 800213c:	4448      	add	r0, r9
 800213e:	4683      	mov	fp, r0
 8002140:	4640      	mov	r0, r8
 8002142:	000b      	movs	r3, r1
 8002144:	0c00      	lsrs	r0, r0, #16
 8002146:	4682      	mov	sl, r0
 8002148:	4658      	mov	r0, fp
 800214a:	437b      	muls	r3, r7
 800214c:	4450      	add	r0, sl
 800214e:	9302      	str	r3, [sp, #8]
 8002150:	4581      	cmp	r9, r0
 8002152:	d906      	bls.n	8002162 <__aeabi_dmul+0x1d6>
 8002154:	469a      	mov	sl, r3
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	025b      	lsls	r3, r3, #9
 800215a:	4699      	mov	r9, r3
 800215c:	44ca      	add	sl, r9
 800215e:	4653      	mov	r3, sl
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	0c03      	lsrs	r3, r0, #16
 8002164:	469b      	mov	fp, r3
 8002166:	4643      	mov	r3, r8
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	0400      	lsls	r0, r0, #16
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	4698      	mov	r8, r3
 8002170:	0003      	movs	r3, r0
 8002172:	4443      	add	r3, r8
 8002174:	9304      	str	r3, [sp, #16]
 8002176:	0c33      	lsrs	r3, r6, #16
 8002178:	4699      	mov	r9, r3
 800217a:	002b      	movs	r3, r5
 800217c:	0436      	lsls	r6, r6, #16
 800217e:	0c36      	lsrs	r6, r6, #16
 8002180:	4373      	muls	r3, r6
 8002182:	4698      	mov	r8, r3
 8002184:	0033      	movs	r3, r6
 8002186:	437b      	muls	r3, r7
 8002188:	469a      	mov	sl, r3
 800218a:	464b      	mov	r3, r9
 800218c:	435d      	muls	r5, r3
 800218e:	435f      	muls	r7, r3
 8002190:	4643      	mov	r3, r8
 8002192:	4455      	add	r5, sl
 8002194:	0c18      	lsrs	r0, r3, #16
 8002196:	1940      	adds	r0, r0, r5
 8002198:	4582      	cmp	sl, r0
 800219a:	d903      	bls.n	80021a4 <__aeabi_dmul+0x218>
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	025b      	lsls	r3, r3, #9
 80021a0:	469a      	mov	sl, r3
 80021a2:	4457      	add	r7, sl
 80021a4:	0c05      	lsrs	r5, r0, #16
 80021a6:	19eb      	adds	r3, r5, r7
 80021a8:	9305      	str	r3, [sp, #20]
 80021aa:	4643      	mov	r3, r8
 80021ac:	041d      	lsls	r5, r3, #16
 80021ae:	0c2d      	lsrs	r5, r5, #16
 80021b0:	0400      	lsls	r0, r0, #16
 80021b2:	1940      	adds	r0, r0, r5
 80021b4:	0c25      	lsrs	r5, r4, #16
 80021b6:	0424      	lsls	r4, r4, #16
 80021b8:	0c24      	lsrs	r4, r4, #16
 80021ba:	0027      	movs	r7, r4
 80021bc:	4357      	muls	r7, r2
 80021be:	436a      	muls	r2, r5
 80021c0:	4690      	mov	r8, r2
 80021c2:	002a      	movs	r2, r5
 80021c4:	0c3b      	lsrs	r3, r7, #16
 80021c6:	469a      	mov	sl, r3
 80021c8:	434a      	muls	r2, r1
 80021ca:	4361      	muls	r1, r4
 80021cc:	4441      	add	r1, r8
 80021ce:	4451      	add	r1, sl
 80021d0:	4483      	add	fp, r0
 80021d2:	4588      	cmp	r8, r1
 80021d4:	d903      	bls.n	80021de <__aeabi_dmul+0x252>
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	025b      	lsls	r3, r3, #9
 80021da:	4698      	mov	r8, r3
 80021dc:	4442      	add	r2, r8
 80021de:	043f      	lsls	r7, r7, #16
 80021e0:	0c0b      	lsrs	r3, r1, #16
 80021e2:	0c3f      	lsrs	r7, r7, #16
 80021e4:	0409      	lsls	r1, r1, #16
 80021e6:	19c9      	adds	r1, r1, r7
 80021e8:	0027      	movs	r7, r4
 80021ea:	4698      	mov	r8, r3
 80021ec:	464b      	mov	r3, r9
 80021ee:	4377      	muls	r7, r6
 80021f0:	435c      	muls	r4, r3
 80021f2:	436e      	muls	r6, r5
 80021f4:	435d      	muls	r5, r3
 80021f6:	0c3b      	lsrs	r3, r7, #16
 80021f8:	4699      	mov	r9, r3
 80021fa:	19a4      	adds	r4, r4, r6
 80021fc:	444c      	add	r4, r9
 80021fe:	4442      	add	r2, r8
 8002200:	9503      	str	r5, [sp, #12]
 8002202:	42a6      	cmp	r6, r4
 8002204:	d904      	bls.n	8002210 <__aeabi_dmul+0x284>
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	025b      	lsls	r3, r3, #9
 800220a:	4698      	mov	r8, r3
 800220c:	4445      	add	r5, r8
 800220e:	9503      	str	r5, [sp, #12]
 8002210:	9b02      	ldr	r3, [sp, #8]
 8002212:	043f      	lsls	r7, r7, #16
 8002214:	445b      	add	r3, fp
 8002216:	001e      	movs	r6, r3
 8002218:	4283      	cmp	r3, r0
 800221a:	4180      	sbcs	r0, r0
 800221c:	0423      	lsls	r3, r4, #16
 800221e:	4698      	mov	r8, r3
 8002220:	9b05      	ldr	r3, [sp, #20]
 8002222:	0c3f      	lsrs	r7, r7, #16
 8002224:	4447      	add	r7, r8
 8002226:	4698      	mov	r8, r3
 8002228:	1876      	adds	r6, r6, r1
 800222a:	428e      	cmp	r6, r1
 800222c:	4189      	sbcs	r1, r1
 800222e:	4447      	add	r7, r8
 8002230:	4240      	negs	r0, r0
 8002232:	183d      	adds	r5, r7, r0
 8002234:	46a8      	mov	r8, r5
 8002236:	4693      	mov	fp, r2
 8002238:	4249      	negs	r1, r1
 800223a:	468a      	mov	sl, r1
 800223c:	44c3      	add	fp, r8
 800223e:	429f      	cmp	r7, r3
 8002240:	41bf      	sbcs	r7, r7
 8002242:	4580      	cmp	r8, r0
 8002244:	4180      	sbcs	r0, r0
 8002246:	9b03      	ldr	r3, [sp, #12]
 8002248:	44da      	add	sl, fp
 800224a:	4698      	mov	r8, r3
 800224c:	4653      	mov	r3, sl
 800224e:	4240      	negs	r0, r0
 8002250:	427f      	negs	r7, r7
 8002252:	4307      	orrs	r7, r0
 8002254:	0c24      	lsrs	r4, r4, #16
 8002256:	4593      	cmp	fp, r2
 8002258:	4192      	sbcs	r2, r2
 800225a:	458a      	cmp	sl, r1
 800225c:	4189      	sbcs	r1, r1
 800225e:	193f      	adds	r7, r7, r4
 8002260:	0ddc      	lsrs	r4, r3, #23
 8002262:	9b04      	ldr	r3, [sp, #16]
 8002264:	0275      	lsls	r5, r6, #9
 8002266:	431d      	orrs	r5, r3
 8002268:	1e68      	subs	r0, r5, #1
 800226a:	4185      	sbcs	r5, r0
 800226c:	4653      	mov	r3, sl
 800226e:	4252      	negs	r2, r2
 8002270:	4249      	negs	r1, r1
 8002272:	430a      	orrs	r2, r1
 8002274:	18bf      	adds	r7, r7, r2
 8002276:	4447      	add	r7, r8
 8002278:	0df6      	lsrs	r6, r6, #23
 800227a:	027f      	lsls	r7, r7, #9
 800227c:	4335      	orrs	r5, r6
 800227e:	025a      	lsls	r2, r3, #9
 8002280:	433c      	orrs	r4, r7
 8002282:	4315      	orrs	r5, r2
 8002284:	01fb      	lsls	r3, r7, #7
 8002286:	d400      	bmi.n	800228a <__aeabi_dmul+0x2fe>
 8002288:	e0c1      	b.n	800240e <__aeabi_dmul+0x482>
 800228a:	2101      	movs	r1, #1
 800228c:	086a      	lsrs	r2, r5, #1
 800228e:	400d      	ands	r5, r1
 8002290:	4315      	orrs	r5, r2
 8002292:	07e2      	lsls	r2, r4, #31
 8002294:	4315      	orrs	r5, r2
 8002296:	0864      	lsrs	r4, r4, #1
 8002298:	4926      	ldr	r1, [pc, #152]	; (8002334 <__aeabi_dmul+0x3a8>)
 800229a:	4461      	add	r1, ip
 800229c:	2900      	cmp	r1, #0
 800229e:	dd56      	ble.n	800234e <__aeabi_dmul+0x3c2>
 80022a0:	076b      	lsls	r3, r5, #29
 80022a2:	d009      	beq.n	80022b8 <__aeabi_dmul+0x32c>
 80022a4:	220f      	movs	r2, #15
 80022a6:	402a      	ands	r2, r5
 80022a8:	2a04      	cmp	r2, #4
 80022aa:	d005      	beq.n	80022b8 <__aeabi_dmul+0x32c>
 80022ac:	1d2a      	adds	r2, r5, #4
 80022ae:	42aa      	cmp	r2, r5
 80022b0:	41ad      	sbcs	r5, r5
 80022b2:	426d      	negs	r5, r5
 80022b4:	1964      	adds	r4, r4, r5
 80022b6:	0015      	movs	r5, r2
 80022b8:	01e3      	lsls	r3, r4, #7
 80022ba:	d504      	bpl.n	80022c6 <__aeabi_dmul+0x33a>
 80022bc:	2180      	movs	r1, #128	; 0x80
 80022be:	4a1e      	ldr	r2, [pc, #120]	; (8002338 <__aeabi_dmul+0x3ac>)
 80022c0:	00c9      	lsls	r1, r1, #3
 80022c2:	4014      	ands	r4, r2
 80022c4:	4461      	add	r1, ip
 80022c6:	4a1d      	ldr	r2, [pc, #116]	; (800233c <__aeabi_dmul+0x3b0>)
 80022c8:	4291      	cmp	r1, r2
 80022ca:	dd00      	ble.n	80022ce <__aeabi_dmul+0x342>
 80022cc:	e724      	b.n	8002118 <__aeabi_dmul+0x18c>
 80022ce:	0762      	lsls	r2, r4, #29
 80022d0:	08ed      	lsrs	r5, r5, #3
 80022d2:	0264      	lsls	r4, r4, #9
 80022d4:	0549      	lsls	r1, r1, #21
 80022d6:	4315      	orrs	r5, r2
 80022d8:	0b24      	lsrs	r4, r4, #12
 80022da:	0d4a      	lsrs	r2, r1, #21
 80022dc:	e6c6      	b.n	800206c <__aeabi_dmul+0xe0>
 80022de:	9701      	str	r7, [sp, #4]
 80022e0:	e6b8      	b.n	8002054 <__aeabi_dmul+0xc8>
 80022e2:	4a10      	ldr	r2, [pc, #64]	; (8002324 <__aeabi_dmul+0x398>)
 80022e4:	2003      	movs	r0, #3
 80022e6:	4694      	mov	ip, r2
 80022e8:	4463      	add	r3, ip
 80022ea:	464a      	mov	r2, r9
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2303      	movs	r3, #3
 80022f0:	431a      	orrs	r2, r3
 80022f2:	4691      	mov	r9, r2
 80022f4:	4652      	mov	r2, sl
 80022f6:	e68a      	b.n	800200e <__aeabi_dmul+0x82>
 80022f8:	4649      	mov	r1, r9
 80022fa:	2301      	movs	r3, #1
 80022fc:	4319      	orrs	r1, r3
 80022fe:	4689      	mov	r9, r1
 8002300:	2600      	movs	r6, #0
 8002302:	2001      	movs	r0, #1
 8002304:	e683      	b.n	800200e <__aeabi_dmul+0x82>
 8002306:	220c      	movs	r2, #12
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2303      	movs	r3, #3
 800230c:	0005      	movs	r5, r0
 800230e:	4691      	mov	r9, r2
 8002310:	469b      	mov	fp, r3
 8002312:	e65e      	b.n	8001fd2 <__aeabi_dmul+0x46>
 8002314:	2304      	movs	r3, #4
 8002316:	4699      	mov	r9, r3
 8002318:	2300      	movs	r3, #0
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	2400      	movs	r4, #0
 8002320:	469b      	mov	fp, r3
 8002322:	e656      	b.n	8001fd2 <__aeabi_dmul+0x46>
 8002324:	000007ff 	.word	0x000007ff
 8002328:	fffffc01 	.word	0xfffffc01
 800232c:	08016244 	.word	0x08016244
 8002330:	fffffc0d 	.word	0xfffffc0d
 8002334:	000003ff 	.word	0x000003ff
 8002338:	feffffff 	.word	0xfeffffff
 800233c:	000007fe 	.word	0x000007fe
 8002340:	2300      	movs	r3, #0
 8002342:	2480      	movs	r4, #128	; 0x80
 8002344:	2500      	movs	r5, #0
 8002346:	4a44      	ldr	r2, [pc, #272]	; (8002458 <__aeabi_dmul+0x4cc>)
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	0324      	lsls	r4, r4, #12
 800234c:	e68e      	b.n	800206c <__aeabi_dmul+0xe0>
 800234e:	2001      	movs	r0, #1
 8002350:	1a40      	subs	r0, r0, r1
 8002352:	2838      	cmp	r0, #56	; 0x38
 8002354:	dd00      	ble.n	8002358 <__aeabi_dmul+0x3cc>
 8002356:	e686      	b.n	8002066 <__aeabi_dmul+0xda>
 8002358:	281f      	cmp	r0, #31
 800235a:	dd5b      	ble.n	8002414 <__aeabi_dmul+0x488>
 800235c:	221f      	movs	r2, #31
 800235e:	0023      	movs	r3, r4
 8002360:	4252      	negs	r2, r2
 8002362:	1a51      	subs	r1, r2, r1
 8002364:	40cb      	lsrs	r3, r1
 8002366:	0019      	movs	r1, r3
 8002368:	2820      	cmp	r0, #32
 800236a:	d003      	beq.n	8002374 <__aeabi_dmul+0x3e8>
 800236c:	4a3b      	ldr	r2, [pc, #236]	; (800245c <__aeabi_dmul+0x4d0>)
 800236e:	4462      	add	r2, ip
 8002370:	4094      	lsls	r4, r2
 8002372:	4325      	orrs	r5, r4
 8002374:	1e6a      	subs	r2, r5, #1
 8002376:	4195      	sbcs	r5, r2
 8002378:	002a      	movs	r2, r5
 800237a:	430a      	orrs	r2, r1
 800237c:	2107      	movs	r1, #7
 800237e:	000d      	movs	r5, r1
 8002380:	2400      	movs	r4, #0
 8002382:	4015      	ands	r5, r2
 8002384:	4211      	tst	r1, r2
 8002386:	d05b      	beq.n	8002440 <__aeabi_dmul+0x4b4>
 8002388:	210f      	movs	r1, #15
 800238a:	2400      	movs	r4, #0
 800238c:	4011      	ands	r1, r2
 800238e:	2904      	cmp	r1, #4
 8002390:	d053      	beq.n	800243a <__aeabi_dmul+0x4ae>
 8002392:	1d11      	adds	r1, r2, #4
 8002394:	4291      	cmp	r1, r2
 8002396:	4192      	sbcs	r2, r2
 8002398:	4252      	negs	r2, r2
 800239a:	18a4      	adds	r4, r4, r2
 800239c:	000a      	movs	r2, r1
 800239e:	0223      	lsls	r3, r4, #8
 80023a0:	d54b      	bpl.n	800243a <__aeabi_dmul+0x4ae>
 80023a2:	2201      	movs	r2, #1
 80023a4:	2400      	movs	r4, #0
 80023a6:	2500      	movs	r5, #0
 80023a8:	e660      	b.n	800206c <__aeabi_dmul+0xe0>
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	031b      	lsls	r3, r3, #12
 80023ae:	421c      	tst	r4, r3
 80023b0:	d009      	beq.n	80023c6 <__aeabi_dmul+0x43a>
 80023b2:	421e      	tst	r6, r3
 80023b4:	d107      	bne.n	80023c6 <__aeabi_dmul+0x43a>
 80023b6:	4333      	orrs	r3, r6
 80023b8:	031c      	lsls	r4, r3, #12
 80023ba:	4643      	mov	r3, r8
 80023bc:	0015      	movs	r5, r2
 80023be:	0b24      	lsrs	r4, r4, #12
 80023c0:	4a25      	ldr	r2, [pc, #148]	; (8002458 <__aeabi_dmul+0x4cc>)
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	e652      	b.n	800206c <__aeabi_dmul+0xe0>
 80023c6:	2280      	movs	r2, #128	; 0x80
 80023c8:	0312      	lsls	r2, r2, #12
 80023ca:	4314      	orrs	r4, r2
 80023cc:	0324      	lsls	r4, r4, #12
 80023ce:	4a22      	ldr	r2, [pc, #136]	; (8002458 <__aeabi_dmul+0x4cc>)
 80023d0:	0b24      	lsrs	r4, r4, #12
 80023d2:	9701      	str	r7, [sp, #4]
 80023d4:	e64a      	b.n	800206c <__aeabi_dmul+0xe0>
 80023d6:	f000 fd43 	bl	8002e60 <__clzsi2>
 80023da:	0003      	movs	r3, r0
 80023dc:	001a      	movs	r2, r3
 80023de:	3215      	adds	r2, #21
 80023e0:	3020      	adds	r0, #32
 80023e2:	2a1c      	cmp	r2, #28
 80023e4:	dc00      	bgt.n	80023e8 <__aeabi_dmul+0x45c>
 80023e6:	e684      	b.n	80020f2 <__aeabi_dmul+0x166>
 80023e8:	4656      	mov	r6, sl
 80023ea:	3b08      	subs	r3, #8
 80023ec:	2200      	movs	r2, #0
 80023ee:	409e      	lsls	r6, r3
 80023f0:	e689      	b.n	8002106 <__aeabi_dmul+0x17a>
 80023f2:	f000 fd35 	bl	8002e60 <__clzsi2>
 80023f6:	0001      	movs	r1, r0
 80023f8:	0002      	movs	r2, r0
 80023fa:	3115      	adds	r1, #21
 80023fc:	3220      	adds	r2, #32
 80023fe:	291c      	cmp	r1, #28
 8002400:	dc00      	bgt.n	8002404 <__aeabi_dmul+0x478>
 8002402:	e64e      	b.n	80020a2 <__aeabi_dmul+0x116>
 8002404:	0034      	movs	r4, r6
 8002406:	3808      	subs	r0, #8
 8002408:	2500      	movs	r5, #0
 800240a:	4084      	lsls	r4, r0
 800240c:	e653      	b.n	80020b6 <__aeabi_dmul+0x12a>
 800240e:	9b00      	ldr	r3, [sp, #0]
 8002410:	469c      	mov	ip, r3
 8002412:	e741      	b.n	8002298 <__aeabi_dmul+0x30c>
 8002414:	4912      	ldr	r1, [pc, #72]	; (8002460 <__aeabi_dmul+0x4d4>)
 8002416:	0022      	movs	r2, r4
 8002418:	4461      	add	r1, ip
 800241a:	002e      	movs	r6, r5
 800241c:	408d      	lsls	r5, r1
 800241e:	408a      	lsls	r2, r1
 8002420:	40c6      	lsrs	r6, r0
 8002422:	1e69      	subs	r1, r5, #1
 8002424:	418d      	sbcs	r5, r1
 8002426:	4332      	orrs	r2, r6
 8002428:	432a      	orrs	r2, r5
 800242a:	40c4      	lsrs	r4, r0
 800242c:	0753      	lsls	r3, r2, #29
 800242e:	d0b6      	beq.n	800239e <__aeabi_dmul+0x412>
 8002430:	210f      	movs	r1, #15
 8002432:	4011      	ands	r1, r2
 8002434:	2904      	cmp	r1, #4
 8002436:	d1ac      	bne.n	8002392 <__aeabi_dmul+0x406>
 8002438:	e7b1      	b.n	800239e <__aeabi_dmul+0x412>
 800243a:	0765      	lsls	r5, r4, #29
 800243c:	0264      	lsls	r4, r4, #9
 800243e:	0b24      	lsrs	r4, r4, #12
 8002440:	08d2      	lsrs	r2, r2, #3
 8002442:	4315      	orrs	r5, r2
 8002444:	2200      	movs	r2, #0
 8002446:	e611      	b.n	800206c <__aeabi_dmul+0xe0>
 8002448:	2280      	movs	r2, #128	; 0x80
 800244a:	0312      	lsls	r2, r2, #12
 800244c:	4314      	orrs	r4, r2
 800244e:	0324      	lsls	r4, r4, #12
 8002450:	4a01      	ldr	r2, [pc, #4]	; (8002458 <__aeabi_dmul+0x4cc>)
 8002452:	0b24      	lsrs	r4, r4, #12
 8002454:	e60a      	b.n	800206c <__aeabi_dmul+0xe0>
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	000007ff 	.word	0x000007ff
 800245c:	0000043e 	.word	0x0000043e
 8002460:	0000041e 	.word	0x0000041e

08002464 <__aeabi_dsub>:
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	4657      	mov	r7, sl
 8002468:	464e      	mov	r6, r9
 800246a:	4645      	mov	r5, r8
 800246c:	46de      	mov	lr, fp
 800246e:	0004      	movs	r4, r0
 8002470:	b5e0      	push	{r5, r6, r7, lr}
 8002472:	001f      	movs	r7, r3
 8002474:	0010      	movs	r0, r2
 8002476:	030b      	lsls	r3, r1, #12
 8002478:	0f62      	lsrs	r2, r4, #29
 800247a:	004e      	lsls	r6, r1, #1
 800247c:	0fcd      	lsrs	r5, r1, #31
 800247e:	0a5b      	lsrs	r3, r3, #9
 8002480:	0339      	lsls	r1, r7, #12
 8002482:	4313      	orrs	r3, r2
 8002484:	0a49      	lsrs	r1, r1, #9
 8002486:	00e2      	lsls	r2, r4, #3
 8002488:	0f44      	lsrs	r4, r0, #29
 800248a:	4321      	orrs	r1, r4
 800248c:	4cc2      	ldr	r4, [pc, #776]	; (8002798 <__aeabi_dsub+0x334>)
 800248e:	4691      	mov	r9, r2
 8002490:	4692      	mov	sl, r2
 8002492:	00c0      	lsls	r0, r0, #3
 8002494:	007a      	lsls	r2, r7, #1
 8002496:	4680      	mov	r8, r0
 8002498:	0d76      	lsrs	r6, r6, #21
 800249a:	0d52      	lsrs	r2, r2, #21
 800249c:	0fff      	lsrs	r7, r7, #31
 800249e:	42a2      	cmp	r2, r4
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x40>
 80024a2:	e0b4      	b.n	800260e <__aeabi_dsub+0x1aa>
 80024a4:	2401      	movs	r4, #1
 80024a6:	4067      	eors	r7, r4
 80024a8:	46bb      	mov	fp, r7
 80024aa:	42bd      	cmp	r5, r7
 80024ac:	d100      	bne.n	80024b0 <__aeabi_dsub+0x4c>
 80024ae:	e088      	b.n	80025c2 <__aeabi_dsub+0x15e>
 80024b0:	1ab4      	subs	r4, r6, r2
 80024b2:	46a4      	mov	ip, r4
 80024b4:	2c00      	cmp	r4, #0
 80024b6:	dc00      	bgt.n	80024ba <__aeabi_dsub+0x56>
 80024b8:	e0b2      	b.n	8002620 <__aeabi_dsub+0x1bc>
 80024ba:	2a00      	cmp	r2, #0
 80024bc:	d100      	bne.n	80024c0 <__aeabi_dsub+0x5c>
 80024be:	e0c5      	b.n	800264c <__aeabi_dsub+0x1e8>
 80024c0:	4ab5      	ldr	r2, [pc, #724]	; (8002798 <__aeabi_dsub+0x334>)
 80024c2:	4296      	cmp	r6, r2
 80024c4:	d100      	bne.n	80024c8 <__aeabi_dsub+0x64>
 80024c6:	e28b      	b.n	80029e0 <__aeabi_dsub+0x57c>
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	0412      	lsls	r2, r2, #16
 80024cc:	4311      	orrs	r1, r2
 80024ce:	4662      	mov	r2, ip
 80024d0:	2a38      	cmp	r2, #56	; 0x38
 80024d2:	dd00      	ble.n	80024d6 <__aeabi_dsub+0x72>
 80024d4:	e1a1      	b.n	800281a <__aeabi_dsub+0x3b6>
 80024d6:	2a1f      	cmp	r2, #31
 80024d8:	dd00      	ble.n	80024dc <__aeabi_dsub+0x78>
 80024da:	e216      	b.n	800290a <__aeabi_dsub+0x4a6>
 80024dc:	2720      	movs	r7, #32
 80024de:	000c      	movs	r4, r1
 80024e0:	1abf      	subs	r7, r7, r2
 80024e2:	40bc      	lsls	r4, r7
 80024e4:	0002      	movs	r2, r0
 80024e6:	46a0      	mov	r8, r4
 80024e8:	4664      	mov	r4, ip
 80024ea:	40b8      	lsls	r0, r7
 80024ec:	40e2      	lsrs	r2, r4
 80024ee:	4644      	mov	r4, r8
 80024f0:	4314      	orrs	r4, r2
 80024f2:	0002      	movs	r2, r0
 80024f4:	1e50      	subs	r0, r2, #1
 80024f6:	4182      	sbcs	r2, r0
 80024f8:	4660      	mov	r0, ip
 80024fa:	40c1      	lsrs	r1, r0
 80024fc:	4322      	orrs	r2, r4
 80024fe:	1a5b      	subs	r3, r3, r1
 8002500:	4649      	mov	r1, r9
 8002502:	1a8c      	subs	r4, r1, r2
 8002504:	45a1      	cmp	r9, r4
 8002506:	4192      	sbcs	r2, r2
 8002508:	4252      	negs	r2, r2
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	4698      	mov	r8, r3
 800250e:	4643      	mov	r3, r8
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	d400      	bmi.n	8002516 <__aeabi_dsub+0xb2>
 8002514:	e117      	b.n	8002746 <__aeabi_dsub+0x2e2>
 8002516:	4643      	mov	r3, r8
 8002518:	025b      	lsls	r3, r3, #9
 800251a:	0a5b      	lsrs	r3, r3, #9
 800251c:	4698      	mov	r8, r3
 800251e:	4643      	mov	r3, r8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d100      	bne.n	8002526 <__aeabi_dsub+0xc2>
 8002524:	e16c      	b.n	8002800 <__aeabi_dsub+0x39c>
 8002526:	4640      	mov	r0, r8
 8002528:	f000 fc9a 	bl	8002e60 <__clzsi2>
 800252c:	0002      	movs	r2, r0
 800252e:	3a08      	subs	r2, #8
 8002530:	2120      	movs	r1, #32
 8002532:	0020      	movs	r0, r4
 8002534:	4643      	mov	r3, r8
 8002536:	1a89      	subs	r1, r1, r2
 8002538:	4093      	lsls	r3, r2
 800253a:	40c8      	lsrs	r0, r1
 800253c:	4094      	lsls	r4, r2
 800253e:	4303      	orrs	r3, r0
 8002540:	4296      	cmp	r6, r2
 8002542:	dd00      	ble.n	8002546 <__aeabi_dsub+0xe2>
 8002544:	e157      	b.n	80027f6 <__aeabi_dsub+0x392>
 8002546:	1b96      	subs	r6, r2, r6
 8002548:	1c71      	adds	r1, r6, #1
 800254a:	291f      	cmp	r1, #31
 800254c:	dd00      	ble.n	8002550 <__aeabi_dsub+0xec>
 800254e:	e1cb      	b.n	80028e8 <__aeabi_dsub+0x484>
 8002550:	2220      	movs	r2, #32
 8002552:	0018      	movs	r0, r3
 8002554:	0026      	movs	r6, r4
 8002556:	1a52      	subs	r2, r2, r1
 8002558:	4094      	lsls	r4, r2
 800255a:	4090      	lsls	r0, r2
 800255c:	40ce      	lsrs	r6, r1
 800255e:	40cb      	lsrs	r3, r1
 8002560:	1e62      	subs	r2, r4, #1
 8002562:	4194      	sbcs	r4, r2
 8002564:	4330      	orrs	r0, r6
 8002566:	4698      	mov	r8, r3
 8002568:	2600      	movs	r6, #0
 800256a:	4304      	orrs	r4, r0
 800256c:	0763      	lsls	r3, r4, #29
 800256e:	d009      	beq.n	8002584 <__aeabi_dsub+0x120>
 8002570:	230f      	movs	r3, #15
 8002572:	4023      	ands	r3, r4
 8002574:	2b04      	cmp	r3, #4
 8002576:	d005      	beq.n	8002584 <__aeabi_dsub+0x120>
 8002578:	1d23      	adds	r3, r4, #4
 800257a:	42a3      	cmp	r3, r4
 800257c:	41a4      	sbcs	r4, r4
 800257e:	4264      	negs	r4, r4
 8002580:	44a0      	add	r8, r4
 8002582:	001c      	movs	r4, r3
 8002584:	4643      	mov	r3, r8
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	d400      	bmi.n	800258c <__aeabi_dsub+0x128>
 800258a:	e0df      	b.n	800274c <__aeabi_dsub+0x2e8>
 800258c:	4b82      	ldr	r3, [pc, #520]	; (8002798 <__aeabi_dsub+0x334>)
 800258e:	3601      	adds	r6, #1
 8002590:	429e      	cmp	r6, r3
 8002592:	d100      	bne.n	8002596 <__aeabi_dsub+0x132>
 8002594:	e0fb      	b.n	800278e <__aeabi_dsub+0x32a>
 8002596:	4642      	mov	r2, r8
 8002598:	4b80      	ldr	r3, [pc, #512]	; (800279c <__aeabi_dsub+0x338>)
 800259a:	08e4      	lsrs	r4, r4, #3
 800259c:	401a      	ands	r2, r3
 800259e:	0013      	movs	r3, r2
 80025a0:	0571      	lsls	r1, r6, #21
 80025a2:	0752      	lsls	r2, r2, #29
 80025a4:	025b      	lsls	r3, r3, #9
 80025a6:	4322      	orrs	r2, r4
 80025a8:	0b1b      	lsrs	r3, r3, #12
 80025aa:	0d49      	lsrs	r1, r1, #21
 80025ac:	0509      	lsls	r1, r1, #20
 80025ae:	07ed      	lsls	r5, r5, #31
 80025b0:	4319      	orrs	r1, r3
 80025b2:	4329      	orrs	r1, r5
 80025b4:	0010      	movs	r0, r2
 80025b6:	bcf0      	pop	{r4, r5, r6, r7}
 80025b8:	46bb      	mov	fp, r7
 80025ba:	46b2      	mov	sl, r6
 80025bc:	46a9      	mov	r9, r5
 80025be:	46a0      	mov	r8, r4
 80025c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025c2:	1ab4      	subs	r4, r6, r2
 80025c4:	46a4      	mov	ip, r4
 80025c6:	2c00      	cmp	r4, #0
 80025c8:	dd58      	ble.n	800267c <__aeabi_dsub+0x218>
 80025ca:	2a00      	cmp	r2, #0
 80025cc:	d100      	bne.n	80025d0 <__aeabi_dsub+0x16c>
 80025ce:	e09e      	b.n	800270e <__aeabi_dsub+0x2aa>
 80025d0:	4a71      	ldr	r2, [pc, #452]	; (8002798 <__aeabi_dsub+0x334>)
 80025d2:	4296      	cmp	r6, r2
 80025d4:	d100      	bne.n	80025d8 <__aeabi_dsub+0x174>
 80025d6:	e13b      	b.n	8002850 <__aeabi_dsub+0x3ec>
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	0412      	lsls	r2, r2, #16
 80025dc:	4311      	orrs	r1, r2
 80025de:	4662      	mov	r2, ip
 80025e0:	2a38      	cmp	r2, #56	; 0x38
 80025e2:	dd00      	ble.n	80025e6 <__aeabi_dsub+0x182>
 80025e4:	e0c1      	b.n	800276a <__aeabi_dsub+0x306>
 80025e6:	2a1f      	cmp	r2, #31
 80025e8:	dc00      	bgt.n	80025ec <__aeabi_dsub+0x188>
 80025ea:	e1bb      	b.n	8002964 <__aeabi_dsub+0x500>
 80025ec:	000c      	movs	r4, r1
 80025ee:	3a20      	subs	r2, #32
 80025f0:	40d4      	lsrs	r4, r2
 80025f2:	0022      	movs	r2, r4
 80025f4:	4664      	mov	r4, ip
 80025f6:	2c20      	cmp	r4, #32
 80025f8:	d004      	beq.n	8002604 <__aeabi_dsub+0x1a0>
 80025fa:	2740      	movs	r7, #64	; 0x40
 80025fc:	1b3f      	subs	r7, r7, r4
 80025fe:	40b9      	lsls	r1, r7
 8002600:	4308      	orrs	r0, r1
 8002602:	4680      	mov	r8, r0
 8002604:	4644      	mov	r4, r8
 8002606:	1e61      	subs	r1, r4, #1
 8002608:	418c      	sbcs	r4, r1
 800260a:	4314      	orrs	r4, r2
 800260c:	e0b1      	b.n	8002772 <__aeabi_dsub+0x30e>
 800260e:	000c      	movs	r4, r1
 8002610:	4304      	orrs	r4, r0
 8002612:	d02a      	beq.n	800266a <__aeabi_dsub+0x206>
 8002614:	46bb      	mov	fp, r7
 8002616:	42bd      	cmp	r5, r7
 8002618:	d02d      	beq.n	8002676 <__aeabi_dsub+0x212>
 800261a:	4c61      	ldr	r4, [pc, #388]	; (80027a0 <__aeabi_dsub+0x33c>)
 800261c:	46a4      	mov	ip, r4
 800261e:	44b4      	add	ip, r6
 8002620:	4664      	mov	r4, ip
 8002622:	2c00      	cmp	r4, #0
 8002624:	d05c      	beq.n	80026e0 <__aeabi_dsub+0x27c>
 8002626:	1b94      	subs	r4, r2, r6
 8002628:	46a4      	mov	ip, r4
 800262a:	2e00      	cmp	r6, #0
 800262c:	d000      	beq.n	8002630 <__aeabi_dsub+0x1cc>
 800262e:	e115      	b.n	800285c <__aeabi_dsub+0x3f8>
 8002630:	464d      	mov	r5, r9
 8002632:	431d      	orrs	r5, r3
 8002634:	d100      	bne.n	8002638 <__aeabi_dsub+0x1d4>
 8002636:	e1c3      	b.n	80029c0 <__aeabi_dsub+0x55c>
 8002638:	1e65      	subs	r5, r4, #1
 800263a:	2c01      	cmp	r4, #1
 800263c:	d100      	bne.n	8002640 <__aeabi_dsub+0x1dc>
 800263e:	e20c      	b.n	8002a5a <__aeabi_dsub+0x5f6>
 8002640:	4e55      	ldr	r6, [pc, #340]	; (8002798 <__aeabi_dsub+0x334>)
 8002642:	42b4      	cmp	r4, r6
 8002644:	d100      	bne.n	8002648 <__aeabi_dsub+0x1e4>
 8002646:	e1f8      	b.n	8002a3a <__aeabi_dsub+0x5d6>
 8002648:	46ac      	mov	ip, r5
 800264a:	e10e      	b.n	800286a <__aeabi_dsub+0x406>
 800264c:	000a      	movs	r2, r1
 800264e:	4302      	orrs	r2, r0
 8002650:	d100      	bne.n	8002654 <__aeabi_dsub+0x1f0>
 8002652:	e136      	b.n	80028c2 <__aeabi_dsub+0x45e>
 8002654:	0022      	movs	r2, r4
 8002656:	3a01      	subs	r2, #1
 8002658:	2c01      	cmp	r4, #1
 800265a:	d100      	bne.n	800265e <__aeabi_dsub+0x1fa>
 800265c:	e1c6      	b.n	80029ec <__aeabi_dsub+0x588>
 800265e:	4c4e      	ldr	r4, [pc, #312]	; (8002798 <__aeabi_dsub+0x334>)
 8002660:	45a4      	cmp	ip, r4
 8002662:	d100      	bne.n	8002666 <__aeabi_dsub+0x202>
 8002664:	e0f4      	b.n	8002850 <__aeabi_dsub+0x3ec>
 8002666:	4694      	mov	ip, r2
 8002668:	e731      	b.n	80024ce <__aeabi_dsub+0x6a>
 800266a:	2401      	movs	r4, #1
 800266c:	4067      	eors	r7, r4
 800266e:	46bb      	mov	fp, r7
 8002670:	42bd      	cmp	r5, r7
 8002672:	d000      	beq.n	8002676 <__aeabi_dsub+0x212>
 8002674:	e71c      	b.n	80024b0 <__aeabi_dsub+0x4c>
 8002676:	4c4a      	ldr	r4, [pc, #296]	; (80027a0 <__aeabi_dsub+0x33c>)
 8002678:	46a4      	mov	ip, r4
 800267a:	44b4      	add	ip, r6
 800267c:	4664      	mov	r4, ip
 800267e:	2c00      	cmp	r4, #0
 8002680:	d100      	bne.n	8002684 <__aeabi_dsub+0x220>
 8002682:	e0cf      	b.n	8002824 <__aeabi_dsub+0x3c0>
 8002684:	1b94      	subs	r4, r2, r6
 8002686:	46a4      	mov	ip, r4
 8002688:	2e00      	cmp	r6, #0
 800268a:	d100      	bne.n	800268e <__aeabi_dsub+0x22a>
 800268c:	e15c      	b.n	8002948 <__aeabi_dsub+0x4e4>
 800268e:	4e42      	ldr	r6, [pc, #264]	; (8002798 <__aeabi_dsub+0x334>)
 8002690:	42b2      	cmp	r2, r6
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x232>
 8002694:	e1ec      	b.n	8002a70 <__aeabi_dsub+0x60c>
 8002696:	2680      	movs	r6, #128	; 0x80
 8002698:	0436      	lsls	r6, r6, #16
 800269a:	4333      	orrs	r3, r6
 800269c:	4664      	mov	r4, ip
 800269e:	2c38      	cmp	r4, #56	; 0x38
 80026a0:	dd00      	ble.n	80026a4 <__aeabi_dsub+0x240>
 80026a2:	e1b3      	b.n	8002a0c <__aeabi_dsub+0x5a8>
 80026a4:	2c1f      	cmp	r4, #31
 80026a6:	dd00      	ble.n	80026aa <__aeabi_dsub+0x246>
 80026a8:	e238      	b.n	8002b1c <__aeabi_dsub+0x6b8>
 80026aa:	2620      	movs	r6, #32
 80026ac:	1b36      	subs	r6, r6, r4
 80026ae:	001c      	movs	r4, r3
 80026b0:	40b4      	lsls	r4, r6
 80026b2:	464f      	mov	r7, r9
 80026b4:	46a0      	mov	r8, r4
 80026b6:	4664      	mov	r4, ip
 80026b8:	40e7      	lsrs	r7, r4
 80026ba:	4644      	mov	r4, r8
 80026bc:	433c      	orrs	r4, r7
 80026be:	464f      	mov	r7, r9
 80026c0:	40b7      	lsls	r7, r6
 80026c2:	003e      	movs	r6, r7
 80026c4:	1e77      	subs	r7, r6, #1
 80026c6:	41be      	sbcs	r6, r7
 80026c8:	4334      	orrs	r4, r6
 80026ca:	4666      	mov	r6, ip
 80026cc:	40f3      	lsrs	r3, r6
 80026ce:	18c9      	adds	r1, r1, r3
 80026d0:	1824      	adds	r4, r4, r0
 80026d2:	4284      	cmp	r4, r0
 80026d4:	419b      	sbcs	r3, r3
 80026d6:	425b      	negs	r3, r3
 80026d8:	4698      	mov	r8, r3
 80026da:	0016      	movs	r6, r2
 80026dc:	4488      	add	r8, r1
 80026de:	e04e      	b.n	800277e <__aeabi_dsub+0x31a>
 80026e0:	4a30      	ldr	r2, [pc, #192]	; (80027a4 <__aeabi_dsub+0x340>)
 80026e2:	1c74      	adds	r4, r6, #1
 80026e4:	4214      	tst	r4, r2
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x286>
 80026e8:	e0d6      	b.n	8002898 <__aeabi_dsub+0x434>
 80026ea:	464a      	mov	r2, r9
 80026ec:	431a      	orrs	r2, r3
 80026ee:	2e00      	cmp	r6, #0
 80026f0:	d000      	beq.n	80026f4 <__aeabi_dsub+0x290>
 80026f2:	e15b      	b.n	80029ac <__aeabi_dsub+0x548>
 80026f4:	2a00      	cmp	r2, #0
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x296>
 80026f8:	e1a5      	b.n	8002a46 <__aeabi_dsub+0x5e2>
 80026fa:	000a      	movs	r2, r1
 80026fc:	4302      	orrs	r2, r0
 80026fe:	d000      	beq.n	8002702 <__aeabi_dsub+0x29e>
 8002700:	e1bb      	b.n	8002a7a <__aeabi_dsub+0x616>
 8002702:	464a      	mov	r2, r9
 8002704:	0759      	lsls	r1, r3, #29
 8002706:	08d2      	lsrs	r2, r2, #3
 8002708:	430a      	orrs	r2, r1
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	e027      	b.n	800275e <__aeabi_dsub+0x2fa>
 800270e:	000a      	movs	r2, r1
 8002710:	4302      	orrs	r2, r0
 8002712:	d100      	bne.n	8002716 <__aeabi_dsub+0x2b2>
 8002714:	e174      	b.n	8002a00 <__aeabi_dsub+0x59c>
 8002716:	0022      	movs	r2, r4
 8002718:	3a01      	subs	r2, #1
 800271a:	2c01      	cmp	r4, #1
 800271c:	d005      	beq.n	800272a <__aeabi_dsub+0x2c6>
 800271e:	4c1e      	ldr	r4, [pc, #120]	; (8002798 <__aeabi_dsub+0x334>)
 8002720:	45a4      	cmp	ip, r4
 8002722:	d100      	bne.n	8002726 <__aeabi_dsub+0x2c2>
 8002724:	e094      	b.n	8002850 <__aeabi_dsub+0x3ec>
 8002726:	4694      	mov	ip, r2
 8002728:	e759      	b.n	80025de <__aeabi_dsub+0x17a>
 800272a:	4448      	add	r0, r9
 800272c:	4548      	cmp	r0, r9
 800272e:	4192      	sbcs	r2, r2
 8002730:	185b      	adds	r3, r3, r1
 8002732:	4698      	mov	r8, r3
 8002734:	0004      	movs	r4, r0
 8002736:	4252      	negs	r2, r2
 8002738:	4490      	add	r8, r2
 800273a:	4643      	mov	r3, r8
 800273c:	2602      	movs	r6, #2
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	d500      	bpl.n	8002744 <__aeabi_dsub+0x2e0>
 8002742:	e0c4      	b.n	80028ce <__aeabi_dsub+0x46a>
 8002744:	3e01      	subs	r6, #1
 8002746:	0763      	lsls	r3, r4, #29
 8002748:	d000      	beq.n	800274c <__aeabi_dsub+0x2e8>
 800274a:	e711      	b.n	8002570 <__aeabi_dsub+0x10c>
 800274c:	4643      	mov	r3, r8
 800274e:	46b4      	mov	ip, r6
 8002750:	0759      	lsls	r1, r3, #29
 8002752:	08e2      	lsrs	r2, r4, #3
 8002754:	430a      	orrs	r2, r1
 8002756:	08db      	lsrs	r3, r3, #3
 8002758:	490f      	ldr	r1, [pc, #60]	; (8002798 <__aeabi_dsub+0x334>)
 800275a:	458c      	cmp	ip, r1
 800275c:	d040      	beq.n	80027e0 <__aeabi_dsub+0x37c>
 800275e:	4661      	mov	r1, ip
 8002760:	031b      	lsls	r3, r3, #12
 8002762:	0549      	lsls	r1, r1, #21
 8002764:	0b1b      	lsrs	r3, r3, #12
 8002766:	0d49      	lsrs	r1, r1, #21
 8002768:	e720      	b.n	80025ac <__aeabi_dsub+0x148>
 800276a:	4301      	orrs	r1, r0
 800276c:	000c      	movs	r4, r1
 800276e:	1e61      	subs	r1, r4, #1
 8002770:	418c      	sbcs	r4, r1
 8002772:	444c      	add	r4, r9
 8002774:	454c      	cmp	r4, r9
 8002776:	4192      	sbcs	r2, r2
 8002778:	4252      	negs	r2, r2
 800277a:	4690      	mov	r8, r2
 800277c:	4498      	add	r8, r3
 800277e:	4643      	mov	r3, r8
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	d5e0      	bpl.n	8002746 <__aeabi_dsub+0x2e2>
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__aeabi_dsub+0x334>)
 8002786:	3601      	adds	r6, #1
 8002788:	429e      	cmp	r6, r3
 800278a:	d000      	beq.n	800278e <__aeabi_dsub+0x32a>
 800278c:	e09f      	b.n	80028ce <__aeabi_dsub+0x46a>
 800278e:	0031      	movs	r1, r6
 8002790:	2300      	movs	r3, #0
 8002792:	2200      	movs	r2, #0
 8002794:	e70a      	b.n	80025ac <__aeabi_dsub+0x148>
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	000007ff 	.word	0x000007ff
 800279c:	ff7fffff 	.word	0xff7fffff
 80027a0:	fffff801 	.word	0xfffff801
 80027a4:	000007fe 	.word	0x000007fe
 80027a8:	2a00      	cmp	r2, #0
 80027aa:	d100      	bne.n	80027ae <__aeabi_dsub+0x34a>
 80027ac:	e160      	b.n	8002a70 <__aeabi_dsub+0x60c>
 80027ae:	000a      	movs	r2, r1
 80027b0:	4302      	orrs	r2, r0
 80027b2:	d04d      	beq.n	8002850 <__aeabi_dsub+0x3ec>
 80027b4:	464a      	mov	r2, r9
 80027b6:	075c      	lsls	r4, r3, #29
 80027b8:	08d2      	lsrs	r2, r2, #3
 80027ba:	4322      	orrs	r2, r4
 80027bc:	2480      	movs	r4, #128	; 0x80
 80027be:	08db      	lsrs	r3, r3, #3
 80027c0:	0324      	lsls	r4, r4, #12
 80027c2:	4223      	tst	r3, r4
 80027c4:	d007      	beq.n	80027d6 <__aeabi_dsub+0x372>
 80027c6:	08ce      	lsrs	r6, r1, #3
 80027c8:	4226      	tst	r6, r4
 80027ca:	d104      	bne.n	80027d6 <__aeabi_dsub+0x372>
 80027cc:	465d      	mov	r5, fp
 80027ce:	0033      	movs	r3, r6
 80027d0:	08c2      	lsrs	r2, r0, #3
 80027d2:	0749      	lsls	r1, r1, #29
 80027d4:	430a      	orrs	r2, r1
 80027d6:	0f51      	lsrs	r1, r2, #29
 80027d8:	00d2      	lsls	r2, r2, #3
 80027da:	08d2      	lsrs	r2, r2, #3
 80027dc:	0749      	lsls	r1, r1, #29
 80027de:	430a      	orrs	r2, r1
 80027e0:	0011      	movs	r1, r2
 80027e2:	4319      	orrs	r1, r3
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x384>
 80027e6:	e1c8      	b.n	8002b7a <__aeabi_dsub+0x716>
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	0309      	lsls	r1, r1, #12
 80027ec:	430b      	orrs	r3, r1
 80027ee:	031b      	lsls	r3, r3, #12
 80027f0:	49d5      	ldr	r1, [pc, #852]	; (8002b48 <__aeabi_dsub+0x6e4>)
 80027f2:	0b1b      	lsrs	r3, r3, #12
 80027f4:	e6da      	b.n	80025ac <__aeabi_dsub+0x148>
 80027f6:	49d5      	ldr	r1, [pc, #852]	; (8002b4c <__aeabi_dsub+0x6e8>)
 80027f8:	1ab6      	subs	r6, r6, r2
 80027fa:	400b      	ands	r3, r1
 80027fc:	4698      	mov	r8, r3
 80027fe:	e6b5      	b.n	800256c <__aeabi_dsub+0x108>
 8002800:	0020      	movs	r0, r4
 8002802:	f000 fb2d 	bl	8002e60 <__clzsi2>
 8002806:	0002      	movs	r2, r0
 8002808:	3218      	adds	r2, #24
 800280a:	2a1f      	cmp	r2, #31
 800280c:	dc00      	bgt.n	8002810 <__aeabi_dsub+0x3ac>
 800280e:	e68f      	b.n	8002530 <__aeabi_dsub+0xcc>
 8002810:	0023      	movs	r3, r4
 8002812:	3808      	subs	r0, #8
 8002814:	4083      	lsls	r3, r0
 8002816:	2400      	movs	r4, #0
 8002818:	e692      	b.n	8002540 <__aeabi_dsub+0xdc>
 800281a:	4308      	orrs	r0, r1
 800281c:	0002      	movs	r2, r0
 800281e:	1e50      	subs	r0, r2, #1
 8002820:	4182      	sbcs	r2, r0
 8002822:	e66d      	b.n	8002500 <__aeabi_dsub+0x9c>
 8002824:	4cca      	ldr	r4, [pc, #808]	; (8002b50 <__aeabi_dsub+0x6ec>)
 8002826:	1c72      	adds	r2, r6, #1
 8002828:	4222      	tst	r2, r4
 800282a:	d000      	beq.n	800282e <__aeabi_dsub+0x3ca>
 800282c:	e0ad      	b.n	800298a <__aeabi_dsub+0x526>
 800282e:	464a      	mov	r2, r9
 8002830:	431a      	orrs	r2, r3
 8002832:	2e00      	cmp	r6, #0
 8002834:	d1b8      	bne.n	80027a8 <__aeabi_dsub+0x344>
 8002836:	2a00      	cmp	r2, #0
 8002838:	d100      	bne.n	800283c <__aeabi_dsub+0x3d8>
 800283a:	e158      	b.n	8002aee <__aeabi_dsub+0x68a>
 800283c:	000a      	movs	r2, r1
 800283e:	4302      	orrs	r2, r0
 8002840:	d000      	beq.n	8002844 <__aeabi_dsub+0x3e0>
 8002842:	e159      	b.n	8002af8 <__aeabi_dsub+0x694>
 8002844:	464a      	mov	r2, r9
 8002846:	0759      	lsls	r1, r3, #29
 8002848:	08d2      	lsrs	r2, r2, #3
 800284a:	430a      	orrs	r2, r1
 800284c:	08db      	lsrs	r3, r3, #3
 800284e:	e786      	b.n	800275e <__aeabi_dsub+0x2fa>
 8002850:	464a      	mov	r2, r9
 8002852:	0759      	lsls	r1, r3, #29
 8002854:	08d2      	lsrs	r2, r2, #3
 8002856:	430a      	orrs	r2, r1
 8002858:	08db      	lsrs	r3, r3, #3
 800285a:	e7c1      	b.n	80027e0 <__aeabi_dsub+0x37c>
 800285c:	4dba      	ldr	r5, [pc, #744]	; (8002b48 <__aeabi_dsub+0x6e4>)
 800285e:	42aa      	cmp	r2, r5
 8002860:	d100      	bne.n	8002864 <__aeabi_dsub+0x400>
 8002862:	e11e      	b.n	8002aa2 <__aeabi_dsub+0x63e>
 8002864:	2580      	movs	r5, #128	; 0x80
 8002866:	042d      	lsls	r5, r5, #16
 8002868:	432b      	orrs	r3, r5
 800286a:	4664      	mov	r4, ip
 800286c:	2c38      	cmp	r4, #56	; 0x38
 800286e:	dc5d      	bgt.n	800292c <__aeabi_dsub+0x4c8>
 8002870:	2c1f      	cmp	r4, #31
 8002872:	dd00      	ble.n	8002876 <__aeabi_dsub+0x412>
 8002874:	e0d0      	b.n	8002a18 <__aeabi_dsub+0x5b4>
 8002876:	2520      	movs	r5, #32
 8002878:	4667      	mov	r7, ip
 800287a:	1b2d      	subs	r5, r5, r4
 800287c:	464e      	mov	r6, r9
 800287e:	001c      	movs	r4, r3
 8002880:	40fe      	lsrs	r6, r7
 8002882:	40ac      	lsls	r4, r5
 8002884:	4334      	orrs	r4, r6
 8002886:	464e      	mov	r6, r9
 8002888:	40ae      	lsls	r6, r5
 800288a:	0035      	movs	r5, r6
 800288c:	40fb      	lsrs	r3, r7
 800288e:	1e6e      	subs	r6, r5, #1
 8002890:	41b5      	sbcs	r5, r6
 8002892:	1ac9      	subs	r1, r1, r3
 8002894:	432c      	orrs	r4, r5
 8002896:	e04e      	b.n	8002936 <__aeabi_dsub+0x4d2>
 8002898:	464a      	mov	r2, r9
 800289a:	1a14      	subs	r4, r2, r0
 800289c:	45a1      	cmp	r9, r4
 800289e:	4192      	sbcs	r2, r2
 80028a0:	4252      	negs	r2, r2
 80028a2:	4690      	mov	r8, r2
 80028a4:	1a5f      	subs	r7, r3, r1
 80028a6:	003a      	movs	r2, r7
 80028a8:	4647      	mov	r7, r8
 80028aa:	1bd2      	subs	r2, r2, r7
 80028ac:	4690      	mov	r8, r2
 80028ae:	0212      	lsls	r2, r2, #8
 80028b0:	d500      	bpl.n	80028b4 <__aeabi_dsub+0x450>
 80028b2:	e08b      	b.n	80029cc <__aeabi_dsub+0x568>
 80028b4:	4642      	mov	r2, r8
 80028b6:	4322      	orrs	r2, r4
 80028b8:	d000      	beq.n	80028bc <__aeabi_dsub+0x458>
 80028ba:	e630      	b.n	800251e <__aeabi_dsub+0xba>
 80028bc:	2300      	movs	r3, #0
 80028be:	2500      	movs	r5, #0
 80028c0:	e74d      	b.n	800275e <__aeabi_dsub+0x2fa>
 80028c2:	464a      	mov	r2, r9
 80028c4:	0759      	lsls	r1, r3, #29
 80028c6:	08d2      	lsrs	r2, r2, #3
 80028c8:	430a      	orrs	r2, r1
 80028ca:	08db      	lsrs	r3, r3, #3
 80028cc:	e744      	b.n	8002758 <__aeabi_dsub+0x2f4>
 80028ce:	4642      	mov	r2, r8
 80028d0:	4b9e      	ldr	r3, [pc, #632]	; (8002b4c <__aeabi_dsub+0x6e8>)
 80028d2:	0861      	lsrs	r1, r4, #1
 80028d4:	401a      	ands	r2, r3
 80028d6:	0013      	movs	r3, r2
 80028d8:	2201      	movs	r2, #1
 80028da:	4014      	ands	r4, r2
 80028dc:	430c      	orrs	r4, r1
 80028de:	07da      	lsls	r2, r3, #31
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	4698      	mov	r8, r3
 80028e4:	4314      	orrs	r4, r2
 80028e6:	e641      	b.n	800256c <__aeabi_dsub+0x108>
 80028e8:	001a      	movs	r2, r3
 80028ea:	3e1f      	subs	r6, #31
 80028ec:	40f2      	lsrs	r2, r6
 80028ee:	0016      	movs	r6, r2
 80028f0:	2920      	cmp	r1, #32
 80028f2:	d003      	beq.n	80028fc <__aeabi_dsub+0x498>
 80028f4:	2240      	movs	r2, #64	; 0x40
 80028f6:	1a51      	subs	r1, r2, r1
 80028f8:	408b      	lsls	r3, r1
 80028fa:	431c      	orrs	r4, r3
 80028fc:	1e62      	subs	r2, r4, #1
 80028fe:	4194      	sbcs	r4, r2
 8002900:	2300      	movs	r3, #0
 8002902:	4334      	orrs	r4, r6
 8002904:	4698      	mov	r8, r3
 8002906:	2600      	movs	r6, #0
 8002908:	e71d      	b.n	8002746 <__aeabi_dsub+0x2e2>
 800290a:	000c      	movs	r4, r1
 800290c:	3a20      	subs	r2, #32
 800290e:	40d4      	lsrs	r4, r2
 8002910:	0022      	movs	r2, r4
 8002912:	4664      	mov	r4, ip
 8002914:	2c20      	cmp	r4, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x4be>
 8002918:	2740      	movs	r7, #64	; 0x40
 800291a:	1b3f      	subs	r7, r7, r4
 800291c:	40b9      	lsls	r1, r7
 800291e:	4308      	orrs	r0, r1
 8002920:	4680      	mov	r8, r0
 8002922:	4644      	mov	r4, r8
 8002924:	1e61      	subs	r1, r4, #1
 8002926:	418c      	sbcs	r4, r1
 8002928:	4322      	orrs	r2, r4
 800292a:	e5e9      	b.n	8002500 <__aeabi_dsub+0x9c>
 800292c:	464c      	mov	r4, r9
 800292e:	4323      	orrs	r3, r4
 8002930:	001c      	movs	r4, r3
 8002932:	1e63      	subs	r3, r4, #1
 8002934:	419c      	sbcs	r4, r3
 8002936:	1b04      	subs	r4, r0, r4
 8002938:	42a0      	cmp	r0, r4
 800293a:	419b      	sbcs	r3, r3
 800293c:	425b      	negs	r3, r3
 800293e:	1acb      	subs	r3, r1, r3
 8002940:	4698      	mov	r8, r3
 8002942:	465d      	mov	r5, fp
 8002944:	0016      	movs	r6, r2
 8002946:	e5e2      	b.n	800250e <__aeabi_dsub+0xaa>
 8002948:	464e      	mov	r6, r9
 800294a:	431e      	orrs	r6, r3
 800294c:	d100      	bne.n	8002950 <__aeabi_dsub+0x4ec>
 800294e:	e0ae      	b.n	8002aae <__aeabi_dsub+0x64a>
 8002950:	1e66      	subs	r6, r4, #1
 8002952:	2c01      	cmp	r4, #1
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x4f4>
 8002956:	e0fd      	b.n	8002b54 <__aeabi_dsub+0x6f0>
 8002958:	4f7b      	ldr	r7, [pc, #492]	; (8002b48 <__aeabi_dsub+0x6e4>)
 800295a:	42bc      	cmp	r4, r7
 800295c:	d100      	bne.n	8002960 <__aeabi_dsub+0x4fc>
 800295e:	e107      	b.n	8002b70 <__aeabi_dsub+0x70c>
 8002960:	46b4      	mov	ip, r6
 8002962:	e69b      	b.n	800269c <__aeabi_dsub+0x238>
 8002964:	4664      	mov	r4, ip
 8002966:	2220      	movs	r2, #32
 8002968:	1b12      	subs	r2, r2, r4
 800296a:	000c      	movs	r4, r1
 800296c:	4094      	lsls	r4, r2
 800296e:	0007      	movs	r7, r0
 8002970:	4090      	lsls	r0, r2
 8002972:	46a0      	mov	r8, r4
 8002974:	4664      	mov	r4, ip
 8002976:	1e42      	subs	r2, r0, #1
 8002978:	4190      	sbcs	r0, r2
 800297a:	4662      	mov	r2, ip
 800297c:	40e7      	lsrs	r7, r4
 800297e:	4644      	mov	r4, r8
 8002980:	40d1      	lsrs	r1, r2
 8002982:	433c      	orrs	r4, r7
 8002984:	4304      	orrs	r4, r0
 8002986:	185b      	adds	r3, r3, r1
 8002988:	e6f3      	b.n	8002772 <__aeabi_dsub+0x30e>
 800298a:	4c6f      	ldr	r4, [pc, #444]	; (8002b48 <__aeabi_dsub+0x6e4>)
 800298c:	42a2      	cmp	r2, r4
 800298e:	d100      	bne.n	8002992 <__aeabi_dsub+0x52e>
 8002990:	e0d5      	b.n	8002b3e <__aeabi_dsub+0x6da>
 8002992:	4448      	add	r0, r9
 8002994:	185b      	adds	r3, r3, r1
 8002996:	4548      	cmp	r0, r9
 8002998:	4189      	sbcs	r1, r1
 800299a:	4249      	negs	r1, r1
 800299c:	185b      	adds	r3, r3, r1
 800299e:	07dc      	lsls	r4, r3, #31
 80029a0:	0840      	lsrs	r0, r0, #1
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	4698      	mov	r8, r3
 80029a6:	0016      	movs	r6, r2
 80029a8:	4304      	orrs	r4, r0
 80029aa:	e6cc      	b.n	8002746 <__aeabi_dsub+0x2e2>
 80029ac:	2a00      	cmp	r2, #0
 80029ae:	d000      	beq.n	80029b2 <__aeabi_dsub+0x54e>
 80029b0:	e082      	b.n	8002ab8 <__aeabi_dsub+0x654>
 80029b2:	000a      	movs	r2, r1
 80029b4:	4302      	orrs	r2, r0
 80029b6:	d140      	bne.n	8002a3a <__aeabi_dsub+0x5d6>
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	2500      	movs	r5, #0
 80029bc:	031b      	lsls	r3, r3, #12
 80029be:	e713      	b.n	80027e8 <__aeabi_dsub+0x384>
 80029c0:	074b      	lsls	r3, r1, #29
 80029c2:	08c2      	lsrs	r2, r0, #3
 80029c4:	431a      	orrs	r2, r3
 80029c6:	465d      	mov	r5, fp
 80029c8:	08cb      	lsrs	r3, r1, #3
 80029ca:	e6c5      	b.n	8002758 <__aeabi_dsub+0x2f4>
 80029cc:	464a      	mov	r2, r9
 80029ce:	1a84      	subs	r4, r0, r2
 80029d0:	42a0      	cmp	r0, r4
 80029d2:	4192      	sbcs	r2, r2
 80029d4:	1acb      	subs	r3, r1, r3
 80029d6:	4252      	negs	r2, r2
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	4698      	mov	r8, r3
 80029dc:	465d      	mov	r5, fp
 80029de:	e59e      	b.n	800251e <__aeabi_dsub+0xba>
 80029e0:	464a      	mov	r2, r9
 80029e2:	0759      	lsls	r1, r3, #29
 80029e4:	08d2      	lsrs	r2, r2, #3
 80029e6:	430a      	orrs	r2, r1
 80029e8:	08db      	lsrs	r3, r3, #3
 80029ea:	e6f9      	b.n	80027e0 <__aeabi_dsub+0x37c>
 80029ec:	464a      	mov	r2, r9
 80029ee:	1a14      	subs	r4, r2, r0
 80029f0:	45a1      	cmp	r9, r4
 80029f2:	4192      	sbcs	r2, r2
 80029f4:	1a5b      	subs	r3, r3, r1
 80029f6:	4252      	negs	r2, r2
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	4698      	mov	r8, r3
 80029fc:	2601      	movs	r6, #1
 80029fe:	e586      	b.n	800250e <__aeabi_dsub+0xaa>
 8002a00:	464a      	mov	r2, r9
 8002a02:	0759      	lsls	r1, r3, #29
 8002a04:	08d2      	lsrs	r2, r2, #3
 8002a06:	430a      	orrs	r2, r1
 8002a08:	08db      	lsrs	r3, r3, #3
 8002a0a:	e6a5      	b.n	8002758 <__aeabi_dsub+0x2f4>
 8002a0c:	464c      	mov	r4, r9
 8002a0e:	4323      	orrs	r3, r4
 8002a10:	001c      	movs	r4, r3
 8002a12:	1e63      	subs	r3, r4, #1
 8002a14:	419c      	sbcs	r4, r3
 8002a16:	e65b      	b.n	80026d0 <__aeabi_dsub+0x26c>
 8002a18:	4665      	mov	r5, ip
 8002a1a:	001e      	movs	r6, r3
 8002a1c:	3d20      	subs	r5, #32
 8002a1e:	40ee      	lsrs	r6, r5
 8002a20:	2c20      	cmp	r4, #32
 8002a22:	d005      	beq.n	8002a30 <__aeabi_dsub+0x5cc>
 8002a24:	2540      	movs	r5, #64	; 0x40
 8002a26:	1b2d      	subs	r5, r5, r4
 8002a28:	40ab      	lsls	r3, r5
 8002a2a:	464c      	mov	r4, r9
 8002a2c:	431c      	orrs	r4, r3
 8002a2e:	46a2      	mov	sl, r4
 8002a30:	4654      	mov	r4, sl
 8002a32:	1e63      	subs	r3, r4, #1
 8002a34:	419c      	sbcs	r4, r3
 8002a36:	4334      	orrs	r4, r6
 8002a38:	e77d      	b.n	8002936 <__aeabi_dsub+0x4d2>
 8002a3a:	074b      	lsls	r3, r1, #29
 8002a3c:	08c2      	lsrs	r2, r0, #3
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	465d      	mov	r5, fp
 8002a42:	08cb      	lsrs	r3, r1, #3
 8002a44:	e6cc      	b.n	80027e0 <__aeabi_dsub+0x37c>
 8002a46:	000a      	movs	r2, r1
 8002a48:	4302      	orrs	r2, r0
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x5ea>
 8002a4c:	e736      	b.n	80028bc <__aeabi_dsub+0x458>
 8002a4e:	074b      	lsls	r3, r1, #29
 8002a50:	08c2      	lsrs	r2, r0, #3
 8002a52:	431a      	orrs	r2, r3
 8002a54:	465d      	mov	r5, fp
 8002a56:	08cb      	lsrs	r3, r1, #3
 8002a58:	e681      	b.n	800275e <__aeabi_dsub+0x2fa>
 8002a5a:	464a      	mov	r2, r9
 8002a5c:	1a84      	subs	r4, r0, r2
 8002a5e:	42a0      	cmp	r0, r4
 8002a60:	4192      	sbcs	r2, r2
 8002a62:	1acb      	subs	r3, r1, r3
 8002a64:	4252      	negs	r2, r2
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	4698      	mov	r8, r3
 8002a6a:	465d      	mov	r5, fp
 8002a6c:	2601      	movs	r6, #1
 8002a6e:	e54e      	b.n	800250e <__aeabi_dsub+0xaa>
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	08c2      	lsrs	r2, r0, #3
 8002a74:	431a      	orrs	r2, r3
 8002a76:	08cb      	lsrs	r3, r1, #3
 8002a78:	e6b2      	b.n	80027e0 <__aeabi_dsub+0x37c>
 8002a7a:	464a      	mov	r2, r9
 8002a7c:	1a14      	subs	r4, r2, r0
 8002a7e:	45a1      	cmp	r9, r4
 8002a80:	4192      	sbcs	r2, r2
 8002a82:	1a5f      	subs	r7, r3, r1
 8002a84:	4252      	negs	r2, r2
 8002a86:	1aba      	subs	r2, r7, r2
 8002a88:	4690      	mov	r8, r2
 8002a8a:	0212      	lsls	r2, r2, #8
 8002a8c:	d56b      	bpl.n	8002b66 <__aeabi_dsub+0x702>
 8002a8e:	464a      	mov	r2, r9
 8002a90:	1a84      	subs	r4, r0, r2
 8002a92:	42a0      	cmp	r0, r4
 8002a94:	4192      	sbcs	r2, r2
 8002a96:	1acb      	subs	r3, r1, r3
 8002a98:	4252      	negs	r2, r2
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	4698      	mov	r8, r3
 8002a9e:	465d      	mov	r5, fp
 8002aa0:	e564      	b.n	800256c <__aeabi_dsub+0x108>
 8002aa2:	074b      	lsls	r3, r1, #29
 8002aa4:	08c2      	lsrs	r2, r0, #3
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	465d      	mov	r5, fp
 8002aaa:	08cb      	lsrs	r3, r1, #3
 8002aac:	e698      	b.n	80027e0 <__aeabi_dsub+0x37c>
 8002aae:	074b      	lsls	r3, r1, #29
 8002ab0:	08c2      	lsrs	r2, r0, #3
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	08cb      	lsrs	r3, r1, #3
 8002ab6:	e64f      	b.n	8002758 <__aeabi_dsub+0x2f4>
 8002ab8:	000a      	movs	r2, r1
 8002aba:	4302      	orrs	r2, r0
 8002abc:	d090      	beq.n	80029e0 <__aeabi_dsub+0x57c>
 8002abe:	464a      	mov	r2, r9
 8002ac0:	075c      	lsls	r4, r3, #29
 8002ac2:	08d2      	lsrs	r2, r2, #3
 8002ac4:	4314      	orrs	r4, r2
 8002ac6:	2280      	movs	r2, #128	; 0x80
 8002ac8:	08db      	lsrs	r3, r3, #3
 8002aca:	0312      	lsls	r2, r2, #12
 8002acc:	4213      	tst	r3, r2
 8002ace:	d008      	beq.n	8002ae2 <__aeabi_dsub+0x67e>
 8002ad0:	08ce      	lsrs	r6, r1, #3
 8002ad2:	4216      	tst	r6, r2
 8002ad4:	d105      	bne.n	8002ae2 <__aeabi_dsub+0x67e>
 8002ad6:	08c0      	lsrs	r0, r0, #3
 8002ad8:	0749      	lsls	r1, r1, #29
 8002ada:	4308      	orrs	r0, r1
 8002adc:	0004      	movs	r4, r0
 8002ade:	465d      	mov	r5, fp
 8002ae0:	0033      	movs	r3, r6
 8002ae2:	0f61      	lsrs	r1, r4, #29
 8002ae4:	00e2      	lsls	r2, r4, #3
 8002ae6:	0749      	lsls	r1, r1, #29
 8002ae8:	08d2      	lsrs	r2, r2, #3
 8002aea:	430a      	orrs	r2, r1
 8002aec:	e678      	b.n	80027e0 <__aeabi_dsub+0x37c>
 8002aee:	074b      	lsls	r3, r1, #29
 8002af0:	08c2      	lsrs	r2, r0, #3
 8002af2:	431a      	orrs	r2, r3
 8002af4:	08cb      	lsrs	r3, r1, #3
 8002af6:	e632      	b.n	800275e <__aeabi_dsub+0x2fa>
 8002af8:	4448      	add	r0, r9
 8002afa:	185b      	adds	r3, r3, r1
 8002afc:	4548      	cmp	r0, r9
 8002afe:	4192      	sbcs	r2, r2
 8002b00:	4698      	mov	r8, r3
 8002b02:	4252      	negs	r2, r2
 8002b04:	4490      	add	r8, r2
 8002b06:	4643      	mov	r3, r8
 8002b08:	0004      	movs	r4, r0
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	d400      	bmi.n	8002b10 <__aeabi_dsub+0x6ac>
 8002b0e:	e61a      	b.n	8002746 <__aeabi_dsub+0x2e2>
 8002b10:	4642      	mov	r2, r8
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <__aeabi_dsub+0x6e8>)
 8002b14:	2601      	movs	r6, #1
 8002b16:	401a      	ands	r2, r3
 8002b18:	4690      	mov	r8, r2
 8002b1a:	e614      	b.n	8002746 <__aeabi_dsub+0x2e2>
 8002b1c:	4666      	mov	r6, ip
 8002b1e:	001f      	movs	r7, r3
 8002b20:	3e20      	subs	r6, #32
 8002b22:	40f7      	lsrs	r7, r6
 8002b24:	2c20      	cmp	r4, #32
 8002b26:	d005      	beq.n	8002b34 <__aeabi_dsub+0x6d0>
 8002b28:	2640      	movs	r6, #64	; 0x40
 8002b2a:	1b36      	subs	r6, r6, r4
 8002b2c:	40b3      	lsls	r3, r6
 8002b2e:	464c      	mov	r4, r9
 8002b30:	431c      	orrs	r4, r3
 8002b32:	46a2      	mov	sl, r4
 8002b34:	4654      	mov	r4, sl
 8002b36:	1e63      	subs	r3, r4, #1
 8002b38:	419c      	sbcs	r4, r3
 8002b3a:	433c      	orrs	r4, r7
 8002b3c:	e5c8      	b.n	80026d0 <__aeabi_dsub+0x26c>
 8002b3e:	0011      	movs	r1, r2
 8002b40:	2300      	movs	r3, #0
 8002b42:	2200      	movs	r2, #0
 8002b44:	e532      	b.n	80025ac <__aeabi_dsub+0x148>
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	000007ff 	.word	0x000007ff
 8002b4c:	ff7fffff 	.word	0xff7fffff
 8002b50:	000007fe 	.word	0x000007fe
 8002b54:	464a      	mov	r2, r9
 8002b56:	1814      	adds	r4, r2, r0
 8002b58:	4284      	cmp	r4, r0
 8002b5a:	4192      	sbcs	r2, r2
 8002b5c:	185b      	adds	r3, r3, r1
 8002b5e:	4698      	mov	r8, r3
 8002b60:	4252      	negs	r2, r2
 8002b62:	4490      	add	r8, r2
 8002b64:	e5e9      	b.n	800273a <__aeabi_dsub+0x2d6>
 8002b66:	4642      	mov	r2, r8
 8002b68:	4322      	orrs	r2, r4
 8002b6a:	d100      	bne.n	8002b6e <__aeabi_dsub+0x70a>
 8002b6c:	e6a6      	b.n	80028bc <__aeabi_dsub+0x458>
 8002b6e:	e5ea      	b.n	8002746 <__aeabi_dsub+0x2e2>
 8002b70:	074b      	lsls	r3, r1, #29
 8002b72:	08c2      	lsrs	r2, r0, #3
 8002b74:	431a      	orrs	r2, r3
 8002b76:	08cb      	lsrs	r3, r1, #3
 8002b78:	e632      	b.n	80027e0 <__aeabi_dsub+0x37c>
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	4901      	ldr	r1, [pc, #4]	; (8002b84 <__aeabi_dsub+0x720>)
 8002b7e:	0013      	movs	r3, r2
 8002b80:	e514      	b.n	80025ac <__aeabi_dsub+0x148>
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	000007ff 	.word	0x000007ff

08002b88 <__aeabi_dcmpun>:
 8002b88:	b570      	push	{r4, r5, r6, lr}
 8002b8a:	0005      	movs	r5, r0
 8002b8c:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <__aeabi_dcmpun+0x38>)
 8002b8e:	030c      	lsls	r4, r1, #12
 8002b90:	0016      	movs	r6, r2
 8002b92:	0049      	lsls	r1, r1, #1
 8002b94:	031a      	lsls	r2, r3, #12
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	0b24      	lsrs	r4, r4, #12
 8002b9a:	0d49      	lsrs	r1, r1, #21
 8002b9c:	0b12      	lsrs	r2, r2, #12
 8002b9e:	0d5b      	lsrs	r3, r3, #21
 8002ba0:	4281      	cmp	r1, r0
 8002ba2:	d008      	beq.n	8002bb6 <__aeabi_dcmpun+0x2e>
 8002ba4:	4906      	ldr	r1, [pc, #24]	; (8002bc0 <__aeabi_dcmpun+0x38>)
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	428b      	cmp	r3, r1
 8002baa:	d103      	bne.n	8002bb4 <__aeabi_dcmpun+0x2c>
 8002bac:	4332      	orrs	r2, r6
 8002bae:	0010      	movs	r0, r2
 8002bb0:	1e42      	subs	r2, r0, #1
 8002bb2:	4190      	sbcs	r0, r2
 8002bb4:	bd70      	pop	{r4, r5, r6, pc}
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	432c      	orrs	r4, r5
 8002bba:	d1fb      	bne.n	8002bb4 <__aeabi_dcmpun+0x2c>
 8002bbc:	e7f2      	b.n	8002ba4 <__aeabi_dcmpun+0x1c>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	000007ff 	.word	0x000007ff

08002bc4 <__aeabi_d2iz>:
 8002bc4:	000a      	movs	r2, r1
 8002bc6:	b530      	push	{r4, r5, lr}
 8002bc8:	4c13      	ldr	r4, [pc, #76]	; (8002c18 <__aeabi_d2iz+0x54>)
 8002bca:	0053      	lsls	r3, r2, #1
 8002bcc:	0309      	lsls	r1, r1, #12
 8002bce:	0005      	movs	r5, r0
 8002bd0:	0b09      	lsrs	r1, r1, #12
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	0d5b      	lsrs	r3, r3, #21
 8002bd6:	0fd2      	lsrs	r2, r2, #31
 8002bd8:	42a3      	cmp	r3, r4
 8002bda:	dd04      	ble.n	8002be6 <__aeabi_d2iz+0x22>
 8002bdc:	480f      	ldr	r0, [pc, #60]	; (8002c1c <__aeabi_d2iz+0x58>)
 8002bde:	4283      	cmp	r3, r0
 8002be0:	dd02      	ble.n	8002be8 <__aeabi_d2iz+0x24>
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <__aeabi_d2iz+0x5c>)
 8002be4:	18d0      	adds	r0, r2, r3
 8002be6:	bd30      	pop	{r4, r5, pc}
 8002be8:	2080      	movs	r0, #128	; 0x80
 8002bea:	0340      	lsls	r0, r0, #13
 8002bec:	4301      	orrs	r1, r0
 8002bee:	480d      	ldr	r0, [pc, #52]	; (8002c24 <__aeabi_d2iz+0x60>)
 8002bf0:	1ac0      	subs	r0, r0, r3
 8002bf2:	281f      	cmp	r0, #31
 8002bf4:	dd08      	ble.n	8002c08 <__aeabi_d2iz+0x44>
 8002bf6:	480c      	ldr	r0, [pc, #48]	; (8002c28 <__aeabi_d2iz+0x64>)
 8002bf8:	1ac3      	subs	r3, r0, r3
 8002bfa:	40d9      	lsrs	r1, r3
 8002bfc:	000b      	movs	r3, r1
 8002bfe:	4258      	negs	r0, r3
 8002c00:	2a00      	cmp	r2, #0
 8002c02:	d1f0      	bne.n	8002be6 <__aeabi_d2iz+0x22>
 8002c04:	0018      	movs	r0, r3
 8002c06:	e7ee      	b.n	8002be6 <__aeabi_d2iz+0x22>
 8002c08:	4c08      	ldr	r4, [pc, #32]	; (8002c2c <__aeabi_d2iz+0x68>)
 8002c0a:	40c5      	lsrs	r5, r0
 8002c0c:	46a4      	mov	ip, r4
 8002c0e:	4463      	add	r3, ip
 8002c10:	4099      	lsls	r1, r3
 8002c12:	000b      	movs	r3, r1
 8002c14:	432b      	orrs	r3, r5
 8002c16:	e7f2      	b.n	8002bfe <__aeabi_d2iz+0x3a>
 8002c18:	000003fe 	.word	0x000003fe
 8002c1c:	0000041d 	.word	0x0000041d
 8002c20:	7fffffff 	.word	0x7fffffff
 8002c24:	00000433 	.word	0x00000433
 8002c28:	00000413 	.word	0x00000413
 8002c2c:	fffffbed 	.word	0xfffffbed

08002c30 <__aeabi_i2d>:
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d016      	beq.n	8002c64 <__aeabi_i2d+0x34>
 8002c36:	17c3      	asrs	r3, r0, #31
 8002c38:	18c5      	adds	r5, r0, r3
 8002c3a:	405d      	eors	r5, r3
 8002c3c:	0fc4      	lsrs	r4, r0, #31
 8002c3e:	0028      	movs	r0, r5
 8002c40:	f000 f90e 	bl	8002e60 <__clzsi2>
 8002c44:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <__aeabi_i2d+0x5c>)
 8002c46:	1a12      	subs	r2, r2, r0
 8002c48:	280a      	cmp	r0, #10
 8002c4a:	dc16      	bgt.n	8002c7a <__aeabi_i2d+0x4a>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	002e      	movs	r6, r5
 8002c50:	3315      	adds	r3, #21
 8002c52:	409e      	lsls	r6, r3
 8002c54:	230b      	movs	r3, #11
 8002c56:	1a18      	subs	r0, r3, r0
 8002c58:	40c5      	lsrs	r5, r0
 8002c5a:	0553      	lsls	r3, r2, #21
 8002c5c:	032d      	lsls	r5, r5, #12
 8002c5e:	0b2d      	lsrs	r5, r5, #12
 8002c60:	0d5b      	lsrs	r3, r3, #21
 8002c62:	e003      	b.n	8002c6c <__aeabi_i2d+0x3c>
 8002c64:	2400      	movs	r4, #0
 8002c66:	2300      	movs	r3, #0
 8002c68:	2500      	movs	r5, #0
 8002c6a:	2600      	movs	r6, #0
 8002c6c:	051b      	lsls	r3, r3, #20
 8002c6e:	432b      	orrs	r3, r5
 8002c70:	07e4      	lsls	r4, r4, #31
 8002c72:	4323      	orrs	r3, r4
 8002c74:	0030      	movs	r0, r6
 8002c76:	0019      	movs	r1, r3
 8002c78:	bd70      	pop	{r4, r5, r6, pc}
 8002c7a:	380b      	subs	r0, #11
 8002c7c:	4085      	lsls	r5, r0
 8002c7e:	0553      	lsls	r3, r2, #21
 8002c80:	032d      	lsls	r5, r5, #12
 8002c82:	2600      	movs	r6, #0
 8002c84:	0b2d      	lsrs	r5, r5, #12
 8002c86:	0d5b      	lsrs	r3, r3, #21
 8002c88:	e7f0      	b.n	8002c6c <__aeabi_i2d+0x3c>
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	0000041e 	.word	0x0000041e

08002c90 <__aeabi_ui2d>:
 8002c90:	b510      	push	{r4, lr}
 8002c92:	1e04      	subs	r4, r0, #0
 8002c94:	d010      	beq.n	8002cb8 <__aeabi_ui2d+0x28>
 8002c96:	f000 f8e3 	bl	8002e60 <__clzsi2>
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <__aeabi_ui2d+0x48>)
 8002c9c:	1a1b      	subs	r3, r3, r0
 8002c9e:	280a      	cmp	r0, #10
 8002ca0:	dc11      	bgt.n	8002cc6 <__aeabi_ui2d+0x36>
 8002ca2:	220b      	movs	r2, #11
 8002ca4:	0021      	movs	r1, r4
 8002ca6:	1a12      	subs	r2, r2, r0
 8002ca8:	40d1      	lsrs	r1, r2
 8002caa:	3015      	adds	r0, #21
 8002cac:	030a      	lsls	r2, r1, #12
 8002cae:	055b      	lsls	r3, r3, #21
 8002cb0:	4084      	lsls	r4, r0
 8002cb2:	0b12      	lsrs	r2, r2, #12
 8002cb4:	0d5b      	lsrs	r3, r3, #21
 8002cb6:	e001      	b.n	8002cbc <__aeabi_ui2d+0x2c>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2200      	movs	r2, #0
 8002cbc:	051b      	lsls	r3, r3, #20
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	0020      	movs	r0, r4
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	bd10      	pop	{r4, pc}
 8002cc6:	0022      	movs	r2, r4
 8002cc8:	380b      	subs	r0, #11
 8002cca:	4082      	lsls	r2, r0
 8002ccc:	055b      	lsls	r3, r3, #21
 8002cce:	0312      	lsls	r2, r2, #12
 8002cd0:	2400      	movs	r4, #0
 8002cd2:	0b12      	lsrs	r2, r2, #12
 8002cd4:	0d5b      	lsrs	r3, r3, #21
 8002cd6:	e7f1      	b.n	8002cbc <__aeabi_ui2d+0x2c>
 8002cd8:	0000041e 	.word	0x0000041e

08002cdc <__aeabi_d2f>:
 8002cdc:	0002      	movs	r2, r0
 8002cde:	004b      	lsls	r3, r1, #1
 8002ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce2:	0308      	lsls	r0, r1, #12
 8002ce4:	0d5b      	lsrs	r3, r3, #21
 8002ce6:	4e3d      	ldr	r6, [pc, #244]	; (8002ddc <__aeabi_d2f+0x100>)
 8002ce8:	0fcc      	lsrs	r4, r1, #31
 8002cea:	0a40      	lsrs	r0, r0, #9
 8002cec:	0f51      	lsrs	r1, r2, #29
 8002cee:	1c5f      	adds	r7, r3, #1
 8002cf0:	4308      	orrs	r0, r1
 8002cf2:	00d5      	lsls	r5, r2, #3
 8002cf4:	4237      	tst	r7, r6
 8002cf6:	d00a      	beq.n	8002d0e <__aeabi_d2f+0x32>
 8002cf8:	4939      	ldr	r1, [pc, #228]	; (8002de0 <__aeabi_d2f+0x104>)
 8002cfa:	185e      	adds	r6, r3, r1
 8002cfc:	2efe      	cmp	r6, #254	; 0xfe
 8002cfe:	dd16      	ble.n	8002d2e <__aeabi_d2f+0x52>
 8002d00:	23ff      	movs	r3, #255	; 0xff
 8002d02:	2100      	movs	r1, #0
 8002d04:	05db      	lsls	r3, r3, #23
 8002d06:	430b      	orrs	r3, r1
 8002d08:	07e0      	lsls	r0, r4, #31
 8002d0a:	4318      	orrs	r0, r3
 8002d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <__aeabi_d2f+0x44>
 8002d12:	4328      	orrs	r0, r5
 8002d14:	d027      	beq.n	8002d66 <__aeabi_d2f+0x8a>
 8002d16:	2105      	movs	r1, #5
 8002d18:	0189      	lsls	r1, r1, #6
 8002d1a:	0a49      	lsrs	r1, r1, #9
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e7f1      	b.n	8002d04 <__aeabi_d2f+0x28>
 8002d20:	4305      	orrs	r5, r0
 8002d22:	d0ed      	beq.n	8002d00 <__aeabi_d2f+0x24>
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	03c9      	lsls	r1, r1, #15
 8002d28:	23ff      	movs	r3, #255	; 0xff
 8002d2a:	4301      	orrs	r1, r0
 8002d2c:	e7ea      	b.n	8002d04 <__aeabi_d2f+0x28>
 8002d2e:	2e00      	cmp	r6, #0
 8002d30:	dd1c      	ble.n	8002d6c <__aeabi_d2f+0x90>
 8002d32:	0192      	lsls	r2, r2, #6
 8002d34:	0011      	movs	r1, r2
 8002d36:	1e4a      	subs	r2, r1, #1
 8002d38:	4191      	sbcs	r1, r2
 8002d3a:	00c0      	lsls	r0, r0, #3
 8002d3c:	0f6d      	lsrs	r5, r5, #29
 8002d3e:	4301      	orrs	r1, r0
 8002d40:	4329      	orrs	r1, r5
 8002d42:	074b      	lsls	r3, r1, #29
 8002d44:	d048      	beq.n	8002dd8 <__aeabi_d2f+0xfc>
 8002d46:	230f      	movs	r3, #15
 8002d48:	400b      	ands	r3, r1
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d000      	beq.n	8002d50 <__aeabi_d2f+0x74>
 8002d4e:	3104      	adds	r1, #4
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	04db      	lsls	r3, r3, #19
 8002d54:	400b      	ands	r3, r1
 8002d56:	d03f      	beq.n	8002dd8 <__aeabi_d2f+0xfc>
 8002d58:	1c72      	adds	r2, r6, #1
 8002d5a:	2efe      	cmp	r6, #254	; 0xfe
 8002d5c:	d0d0      	beq.n	8002d00 <__aeabi_d2f+0x24>
 8002d5e:	0189      	lsls	r1, r1, #6
 8002d60:	0a49      	lsrs	r1, r1, #9
 8002d62:	b2d3      	uxtb	r3, r2
 8002d64:	e7ce      	b.n	8002d04 <__aeabi_d2f+0x28>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	e7cb      	b.n	8002d04 <__aeabi_d2f+0x28>
 8002d6c:	0032      	movs	r2, r6
 8002d6e:	3217      	adds	r2, #23
 8002d70:	db22      	blt.n	8002db8 <__aeabi_d2f+0xdc>
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	221e      	movs	r2, #30
 8002d76:	0409      	lsls	r1, r1, #16
 8002d78:	4308      	orrs	r0, r1
 8002d7a:	1b92      	subs	r2, r2, r6
 8002d7c:	2a1f      	cmp	r2, #31
 8002d7e:	dd1d      	ble.n	8002dbc <__aeabi_d2f+0xe0>
 8002d80:	2102      	movs	r1, #2
 8002d82:	4249      	negs	r1, r1
 8002d84:	1b8e      	subs	r6, r1, r6
 8002d86:	0001      	movs	r1, r0
 8002d88:	40f1      	lsrs	r1, r6
 8002d8a:	000e      	movs	r6, r1
 8002d8c:	2a20      	cmp	r2, #32
 8002d8e:	d004      	beq.n	8002d9a <__aeabi_d2f+0xbe>
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <__aeabi_d2f+0x108>)
 8002d92:	4694      	mov	ip, r2
 8002d94:	4463      	add	r3, ip
 8002d96:	4098      	lsls	r0, r3
 8002d98:	4305      	orrs	r5, r0
 8002d9a:	0029      	movs	r1, r5
 8002d9c:	1e4d      	subs	r5, r1, #1
 8002d9e:	41a9      	sbcs	r1, r5
 8002da0:	4331      	orrs	r1, r6
 8002da2:	2600      	movs	r6, #0
 8002da4:	074b      	lsls	r3, r1, #29
 8002da6:	d1ce      	bne.n	8002d46 <__aeabi_d2f+0x6a>
 8002da8:	2080      	movs	r0, #128	; 0x80
 8002daa:	000b      	movs	r3, r1
 8002dac:	04c0      	lsls	r0, r0, #19
 8002dae:	2201      	movs	r2, #1
 8002db0:	4003      	ands	r3, r0
 8002db2:	4201      	tst	r1, r0
 8002db4:	d1d3      	bne.n	8002d5e <__aeabi_d2f+0x82>
 8002db6:	e7af      	b.n	8002d18 <__aeabi_d2f+0x3c>
 8002db8:	2300      	movs	r3, #0
 8002dba:	e7ac      	b.n	8002d16 <__aeabi_d2f+0x3a>
 8002dbc:	490a      	ldr	r1, [pc, #40]	; (8002de8 <__aeabi_d2f+0x10c>)
 8002dbe:	468c      	mov	ip, r1
 8002dc0:	0029      	movs	r1, r5
 8002dc2:	4463      	add	r3, ip
 8002dc4:	40d1      	lsrs	r1, r2
 8002dc6:	409d      	lsls	r5, r3
 8002dc8:	000a      	movs	r2, r1
 8002dca:	0029      	movs	r1, r5
 8002dcc:	4098      	lsls	r0, r3
 8002dce:	1e4d      	subs	r5, r1, #1
 8002dd0:	41a9      	sbcs	r1, r5
 8002dd2:	4301      	orrs	r1, r0
 8002dd4:	4311      	orrs	r1, r2
 8002dd6:	e7e4      	b.n	8002da2 <__aeabi_d2f+0xc6>
 8002dd8:	0033      	movs	r3, r6
 8002dda:	e79d      	b.n	8002d18 <__aeabi_d2f+0x3c>
 8002ddc:	000007fe 	.word	0x000007fe
 8002de0:	fffffc80 	.word	0xfffffc80
 8002de4:	fffffca2 	.word	0xfffffca2
 8002de8:	fffffc82 	.word	0xfffffc82

08002dec <__aeabi_cfrcmple>:
 8002dec:	4684      	mov	ip, r0
 8002dee:	1c08      	adds	r0, r1, #0
 8002df0:	4661      	mov	r1, ip
 8002df2:	e7ff      	b.n	8002df4 <__aeabi_cfcmpeq>

08002df4 <__aeabi_cfcmpeq>:
 8002df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002df6:	f000 f8d1 	bl	8002f9c <__lesf2>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d401      	bmi.n	8002e02 <__aeabi_cfcmpeq+0xe>
 8002dfe:	2100      	movs	r1, #0
 8002e00:	42c8      	cmn	r0, r1
 8002e02:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002e04 <__aeabi_fcmpeq>:
 8002e04:	b510      	push	{r4, lr}
 8002e06:	f000 f855 	bl	8002eb4 <__eqsf2>
 8002e0a:	4240      	negs	r0, r0
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	bd10      	pop	{r4, pc}

08002e10 <__aeabi_fcmplt>:
 8002e10:	b510      	push	{r4, lr}
 8002e12:	f000 f8c3 	bl	8002f9c <__lesf2>
 8002e16:	2800      	cmp	r0, #0
 8002e18:	db01      	blt.n	8002e1e <__aeabi_fcmplt+0xe>
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	bd10      	pop	{r4, pc}
 8002e1e:	2001      	movs	r0, #1
 8002e20:	bd10      	pop	{r4, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)

08002e24 <__aeabi_fcmple>:
 8002e24:	b510      	push	{r4, lr}
 8002e26:	f000 f8b9 	bl	8002f9c <__lesf2>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	dd01      	ble.n	8002e32 <__aeabi_fcmple+0xe>
 8002e2e:	2000      	movs	r0, #0
 8002e30:	bd10      	pop	{r4, pc}
 8002e32:	2001      	movs	r0, #1
 8002e34:	bd10      	pop	{r4, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)

08002e38 <__aeabi_fcmpgt>:
 8002e38:	b510      	push	{r4, lr}
 8002e3a:	f000 f863 	bl	8002f04 <__gesf2>
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	dc01      	bgt.n	8002e46 <__aeabi_fcmpgt+0xe>
 8002e42:	2000      	movs	r0, #0
 8002e44:	bd10      	pop	{r4, pc}
 8002e46:	2001      	movs	r0, #1
 8002e48:	bd10      	pop	{r4, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)

08002e4c <__aeabi_fcmpge>:
 8002e4c:	b510      	push	{r4, lr}
 8002e4e:	f000 f859 	bl	8002f04 <__gesf2>
 8002e52:	2800      	cmp	r0, #0
 8002e54:	da01      	bge.n	8002e5a <__aeabi_fcmpge+0xe>
 8002e56:	2000      	movs	r0, #0
 8002e58:	bd10      	pop	{r4, pc}
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)

08002e60 <__clzsi2>:
 8002e60:	211c      	movs	r1, #28
 8002e62:	2301      	movs	r3, #1
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	4298      	cmp	r0, r3
 8002e68:	d301      	bcc.n	8002e6e <__clzsi2+0xe>
 8002e6a:	0c00      	lsrs	r0, r0, #16
 8002e6c:	3910      	subs	r1, #16
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	4298      	cmp	r0, r3
 8002e72:	d301      	bcc.n	8002e78 <__clzsi2+0x18>
 8002e74:	0a00      	lsrs	r0, r0, #8
 8002e76:	3908      	subs	r1, #8
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	4298      	cmp	r0, r3
 8002e7c:	d301      	bcc.n	8002e82 <__clzsi2+0x22>
 8002e7e:	0900      	lsrs	r0, r0, #4
 8002e80:	3904      	subs	r1, #4
 8002e82:	a202      	add	r2, pc, #8	; (adr r2, 8002e8c <__clzsi2+0x2c>)
 8002e84:	5c10      	ldrb	r0, [r2, r0]
 8002e86:	1840      	adds	r0, r0, r1
 8002e88:	4770      	bx	lr
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	02020304 	.word	0x02020304
 8002e90:	01010101 	.word	0x01010101
	...

08002e9c <__clzdi2>:
 8002e9c:	b510      	push	{r4, lr}
 8002e9e:	2900      	cmp	r1, #0
 8002ea0:	d103      	bne.n	8002eaa <__clzdi2+0xe>
 8002ea2:	f7ff ffdd 	bl	8002e60 <__clzsi2>
 8002ea6:	3020      	adds	r0, #32
 8002ea8:	e002      	b.n	8002eb0 <__clzdi2+0x14>
 8002eaa:	1c08      	adds	r0, r1, #0
 8002eac:	f7ff ffd8 	bl	8002e60 <__clzsi2>
 8002eb0:	bd10      	pop	{r4, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)

08002eb4 <__eqsf2>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	0042      	lsls	r2, r0, #1
 8002eb8:	024e      	lsls	r6, r1, #9
 8002eba:	004c      	lsls	r4, r1, #1
 8002ebc:	0245      	lsls	r5, r0, #9
 8002ebe:	0a6d      	lsrs	r5, r5, #9
 8002ec0:	0e12      	lsrs	r2, r2, #24
 8002ec2:	0fc3      	lsrs	r3, r0, #31
 8002ec4:	0a76      	lsrs	r6, r6, #9
 8002ec6:	0e24      	lsrs	r4, r4, #24
 8002ec8:	0fc9      	lsrs	r1, r1, #31
 8002eca:	2aff      	cmp	r2, #255	; 0xff
 8002ecc:	d00f      	beq.n	8002eee <__eqsf2+0x3a>
 8002ece:	2cff      	cmp	r4, #255	; 0xff
 8002ed0:	d011      	beq.n	8002ef6 <__eqsf2+0x42>
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	42a2      	cmp	r2, r4
 8002ed6:	d000      	beq.n	8002eda <__eqsf2+0x26>
 8002ed8:	bd70      	pop	{r4, r5, r6, pc}
 8002eda:	42b5      	cmp	r5, r6
 8002edc:	d1fc      	bne.n	8002ed8 <__eqsf2+0x24>
 8002ede:	428b      	cmp	r3, r1
 8002ee0:	d00d      	beq.n	8002efe <__eqsf2+0x4a>
 8002ee2:	2a00      	cmp	r2, #0
 8002ee4:	d1f8      	bne.n	8002ed8 <__eqsf2+0x24>
 8002ee6:	0028      	movs	r0, r5
 8002ee8:	1e45      	subs	r5, r0, #1
 8002eea:	41a8      	sbcs	r0, r5
 8002eec:	e7f4      	b.n	8002ed8 <__eqsf2+0x24>
 8002eee:	2001      	movs	r0, #1
 8002ef0:	2d00      	cmp	r5, #0
 8002ef2:	d1f1      	bne.n	8002ed8 <__eqsf2+0x24>
 8002ef4:	e7eb      	b.n	8002ece <__eqsf2+0x1a>
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	2e00      	cmp	r6, #0
 8002efa:	d1ed      	bne.n	8002ed8 <__eqsf2+0x24>
 8002efc:	e7e9      	b.n	8002ed2 <__eqsf2+0x1e>
 8002efe:	2000      	movs	r0, #0
 8002f00:	e7ea      	b.n	8002ed8 <__eqsf2+0x24>
 8002f02:	46c0      	nop			; (mov r8, r8)

08002f04 <__gesf2>:
 8002f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f06:	0042      	lsls	r2, r0, #1
 8002f08:	0246      	lsls	r6, r0, #9
 8002f0a:	024d      	lsls	r5, r1, #9
 8002f0c:	004c      	lsls	r4, r1, #1
 8002f0e:	0fc3      	lsrs	r3, r0, #31
 8002f10:	0a76      	lsrs	r6, r6, #9
 8002f12:	0e12      	lsrs	r2, r2, #24
 8002f14:	0a6d      	lsrs	r5, r5, #9
 8002f16:	0e24      	lsrs	r4, r4, #24
 8002f18:	0fc8      	lsrs	r0, r1, #31
 8002f1a:	2aff      	cmp	r2, #255	; 0xff
 8002f1c:	d01f      	beq.n	8002f5e <__gesf2+0x5a>
 8002f1e:	2cff      	cmp	r4, #255	; 0xff
 8002f20:	d010      	beq.n	8002f44 <__gesf2+0x40>
 8002f22:	2a00      	cmp	r2, #0
 8002f24:	d11f      	bne.n	8002f66 <__gesf2+0x62>
 8002f26:	4271      	negs	r1, r6
 8002f28:	4171      	adcs	r1, r6
 8002f2a:	2c00      	cmp	r4, #0
 8002f2c:	d101      	bne.n	8002f32 <__gesf2+0x2e>
 8002f2e:	2d00      	cmp	r5, #0
 8002f30:	d01e      	beq.n	8002f70 <__gesf2+0x6c>
 8002f32:	2900      	cmp	r1, #0
 8002f34:	d10e      	bne.n	8002f54 <__gesf2+0x50>
 8002f36:	4283      	cmp	r3, r0
 8002f38:	d01e      	beq.n	8002f78 <__gesf2+0x74>
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	1e58      	subs	r0, r3, #1
 8002f3e:	4008      	ands	r0, r1
 8002f40:	3801      	subs	r0, #1
 8002f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f44:	2d00      	cmp	r5, #0
 8002f46:	d126      	bne.n	8002f96 <__gesf2+0x92>
 8002f48:	2a00      	cmp	r2, #0
 8002f4a:	d1f4      	bne.n	8002f36 <__gesf2+0x32>
 8002f4c:	4271      	negs	r1, r6
 8002f4e:	4171      	adcs	r1, r6
 8002f50:	2900      	cmp	r1, #0
 8002f52:	d0f0      	beq.n	8002f36 <__gesf2+0x32>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d1f4      	bne.n	8002f42 <__gesf2+0x3e>
 8002f58:	2001      	movs	r0, #1
 8002f5a:	4240      	negs	r0, r0
 8002f5c:	e7f1      	b.n	8002f42 <__gesf2+0x3e>
 8002f5e:	2e00      	cmp	r6, #0
 8002f60:	d119      	bne.n	8002f96 <__gesf2+0x92>
 8002f62:	2cff      	cmp	r4, #255	; 0xff
 8002f64:	d0ee      	beq.n	8002f44 <__gesf2+0x40>
 8002f66:	2c00      	cmp	r4, #0
 8002f68:	d1e5      	bne.n	8002f36 <__gesf2+0x32>
 8002f6a:	2d00      	cmp	r5, #0
 8002f6c:	d1e3      	bne.n	8002f36 <__gesf2+0x32>
 8002f6e:	e7e4      	b.n	8002f3a <__gesf2+0x36>
 8002f70:	2000      	movs	r0, #0
 8002f72:	2e00      	cmp	r6, #0
 8002f74:	d0e5      	beq.n	8002f42 <__gesf2+0x3e>
 8002f76:	e7e0      	b.n	8002f3a <__gesf2+0x36>
 8002f78:	42a2      	cmp	r2, r4
 8002f7a:	dc05      	bgt.n	8002f88 <__gesf2+0x84>
 8002f7c:	dbea      	blt.n	8002f54 <__gesf2+0x50>
 8002f7e:	42ae      	cmp	r6, r5
 8002f80:	d802      	bhi.n	8002f88 <__gesf2+0x84>
 8002f82:	d3e7      	bcc.n	8002f54 <__gesf2+0x50>
 8002f84:	2000      	movs	r0, #0
 8002f86:	e7dc      	b.n	8002f42 <__gesf2+0x3e>
 8002f88:	4241      	negs	r1, r0
 8002f8a:	4141      	adcs	r1, r0
 8002f8c:	4248      	negs	r0, r1
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4008      	ands	r0, r1
 8002f92:	3801      	subs	r0, #1
 8002f94:	e7d5      	b.n	8002f42 <__gesf2+0x3e>
 8002f96:	2002      	movs	r0, #2
 8002f98:	4240      	negs	r0, r0
 8002f9a:	e7d2      	b.n	8002f42 <__gesf2+0x3e>

08002f9c <__lesf2>:
 8002f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9e:	0042      	lsls	r2, r0, #1
 8002fa0:	0246      	lsls	r6, r0, #9
 8002fa2:	024d      	lsls	r5, r1, #9
 8002fa4:	004c      	lsls	r4, r1, #1
 8002fa6:	0fc3      	lsrs	r3, r0, #31
 8002fa8:	0a76      	lsrs	r6, r6, #9
 8002faa:	0e12      	lsrs	r2, r2, #24
 8002fac:	0a6d      	lsrs	r5, r5, #9
 8002fae:	0e24      	lsrs	r4, r4, #24
 8002fb0:	0fc8      	lsrs	r0, r1, #31
 8002fb2:	2aff      	cmp	r2, #255	; 0xff
 8002fb4:	d00d      	beq.n	8002fd2 <__lesf2+0x36>
 8002fb6:	2cff      	cmp	r4, #255	; 0xff
 8002fb8:	d00f      	beq.n	8002fda <__lesf2+0x3e>
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	d123      	bne.n	8003006 <__lesf2+0x6a>
 8002fbe:	4271      	negs	r1, r6
 8002fc0:	4171      	adcs	r1, r6
 8002fc2:	2c00      	cmp	r4, #0
 8002fc4:	d10f      	bne.n	8002fe6 <__lesf2+0x4a>
 8002fc6:	2d00      	cmp	r5, #0
 8002fc8:	d10d      	bne.n	8002fe6 <__lesf2+0x4a>
 8002fca:	2000      	movs	r0, #0
 8002fcc:	2e00      	cmp	r6, #0
 8002fce:	d014      	beq.n	8002ffa <__lesf2+0x5e>
 8002fd0:	e00d      	b.n	8002fee <__lesf2+0x52>
 8002fd2:	2e00      	cmp	r6, #0
 8002fd4:	d110      	bne.n	8002ff8 <__lesf2+0x5c>
 8002fd6:	2cff      	cmp	r4, #255	; 0xff
 8002fd8:	d115      	bne.n	8003006 <__lesf2+0x6a>
 8002fda:	2d00      	cmp	r5, #0
 8002fdc:	d10c      	bne.n	8002ff8 <__lesf2+0x5c>
 8002fde:	2a00      	cmp	r2, #0
 8002fe0:	d103      	bne.n	8002fea <__lesf2+0x4e>
 8002fe2:	4271      	negs	r1, r6
 8002fe4:	4171      	adcs	r1, r6
 8002fe6:	2900      	cmp	r1, #0
 8002fe8:	d108      	bne.n	8002ffc <__lesf2+0x60>
 8002fea:	4283      	cmp	r3, r0
 8002fec:	d010      	beq.n	8003010 <__lesf2+0x74>
 8002fee:	2102      	movs	r1, #2
 8002ff0:	1e58      	subs	r0, r3, #1
 8002ff2:	4008      	ands	r0, r1
 8002ff4:	3801      	subs	r0, #1
 8002ff6:	e000      	b.n	8002ffa <__lesf2+0x5e>
 8002ff8:	2002      	movs	r0, #2
 8002ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d1fc      	bne.n	8002ffa <__lesf2+0x5e>
 8003000:	2001      	movs	r0, #1
 8003002:	4240      	negs	r0, r0
 8003004:	e7f9      	b.n	8002ffa <__lesf2+0x5e>
 8003006:	2c00      	cmp	r4, #0
 8003008:	d1ef      	bne.n	8002fea <__lesf2+0x4e>
 800300a:	2d00      	cmp	r5, #0
 800300c:	d1ed      	bne.n	8002fea <__lesf2+0x4e>
 800300e:	e7ee      	b.n	8002fee <__lesf2+0x52>
 8003010:	42a2      	cmp	r2, r4
 8003012:	dc05      	bgt.n	8003020 <__lesf2+0x84>
 8003014:	dbf2      	blt.n	8002ffc <__lesf2+0x60>
 8003016:	42ae      	cmp	r6, r5
 8003018:	d802      	bhi.n	8003020 <__lesf2+0x84>
 800301a:	d3ef      	bcc.n	8002ffc <__lesf2+0x60>
 800301c:	2000      	movs	r0, #0
 800301e:	e7ec      	b.n	8002ffa <__lesf2+0x5e>
 8003020:	4241      	negs	r1, r0
 8003022:	4141      	adcs	r1, r0
 8003024:	4248      	negs	r0, r1
 8003026:	2102      	movs	r1, #2
 8003028:	4008      	ands	r0, r1
 800302a:	3801      	subs	r0, #1
 800302c:	e7e5      	b.n	8002ffa <__lesf2+0x5e>
 800302e:	46c0      	nop			; (mov r8, r8)

08003030 <BloqueCaptura>:
						pstfuerza: Apuntador a la estructura de datos de Fuerza
Salidas:          		N/A
Descripción:  		    Ejecuta el proceso principal del bloque Captura
****************************************************************************************/
void BloqueCaptura(stCaptura *pstcaptura, stComCEIT *pstcomceit, stMotor *pstmotor, stDistancia *pstdistancia)
{
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
	int i,j;
	
	//Máquina de Estados del bloque
	switch(pstcaptura->CAP_State)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b04      	cmp	r3, #4
 8003044:	d900      	bls.n	8003048 <BloqueCaptura+0x18>
 8003046:	e1d6      	b.n	80033f6 <BloqueCaptura+0x3c6>
 8003048:	009a      	lsls	r2, r3, #2
 800304a:	4be6      	ldr	r3, [pc, #920]	; (80033e4 <BloqueCaptura+0x3b4>)
 800304c:	18d3      	adds	r3, r2, r3
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	469f      	mov	pc, r3
  {
		case CAP_ESPERAR:  
			//Actualizar estado actual			
			if(pstcomceit->enviarDatos == false || pstcomceit->envioOK == false)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2201      	movs	r2, #1
 8003058:	4053      	eors	r3, r2
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <BloqueCaptura+0x3e>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	78db      	ldrb	r3, [r3, #3]
 8003064:	2201      	movs	r2, #1
 8003066:	4053      	eors	r3, r2
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <BloqueCaptura+0x46>
			{
				pstcaptura->CAP_State = CAP_ESPERAR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
			{
				pstcomceit->datosListos = false;
				pstcomceit->envioOK = false;
				pstcaptura->CAP_State = CAP_CONFIGURAR;
			}
    break;
 8003074:	e1bc      	b.n	80033f0 <BloqueCaptura+0x3c0>
			else if(pstcomceit->Rx_Buffer[CMD] == GET_DATA)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2274      	movs	r2, #116	; 0x74
 800307a:	5c9b      	ldrb	r3, [r3, r2]
 800307c:	2b60      	cmp	r3, #96	; 0x60
 800307e:	d10f      	bne.n	80030a0 <BloqueCaptura+0x70>
				pstcomceit->datosListos = false;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2200      	movs	r2, #0
 8003084:	709a      	strb	r2, [r3, #2]
				pstmotor->posMotor = 0;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	721a      	strb	r2, [r3, #8]
				pstmotor->bandMotor = true;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
				pstcomceit->envioOK = false;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2200      	movs	r2, #0
 8003096:	70da      	strb	r2, [r3, #3]
				pstcaptura->CAP_State = CAP_MOVER_MOTOR;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
    break;
 800309e:	e1a7      	b.n	80033f0 <BloqueCaptura+0x3c0>
			else if(pstcomceit->Rx_Buffer[CMD] == CONFIG)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2274      	movs	r2, #116	; 0x74
 80030a4:	5c9b      	ldrb	r3, [r3, r2]
 80030a6:	2b61      	cmp	r3, #97	; 0x61
 80030a8:	d000      	beq.n	80030ac <BloqueCaptura+0x7c>
 80030aa:	e1a1      	b.n	80033f0 <BloqueCaptura+0x3c0>
				pstcomceit->datosListos = false;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2200      	movs	r2, #0
 80030b0:	709a      	strb	r2, [r3, #2]
				pstcomceit->envioOK = false;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2200      	movs	r2, #0
 80030b6:	70da      	strb	r2, [r3, #3]
				pstcaptura->CAP_State = CAP_CONFIGURAR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2203      	movs	r2, #3
 80030bc:	701a      	strb	r2, [r3, #0]
    break;
 80030be:	e197      	b.n	80033f0 <BloqueCaptura+0x3c0>
    
		case CAP_MOVER_MOTOR:
			
			//Actualizar estado actual
			if(pstmotor->bandMotor == 0)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2201      	movs	r2, #1
 80030c6:	4053      	eors	r3, r2
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <BloqueCaptura+0xac>
			{
				pstdistancia->bandDistancia = true;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
				pstcaptura->CAP_State = CAP_LEER_DISTANCIA;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2202      	movs	r2, #2
 80030d8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				pstcaptura->CAP_State = CAP_MOVER_MOTOR;
			}
    break;
 80030da:	e18c      	b.n	80033f6 <BloqueCaptura+0x3c6>
				pstcaptura->CAP_State = CAP_MOVER_MOTOR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
    break;
 80030e2:	e188      	b.n	80033f6 <BloqueCaptura+0x3c6>
    
		case CAP_LEER_DISTANCIA:  
			
			//Actualizar estado actual
			if(pstdistancia->bandDistancia == true)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <BloqueCaptura+0xc4>
			{
				pstcaptura->CAP_State = CAP_LEER_DISTANCIA;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2202      	movs	r2, #2
 80030f0:	701a      	strb	r2, [r3, #0]
					pstdistancia->posSensor[i] = 0;
				}
				pstmotor->bandMotor = true;
				pstcaptura->CAP_State = CAP_ARMAR_TRAMA;
			}
    break;  
 80030f2:	e17f      	b.n	80033f4 <BloqueCaptura+0x3c4>
			else if(pstmotor->posMotor < pstmotor->MaxPosMotor)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7a1b      	ldrb	r3, [r3, #8]
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4aba      	ldr	r2, [pc, #744]	; (80033e8 <BloqueCaptura+0x3b8>)
 8003100:	5c9b      	ldrb	r3, [r3, r2]
 8003102:	4299      	cmp	r1, r3
 8003104:	db00      	blt.n	8003108 <BloqueCaptura+0xd8>
 8003106:	e082      	b.n	800320e <BloqueCaptura+0x1de>
				pstcaptura->filaActual = pstdistancia->posSensor[pstdistancia->contParrilla];
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2266      	movs	r2, #102	; 0x66
 800310c:	5c9b      	ldrb	r3, [r3, r2]
 800310e:	0019      	movs	r1, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	4ab6      	ldr	r2, [pc, #728]	; (80033ec <BloqueCaptura+0x3bc>)
 8003114:	185b      	adds	r3, r3, r1
 8003116:	189b      	adds	r3, r3, r2
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	705a      	strb	r2, [r3, #1]
				if(pstdistancia->senStatus[pstdistancia->contParrilla][pstcaptura->filaActual] == 0){
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2266      	movs	r2, #102	; 0x66
 8003122:	5c9b      	ldrb	r3, [r3, r2]
 8003124:	0019      	movs	r1, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	785b      	ldrb	r3, [r3, #1]
 800312a:	0018      	movs	r0, r3
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	000b      	movs	r3, r1
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	185b      	adds	r3, r3, r1
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	18d3      	adds	r3, r2, r3
 8003138:	181b      	adds	r3, r3, r0
 800313a:	3301      	adds	r3, #1
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d12a      	bne.n	8003198 <BloqueCaptura+0x168>
					pstcaptura->cantidades[pstdistancia->contParrilla][pstcaptura->filaActual] = ConvertirDistancia(pstcaptura, pstdistancia);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2266      	movs	r2, #102	; 0x66
 8003146:	5c9b      	ldrb	r3, [r3, r2]
 8003148:	001c      	movs	r4, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	785b      	ldrb	r3, [r3, #1]
 800314e:	001d      	movs	r5, r3
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0011      	movs	r1, r2
 8003156:	0018      	movs	r0, r3
 8003158:	f000 fb5c 	bl	8003814 <ConvertirDistancia>
 800315c:	0003      	movs	r3, r0
 800315e:	0018      	movs	r0, r3
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	21cb      	movs	r1, #203	; 0xcb
 8003164:	0023      	movs	r3, r4
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	191b      	adds	r3, r3, r4
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	195b      	adds	r3, r3, r5
 8003170:	185b      	adds	r3, r3, r1
 8003172:	1c02      	adds	r2, r0, #0
 8003174:	701a      	strb	r2, [r3, #0]
					pstdistancia->posSensor[pstdistancia->contParrilla]++;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2266      	movs	r2, #102	; 0x66
 800317a:	5c9b      	ldrb	r3, [r3, r2]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	499b      	ldr	r1, [pc, #620]	; (80033ec <BloqueCaptura+0x3bc>)
 8003180:	18d2      	adds	r2, r2, r3
 8003182:	1852      	adds	r2, r2, r1
 8003184:	7812      	ldrb	r2, [r2, #0]
 8003186:	3201      	adds	r2, #1
 8003188:	b2d0      	uxtb	r0, r2
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	4997      	ldr	r1, [pc, #604]	; (80033ec <BloqueCaptura+0x3bc>)
 800318e:	18d3      	adds	r3, r2, r3
 8003190:	185b      	adds	r3, r3, r1
 8003192:	1c02      	adds	r2, r0, #0
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	e033      	b.n	8003200 <BloqueCaptura+0x1d0>
					pstcaptura->cantidades[pstdistancia->contParrilla][pstcaptura->filaActual] = 250+pstdistancia->senStatus[pstdistancia->contParrilla][pstcaptura->filaActual];
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2266      	movs	r2, #102	; 0x66
 800319c:	5c9b      	ldrb	r3, [r3, r2]
 800319e:	0019      	movs	r1, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	0018      	movs	r0, r3
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	000b      	movs	r3, r1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	185b      	adds	r3, r3, r1
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	18d3      	adds	r3, r2, r3
 80031b2:	181b      	adds	r3, r3, r0
 80031b4:	3301      	adds	r3, #1
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	2166      	movs	r1, #102	; 0x66
 80031bc:	5c52      	ldrb	r2, [r2, r1]
 80031be:	0010      	movs	r0, r2
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	7852      	ldrb	r2, [r2, #1]
 80031c4:	0015      	movs	r5, r2
 80031c6:	3b06      	subs	r3, #6
 80031c8:	b2dc      	uxtb	r4, r3
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	21cb      	movs	r1, #203	; 0xcb
 80031ce:	0003      	movs	r3, r0
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	181b      	adds	r3, r3, r0
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	18d3      	adds	r3, r2, r3
 80031d8:	195b      	adds	r3, r3, r5
 80031da:	185b      	adds	r3, r3, r1
 80031dc:	1c22      	adds	r2, r4, #0
 80031de:	701a      	strb	r2, [r3, #0]
					pstdistancia->posSensor[pstdistancia->contParrilla]++;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2266      	movs	r2, #102	; 0x66
 80031e4:	5c9b      	ldrb	r3, [r3, r2]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	4980      	ldr	r1, [pc, #512]	; (80033ec <BloqueCaptura+0x3bc>)
 80031ea:	18d2      	adds	r2, r2, r3
 80031ec:	1852      	adds	r2, r2, r1
 80031ee:	7812      	ldrb	r2, [r2, #0]
 80031f0:	3201      	adds	r2, #1
 80031f2:	b2d0      	uxtb	r0, r2
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	497d      	ldr	r1, [pc, #500]	; (80033ec <BloqueCaptura+0x3bc>)
 80031f8:	18d3      	adds	r3, r2, r3
 80031fa:	185b      	adds	r3, r3, r1
 80031fc:	1c02      	adds	r2, r0, #0
 80031fe:	701a      	strb	r2, [r3, #0]
				pstmotor->bandMotor = true;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
				pstcaptura->CAP_State = CAP_MOVER_MOTOR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
    break;  
 800320c:	e0f2      	b.n	80033f4 <BloqueCaptura+0x3c4>
			else if(pstmotor->posMotor >= pstmotor->MaxPosMotor)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	7a1b      	ldrb	r3, [r3, #8]
 8003212:	b25b      	sxtb	r3, r3
 8003214:	0019      	movs	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a73      	ldr	r2, [pc, #460]	; (80033e8 <BloqueCaptura+0x3b8>)
 800321a:	5c9b      	ldrb	r3, [r3, r2]
 800321c:	4299      	cmp	r1, r3
 800321e:	da00      	bge.n	8003222 <BloqueCaptura+0x1f2>
 8003220:	e0e8      	b.n	80033f4 <BloqueCaptura+0x3c4>
				pstcaptura->filaActual = pstdistancia->posSensor[pstdistancia->contParrilla];
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2266      	movs	r2, #102	; 0x66
 8003226:	5c9b      	ldrb	r3, [r3, r2]
 8003228:	0019      	movs	r1, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	4a6f      	ldr	r2, [pc, #444]	; (80033ec <BloqueCaptura+0x3bc>)
 800322e:	185b      	adds	r3, r3, r1
 8003230:	189b      	adds	r3, r3, r2
 8003232:	781a      	ldrb	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	705a      	strb	r2, [r3, #1]
				if(pstdistancia->senStatus[pstdistancia->contParrilla][pstcaptura->filaActual] == 0){
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2266      	movs	r2, #102	; 0x66
 800323c:	5c9b      	ldrb	r3, [r3, r2]
 800323e:	0019      	movs	r1, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	785b      	ldrb	r3, [r3, #1]
 8003244:	0018      	movs	r0, r3
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	000b      	movs	r3, r1
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	185b      	adds	r3, r3, r1
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	18d3      	adds	r3, r2, r3
 8003252:	181b      	adds	r3, r3, r0
 8003254:	3301      	adds	r3, #1
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11a      	bne.n	8003292 <BloqueCaptura+0x262>
					pstcaptura->cantidades[pstdistancia->contParrilla][pstcaptura->filaActual] = ConvertirDistancia(pstcaptura, pstdistancia);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2266      	movs	r2, #102	; 0x66
 8003260:	5c9b      	ldrb	r3, [r3, r2]
 8003262:	001c      	movs	r4, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	785b      	ldrb	r3, [r3, #1]
 8003268:	001d      	movs	r5, r3
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	0011      	movs	r1, r2
 8003270:	0018      	movs	r0, r3
 8003272:	f000 facf 	bl	8003814 <ConvertirDistancia>
 8003276:	0003      	movs	r3, r0
 8003278:	0018      	movs	r0, r3
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	21cb      	movs	r1, #203	; 0xcb
 800327e:	0023      	movs	r3, r4
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	191b      	adds	r3, r3, r4
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	18d3      	adds	r3, r2, r3
 8003288:	195b      	adds	r3, r3, r5
 800328a:	185b      	adds	r3, r3, r1
 800328c:	1c02      	adds	r2, r0, #0
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e023      	b.n	80032da <BloqueCaptura+0x2aa>
					pstcaptura->cantidades[pstdistancia->contParrilla][pstcaptura->filaActual] = 250+pstdistancia->senStatus[pstdistancia->contParrilla][pstcaptura->filaActual];
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2266      	movs	r2, #102	; 0x66
 8003296:	5c9b      	ldrb	r3, [r3, r2]
 8003298:	0019      	movs	r1, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	0018      	movs	r0, r3
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	000b      	movs	r3, r1
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	185b      	adds	r3, r3, r1
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	18d3      	adds	r3, r2, r3
 80032ac:	181b      	adds	r3, r3, r0
 80032ae:	3301      	adds	r3, #1
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	2166      	movs	r1, #102	; 0x66
 80032b6:	5c52      	ldrb	r2, [r2, r1]
 80032b8:	0010      	movs	r0, r2
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	7852      	ldrb	r2, [r2, #1]
 80032be:	0015      	movs	r5, r2
 80032c0:	3b06      	subs	r3, #6
 80032c2:	b2dc      	uxtb	r4, r3
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	21cb      	movs	r1, #203	; 0xcb
 80032c8:	0003      	movs	r3, r0
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	181b      	adds	r3, r3, r0
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	18d3      	adds	r3, r2, r3
 80032d2:	195b      	adds	r3, r3, r5
 80032d4:	185b      	adds	r3, r3, r1
 80032d6:	1c22      	adds	r2, r4, #0
 80032d8:	701a      	strb	r2, [r3, #0]
				pstcaptura->filaActual = 0;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	705a      	strb	r2, [r3, #1]
				pstdistancia->contDistancia = 0;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2265      	movs	r2, #101	; 0x65
 80032e4:	2100      	movs	r1, #0
 80032e6:	5499      	strb	r1, [r3, r2]
				for(i=0; i<MAX_PARR; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	e009      	b.n	8003302 <BloqueCaptura+0x2d2>
					pstdistancia->posSensor[i] = 0;
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	493e      	ldr	r1, [pc, #248]	; (80033ec <BloqueCaptura+0x3bc>)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	18d3      	adds	r3, r2, r3
 80032f6:	185b      	adds	r3, r3, r1
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
				for(i=0; i<MAX_PARR; i++)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b09      	cmp	r3, #9
 8003306:	ddf2      	ble.n	80032ee <BloqueCaptura+0x2be>
				pstmotor->bandMotor = true;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
				pstcaptura->CAP_State = CAP_ARMAR_TRAMA;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2204      	movs	r2, #4
 8003312:	701a      	strb	r2, [r3, #0]
    break;  
 8003314:	e06e      	b.n	80033f4 <BloqueCaptura+0x3c4>
    
		case CAP_CONFIGURAR:

			/*Actualizar parámetros de funcionamiento*/
			ConfigParrillas(pstcaptura, pstcomceit, pstmotor, pstdistancia);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f86f 	bl	8003400 <ConfigParrillas>
			/*Ordenar vectores*/
			Ordenar(pstmotor,pstdistancia);
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	0011      	movs	r1, r2
 8003328:	0018      	movs	r0, r3
 800332a:	f000 f9e1 	bl	80036f0 <Ordenar>

			pstcaptura->CAP_State = CAP_ARMAR_TRAMA;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2204      	movs	r2, #4
 8003332:	701a      	strb	r2, [r3, #0]
    break;
 8003334:	e05f      	b.n	80033f6 <BloqueCaptura+0x3c6>
    
		case CAP_ARMAR_TRAMA:
			
			if(pstcomceit->Rx_Buffer[CMD] == GET_DATA)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2274      	movs	r2, #116	; 0x74
 800333a:	5c9b      	ldrb	r3, [r3, r2]
 800333c:	2b60      	cmp	r3, #96	; 0x60
 800333e:	d14a      	bne.n	80033d6 <BloqueCaptura+0x3a6>
			{
				//Incluir cantidades de productos
				for(i = 0; i < MAX_PARR; i++)
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e022      	b.n	800338c <BloqueCaptura+0x35c>
				{
					for(j = 0; j < MAX_FILAS; j++)
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	e019      	b.n	8003380 <BloqueCaptura+0x350>
					{
						pstcomceit->Tx_Buffer[j+i*10] = pstcaptura->cantidades[i][j];
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	0013      	movs	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	189b      	adds	r3, r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	001a      	movs	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	18d1      	adds	r1, r2, r3
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	24cb      	movs	r4, #203	; 0xcb
 8003362:	0013      	movs	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	189b      	adds	r3, r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	18c2      	adds	r2, r0, r3
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	18d3      	adds	r3, r2, r3
 8003370:	191b      	adds	r3, r3, r4
 8003372:	781a      	ldrb	r2, [r3, #0]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	185b      	adds	r3, r3, r1
 8003378:	721a      	strb	r2, [r3, #8]
					for(j = 0; j < MAX_FILAS; j++)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	3301      	adds	r3, #1
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b09      	cmp	r3, #9
 8003384:	dde2      	ble.n	800334c <BloqueCaptura+0x31c>
				for(i = 0; i < MAX_PARR; i++)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	3301      	adds	r3, #1
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b09      	cmp	r3, #9
 8003390:	ddd9      	ble.n	8003346 <BloqueCaptura+0x316>
					}
				}
				
				for(i = 0; i < MAX_PARR; i++)
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	e018      	b.n	80033ca <BloqueCaptura+0x39a>
				{
					for(j = 0; j < MAX_FILAS; j++)
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	e00f      	b.n	80033be <BloqueCaptura+0x38e>
					{
						pstcaptura->cantidades[i][j] = 255;
 800339e:	68f9      	ldr	r1, [r7, #12]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	20cb      	movs	r0, #203	; 0xcb
 80033a4:	0013      	movs	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	189b      	adds	r3, r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	18ca      	adds	r2, r1, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	18d3      	adds	r3, r2, r3
 80033b2:	181b      	adds	r3, r3, r0
 80033b4:	22ff      	movs	r2, #255	; 0xff
 80033b6:	701a      	strb	r2, [r3, #0]
					for(j = 0; j < MAX_FILAS; j++)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	3301      	adds	r3, #1
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b09      	cmp	r3, #9
 80033c2:	ddec      	ble.n	800339e <BloqueCaptura+0x36e>
				for(i = 0; i < MAX_PARR; i++)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3301      	adds	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	dde3      	ble.n	8003398 <BloqueCaptura+0x368>
//				//Copiar en el vector de transmisión
//				for(i = 0; i < (TX_BUFFER_SIZE - 5); i++)
//				{
//					pstcomceit->Tx_Buffer[i] = pstcaptura->bufferTrama[i];
//				}
				pstcomceit->TxLength = MAX_PARR*MAX_FILAS;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2264      	movs	r2, #100	; 0x64
 80033d4:	719a      	strb	r2, [r3, #6]
//				pstcomceit->Tx_Buffer[0] = 0xAA;
//				pstcomceit->TxLength = 1;
			}
			
			//Actualizar bandera de envío
 			pstcomceit->datosListos = true;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2201      	movs	r2, #1
 80033da:	709a      	strb	r2, [r3, #2]
			pstcaptura->CAP_State = CAP_ESPERAR;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]

		break;
 80033e2:	e008      	b.n	80033f6 <BloqueCaptura+0x3c6>
 80033e4:	08016284 	.word	0x08016284
 80033e8:	00000335 	.word	0x00000335
 80033ec:	00000586 	.word	0x00000586
    break;
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	e000      	b.n	80033f6 <BloqueCaptura+0x3c6>
    break;  
 80033f4:	46c0      	nop			; (mov r8, r8)
  }
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b006      	add	sp, #24
 80033fc:	bdb0      	pop	{r4, r5, r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)

08003400 <ConfigParrillas>:
						pstfuerza: Apuntador a la estructura de datos de Fuerza
Salidas:          		N/A
Descripción:  		    Realiza la configuración de las parrillas
****************************************************************************************/
void ConfigParrillas(stCaptura *pstcaptura, stComCEIT *pstcomceit, stMotor *pstmotor, stDistancia *pstdistancia)
{
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
	int i,j,k;
	pstmotor->ParrHab = pstcomceit->Rx_Data[0];
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2277      	movs	r2, #119	; 0x77
 8003412:	5c99      	ldrb	r1, [r3, r2]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	23cd      	movs	r3, #205	; 0xcd
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	54d1      	strb	r1, [r2, r3]
	pstdistancia->SenHab = pstcomceit->Rx_Data[0];
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2277      	movs	r2, #119	; 0x77
 8003420:	5c99      	ldrb	r1, [r3, r2]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	23b2      	movs	r3, #178	; 0xb2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	54d1      	strb	r1, [r2, r3]
	pstcaptura->Distancia = pstcomceit->Rx_Data[1];
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2278      	movs	r2, #120	; 0x78
 800342e:	5c9a      	ldrb	r2, [r3, r2]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	709a      	strb	r2, [r3, #2]

	/*Actualizar largo y ancho*/
	for(i=0; i<pstmotor->ParrHab; i++)
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	e09d      	b.n	8003576 <ConfigParrillas+0x176>
	{
		j=0;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
		while(pstcomceit->Rx_Data[2+i*20+2*j+1] != 255)
 800343e:	e07c      	b.n	800353a <ConfigParrillas+0x13a>
		{
			if(pstcomceit->Rx_Data[2+i*20+2*j+1] !=0)
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	0013      	movs	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	189b      	adds	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	1c9a      	adds	r2, r3, #2
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	18d3      	adds	r3, r2, r3
 8003452:	3301      	adds	r3, #1
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	2177      	movs	r1, #119	; 0x77
 8003458:	18d3      	adds	r3, r2, r3
 800345a:	185b      	adds	r3, r3, r1
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d036      	beq.n	80034d0 <ConfigParrillas+0xd0>
			{
				pstcaptura->ancho[i][j] = pstcomceit->Rx_Data[2+i*20+2*j];
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	0013      	movs	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	189b      	adds	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	1c9a      	adds	r2, r3, #2
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	18d3      	adds	r3, r2, r3
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	2177      	movs	r1, #119	; 0x77
 8003478:	18d3      	adds	r3, r2, r3
 800347a:	185b      	adds	r3, r3, r1
 800347c:	7818      	ldrb	r0, [r3, #0]
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	0013      	movs	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	189b      	adds	r3, r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	18ca      	adds	r2, r1, r3
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	18d3      	adds	r3, r2, r3
 8003490:	3303      	adds	r3, #3
 8003492:	1c02      	adds	r2, r0, #0
 8003494:	701a      	strb	r2, [r3, #0]
				pstcaptura->largo[i][j] = pstcomceit->Rx_Data[2+i*20+2*j+1];
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	0013      	movs	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	189b      	adds	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	1c9a      	adds	r2, r3, #2
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	18d3      	adds	r3, r2, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	2177      	movs	r1, #119	; 0x77
 80034ae:	18d3      	adds	r3, r2, r3
 80034b0:	185b      	adds	r3, r3, r1
 80034b2:	781c      	ldrb	r4, [r3, #0]
 80034b4:	68f9      	ldr	r1, [r7, #12]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	2067      	movs	r0, #103	; 0x67
 80034ba:	0013      	movs	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	18ca      	adds	r2, r1, r3
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	18d3      	adds	r3, r2, r3
 80034c8:	181b      	adds	r3, r3, r0
 80034ca:	1c22      	adds	r2, r4, #0
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e031      	b.n	8003534 <ConfigParrillas+0x134>
			}
			else
			{
				pstcaptura->ancho[i][j] = pstcomceit->Rx_Data[2+i*20+2*j];
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	0013      	movs	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	189b      	adds	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	1c9a      	adds	r2, r3, #2
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	18d3      	adds	r3, r2, r3
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	2177      	movs	r1, #119	; 0x77
 80034e6:	18d3      	adds	r3, r2, r3
 80034e8:	185b      	adds	r3, r3, r1
 80034ea:	7818      	ldrb	r0, [r3, #0]
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	0013      	movs	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	189b      	adds	r3, r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	18ca      	adds	r2, r1, r3
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	18d3      	adds	r3, r2, r3
 80034fe:	3303      	adds	r3, #3
 8003500:	1c02      	adds	r2, r0, #0
 8003502:	701a      	strb	r2, [r3, #0]
				pstcaptura->largo[i][j] = pstcaptura->ancho[i][j];
 8003504:	68f9      	ldr	r1, [r7, #12]
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	0013      	movs	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	189b      	adds	r3, r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	18ca      	adds	r2, r1, r3
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	18d3      	adds	r3, r2, r3
 8003516:	3303      	adds	r3, #3
 8003518:	781c      	ldrb	r4, [r3, #0]
 800351a:	68f9      	ldr	r1, [r7, #12]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	2067      	movs	r0, #103	; 0x67
 8003520:	0013      	movs	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	189b      	adds	r3, r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	18ca      	adds	r2, r1, r3
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	18d3      	adds	r3, r2, r3
 800352e:	181b      	adds	r3, r3, r0
 8003530:	1c22      	adds	r2, r4, #0
 8003532:	701a      	strb	r2, [r3, #0]
			}
			j++;
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	3301      	adds	r3, #1
 8003538:	61bb      	str	r3, [r7, #24]
		while(pstcomceit->Rx_Data[2+i*20+2*j+1] != 255)
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	0013      	movs	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	189b      	adds	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	1c9a      	adds	r2, r3, #2
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	18d3      	adds	r3, r2, r3
 800354c:	3301      	adds	r3, #1
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	2177      	movs	r1, #119	; 0x77
 8003552:	18d3      	adds	r3, r2, r3
 8003554:	185b      	adds	r3, r3, r1
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2bff      	cmp	r3, #255	; 0xff
 800355a:	d000      	beq.n	800355e <ConfigParrillas+0x15e>
 800355c:	e770      	b.n	8003440 <ConfigParrillas+0x40>
		}
		pstdistancia->cantFilas[i] = j;
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	b2d8      	uxtb	r0, r3
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	2167      	movs	r1, #103	; 0x67
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	18d3      	adds	r3, r2, r3
 800356a:	185b      	adds	r3, r3, r1
 800356c:	1c02      	adds	r2, r0, #0
 800356e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<pstmotor->ParrHab; i++)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	3301      	adds	r3, #1
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	23cd      	movs	r3, #205	; 0xcd
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	5cd3      	ldrb	r3, [r2, r3]
 800357e:	001a      	movs	r2, r3
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4293      	cmp	r3, r2
 8003584:	da00      	bge.n	8003588 <ConfigParrillas+0x188>
 8003586:	e758      	b.n	800343a <ConfigParrillas+0x3a>
	}

	/*Actualizar distancias a recorrer y crear vectores de recorrido y sensor*/
	k=0;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
	for(i=0; i<pstmotor->ParrHab; i++)
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	e095      	b.n	80036be <ConfigParrillas+0x2be>
	{
		pstmotor->distFilas[i][0] = 0;
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	0013      	movs	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	189b      	adds	r3, r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	18cb      	adds	r3, r1, r3
 80035a0:	3314      	adds	r3, #20
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
		pstmotor->recorrido[k] = pstmotor->distFilas[i][0];
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	0013      	movs	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	189b      	adds	r3, r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	18cb      	adds	r3, r1, r3
 80035b4:	3314      	adds	r3, #20
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3368      	adds	r3, #104	; 0x68
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	18cb      	adds	r3, r1, r3
 80035c2:	3304      	adds	r3, #4
 80035c4:	601a      	str	r2, [r3, #0]
		pstdistancia->sensor[k] = i;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	b2d8      	uxtb	r0, r3
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	4945      	ldr	r1, [pc, #276]	; (80036e4 <ConfigParrillas+0x2e4>)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	18d3      	adds	r3, r2, r3
 80035d2:	185b      	adds	r3, r3, r1
 80035d4:	1c02      	adds	r2, r0, #0
 80035d6:	701a      	strb	r2, [r3, #0]
		k++;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	3301      	adds	r3, #1
 80035dc:	617b      	str	r3, [r7, #20]
		for(j=1; j<pstdistancia->cantFilas[i]; j++)
 80035de:	2301      	movs	r3, #1
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	e05f      	b.n	80036a4 <ConfigParrillas+0x2a4>
		{
			pstmotor->distFilas[i][j] = ((pstcaptura->ancho[i][j-1]+pstcaptura->ancho[i][j])/2+SEPARADOR)*STEP_1MM+pstmotor->distFilas[i][j-1];// Fix signo
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	1e59      	subs	r1, r3, #1
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	0013      	movs	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	189b      	adds	r3, r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	18c3      	adds	r3, r0, r3
 80035f6:	185b      	adds	r3, r3, r1
 80035f8:	3303      	adds	r3, #3
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	0018      	movs	r0, r3
 80035fe:	68f9      	ldr	r1, [r7, #12]
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	0013      	movs	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	189b      	adds	r3, r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	18ca      	adds	r2, r1, r3
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	18d3      	adds	r3, r2, r3
 8003610:	3303      	adds	r3, #3
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	18c3      	adds	r3, r0, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	da00      	bge.n	800361c <ConfigParrillas+0x21c>
 800361a:	3301      	adds	r3, #1
 800361c:	105b      	asrs	r3, r3, #1
 800361e:	3307      	adds	r3, #7
 8003620:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <ConfigParrillas+0x2e8>)
 8003622:	4353      	muls	r3, r2
 8003624:	001c      	movs	r4, r3
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1e58      	subs	r0, r3, #1
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	0013      	movs	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	189b      	adds	r3, r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	181b      	adds	r3, r3, r0
 8003638:	3304      	adds	r3, #4
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	18cb      	adds	r3, r1, r3
 800363e:	3304      	adds	r3, #4
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	18e1      	adds	r1, r4, r3
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	0013      	movs	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	189b      	adds	r3, r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	189b      	adds	r3, r3, r2
 8003654:	3304      	adds	r3, #4
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	18c3      	adds	r3, r0, r3
 800365a:	3304      	adds	r3, #4
 800365c:	6019      	str	r1, [r3, #0]
			pstmotor->recorrido[k] = pstmotor->distFilas[i][j];
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	0013      	movs	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	189b      	adds	r3, r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	189b      	adds	r3, r3, r2
 800366e:	3304      	adds	r3, #4
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	18cb      	adds	r3, r1, r3
 8003674:	3304      	adds	r3, #4
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3368      	adds	r3, #104	; 0x68
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	18cb      	adds	r3, r1, r3
 8003682:	3304      	adds	r3, #4
 8003684:	601a      	str	r2, [r3, #0]
			pstdistancia->sensor[k] = i;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	b2d8      	uxtb	r0, r3
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	4915      	ldr	r1, [pc, #84]	; (80036e4 <ConfigParrillas+0x2e4>)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	18d3      	adds	r3, r2, r3
 8003692:	185b      	adds	r3, r3, r1
 8003694:	1c02      	adds	r2, r0, #0
 8003696:	701a      	strb	r2, [r3, #0]
			k++;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3301      	adds	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
		for(j=1; j<pstdistancia->cantFilas[i]; j++)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	2167      	movs	r1, #103	; 0x67
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	18d3      	adds	r3, r2, r3
 80036ac:	185b      	adds	r3, r3, r1
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	001a      	movs	r2, r3
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	4293      	cmp	r3, r2
 80036b6:	db95      	blt.n	80035e4 <ConfigParrillas+0x1e4>
	for(i=0; i<pstmotor->ParrHab; i++)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	3301      	adds	r3, #1
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	23cd      	movs	r3, #205	; 0xcd
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	5cd3      	ldrb	r3, [r2, r3]
 80036c6:	001a      	movs	r2, r3
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	4293      	cmp	r3, r2
 80036cc:	da00      	bge.n	80036d0 <ConfigParrillas+0x2d0>
 80036ce:	e760      	b.n	8003592 <ConfigParrillas+0x192>
		}
	}
	pstmotor->MaxPosMotor = k;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	b2d9      	uxtb	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a05      	ldr	r2, [pc, #20]	; (80036ec <ConfigParrillas+0x2ec>)
 80036d8:	5499      	strb	r1, [r3, r2]
}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	b009      	add	sp, #36	; 0x24
 80036e0:	bd90      	pop	{r4, r7, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	00000522 	.word	0x00000522
 80036e8:	0000031d 	.word	0x0000031d
 80036ec:	00000335 	.word	0x00000335

080036f0 <Ordenar>:
						pstdistancia: Apuntador a la estructura de datos de Distancia
Salidas:          		N/A
Descripción:  		    Planeación de las paradas que deben realizar los motores
****************************************************************************************/
void Ordenar(stMotor *pstmotor, stDistancia *pstdistancia)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
	int i,j,band=1;
 80036fa:	2301      	movs	r3, #1
 80036fc:	613b      	str	r3, [r7, #16]
	while(band)
 80036fe:	e061      	b.n	80037c4 <Ordenar+0xd4>
	{
		band = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
		for(i=1; i<pstmotor->MaxPosMotor; i++)
 8003704:	2301      	movs	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	e055      	b.n	80037b6 <Ordenar+0xc6>
		{
			if(pstmotor->recorrido[i]<pstmotor->recorrido[i-1])
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3368      	adds	r3, #104	; 0x68
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	18d3      	adds	r3, r2, r3
 8003714:	3304      	adds	r3, #4
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	3b01      	subs	r3, #1
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	3368      	adds	r3, #104	; 0x68
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	18cb      	adds	r3, r1, r3
 8003724:	3304      	adds	r3, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d241      	bcs.n	80037b0 <Ordenar+0xc0>
			{
				j = pstmotor->recorrido[i-1];
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3b01      	subs	r3, #1
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	3368      	adds	r3, #104	; 0x68
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	18d3      	adds	r3, r2, r3
 8003738:	3304      	adds	r3, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60fb      	str	r3, [r7, #12]
				pstmotor->recorrido[i-1] = pstmotor->recorrido[i];
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	1e58      	subs	r0, r3, #1
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	3368      	adds	r3, #104	; 0x68
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	18d3      	adds	r3, r2, r3
 800374c:	3304      	adds	r3, #4
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	0003      	movs	r3, r0
 8003754:	3368      	adds	r3, #104	; 0x68
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	18cb      	adds	r3, r1, r3
 800375a:	3304      	adds	r3, #4
 800375c:	601a      	str	r2, [r3, #0]
				pstmotor->recorrido[i] = j;
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	3368      	adds	r3, #104	; 0x68
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	18cb      	adds	r3, r1, r3
 800376a:	3304      	adds	r3, #4
 800376c:	601a      	str	r2, [r3, #0]
				j = pstdistancia->sensor[i-1];
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	3b01      	subs	r3, #1
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	4925      	ldr	r1, [pc, #148]	; (800380c <Ordenar+0x11c>)
 8003776:	18d3      	adds	r3, r2, r3
 8003778:	185b      	adds	r3, r3, r1
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]
				pstdistancia->sensor[i-1] = pstdistancia->sensor[i];
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3b01      	subs	r3, #1
 8003782:	6839      	ldr	r1, [r7, #0]
 8003784:	4821      	ldr	r0, [pc, #132]	; (800380c <Ordenar+0x11c>)
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	188a      	adds	r2, r1, r2
 800378a:	1812      	adds	r2, r2, r0
 800378c:	7810      	ldrb	r0, [r2, #0]
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	491e      	ldr	r1, [pc, #120]	; (800380c <Ordenar+0x11c>)
 8003792:	18d3      	adds	r3, r2, r3
 8003794:	185b      	adds	r3, r3, r1
 8003796:	1c02      	adds	r2, r0, #0
 8003798:	701a      	strb	r2, [r3, #0]
				pstdistancia->sensor[i] = j;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	b2d8      	uxtb	r0, r3
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	491a      	ldr	r1, [pc, #104]	; (800380c <Ordenar+0x11c>)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	18d3      	adds	r3, r2, r3
 80037a6:	185b      	adds	r3, r3, r1
 80037a8:	1c02      	adds	r2, r0, #0
 80037aa:	701a      	strb	r2, [r3, #0]
				band = 1;
 80037ac:	2301      	movs	r3, #1
 80037ae:	613b      	str	r3, [r7, #16]
		for(i=1; i<pstmotor->MaxPosMotor; i++)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	3301      	adds	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a15      	ldr	r2, [pc, #84]	; (8003810 <Ordenar+0x120>)
 80037ba:	5c9b      	ldrb	r3, [r3, r2]
 80037bc:	001a      	movs	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4293      	cmp	r3, r2
 80037c2:	dba2      	blt.n	800370a <Ordenar+0x1a>
	while(band)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d19a      	bne.n	8003700 <Ordenar+0x10>
			}
		}
	}
	for(i=0; i<pstmotor->MaxPosMotor; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	e011      	b.n	80037f4 <Ordenar+0x104>
	{
		pstmotor->recorrido[i] = -pstmotor->recorrido[i];
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	3368      	adds	r3, #104	; 0x68
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	18d3      	adds	r3, r2, r3
 80037da:	3304      	adds	r3, #4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	425a      	negs	r2, r3
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	3368      	adds	r3, #104	; 0x68
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	18cb      	adds	r3, r1, r3
 80037ea:	3304      	adds	r3, #4
 80037ec:	601a      	str	r2, [r3, #0]
	for(i=0; i<pstmotor->MaxPosMotor; i++)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	3301      	adds	r3, #1
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a06      	ldr	r2, [pc, #24]	; (8003810 <Ordenar+0x120>)
 80037f8:	5c9b      	ldrb	r3, [r3, r2]
 80037fa:	001a      	movs	r2, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	4293      	cmp	r3, r2
 8003800:	dbe6      	blt.n	80037d0 <Ordenar+0xe0>
	}
}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b006      	add	sp, #24
 800380a:	bd80      	pop	{r7, pc}
 800380c:	00000522 	.word	0x00000522
 8003810:	00000335 	.word	0x00000335

08003814 <ConvertirDistancia>:
						pstdistancia: Apuntador a la estructura de datos de Distancia
Salidas:          		Retorna la cantidad de productos de acuerdo a la distancia
Descripción:  		    Convierte el valor de distancia a cantidad de productos
****************************************************************************************/
uint8_t ConvertirDistancia(stCaptura *pstcaptura, stDistancia *pstdistancia)
{
 8003814:	b5b0      	push	{r4, r5, r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
	uint8_t resultado = 0, sensor;
 800381e:	2527      	movs	r5, #39	; 0x27
 8003820:	197b      	adds	r3, r7, r5
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
	uint16_t dist, largo;
	float e1, e2, e3, e4, e5;

	sensor = pstdistancia->contParrilla;
 8003826:	2326      	movs	r3, #38	; 0x26
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	2166      	movs	r1, #102	; 0x66
 800382e:	5c52      	ldrb	r2, [r2, r1]
 8003830:	701a      	strb	r2, [r3, #0]
	dist = pstdistancia->datosDistancia[pstdistancia->contParrilla][pstcaptura->filaActual];
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2266      	movs	r2, #102	; 0x66
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	0018      	movs	r0, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	785b      	ldrb	r3, [r3, #1]
 800383e:	001c      	movs	r4, r3
 8003840:	2324      	movs	r3, #36	; 0x24
 8003842:	18fa      	adds	r2, r7, r3
 8003844:	6839      	ldr	r1, [r7, #0]
 8003846:	0003      	movs	r3, r0
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	181b      	adds	r3, r3, r0
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	191b      	adds	r3, r3, r4
 8003850:	3338      	adds	r3, #56	; 0x38
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	18cb      	adds	r3, r1, r3
 8003856:	3302      	adds	r3, #2
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	8013      	strh	r3, [r2, #0]
	largo = pstcaptura->largo[pstdistancia->contParrilla][pstcaptura->filaActual];
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2266      	movs	r2, #102	; 0x66
 8003860:	5c9b      	ldrb	r3, [r3, r2]
 8003862:	0018      	movs	r0, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	785b      	ldrb	r3, [r3, #1]
 8003868:	001c      	movs	r4, r3
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	2167      	movs	r1, #103	; 0x67
 800386e:	0003      	movs	r3, r0
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	181b      	adds	r3, r3, r0
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	18d3      	adds	r3, r2, r3
 8003878:	191b      	adds	r3, r3, r4
 800387a:	185b      	adds	r3, r3, r1
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	2322      	movs	r3, #34	; 0x22
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	801a      	strh	r2, [r3, #0]
	e1=pstdistancia->datosDistancia[pstdistancia->contParrilla][pstcaptura->filaActual]*0.0309-36.803;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2266      	movs	r2, #102	; 0x66
 8003888:	5c9b      	ldrb	r3, [r3, r2]
 800388a:	0019      	movs	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	785b      	ldrb	r3, [r3, #1]
 8003890:	0018      	movs	r0, r3
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	000b      	movs	r3, r1
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	185b      	adds	r3, r3, r1
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	181b      	adds	r3, r3, r0
 800389e:	3338      	adds	r3, #56	; 0x38
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	18d3      	adds	r3, r2, r3
 80038a4:	3302      	adds	r3, #2
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7ff f9c1 	bl	8002c30 <__aeabi_i2d>
 80038ae:	4aea      	ldr	r2, [pc, #936]	; (8003c58 <ConvertirDistancia+0x444>)
 80038b0:	4bea      	ldr	r3, [pc, #936]	; (8003c5c <ConvertirDistancia+0x448>)
 80038b2:	f7fe fb6b 	bl	8001f8c <__aeabi_dmul>
 80038b6:	0002      	movs	r2, r0
 80038b8:	000b      	movs	r3, r1
 80038ba:	0010      	movs	r0, r2
 80038bc:	0019      	movs	r1, r3
 80038be:	4ae8      	ldr	r2, [pc, #928]	; (8003c60 <ConvertirDistancia+0x44c>)
 80038c0:	4be8      	ldr	r3, [pc, #928]	; (8003c64 <ConvertirDistancia+0x450>)
 80038c2:	f7fe fdcf 	bl	8002464 <__aeabi_dsub>
 80038c6:	0002      	movs	r2, r0
 80038c8:	000b      	movs	r3, r1
 80038ca:	0010      	movs	r0, r2
 80038cc:	0019      	movs	r1, r3
 80038ce:	f7ff fa05 	bl	8002cdc <__aeabi_d2f>
 80038d2:	1c03      	adds	r3, r0, #0
 80038d4:	61fb      	str	r3, [r7, #28]
	e2=pstdistancia->datosDistancia[pstdistancia->contParrilla][pstcaptura->filaActual]*0.0583-42.687;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2266      	movs	r2, #102	; 0x66
 80038da:	5c9b      	ldrb	r3, [r3, r2]
 80038dc:	0019      	movs	r1, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	785b      	ldrb	r3, [r3, #1]
 80038e2:	0018      	movs	r0, r3
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	000b      	movs	r3, r1
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	185b      	adds	r3, r3, r1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	181b      	adds	r3, r3, r0
 80038f0:	3338      	adds	r3, #56	; 0x38
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	18d3      	adds	r3, r2, r3
 80038f6:	3302      	adds	r3, #2
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	0018      	movs	r0, r3
 80038fc:	f7ff f998 	bl	8002c30 <__aeabi_i2d>
 8003900:	4ad9      	ldr	r2, [pc, #868]	; (8003c68 <ConvertirDistancia+0x454>)
 8003902:	4bda      	ldr	r3, [pc, #872]	; (8003c6c <ConvertirDistancia+0x458>)
 8003904:	f7fe fb42 	bl	8001f8c <__aeabi_dmul>
 8003908:	0002      	movs	r2, r0
 800390a:	000b      	movs	r3, r1
 800390c:	0010      	movs	r0, r2
 800390e:	0019      	movs	r1, r3
 8003910:	4ad7      	ldr	r2, [pc, #860]	; (8003c70 <ConvertirDistancia+0x45c>)
 8003912:	4bd8      	ldr	r3, [pc, #864]	; (8003c74 <ConvertirDistancia+0x460>)
 8003914:	f7fe fda6 	bl	8002464 <__aeabi_dsub>
 8003918:	0002      	movs	r2, r0
 800391a:	000b      	movs	r3, r1
 800391c:	0010      	movs	r0, r2
 800391e:	0019      	movs	r1, r3
 8003920:	f7ff f9dc 	bl	8002cdc <__aeabi_d2f>
 8003924:	1c03      	adds	r3, r0, #0
 8003926:	61bb      	str	r3, [r7, #24]
	e3=pstdistancia->datosDistancia[pstdistancia->contParrilla][pstcaptura->filaActual]*-0.0067-23.071;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2266      	movs	r2, #102	; 0x66
 800392c:	5c9b      	ldrb	r3, [r3, r2]
 800392e:	0019      	movs	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	785b      	ldrb	r3, [r3, #1]
 8003934:	0018      	movs	r0, r3
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	000b      	movs	r3, r1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	185b      	adds	r3, r3, r1
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	181b      	adds	r3, r3, r0
 8003942:	3338      	adds	r3, #56	; 0x38
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	18d3      	adds	r3, r2, r3
 8003948:	3302      	adds	r3, #2
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	0018      	movs	r0, r3
 800394e:	f7ff f96f 	bl	8002c30 <__aeabi_i2d>
 8003952:	4ac9      	ldr	r2, [pc, #804]	; (8003c78 <ConvertirDistancia+0x464>)
 8003954:	4bc9      	ldr	r3, [pc, #804]	; (8003c7c <ConvertirDistancia+0x468>)
 8003956:	f7fe fb19 	bl	8001f8c <__aeabi_dmul>
 800395a:	0002      	movs	r2, r0
 800395c:	000b      	movs	r3, r1
 800395e:	0010      	movs	r0, r2
 8003960:	0019      	movs	r1, r3
 8003962:	4ac7      	ldr	r2, [pc, #796]	; (8003c80 <ConvertirDistancia+0x46c>)
 8003964:	4bc7      	ldr	r3, [pc, #796]	; (8003c84 <ConvertirDistancia+0x470>)
 8003966:	f7fe fd7d 	bl	8002464 <__aeabi_dsub>
 800396a:	0002      	movs	r2, r0
 800396c:	000b      	movs	r3, r1
 800396e:	0010      	movs	r0, r2
 8003970:	0019      	movs	r1, r3
 8003972:	f7ff f9b3 	bl	8002cdc <__aeabi_d2f>
 8003976:	1c03      	adds	r3, r0, #0
 8003978:	617b      	str	r3, [r7, #20]
	e4=pstdistancia->datosDistancia[pstdistancia->contParrilla][pstcaptura->filaActual]*0.0192-24.945;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2266      	movs	r2, #102	; 0x66
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	0019      	movs	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	0018      	movs	r0, r3
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	000b      	movs	r3, r1
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	185b      	adds	r3, r3, r1
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	181b      	adds	r3, r3, r0
 8003994:	3338      	adds	r3, #56	; 0x38
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	18d3      	adds	r3, r2, r3
 800399a:	3302      	adds	r3, #2
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	0018      	movs	r0, r3
 80039a0:	f7ff f946 	bl	8002c30 <__aeabi_i2d>
 80039a4:	4ab8      	ldr	r2, [pc, #736]	; (8003c88 <ConvertirDistancia+0x474>)
 80039a6:	4bb9      	ldr	r3, [pc, #740]	; (8003c8c <ConvertirDistancia+0x478>)
 80039a8:	f7fe faf0 	bl	8001f8c <__aeabi_dmul>
 80039ac:	0002      	movs	r2, r0
 80039ae:	000b      	movs	r3, r1
 80039b0:	0010      	movs	r0, r2
 80039b2:	0019      	movs	r1, r3
 80039b4:	4ab6      	ldr	r2, [pc, #728]	; (8003c90 <ConvertirDistancia+0x47c>)
 80039b6:	4bb7      	ldr	r3, [pc, #732]	; (8003c94 <ConvertirDistancia+0x480>)
 80039b8:	f7fe fd54 	bl	8002464 <__aeabi_dsub>
 80039bc:	0002      	movs	r2, r0
 80039be:	000b      	movs	r3, r1
 80039c0:	0010      	movs	r0, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	f7ff f98a 	bl	8002cdc <__aeabi_d2f>
 80039c8:	1c03      	adds	r3, r0, #0
 80039ca:	613b      	str	r3, [r7, #16]
	e5=pstdistancia->datosDistancia[pstdistancia->contParrilla][pstcaptura->filaActual]*0.0177-26.045;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2266      	movs	r2, #102	; 0x66
 80039d0:	5c9b      	ldrb	r3, [r3, r2]
 80039d2:	0019      	movs	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	785b      	ldrb	r3, [r3, #1]
 80039d8:	0018      	movs	r0, r3
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	000b      	movs	r3, r1
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	185b      	adds	r3, r3, r1
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	181b      	adds	r3, r3, r0
 80039e6:	3338      	adds	r3, #56	; 0x38
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	18d3      	adds	r3, r2, r3
 80039ec:	3302      	adds	r3, #2
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f7ff f91d 	bl	8002c30 <__aeabi_i2d>
 80039f6:	4aa8      	ldr	r2, [pc, #672]	; (8003c98 <ConvertirDistancia+0x484>)
 80039f8:	4ba8      	ldr	r3, [pc, #672]	; (8003c9c <ConvertirDistancia+0x488>)
 80039fa:	f7fe fac7 	bl	8001f8c <__aeabi_dmul>
 80039fe:	0002      	movs	r2, r0
 8003a00:	000b      	movs	r3, r1
 8003a02:	0010      	movs	r0, r2
 8003a04:	0019      	movs	r1, r3
 8003a06:	4aa6      	ldr	r2, [pc, #664]	; (8003ca0 <ConvertirDistancia+0x48c>)
 8003a08:	4ba6      	ldr	r3, [pc, #664]	; (8003ca4 <ConvertirDistancia+0x490>)
 8003a0a:	f7fe fd2b 	bl	8002464 <__aeabi_dsub>
 8003a0e:	0002      	movs	r2, r0
 8003a10:	000b      	movs	r3, r1
 8003a12:	0010      	movs	r0, r2
 8003a14:	0019      	movs	r1, r3
 8003a16:	f7ff f961 	bl	8002cdc <__aeabi_d2f>
 8003a1a:	1c03      	adds	r3, r0, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
//		}
//	}



	if(pstdistancia->datosDistancia[pstdistancia->contParrilla][pstcaptura->filaActual] > 400){
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2266      	movs	r2, #102	; 0x66
 8003a22:	5c9b      	ldrb	r3, [r3, r2]
 8003a24:	0019      	movs	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	785b      	ldrb	r3, [r3, #1]
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	000b      	movs	r3, r1
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	185b      	adds	r3, r3, r1
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	181b      	adds	r3, r3, r0
 8003a38:	3338      	adds	r3, #56	; 0x38
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	18d3      	adds	r3, r2, r3
 8003a3e:	3302      	adds	r3, #2
 8003a40:	881a      	ldrh	r2, [r3, #0]
 8003a42:	23c8      	movs	r3, #200	; 0xc8
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d903      	bls.n	8003a52 <ConvertirDistancia+0x23e>
		resultado = 0;
 8003a4a:	197b      	adds	r3, r7, r5
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	e1a8      	b.n	8003da4 <ConvertirDistancia+0x590>
	}else{
		switch(sensor){
 8003a52:	2326      	movs	r3, #38	; 0x26
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d900      	bls.n	8003a5e <ConvertirDistancia+0x24a>
 8003a5c:	e164      	b.n	8003d28 <ConvertirDistancia+0x514>
 8003a5e:	009a      	lsls	r2, r3, #2
 8003a60:	4b91      	ldr	r3, [pc, #580]	; (8003ca8 <ConvertirDistancia+0x494>)
 8003a62:	18d3      	adds	r3, r2, r3
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	469f      	mov	pc, r3
		case 0:
			resultado = (pstcaptura->Distancia*10-(dist+CORR_DIST-e1)+largo) / largo;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	789b      	ldrb	r3, [r3, #2]
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	0013      	movs	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	189b      	adds	r3, r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7fd fad2 	bl	8001020 <__aeabi_i2f>
 8003a7c:	1c04      	adds	r4, r0, #0
 8003a7e:	2324      	movs	r3, #36	; 0x24
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	3b1b      	subs	r3, #27
 8003a86:	0018      	movs	r0, r3
 8003a88:	f7fd faca 	bl	8001020 <__aeabi_i2f>
 8003a8c:	1c03      	adds	r3, r0, #0
 8003a8e:	69f9      	ldr	r1, [r7, #28]
 8003a90:	1c18      	adds	r0, r3, #0
 8003a92:	f7fd f8dd 	bl	8000c50 <__aeabi_fsub>
 8003a96:	1c03      	adds	r3, r0, #0
 8003a98:	1c19      	adds	r1, r3, #0
 8003a9a:	1c20      	adds	r0, r4, #0
 8003a9c:	f7fd f8d8 	bl	8000c50 <__aeabi_fsub>
 8003aa0:	1c03      	adds	r3, r0, #0
 8003aa2:	1c1c      	adds	r4, r3, #0
 8003aa4:	2522      	movs	r5, #34	; 0x22
 8003aa6:	197b      	adds	r3, r7, r5
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f7fd fab8 	bl	8001020 <__aeabi_i2f>
 8003ab0:	1c03      	adds	r3, r0, #0
 8003ab2:	1c19      	adds	r1, r3, #0
 8003ab4:	1c20      	adds	r0, r4, #0
 8003ab6:	f7fc fe23 	bl	8000700 <__aeabi_fadd>
 8003aba:	1c03      	adds	r3, r0, #0
 8003abc:	1c1c      	adds	r4, r3, #0
 8003abe:	197b      	adds	r3, r7, r5
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f7fd faac 	bl	8001020 <__aeabi_i2f>
 8003ac8:	1c03      	adds	r3, r0, #0
 8003aca:	1c19      	adds	r1, r3, #0
 8003acc:	1c20      	adds	r0, r4, #0
 8003ace:	f7fc ffb3 	bl	8000a38 <__aeabi_fdiv>
 8003ad2:	1c03      	adds	r3, r0, #0
 8003ad4:	2227      	movs	r2, #39	; 0x27
 8003ad6:	18bc      	adds	r4, r7, r2
 8003ad8:	1c18      	adds	r0, r3, #0
 8003ada:	f7fc fd2d 	bl	8000538 <__aeabi_f2uiz>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	7023      	strb	r3, [r4, #0]
			break;
 8003ae2:	e15f      	b.n	8003da4 <ConvertirDistancia+0x590>
		case 1:
			resultado = (pstcaptura->Distancia*10-(dist+CORR_DIST-e2)+largo) / largo;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	789b      	ldrb	r3, [r3, #2]
 8003ae8:	001a      	movs	r2, r3
 8003aea:	0013      	movs	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	189b      	adds	r3, r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7fd fa94 	bl	8001020 <__aeabi_i2f>
 8003af8:	1c04      	adds	r4, r0, #0
 8003afa:	2324      	movs	r3, #36	; 0x24
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	3b1b      	subs	r3, #27
 8003b02:	0018      	movs	r0, r3
 8003b04:	f7fd fa8c 	bl	8001020 <__aeabi_i2f>
 8003b08:	1c03      	adds	r3, r0, #0
 8003b0a:	69b9      	ldr	r1, [r7, #24]
 8003b0c:	1c18      	adds	r0, r3, #0
 8003b0e:	f7fd f89f 	bl	8000c50 <__aeabi_fsub>
 8003b12:	1c03      	adds	r3, r0, #0
 8003b14:	1c19      	adds	r1, r3, #0
 8003b16:	1c20      	adds	r0, r4, #0
 8003b18:	f7fd f89a 	bl	8000c50 <__aeabi_fsub>
 8003b1c:	1c03      	adds	r3, r0, #0
 8003b1e:	1c1c      	adds	r4, r3, #0
 8003b20:	2522      	movs	r5, #34	; 0x22
 8003b22:	197b      	adds	r3, r7, r5
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7fd fa7a 	bl	8001020 <__aeabi_i2f>
 8003b2c:	1c03      	adds	r3, r0, #0
 8003b2e:	1c19      	adds	r1, r3, #0
 8003b30:	1c20      	adds	r0, r4, #0
 8003b32:	f7fc fde5 	bl	8000700 <__aeabi_fadd>
 8003b36:	1c03      	adds	r3, r0, #0
 8003b38:	1c1c      	adds	r4, r3, #0
 8003b3a:	197b      	adds	r3, r7, r5
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f7fd fa6e 	bl	8001020 <__aeabi_i2f>
 8003b44:	1c03      	adds	r3, r0, #0
 8003b46:	1c19      	adds	r1, r3, #0
 8003b48:	1c20      	adds	r0, r4, #0
 8003b4a:	f7fc ff75 	bl	8000a38 <__aeabi_fdiv>
 8003b4e:	1c03      	adds	r3, r0, #0
 8003b50:	2227      	movs	r2, #39	; 0x27
 8003b52:	18bc      	adds	r4, r7, r2
 8003b54:	1c18      	adds	r0, r3, #0
 8003b56:	f7fc fcef 	bl	8000538 <__aeabi_f2uiz>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	7023      	strb	r3, [r4, #0]
			break;
 8003b5e:	e121      	b.n	8003da4 <ConvertirDistancia+0x590>
		case 2:
			resultado = (pstcaptura->Distancia*10-(dist+CORR_DIST-e3)+largo) / largo;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	789b      	ldrb	r3, [r3, #2]
 8003b64:	001a      	movs	r2, r3
 8003b66:	0013      	movs	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	189b      	adds	r3, r3, r2
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7fd fa56 	bl	8001020 <__aeabi_i2f>
 8003b74:	1c04      	adds	r4, r0, #0
 8003b76:	2324      	movs	r3, #36	; 0x24
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	3b1b      	subs	r3, #27
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7fd fa4e 	bl	8001020 <__aeabi_i2f>
 8003b84:	1c03      	adds	r3, r0, #0
 8003b86:	6979      	ldr	r1, [r7, #20]
 8003b88:	1c18      	adds	r0, r3, #0
 8003b8a:	f7fd f861 	bl	8000c50 <__aeabi_fsub>
 8003b8e:	1c03      	adds	r3, r0, #0
 8003b90:	1c19      	adds	r1, r3, #0
 8003b92:	1c20      	adds	r0, r4, #0
 8003b94:	f7fd f85c 	bl	8000c50 <__aeabi_fsub>
 8003b98:	1c03      	adds	r3, r0, #0
 8003b9a:	1c1c      	adds	r4, r3, #0
 8003b9c:	2522      	movs	r5, #34	; 0x22
 8003b9e:	197b      	adds	r3, r7, r5
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f7fd fa3c 	bl	8001020 <__aeabi_i2f>
 8003ba8:	1c03      	adds	r3, r0, #0
 8003baa:	1c19      	adds	r1, r3, #0
 8003bac:	1c20      	adds	r0, r4, #0
 8003bae:	f7fc fda7 	bl	8000700 <__aeabi_fadd>
 8003bb2:	1c03      	adds	r3, r0, #0
 8003bb4:	1c1c      	adds	r4, r3, #0
 8003bb6:	197b      	adds	r3, r7, r5
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7fd fa30 	bl	8001020 <__aeabi_i2f>
 8003bc0:	1c03      	adds	r3, r0, #0
 8003bc2:	1c19      	adds	r1, r3, #0
 8003bc4:	1c20      	adds	r0, r4, #0
 8003bc6:	f7fc ff37 	bl	8000a38 <__aeabi_fdiv>
 8003bca:	1c03      	adds	r3, r0, #0
 8003bcc:	2227      	movs	r2, #39	; 0x27
 8003bce:	18bc      	adds	r4, r7, r2
 8003bd0:	1c18      	adds	r0, r3, #0
 8003bd2:	f7fc fcb1 	bl	8000538 <__aeabi_f2uiz>
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	7023      	strb	r3, [r4, #0]
			break;
 8003bda:	e0e3      	b.n	8003da4 <ConvertirDistancia+0x590>
		case 3:
			resultado = (pstcaptura->Distancia*10-(dist+CORR_DIST-e4)+largo) / largo;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	789b      	ldrb	r3, [r3, #2]
 8003be0:	001a      	movs	r2, r3
 8003be2:	0013      	movs	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	189b      	adds	r3, r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	0018      	movs	r0, r3
 8003bec:	f7fd fa18 	bl	8001020 <__aeabi_i2f>
 8003bf0:	1c04      	adds	r4, r0, #0
 8003bf2:	2324      	movs	r3, #36	; 0x24
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	3b1b      	subs	r3, #27
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f7fd fa10 	bl	8001020 <__aeabi_i2f>
 8003c00:	1c03      	adds	r3, r0, #0
 8003c02:	6939      	ldr	r1, [r7, #16]
 8003c04:	1c18      	adds	r0, r3, #0
 8003c06:	f7fd f823 	bl	8000c50 <__aeabi_fsub>
 8003c0a:	1c03      	adds	r3, r0, #0
 8003c0c:	1c19      	adds	r1, r3, #0
 8003c0e:	1c20      	adds	r0, r4, #0
 8003c10:	f7fd f81e 	bl	8000c50 <__aeabi_fsub>
 8003c14:	1c03      	adds	r3, r0, #0
 8003c16:	1c1c      	adds	r4, r3, #0
 8003c18:	2522      	movs	r5, #34	; 0x22
 8003c1a:	197b      	adds	r3, r7, r5
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f7fd f9fe 	bl	8001020 <__aeabi_i2f>
 8003c24:	1c03      	adds	r3, r0, #0
 8003c26:	1c19      	adds	r1, r3, #0
 8003c28:	1c20      	adds	r0, r4, #0
 8003c2a:	f7fc fd69 	bl	8000700 <__aeabi_fadd>
 8003c2e:	1c03      	adds	r3, r0, #0
 8003c30:	1c1c      	adds	r4, r3, #0
 8003c32:	197b      	adds	r3, r7, r5
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	0018      	movs	r0, r3
 8003c38:	f7fd f9f2 	bl	8001020 <__aeabi_i2f>
 8003c3c:	1c03      	adds	r3, r0, #0
 8003c3e:	1c19      	adds	r1, r3, #0
 8003c40:	1c20      	adds	r0, r4, #0
 8003c42:	f7fc fef9 	bl	8000a38 <__aeabi_fdiv>
 8003c46:	1c03      	adds	r3, r0, #0
 8003c48:	2227      	movs	r2, #39	; 0x27
 8003c4a:	18bc      	adds	r4, r7, r2
 8003c4c:	1c18      	adds	r0, r3, #0
 8003c4e:	f7fc fc73 	bl	8000538 <__aeabi_f2uiz>
 8003c52:	0003      	movs	r3, r0
 8003c54:	7023      	strb	r3, [r4, #0]
			break;
 8003c56:	e0a5      	b.n	8003da4 <ConvertirDistancia+0x590>
 8003c58:	e5c91d15 	.word	0xe5c91d15
 8003c5c:	3f9fa43f 	.word	0x3f9fa43f
 8003c60:	b4395810 	.word	0xb4395810
 8003c64:	404266c8 	.word	0x404266c8
 8003c68:	62b6ae7d 	.word	0x62b6ae7d
 8003c6c:	3fadd97f 	.word	0x3fadd97f
 8003c70:	9db22d0e 	.word	0x9db22d0e
 8003c74:	404557ef 	.word	0x404557ef
 8003c78:	8e219653 	.word	0x8e219653
 8003c7c:	bf7b7175 	.word	0xbf7b7175
 8003c80:	0e560419 	.word	0x0e560419
 8003c84:	4037122d 	.word	0x4037122d
 8003c88:	30553261 	.word	0x30553261
 8003c8c:	3f93a92a 	.word	0x3f93a92a
 8003c90:	851eb852 	.word	0x851eb852
 8003c94:	4038f1eb 	.word	0x4038f1eb
 8003c98:	e48e8a72 	.word	0xe48e8a72
 8003c9c:	3f921ff2 	.word	0x3f921ff2
 8003ca0:	1eb851ec 	.word	0x1eb851ec
 8003ca4:	403a0b85 	.word	0x403a0b85
 8003ca8:	08016298 	.word	0x08016298
		case 4:
			resultado = (pstcaptura->Distancia*10-(dist+CORR_DIST-e5)+largo) / largo;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	789b      	ldrb	r3, [r3, #2]
 8003cb0:	001a      	movs	r2, r3
 8003cb2:	0013      	movs	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7fd f9b0 	bl	8001020 <__aeabi_i2f>
 8003cc0:	1c04      	adds	r4, r0, #0
 8003cc2:	2324      	movs	r3, #36	; 0x24
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	3b1b      	subs	r3, #27
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f7fd f9a8 	bl	8001020 <__aeabi_i2f>
 8003cd0:	1c03      	adds	r3, r0, #0
 8003cd2:	68f9      	ldr	r1, [r7, #12]
 8003cd4:	1c18      	adds	r0, r3, #0
 8003cd6:	f7fc ffbb 	bl	8000c50 <__aeabi_fsub>
 8003cda:	1c03      	adds	r3, r0, #0
 8003cdc:	1c19      	adds	r1, r3, #0
 8003cde:	1c20      	adds	r0, r4, #0
 8003ce0:	f7fc ffb6 	bl	8000c50 <__aeabi_fsub>
 8003ce4:	1c03      	adds	r3, r0, #0
 8003ce6:	1c1c      	adds	r4, r3, #0
 8003ce8:	2522      	movs	r5, #34	; 0x22
 8003cea:	197b      	adds	r3, r7, r5
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7fd f996 	bl	8001020 <__aeabi_i2f>
 8003cf4:	1c03      	adds	r3, r0, #0
 8003cf6:	1c19      	adds	r1, r3, #0
 8003cf8:	1c20      	adds	r0, r4, #0
 8003cfa:	f7fc fd01 	bl	8000700 <__aeabi_fadd>
 8003cfe:	1c03      	adds	r3, r0, #0
 8003d00:	1c1c      	adds	r4, r3, #0
 8003d02:	197b      	adds	r3, r7, r5
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	0018      	movs	r0, r3
 8003d08:	f7fd f98a 	bl	8001020 <__aeabi_i2f>
 8003d0c:	1c03      	adds	r3, r0, #0
 8003d0e:	1c19      	adds	r1, r3, #0
 8003d10:	1c20      	adds	r0, r4, #0
 8003d12:	f7fc fe91 	bl	8000a38 <__aeabi_fdiv>
 8003d16:	1c03      	adds	r3, r0, #0
 8003d18:	2227      	movs	r2, #39	; 0x27
 8003d1a:	18bc      	adds	r4, r7, r2
 8003d1c:	1c18      	adds	r0, r3, #0
 8003d1e:	f7fc fc0b 	bl	8000538 <__aeabi_f2uiz>
 8003d22:	0003      	movs	r3, r0
 8003d24:	7023      	strb	r3, [r4, #0]
			break;
 8003d26:	e03d      	b.n	8003da4 <ConvertirDistancia+0x590>
		default:
			resultado = (pstcaptura->Distancia*10-(dist+CORR_DIST-e1)+largo) / largo;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	789b      	ldrb	r3, [r3, #2]
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	0013      	movs	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	189b      	adds	r3, r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	0018      	movs	r0, r3
 8003d38:	f7fd f972 	bl	8001020 <__aeabi_i2f>
 8003d3c:	1c04      	adds	r4, r0, #0
 8003d3e:	2324      	movs	r3, #36	; 0x24
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	3b1b      	subs	r3, #27
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7fd f96a 	bl	8001020 <__aeabi_i2f>
 8003d4c:	1c03      	adds	r3, r0, #0
 8003d4e:	69f9      	ldr	r1, [r7, #28]
 8003d50:	1c18      	adds	r0, r3, #0
 8003d52:	f7fc ff7d 	bl	8000c50 <__aeabi_fsub>
 8003d56:	1c03      	adds	r3, r0, #0
 8003d58:	1c19      	adds	r1, r3, #0
 8003d5a:	1c20      	adds	r0, r4, #0
 8003d5c:	f7fc ff78 	bl	8000c50 <__aeabi_fsub>
 8003d60:	1c03      	adds	r3, r0, #0
 8003d62:	1c1c      	adds	r4, r3, #0
 8003d64:	2522      	movs	r5, #34	; 0x22
 8003d66:	197b      	adds	r3, r7, r5
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7fd f958 	bl	8001020 <__aeabi_i2f>
 8003d70:	1c03      	adds	r3, r0, #0
 8003d72:	1c19      	adds	r1, r3, #0
 8003d74:	1c20      	adds	r0, r4, #0
 8003d76:	f7fc fcc3 	bl	8000700 <__aeabi_fadd>
 8003d7a:	1c03      	adds	r3, r0, #0
 8003d7c:	1c1c      	adds	r4, r3, #0
 8003d7e:	197b      	adds	r3, r7, r5
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7fd f94c 	bl	8001020 <__aeabi_i2f>
 8003d88:	1c03      	adds	r3, r0, #0
 8003d8a:	1c19      	adds	r1, r3, #0
 8003d8c:	1c20      	adds	r0, r4, #0
 8003d8e:	f7fc fe53 	bl	8000a38 <__aeabi_fdiv>
 8003d92:	1c03      	adds	r3, r0, #0
 8003d94:	2227      	movs	r2, #39	; 0x27
 8003d96:	18bc      	adds	r4, r7, r2
 8003d98:	1c18      	adds	r0, r3, #0
 8003d9a:	f7fc fbcd 	bl	8000538 <__aeabi_f2uiz>
 8003d9e:	0003      	movs	r3, r0
 8003da0:	7023      	strb	r3, [r4, #0]
			break;
 8003da2:	46c0      	nop			; (mov r8, r8)
		}
	}

//	resultado = (pstcaptura->Distancia*10-pstdistancia->datosDistancia[pstdistancia->contParrilla][pstcaptura->filaActual]+pstcaptura->largo[pstdistancia->contParrilla][pstcaptura->filaActual]) / pstcaptura->largo[pstdistancia->contParrilla][pstcaptura->filaActual];

	return resultado;
 8003da4:	2327      	movs	r3, #39	; 0x27
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	781b      	ldrb	r3, [r3, #0]
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b00a      	add	sp, #40	; 0x28
 8003db0:	bdb0      	pop	{r4, r5, r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)

08003db4 <BloqueCOM_CEIT>:
Salidas:          		N/A
Descripción:  		    Ejecuta la Máquina de Estados del bloque COM_CEIT
Notas y Cambios:  
****************************************************************************************/
void BloqueCOM_CEIT(stComCEIT *pstcomceit)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  
  switch(pstcomceit->SM_State)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d900      	bls.n	8003dc6 <BloqueCOM_CEIT+0x12>
 8003dc4:	e0b9      	b.n	8003f3a <BloqueCOM_CEIT+0x186>
 8003dc6:	009a      	lsls	r2, r3, #2
 8003dc8:	4b5e      	ldr	r3, [pc, #376]	; (8003f44 <BloqueCOM_CEIT+0x190>)
 8003dca:	18d3      	adds	r3, r2, r3
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	469f      	mov	pc, r3
  {
		case SM_STATE_START_RX:      
      /* wait for data received or timeout period occured */
			pstcomceit->SM_State = SM_STATE_WAIT_FOR_RX_DONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
		break;
 8003dd6:	e0b0      	b.n	8003f3a <BloqueCOM_CEIT+0x186>
    
		case SM_STATE_WAIT_FOR_RX_DONE:
			if((pstcomceit->xRxDoneFlag != RESET))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	791b      	ldrb	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <BloqueCOM_CEIT+0x34>
			{
//				pstcomceit->xRxDoneFlag = RESET;
				pstcomceit->SM_State = SM_STATE_DATA_RECEIVED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				pstcomceit->SM_State = SM_STATE_START_RX;
			}
		break;
 8003de6:	e0a8      	b.n	8003f3a <BloqueCOM_CEIT+0x186>
				pstcomceit->SM_State = SM_STATE_START_RX;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
		break;
 8003dee:	e0a4      	b.n	8003f3a <BloqueCOM_CEIT+0x186>
    
		case SM_STATE_DATA_RECEIVED:  

			if((pstcomceit->Rx_Buffer[CMD] == GET_DATA) || (pstcomceit->Rx_Buffer[CMD] == CONFIG))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2274      	movs	r2, #116	; 0x74
 8003df4:	5c9b      	ldrb	r3, [r3, r2]
 8003df6:	2b60      	cmp	r3, #96	; 0x60
 8003df8:	d004      	beq.n	8003e04 <BloqueCOM_CEIT+0x50>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2274      	movs	r2, #116	; 0x74
 8003dfe:	5c9b      	ldrb	r3, [r3, r2]
 8003e00:	2b61      	cmp	r3, #97	; 0x61
 8003e02:	d106      	bne.n	8003e12 <BloqueCOM_CEIT+0x5e>
			{
				pstcomceit->enviarDatos = true;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	705a      	strb	r2, [r3, #1]
				pstcomceit->SM_State = SM_STATE_WAIT_FOR_TX_DONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	701a      	strb	r2, [r3, #0]
				pstcomceit->enviarDatos = false;
				pstcomceit->envioOK = true;
				pstcomceit->xRxDoneFlag = RESET;
				pstcomceit->SM_State = SM_STATE_START_RX;
			}
		break;
 8003e10:	e093      	b.n	8003f3a <BloqueCOM_CEIT+0x186>
				pstcomceit->enviarDatos = false;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	705a      	strb	r2, [r3, #1]
				pstcomceit->envioOK = true;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	70da      	strb	r2, [r3, #3]
				pstcomceit->xRxDoneFlag = RESET;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	711a      	strb	r2, [r3, #4]
				pstcomceit->SM_State = SM_STATE_START_RX;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]
		break;
 8003e2a:	e086      	b.n	8003f3a <BloqueCOM_CEIT+0x186>

		case SM_STATE_WAIT_FOR_TX_DONE:
			
			if((pstcomceit->enviarDatos == true) && (pstcomceit->datosListos == true))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	785b      	ldrb	r3, [r3, #1]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <BloqueCOM_CEIT+0x90>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	789b      	ldrb	r3, [r3, #2]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <BloqueCOM_CEIT+0x90>
			{
				pstcomceit->SM_State = SM_STATE_SEND_DATA;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2203      	movs	r2, #3
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e022      	b.n	8003e8a <BloqueCOM_CEIT+0xd6>
			}
			else if((pstcomceit->xTxDoneFlag == RESET) || (pstcomceit->datosListos == false))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	795b      	ldrb	r3, [r3, #5]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	4053      	eors	r3, r2
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <BloqueCOM_CEIT+0xac>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	789b      	ldrb	r3, [r3, #2]
 8003e56:	2201      	movs	r2, #1
 8003e58:	4053      	eors	r3, r2
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <BloqueCOM_CEIT+0xb4>
			{
				pstcomceit->SM_State = SM_STATE_WAIT_FOR_TX_DONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2204      	movs	r2, #4
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e010      	b.n	8003e8a <BloqueCOM_CEIT+0xd6>
			}
			else if(pstcomceit->xTxDoneFlag == SET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	795b      	ldrb	r3, [r3, #5]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d063      	beq.n	8003f38 <BloqueCOM_CEIT+0x184>
			{
				pstcomceit->xTxDoneFlag = RESET;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	715a      	strb	r2, [r3, #5]
				pstcomceit->envioOK = true;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	70da      	strb	r2, [r3, #3]
				pstcomceit->xRxDoneFlag = RESET;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	711a      	strb	r2, [r3, #4]
				pstcomceit->SM_State = SM_STATE_START_RX;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
			}
		break;
 8003e88:	e056      	b.n	8003f38 <BloqueCOM_CEIT+0x184>
 8003e8a:	e055      	b.n	8003f38 <BloqueCOM_CEIT+0x184>
		
		case SM_STATE_SEND_DATA:

			if(pstcomceit->Rx_Buffer[CMD] == GET_DATA)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2274      	movs	r2, #116	; 0x74
 8003e90:	5c9b      	ldrb	r3, [r3, r2]
 8003e92:	2b60      	cmp	r3, #96	; 0x60
 8003e94:	d146      	bne.n	8003f24 <BloqueCOM_CEIT+0x170>
			{
				TX_Frame[CMD_LENGTH] = 0x01;
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <BloqueCOM_CEIT+0x194>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
				TX_Frame[CMD_TAG] = pstcomceit->Rx_Buffer[CMD_TAG];
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2272      	movs	r2, #114	; 0x72
 8003ea0:	5c9a      	ldrb	r2, [r3, r2]
 8003ea2:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <BloqueCOM_CEIT+0x194>)
 8003ea4:	705a      	strb	r2, [r3, #1]
				TX_Frame[CMD_TYPE] = 0x11;
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <BloqueCOM_CEIT+0x194>)
 8003ea8:	2211      	movs	r2, #17
 8003eaa:	709a      	strb	r2, [r3, #2]
				TX_Frame[CMD] = DATA;			
 8003eac:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <BloqueCOM_CEIT+0x194>)
 8003eae:	2270      	movs	r2, #112	; 0x70
 8003eb0:	70da      	strb	r2, [r3, #3]
				TX_Frame[DATA_LENGTH] = pstcomceit->TxLength;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	799a      	ldrb	r2, [r3, #6]
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <BloqueCOM_CEIT+0x194>)
 8003eb8:	711a      	strb	r2, [r3, #4]
				for (int i=5; i<pstcomceit->TxLength+5; i++)
 8003eba:	2305      	movs	r3, #5
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	e00c      	b.n	8003eda <BloqueCOM_CEIT+0x126>
				{
					TX_Frame[i] = pstcomceit->Tx_Buffer[i-5];
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3b05      	subs	r3, #5
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	18d3      	adds	r3, r2, r3
 8003ec8:	7a19      	ldrb	r1, [r3, #8]
 8003eca:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <BloqueCOM_CEIT+0x194>)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	18d3      	adds	r3, r2, r3
 8003ed0:	1c0a      	adds	r2, r1, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
				for (int i=5; i<pstcomceit->TxLength+5; i++)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	799b      	ldrb	r3, [r3, #6]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	ddec      	ble.n	8003ec0 <BloqueCOM_CEIT+0x10c>
				}
				TX_Frame[TX_BUFFER_SIZE] = 0xFA;
 8003ee6:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <BloqueCOM_CEIT+0x194>)
 8003ee8:	2269      	movs	r2, #105	; 0x69
 8003eea:	21fa      	movs	r1, #250	; 0xfa
 8003eec:	5499      	strb	r1, [r3, r2]
				if (HAL_UART_Transmit(&huart5, TX_Frame, TX_BUFFER_SIZE+1, HAL_MAX_DELAY) != HAL_OK)
 8003eee:	2301      	movs	r3, #1
 8003ef0:	425b      	negs	r3, r3
 8003ef2:	4915      	ldr	r1, [pc, #84]	; (8003f48 <BloqueCOM_CEIT+0x194>)
 8003ef4:	4815      	ldr	r0, [pc, #84]	; (8003f4c <BloqueCOM_CEIT+0x198>)
 8003ef6:	226a      	movs	r2, #106	; 0x6a
 8003ef8:	f00e fb18 	bl	801252c <HAL_UART_Transmit>
 8003efc:	1e03      	subs	r3, r0, #0
 8003efe:	d003      	beq.n	8003f08 <BloqueCOM_CEIT+0x154>
				{
					pstcomceit->xTxDoneFlag=RESET;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	715a      	strb	r2, [r3, #5]
 8003f06:	e013      	b.n	8003f30 <BloqueCOM_CEIT+0x17c>
				}
				else
				{
					HAL_UART_Transmit(&huart2, TX_Frame, TX_BUFFER_SIZE+1, HAL_MAX_DELAY);
 8003f08:	2301      	movs	r3, #1
 8003f0a:	425b      	negs	r3, r3
 8003f0c:	490e      	ldr	r1, [pc, #56]	; (8003f48 <BloqueCOM_CEIT+0x194>)
 8003f0e:	4810      	ldr	r0, [pc, #64]	; (8003f50 <BloqueCOM_CEIT+0x19c>)
 8003f10:	226a      	movs	r2, #106	; 0x6a
 8003f12:	f00e fb0b 	bl	801252c <HAL_UART_Transmit>
					pstcomceit->xTxDoneFlag=SET;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	715a      	strb	r2, [r3, #5]
					pstcomceit->enviarDatos = false;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	705a      	strb	r2, [r3, #1]
 8003f22:	e005      	b.n	8003f30 <BloqueCOM_CEIT+0x17c>
				}
			}
			else
			{
				pstcomceit->xTxDoneFlag=SET;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	715a      	strb	r2, [r3, #5]
				pstcomceit->enviarDatos = false;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	705a      	strb	r2, [r3, #1]
			}
			pstcomceit->SM_State = SM_STATE_WAIT_FOR_TX_DONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2204      	movs	r2, #4
 8003f34:	701a      	strb	r2, [r3, #0]
		break;
 8003f36:	e000      	b.n	8003f3a <BloqueCOM_CEIT+0x186>
		break;
 8003f38:	46c0      	nop			; (mov r8, r8)
  }
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b004      	add	sp, #16
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	080162ac 	.word	0x080162ac
 8003f48:	20000470 	.word	0x20000470
 8003f4c:	20003564 	.word	0x20003564
 8003f50:	200035e4 	.word	0x200035e4

08003f54 <BloqueDistancia>:
						2 -> Si la lectura de distancia falló
Descripción:  		    Ejecuta el proceso principal del bloque Distancia
Notas y Cambios:  
****************************************************************************************/
uint8_t BloqueDistancia(stDistancia *pstdistancia)
{
 8003f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f56:	b089      	sub	sp, #36	; 0x24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	uint8_t sensorOK, configOK, col;
	uint16_t d1,d2,d3,d4,d5;
	int status;
	
	//Verificar si hay solicitud de lectura
	if(pstdistancia->bandDistancia == true)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d100      	bne.n	8003f66 <BloqueDistancia+0x12>
 8003f64:	e24e      	b.n	8004404 <BloqueDistancia+0x4b0>
	{
		col = pstdistancia->posSensor[pstdistancia->contParrilla];
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2266      	movs	r2, #102	; 0x66
 8003f6a:	5c9b      	ldrb	r3, [r3, r2]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	231e      	movs	r3, #30
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4917      	ldr	r1, [pc, #92]	; (8003fd4 <BloqueDistancia+0x80>)
 8003f76:	1812      	adds	r2, r2, r0
 8003f78:	1852      	adds	r2, r2, r1
 8003f7a:	7812      	ldrb	r2, [r2, #0]
 8003f7c:	701a      	strb	r2, [r3, #0]

		if(pstdistancia->bandInicio[pstdistancia->contParrilla] == 0){
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2266      	movs	r2, #102	; 0x66
 8003f82:	5c9b      	ldrb	r3, [r3, r2]
 8003f84:	0019      	movs	r1, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <BloqueDistancia+0x84>)
 8003f8a:	185b      	adds	r3, r3, r1
 8003f8c:	189b      	adds	r3, r3, r2
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d123      	bne.n	8003fdc <BloqueDistancia+0x88>
			sensorOK = VL53L1_StartMeasurement( &(pstdistancia->VL53L1_DEV[pstdistancia->contParrilla]) );
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2266      	movs	r2, #102	; 0x66
 8003f98:	5c9b      	ldrb	r3, [r3, r2]
 8003f9a:	001a      	movs	r2, r3
 8003f9c:	23e9      	movs	r3, #233	; 0xe9
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4353      	muls	r3, r2
 8003fa2:	22b7      	movs	r2, #183	; 0xb7
 8003fa4:	00d2      	lsls	r2, r2, #3
 8003fa6:	4694      	mov	ip, r2
 8003fa8:	4463      	add	r3, ip
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	18d3      	adds	r3, r2, r3
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f005 f97b 	bl	80092aa <VL53L1_StartMeasurement>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	001a      	movs	r2, r3
 8003fb8:	231f      	movs	r3, #31
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	701a      	strb	r2, [r3, #0]
			pstdistancia->bandInicio[pstdistancia->contParrilla] = 1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2266      	movs	r2, #102	; 0x66
 8003fc2:	5c9b      	ldrb	r3, [r3, r2]
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a03      	ldr	r2, [pc, #12]	; (8003fd8 <BloqueDistancia+0x84>)
 8003fca:	185b      	adds	r3, r3, r1
 8003fcc:	189b      	adds	r3, r3, r2
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e007      	b.n	8003fe4 <BloqueDistancia+0x90>
 8003fd4:	00000586 	.word	0x00000586
 8003fd8:	00000591 	.word	0x00000591
		}else{
			sensorOK = 0;
 8003fdc:	231f      	movs	r3, #31
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
		}

		if(sensorOK == 0)
 8003fe4:	231f      	movs	r3, #31
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d000      	beq.n	8003ff0 <BloqueDistancia+0x9c>
 8003fee:	e1f2      	b.n	80043d6 <BloqueDistancia+0x482>
		{

			status=VL53L1_WaitMeasurementDataReady( &pstdistancia->VL53L1_DEV[pstdistancia->contParrilla] );
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2266      	movs	r2, #102	; 0x66
 8003ff4:	5c9b      	ldrb	r3, [r3, r2]
 8003ff6:	001a      	movs	r2, r3
 8003ff8:	23e9      	movs	r3, #233	; 0xe9
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4353      	muls	r3, r2
 8003ffe:	22b7      	movs	r2, #183	; 0xb7
 8004000:	00d2      	lsls	r2, r2, #3
 8004002:	4694      	mov	ip, r2
 8004004:	4463      	add	r3, ip
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	18d3      	adds	r3, r2, r3
 800400a:	0018      	movs	r0, r3
 800400c:	f005 facc 	bl	80095a8 <VL53L1_WaitMeasurementDataReady>
 8004010:	0003      	movs	r3, r0
 8004012:	61bb      	str	r3, [r7, #24]
			status= VL53L1_GetRangingMeasurementData(&pstdistancia->VL53L1_DEV[pstdistancia->contParrilla], &pstdistancia->RangingData);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2266      	movs	r2, #102	; 0x66
 8004018:	5c9b      	ldrb	r3, [r3, r2]
 800401a:	001a      	movs	r2, r3
 800401c:	23e9      	movs	r3, #233	; 0xe9
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4353      	muls	r3, r2
 8004022:	22b7      	movs	r2, #183	; 0xb7
 8004024:	00d2      	lsls	r2, r2, #3
 8004026:	4694      	mov	ip, r2
 8004028:	4463      	add	r3, ip
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	18d2      	adds	r2, r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	49f2      	ldr	r1, [pc, #968]	; (80043fc <BloqueDistancia+0x4a8>)
 8004032:	468c      	mov	ip, r1
 8004034:	4463      	add	r3, ip
 8004036:	0019      	movs	r1, r3
 8004038:	0010      	movs	r0, r2
 800403a:	f005 fca9 	bl	8009990 <VL53L1_GetRangingMeasurementData>
 800403e:	0003      	movs	r3, r0
 8004040:	61bb      	str	r3, [r7, #24]
			status = VL53L1_ClearInterruptAndStartMeasurement( &pstdistancia->VL53L1_DEV[pstdistancia->contParrilla] );
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2266      	movs	r2, #102	; 0x66
 8004046:	5c9b      	ldrb	r3, [r3, r2]
 8004048:	001a      	movs	r2, r3
 800404a:	23e9      	movs	r3, #233	; 0xe9
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4353      	muls	r3, r2
 8004050:	22b7      	movs	r2, #183	; 0xb7
 8004052:	00d2      	lsls	r2, r2, #3
 8004054:	4694      	mov	ip, r2
 8004056:	4463      	add	r3, ip
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	18d3      	adds	r3, r2, r3
 800405c:	0018      	movs	r0, r3
 800405e:	f005 fa63 	bl	8009528 <VL53L1_ClearInterruptAndStartMeasurement>
 8004062:	0003      	movs	r3, r0
 8004064:	61bb      	str	r3, [r7, #24]
			d1 = pstdistancia->RangingData.RangeMilliMeter;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4ae5      	ldr	r2, [pc, #916]	; (8004400 <BloqueDistancia+0x4ac>)
 800406a:	5e9a      	ldrsh	r2, [r3, r2]
 800406c:	2416      	movs	r4, #22
 800406e:	193b      	adds	r3, r7, r4
 8004070:	801a      	strh	r2, [r3, #0]

			status=VL53L1_WaitMeasurementDataReady( &pstdistancia->VL53L1_DEV[pstdistancia->contParrilla] );
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2266      	movs	r2, #102	; 0x66
 8004076:	5c9b      	ldrb	r3, [r3, r2]
 8004078:	001a      	movs	r2, r3
 800407a:	23e9      	movs	r3, #233	; 0xe9
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4353      	muls	r3, r2
 8004080:	22b7      	movs	r2, #183	; 0xb7
 8004082:	00d2      	lsls	r2, r2, #3
 8004084:	4694      	mov	ip, r2
 8004086:	4463      	add	r3, ip
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	18d3      	adds	r3, r2, r3
 800408c:	0018      	movs	r0, r3
 800408e:	f005 fa8b 	bl	80095a8 <VL53L1_WaitMeasurementDataReady>
 8004092:	0003      	movs	r3, r0
 8004094:	61bb      	str	r3, [r7, #24]
			status= VL53L1_GetRangingMeasurementData(&pstdistancia->VL53L1_DEV[pstdistancia->contParrilla], &pstdistancia->RangingData);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2266      	movs	r2, #102	; 0x66
 800409a:	5c9b      	ldrb	r3, [r3, r2]
 800409c:	001a      	movs	r2, r3
 800409e:	23e9      	movs	r3, #233	; 0xe9
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4353      	muls	r3, r2
 80040a4:	22b7      	movs	r2, #183	; 0xb7
 80040a6:	00d2      	lsls	r2, r2, #3
 80040a8:	4694      	mov	ip, r2
 80040aa:	4463      	add	r3, ip
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	18d2      	adds	r2, r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	49d2      	ldr	r1, [pc, #840]	; (80043fc <BloqueDistancia+0x4a8>)
 80040b4:	468c      	mov	ip, r1
 80040b6:	4463      	add	r3, ip
 80040b8:	0019      	movs	r1, r3
 80040ba:	0010      	movs	r0, r2
 80040bc:	f005 fc68 	bl	8009990 <VL53L1_GetRangingMeasurementData>
 80040c0:	0003      	movs	r3, r0
 80040c2:	61bb      	str	r3, [r7, #24]
			status = VL53L1_ClearInterruptAndStartMeasurement( &pstdistancia->VL53L1_DEV[pstdistancia->contParrilla] );
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2266      	movs	r2, #102	; 0x66
 80040c8:	5c9b      	ldrb	r3, [r3, r2]
 80040ca:	001a      	movs	r2, r3
 80040cc:	23e9      	movs	r3, #233	; 0xe9
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4353      	muls	r3, r2
 80040d2:	22b7      	movs	r2, #183	; 0xb7
 80040d4:	00d2      	lsls	r2, r2, #3
 80040d6:	4694      	mov	ip, r2
 80040d8:	4463      	add	r3, ip
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	18d3      	adds	r3, r2, r3
 80040de:	0018      	movs	r0, r3
 80040e0:	f005 fa22 	bl	8009528 <VL53L1_ClearInterruptAndStartMeasurement>
 80040e4:	0003      	movs	r3, r0
 80040e6:	61bb      	str	r3, [r7, #24]
			d2 = pstdistancia->RangingData.RangeMilliMeter;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4ac5      	ldr	r2, [pc, #788]	; (8004400 <BloqueDistancia+0x4ac>)
 80040ec:	5e9a      	ldrsh	r2, [r3, r2]
 80040ee:	2314      	movs	r3, #20
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	801a      	strh	r2, [r3, #0]

			status=VL53L1_WaitMeasurementDataReady( &pstdistancia->VL53L1_DEV[pstdistancia->contParrilla] );
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2266      	movs	r2, #102	; 0x66
 80040f8:	5c9b      	ldrb	r3, [r3, r2]
 80040fa:	001a      	movs	r2, r3
 80040fc:	23e9      	movs	r3, #233	; 0xe9
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4353      	muls	r3, r2
 8004102:	21b7      	movs	r1, #183	; 0xb7
 8004104:	00c9      	lsls	r1, r1, #3
 8004106:	468c      	mov	ip, r1
 8004108:	4463      	add	r3, ip
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	18d3      	adds	r3, r2, r3
 800410e:	0018      	movs	r0, r3
 8004110:	f005 fa4a 	bl	80095a8 <VL53L1_WaitMeasurementDataReady>
 8004114:	0003      	movs	r3, r0
 8004116:	61bb      	str	r3, [r7, #24]
			status= VL53L1_GetRangingMeasurementData(&pstdistancia->VL53L1_DEV[pstdistancia->contParrilla], &pstdistancia->RangingData);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2266      	movs	r2, #102	; 0x66
 800411c:	5c9b      	ldrb	r3, [r3, r2]
 800411e:	001a      	movs	r2, r3
 8004120:	23e9      	movs	r3, #233	; 0xe9
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4353      	muls	r3, r2
 8004126:	21b7      	movs	r1, #183	; 0xb7
 8004128:	00c9      	lsls	r1, r1, #3
 800412a:	468c      	mov	ip, r1
 800412c:	4463      	add	r3, ip
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	18d2      	adds	r2, r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	49b1      	ldr	r1, [pc, #708]	; (80043fc <BloqueDistancia+0x4a8>)
 8004136:	468c      	mov	ip, r1
 8004138:	4463      	add	r3, ip
 800413a:	0019      	movs	r1, r3
 800413c:	0010      	movs	r0, r2
 800413e:	f005 fc27 	bl	8009990 <VL53L1_GetRangingMeasurementData>
 8004142:	0003      	movs	r3, r0
 8004144:	61bb      	str	r3, [r7, #24]
			status = VL53L1_ClearInterruptAndStartMeasurement( &pstdistancia->VL53L1_DEV[pstdistancia->contParrilla] );
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2266      	movs	r2, #102	; 0x66
 800414a:	5c9b      	ldrb	r3, [r3, r2]
 800414c:	001a      	movs	r2, r3
 800414e:	23e9      	movs	r3, #233	; 0xe9
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4353      	muls	r3, r2
 8004154:	21b7      	movs	r1, #183	; 0xb7
 8004156:	00c9      	lsls	r1, r1, #3
 8004158:	468c      	mov	ip, r1
 800415a:	4463      	add	r3, ip
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	18d3      	adds	r3, r2, r3
 8004160:	0018      	movs	r0, r3
 8004162:	f005 f9e1 	bl	8009528 <VL53L1_ClearInterruptAndStartMeasurement>
 8004166:	0003      	movs	r3, r0
 8004168:	61bb      	str	r3, [r7, #24]
			d3 = pstdistancia->RangingData.RangeMilliMeter;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4aa4      	ldr	r2, [pc, #656]	; (8004400 <BloqueDistancia+0x4ac>)
 800416e:	5e9a      	ldrsh	r2, [r3, r2]
 8004170:	2112      	movs	r1, #18
 8004172:	187b      	adds	r3, r7, r1
 8004174:	801a      	strh	r2, [r3, #0]

			status=VL53L1_WaitMeasurementDataReady( &pstdistancia->VL53L1_DEV[pstdistancia->contParrilla] );
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2266      	movs	r2, #102	; 0x66
 800417a:	5c9b      	ldrb	r3, [r3, r2]
 800417c:	001a      	movs	r2, r3
 800417e:	23e9      	movs	r3, #233	; 0xe9
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4353      	muls	r3, r2
 8004184:	20b7      	movs	r0, #183	; 0xb7
 8004186:	00c0      	lsls	r0, r0, #3
 8004188:	4684      	mov	ip, r0
 800418a:	4463      	add	r3, ip
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	18d3      	adds	r3, r2, r3
 8004190:	0018      	movs	r0, r3
 8004192:	f005 fa09 	bl	80095a8 <VL53L1_WaitMeasurementDataReady>
 8004196:	0003      	movs	r3, r0
 8004198:	61bb      	str	r3, [r7, #24]
			status= VL53L1_GetRangingMeasurementData(&pstdistancia->VL53L1_DEV[pstdistancia->contParrilla], &pstdistancia->RangingData);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2266      	movs	r2, #102	; 0x66
 800419e:	5c9b      	ldrb	r3, [r3, r2]
 80041a0:	001a      	movs	r2, r3
 80041a2:	23e9      	movs	r3, #233	; 0xe9
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4353      	muls	r3, r2
 80041a8:	20b7      	movs	r0, #183	; 0xb7
 80041aa:	00c0      	lsls	r0, r0, #3
 80041ac:	4684      	mov	ip, r0
 80041ae:	4463      	add	r3, ip
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	18d2      	adds	r2, r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4891      	ldr	r0, [pc, #580]	; (80043fc <BloqueDistancia+0x4a8>)
 80041b8:	4684      	mov	ip, r0
 80041ba:	4463      	add	r3, ip
 80041bc:	0019      	movs	r1, r3
 80041be:	0010      	movs	r0, r2
 80041c0:	f005 fbe6 	bl	8009990 <VL53L1_GetRangingMeasurementData>
 80041c4:	0003      	movs	r3, r0
 80041c6:	61bb      	str	r3, [r7, #24]
			status = VL53L1_ClearInterruptAndStartMeasurement( &pstdistancia->VL53L1_DEV[pstdistancia->contParrilla] );
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2266      	movs	r2, #102	; 0x66
 80041cc:	5c9b      	ldrb	r3, [r3, r2]
 80041ce:	001a      	movs	r2, r3
 80041d0:	23e9      	movs	r3, #233	; 0xe9
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4353      	muls	r3, r2
 80041d6:	20b7      	movs	r0, #183	; 0xb7
 80041d8:	00c0      	lsls	r0, r0, #3
 80041da:	4684      	mov	ip, r0
 80041dc:	4463      	add	r3, ip
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	18d3      	adds	r3, r2, r3
 80041e2:	0018      	movs	r0, r3
 80041e4:	f005 f9a0 	bl	8009528 <VL53L1_ClearInterruptAndStartMeasurement>
 80041e8:	0003      	movs	r3, r0
 80041ea:	61bb      	str	r3, [r7, #24]
			d4 = pstdistancia->RangingData.RangeMilliMeter;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a84      	ldr	r2, [pc, #528]	; (8004400 <BloqueDistancia+0x4ac>)
 80041f0:	5e9a      	ldrsh	r2, [r3, r2]
 80041f2:	2010      	movs	r0, #16
 80041f4:	183b      	adds	r3, r7, r0
 80041f6:	801a      	strh	r2, [r3, #0]

			status=VL53L1_WaitMeasurementDataReady( &pstdistancia->VL53L1_DEV[pstdistancia->contParrilla] );
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2266      	movs	r2, #102	; 0x66
 80041fc:	5c9b      	ldrb	r3, [r3, r2]
 80041fe:	001a      	movs	r2, r3
 8004200:	23e9      	movs	r3, #233	; 0xe9
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4353      	muls	r3, r2
 8004206:	25b7      	movs	r5, #183	; 0xb7
 8004208:	00ed      	lsls	r5, r5, #3
 800420a:	46ac      	mov	ip, r5
 800420c:	4463      	add	r3, ip
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	18d3      	adds	r3, r2, r3
 8004212:	0018      	movs	r0, r3
 8004214:	f005 f9c8 	bl	80095a8 <VL53L1_WaitMeasurementDataReady>
 8004218:	0003      	movs	r3, r0
 800421a:	61bb      	str	r3, [r7, #24]
			status= VL53L1_GetRangingMeasurementData(&pstdistancia->VL53L1_DEV[pstdistancia->contParrilla], &pstdistancia->RangingData);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2266      	movs	r2, #102	; 0x66
 8004220:	5c9b      	ldrb	r3, [r3, r2]
 8004222:	001a      	movs	r2, r3
 8004224:	23e9      	movs	r3, #233	; 0xe9
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4353      	muls	r3, r2
 800422a:	25b7      	movs	r5, #183	; 0xb7
 800422c:	00ed      	lsls	r5, r5, #3
 800422e:	46ac      	mov	ip, r5
 8004230:	4463      	add	r3, ip
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	18d2      	adds	r2, r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4d70      	ldr	r5, [pc, #448]	; (80043fc <BloqueDistancia+0x4a8>)
 800423a:	46ac      	mov	ip, r5
 800423c:	4463      	add	r3, ip
 800423e:	0019      	movs	r1, r3
 8004240:	0010      	movs	r0, r2
 8004242:	f005 fba5 	bl	8009990 <VL53L1_GetRangingMeasurementData>
 8004246:	0003      	movs	r3, r0
 8004248:	61bb      	str	r3, [r7, #24]
			status = VL53L1_ClearInterruptAndStartMeasurement( &pstdistancia->VL53L1_DEV[pstdistancia->contParrilla] );
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2266      	movs	r2, #102	; 0x66
 800424e:	5c9b      	ldrb	r3, [r3, r2]
 8004250:	001a      	movs	r2, r3
 8004252:	23e9      	movs	r3, #233	; 0xe9
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4353      	muls	r3, r2
 8004258:	25b7      	movs	r5, #183	; 0xb7
 800425a:	00ed      	lsls	r5, r5, #3
 800425c:	46ac      	mov	ip, r5
 800425e:	4463      	add	r3, ip
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	18d3      	adds	r3, r2, r3
 8004264:	0018      	movs	r0, r3
 8004266:	f005 f95f 	bl	8009528 <VL53L1_ClearInterruptAndStartMeasurement>
 800426a:	0003      	movs	r3, r0
 800426c:	61bb      	str	r3, [r7, #24]
			d5 = pstdistancia->RangingData.RangeMilliMeter;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a63      	ldr	r2, [pc, #396]	; (8004400 <BloqueDistancia+0x4ac>)
 8004272:	5e9a      	ldrsh	r2, [r3, r2]
 8004274:	250e      	movs	r5, #14
 8004276:	197b      	adds	r3, r7, r5
 8004278:	801a      	strh	r2, [r3, #0]


			
				if(status == VL53L1_ERROR_NONE)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d000      	beq.n	8004282 <BloqueDistancia+0x32e>
 8004280:	e096      	b.n	80043b0 <BloqueDistancia+0x45c>
				{
					pstdistancia->datosDistancia[pstdistancia->contParrilla][col] = d1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2266      	movs	r2, #102	; 0x66
 8004286:	5c9b      	ldrb	r3, [r3, r2]
 8004288:	0018      	movs	r0, r3
 800428a:	251e      	movs	r5, #30
 800428c:	197b      	adds	r3, r7, r5
 800428e:	7819      	ldrb	r1, [r3, #0]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	0003      	movs	r3, r0
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	181b      	adds	r3, r3, r0
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	185b      	adds	r3, r3, r1
 800429c:	3338      	adds	r3, #56	; 0x38
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	18d3      	adds	r3, r2, r3
 80042a2:	3302      	adds	r3, #2
 80042a4:	0026      	movs	r6, r4
 80042a6:	193a      	adds	r2, r7, r4
 80042a8:	8812      	ldrh	r2, [r2, #0]
 80042aa:	801a      	strh	r2, [r3, #0]
					pstdistancia->datosDistancia2[pstdistancia->contParrilla][col][0] = d1;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2266      	movs	r2, #102	; 0x66
 80042b0:	5c9b      	ldrb	r3, [r3, r2]
 80042b2:	001c      	movs	r4, r3
 80042b4:	197b      	adds	r3, r7, r5
 80042b6:	781a      	ldrb	r2, [r3, #0]
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	239d      	movs	r3, #157	; 0x9d
 80042bc:	0059      	lsls	r1, r3, #1
 80042be:	0013      	movs	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	2264      	movs	r2, #100	; 0x64
 80042c8:	4362      	muls	r2, r4
 80042ca:	189b      	adds	r3, r3, r2
 80042cc:	18c3      	adds	r3, r0, r3
 80042ce:	185b      	adds	r3, r3, r1
 80042d0:	19ba      	adds	r2, r7, r6
 80042d2:	8812      	ldrh	r2, [r2, #0]
 80042d4:	801a      	strh	r2, [r3, #0]
					pstdistancia->datosDistancia2[pstdistancia->contParrilla][col][1] = d2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2266      	movs	r2, #102	; 0x66
 80042da:	5c9b      	ldrb	r3, [r3, r2]
 80042dc:	001c      	movs	r4, r3
 80042de:	197b      	adds	r3, r7, r5
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	239e      	movs	r3, #158	; 0x9e
 80042e6:	0059      	lsls	r1, r3, #1
 80042e8:	0013      	movs	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	189b      	adds	r3, r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	2264      	movs	r2, #100	; 0x64
 80042f2:	4362      	muls	r2, r4
 80042f4:	189b      	adds	r3, r3, r2
 80042f6:	18c3      	adds	r3, r0, r3
 80042f8:	185b      	adds	r3, r3, r1
 80042fa:	2214      	movs	r2, #20
 80042fc:	18ba      	adds	r2, r7, r2
 80042fe:	8812      	ldrh	r2, [r2, #0]
 8004300:	801a      	strh	r2, [r3, #0]
					pstdistancia->datosDistancia2[pstdistancia->contParrilla][col][2] = d3;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2266      	movs	r2, #102	; 0x66
 8004306:	5c9b      	ldrb	r3, [r3, r2]
 8004308:	001c      	movs	r4, r3
 800430a:	197b      	adds	r3, r7, r5
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	239f      	movs	r3, #159	; 0x9f
 8004312:	0059      	lsls	r1, r3, #1
 8004314:	0013      	movs	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	189b      	adds	r3, r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	2264      	movs	r2, #100	; 0x64
 800431e:	4362      	muls	r2, r4
 8004320:	189b      	adds	r3, r3, r2
 8004322:	18c3      	adds	r3, r0, r3
 8004324:	185b      	adds	r3, r3, r1
 8004326:	2112      	movs	r1, #18
 8004328:	187a      	adds	r2, r7, r1
 800432a:	8812      	ldrh	r2, [r2, #0]
 800432c:	801a      	strh	r2, [r3, #0]
					pstdistancia->datosDistancia2[pstdistancia->contParrilla][col][3] = d4;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2266      	movs	r2, #102	; 0x66
 8004332:	5c9b      	ldrb	r3, [r3, r2]
 8004334:	001c      	movs	r4, r3
 8004336:	197b      	adds	r3, r7, r5
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	23a0      	movs	r3, #160	; 0xa0
 800433e:	0059      	lsls	r1, r3, #1
 8004340:	0013      	movs	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	189b      	adds	r3, r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	2264      	movs	r2, #100	; 0x64
 800434a:	4362      	muls	r2, r4
 800434c:	189b      	adds	r3, r3, r2
 800434e:	18c3      	adds	r3, r0, r3
 8004350:	185b      	adds	r3, r3, r1
 8004352:	2010      	movs	r0, #16
 8004354:	183a      	adds	r2, r7, r0
 8004356:	8812      	ldrh	r2, [r2, #0]
 8004358:	801a      	strh	r2, [r3, #0]
					pstdistancia->datosDistancia2[pstdistancia->contParrilla][col][4] = d5;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2266      	movs	r2, #102	; 0x66
 800435e:	5c9b      	ldrb	r3, [r3, r2]
 8004360:	001c      	movs	r4, r3
 8004362:	197b      	adds	r3, r7, r5
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	23a1      	movs	r3, #161	; 0xa1
 800436a:	0059      	lsls	r1, r3, #1
 800436c:	0013      	movs	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	189b      	adds	r3, r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2264      	movs	r2, #100	; 0x64
 8004376:	4362      	muls	r2, r4
 8004378:	189b      	adds	r3, r3, r2
 800437a:	18c3      	adds	r3, r0, r3
 800437c:	185b      	adds	r3, r3, r1
 800437e:	220e      	movs	r2, #14
 8004380:	18ba      	adds	r2, r7, r2
 8004382:	8812      	ldrh	r2, [r2, #0]
 8004384:	801a      	strh	r2, [r3, #0]

					//Reiniciar bandera de solicitud de lectura
					pstdistancia->bandDistancia = false;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
					pstdistancia->senStatus[pstdistancia->contParrilla][col] = 0;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2266      	movs	r2, #102	; 0x66
 8004390:	5c9b      	ldrb	r3, [r3, r2]
 8004392:	0018      	movs	r0, r3
 8004394:	197b      	adds	r3, r7, r5
 8004396:	781a      	ldrb	r2, [r3, #0]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	0003      	movs	r3, r0
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	181b      	adds	r3, r3, r0
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	18cb      	adds	r3, r1, r3
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	3301      	adds	r3, #1
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
					return (uint8_t)0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	e02a      	b.n	8004406 <BloqueDistancia+0x4b2>
				}
				else
				{
					pstdistancia->senStatus[pstdistancia->contParrilla][col] = 2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2266      	movs	r2, #102	; 0x66
 80043b4:	5c9b      	ldrb	r3, [r3, r2]
 80043b6:	0018      	movs	r0, r3
 80043b8:	231e      	movs	r3, #30
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	0003      	movs	r3, r0
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	181b      	adds	r3, r3, r0
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	18cb      	adds	r3, r1, r3
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	3301      	adds	r3, #1
 80043ce:	2202      	movs	r2, #2
 80043d0:	701a      	strb	r2, [r3, #0]
					return (uint8_t)2;
 80043d2:	2302      	movs	r3, #2
 80043d4:	e017      	b.n	8004406 <BloqueDistancia+0x4b2>
				}
		}
		else
		{
			pstdistancia->senStatus[pstdistancia->contParrilla][col] = 1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2266      	movs	r2, #102	; 0x66
 80043da:	5c9b      	ldrb	r3, [r3, r2]
 80043dc:	0018      	movs	r0, r3
 80043de:	231e      	movs	r3, #30
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	781a      	ldrb	r2, [r3, #0]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	0003      	movs	r3, r0
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	181b      	adds	r3, r3, r0
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	18cb      	adds	r3, r1, r3
 80043f0:	189b      	adds	r3, r3, r2
 80043f2:	3301      	adds	r3, #1
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
			return (uint8_t)1;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e004      	b.n	8004406 <BloqueDistancia+0x4b2>
 80043fc:	0000059c 	.word	0x0000059c
 8004400:	000005b4 	.word	0x000005b4
		}
	}
	else
	{
		return (uint8_t)4;
 8004404:	2304      	movs	r3, #4
	}
}
 8004406:	0018      	movs	r0, r3
 8004408:	46bd      	mov	sp, r7
 800440a:	b009      	add	sp, #36	; 0x24
 800440c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800440e:	46c0      	nop			; (mov r8, r8)

08004410 <IniciarSensores>:
Salidas:          		N/A
Descripción:  		    Esta función inicia y configura los sesores
Notas y Cambios:
****************************************************************************************/
int IniciarSensores(stDistancia *pstdistancia)
{
 8004410:	b5b0      	push	{r4, r5, r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	int sensor;
	uint8_t newI2C = 0x52;
 8004418:	231b      	movs	r3, #27
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	2252      	movs	r2, #82	; 0x52
 800441e:	701a      	strb	r2, [r3, #0]
	uint16_t wordData;
	VL53L1_UserRoi_t roiConfig;
	roiConfig.TopLeftX = 7;
 8004420:	210c      	movs	r1, #12
 8004422:	187b      	adds	r3, r7, r1
 8004424:	2207      	movs	r2, #7
 8004426:	701a      	strb	r2, [r3, #0]
	roiConfig.TopLeftY = 10;
 8004428:	187b      	adds	r3, r7, r1
 800442a:	220a      	movs	r2, #10
 800442c:	705a      	strb	r2, [r3, #1]
	roiConfig.BotRightX = 10;
 800442e:	187b      	adds	r3, r7, r1
 8004430:	220a      	movs	r2, #10
 8004432:	709a      	strb	r2, [r3, #2]
	roiConfig.BotRightY = 7;
 8004434:	187b      	adds	r3, r7, r1
 8004436:	2207      	movs	r2, #7
 8004438:	70da      	strb	r2, [r3, #3]
	int status;

	for(sensor=0; sensor<pstdistancia->SenHab; sensor++){
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e0f7      	b.n	8004630 <IniciarSensores+0x220>
		pstdistancia->contParrilla = sensor;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	b2d9      	uxtb	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2266      	movs	r2, #102	; 0x66
 8004448:	5499      	strb	r1, [r3, r2]
		EnableSensors(pstdistancia);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	0018      	movs	r0, r3
 800444e:	f000 f907 	bl	8004660 <EnableSensors>
		pstdistancia->VL53L1_DEV[sensor].comms_speed_khz = 400;
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	487d      	ldr	r0, [pc, #500]	; (800464c <IniciarSensores+0x23c>)
 8004458:	21e9      	movs	r1, #233	; 0xe9
 800445a:	0089      	lsls	r1, r1, #2
 800445c:	434b      	muls	r3, r1
 800445e:	18d3      	adds	r3, r2, r3
 8004460:	181b      	adds	r3, r3, r0
 8004462:	22c8      	movs	r2, #200	; 0xc8
 8004464:	0052      	lsls	r2, r2, #1
 8004466:	801a      	strh	r2, [r3, #0]
		pstdistancia->VL53L1_DEV[sensor].I2cHandle = &hi2c1;
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4878      	ldr	r0, [pc, #480]	; (8004650 <IniciarSensores+0x240>)
 800446e:	21e9      	movs	r1, #233	; 0xe9
 8004470:	0089      	lsls	r1, r1, #2
 8004472:	434b      	muls	r3, r1
 8004474:	18d3      	adds	r3, r2, r3
 8004476:	181b      	adds	r3, r3, r0
 8004478:	4a76      	ldr	r2, [pc, #472]	; (8004654 <IniciarSensores+0x244>)
 800447a:	601a      	str	r2, [r3, #0]
		pstdistancia->VL53L1_DEV[sensor].comms_type = 1;
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4875      	ldr	r0, [pc, #468]	; (8004658 <IniciarSensores+0x248>)
 8004482:	21e9      	movs	r1, #233	; 0xe9
 8004484:	0089      	lsls	r1, r1, #2
 8004486:	434b      	muls	r3, r1
 8004488:	18d3      	adds	r3, r2, r3
 800448a:	181b      	adds	r3, r3, r0
 800448c:	2201      	movs	r2, #1
 800448e:	701a      	strb	r2, [r3, #0]
		pstdistancia->VL53L1_DEV[sensor].I2cDevAddr=0x52; /* default ToF sensor I2C address*/
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	2395      	movs	r3, #149	; 0x95
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	20e9      	movs	r0, #233	; 0xe9
 800449a:	0080      	lsls	r0, r0, #2
 800449c:	4342      	muls	r2, r0
 800449e:	188a      	adds	r2, r1, r2
 80044a0:	18d3      	adds	r3, r2, r3
 80044a2:	2252      	movs	r2, #82	; 0x52
 80044a4:	701a      	strb	r2, [r3, #0]
		VL53L1_RdWord(&pstdistancia->VL53L1_DEV[sensor], 0x010F, &wordData);
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	22e9      	movs	r2, #233	; 0xe9
 80044aa:	0092      	lsls	r2, r2, #2
 80044ac:	4353      	muls	r3, r2
 80044ae:	22b7      	movs	r2, #183	; 0xb7
 80044b0:	00d2      	lsls	r2, r2, #3
 80044b2:	4694      	mov	ip, r2
 80044b4:	4463      	add	r3, ip
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	18d3      	adds	r3, r2, r3
 80044ba:	2512      	movs	r5, #18
 80044bc:	197a      	adds	r2, r7, r5
 80044be:	2110      	movs	r1, #16
 80044c0:	31ff      	adds	r1, #255	; 0xff
 80044c2:	0018      	movs	r0, r3
 80044c4:	f00a f924 	bl	800e710 <VL53L1_RdWord>
//		printf("VL53L1X: %02X\n\r", wordData);
		newI2C = pstdistancia->VL53L1_DEV[sensor].I2cDevAddr + (sensor+1)*2;
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	2395      	movs	r3, #149	; 0x95
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	20e9      	movs	r0, #233	; 0xe9
 80044d2:	0080      	lsls	r0, r0, #2
 80044d4:	4342      	muls	r2, r0
 80044d6:	188a      	adds	r2, r1, r2
 80044d8:	18d3      	adds	r3, r2, r3
 80044da:	7819      	ldrb	r1, [r3, #0]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	3301      	adds	r3, #1
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	18db      	adds	r3, r3, r3
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	241b      	movs	r4, #27
 80044e8:	193b      	adds	r3, r7, r4
 80044ea:	188a      	adds	r2, r1, r2
 80044ec:	701a      	strb	r2, [r3, #0]
		status = VL53L1_SetDeviceAddress(&pstdistancia->VL53L1_DEV[sensor], newI2C);
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	22e9      	movs	r2, #233	; 0xe9
 80044f2:	0092      	lsls	r2, r2, #2
 80044f4:	4353      	muls	r3, r2
 80044f6:	22b7      	movs	r2, #183	; 0xb7
 80044f8:	00d2      	lsls	r2, r2, #3
 80044fa:	4694      	mov	ip, r2
 80044fc:	4463      	add	r3, ip
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	18d2      	adds	r2, r2, r3
 8004502:	193b      	adds	r3, r7, r4
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	0019      	movs	r1, r3
 8004508:	0010      	movs	r0, r2
 800450a:	f003 ff90 	bl	800842e <VL53L1_SetDeviceAddress>
 800450e:	0003      	movs	r3, r0
 8004510:	617b      	str	r3, [r7, #20]
		pstdistancia->VL53L1_DEV[sensor].I2cDevAddr=newI2C;
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	2395      	movs	r3, #149	; 0x95
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	20e9      	movs	r0, #233	; 0xe9
 800451c:	0080      	lsls	r0, r0, #2
 800451e:	4342      	muls	r2, r0
 8004520:	188a      	adds	r2, r1, r2
 8004522:	18d3      	adds	r3, r2, r3
 8004524:	193a      	adds	r2, r7, r4
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	701a      	strb	r2, [r3, #0]
		VL53L1_RdWord(&pstdistancia->VL53L1_DEV[sensor], 0x010F, &wordData);
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	22e9      	movs	r2, #233	; 0xe9
 800452e:	0092      	lsls	r2, r2, #2
 8004530:	4353      	muls	r3, r2
 8004532:	22b7      	movs	r2, #183	; 0xb7
 8004534:	00d2      	lsls	r2, r2, #3
 8004536:	4694      	mov	ip, r2
 8004538:	4463      	add	r3, ip
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	18d3      	adds	r3, r2, r3
 800453e:	197a      	adds	r2, r7, r5
 8004540:	2110      	movs	r1, #16
 8004542:	31ff      	adds	r1, #255	; 0xff
 8004544:	0018      	movs	r0, r3
 8004546:	f00a f8e3 	bl	800e710 <VL53L1_RdWord>
//		printf("VL53L1X: %02X\n\r", wordData);
		/* Device Initialization and setting */
		status = VL53L1_WaitDeviceBooted(&pstdistancia->VL53L1_DEV[sensor]);
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	22e9      	movs	r2, #233	; 0xe9
 800454e:	0092      	lsls	r2, r2, #2
 8004550:	4353      	muls	r3, r2
 8004552:	22b7      	movs	r2, #183	; 0xb7
 8004554:	00d2      	lsls	r2, r2, #3
 8004556:	4694      	mov	ip, r2
 8004558:	4463      	add	r3, ip
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	18d3      	adds	r3, r2, r3
 800455e:	0018      	movs	r0, r3
 8004560:	f004 f832 	bl	80085c8 <VL53L1_WaitDeviceBooted>
 8004564:	0003      	movs	r3, r0
 8004566:	617b      	str	r3, [r7, #20]
		status = VL53L1_DataInit(&pstdistancia->VL53L1_DEV[sensor]);
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	22e9      	movs	r2, #233	; 0xe9
 800456c:	0092      	lsls	r2, r2, #2
 800456e:	4353      	muls	r3, r2
 8004570:	22b7      	movs	r2, #183	; 0xb7
 8004572:	00d2      	lsls	r2, r2, #3
 8004574:	4694      	mov	ip, r2
 8004576:	4463      	add	r3, ip
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	18d3      	adds	r3, r2, r3
 800457c:	0018      	movs	r0, r3
 800457e:	f003 ff75 	bl	800846c <VL53L1_DataInit>
 8004582:	0003      	movs	r3, r0
 8004584:	617b      	str	r3, [r7, #20]
		status = VL53L1_StaticInit(&pstdistancia->VL53L1_DEV[sensor]);
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	22e9      	movs	r2, #233	; 0xe9
 800458a:	0092      	lsls	r2, r2, #2
 800458c:	4353      	muls	r3, r2
 800458e:	22b7      	movs	r2, #183	; 0xb7
 8004590:	00d2      	lsls	r2, r2, #3
 8004592:	4694      	mov	ip, r2
 8004594:	4463      	add	r3, ip
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	18d3      	adds	r3, r2, r3
 800459a:	0018      	movs	r0, r3
 800459c:	f003 ffdc 	bl	8008558 <VL53L1_StaticInit>
 80045a0:	0003      	movs	r3, r0
 80045a2:	617b      	str	r3, [r7, #20]
		status = VL53L1_SetDistanceMode(&pstdistancia->VL53L1_DEV[sensor], VL53L1_DISTANCEMODE_SHORT);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	22e9      	movs	r2, #233	; 0xe9
 80045a8:	0092      	lsls	r2, r2, #2
 80045aa:	4353      	muls	r3, r2
 80045ac:	22b7      	movs	r2, #183	; 0xb7
 80045ae:	00d2      	lsls	r2, r2, #3
 80045b0:	4694      	mov	ip, r2
 80045b2:	4463      	add	r3, ip
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	18d3      	adds	r3, r2, r3
 80045b8:	2101      	movs	r1, #1
 80045ba:	0018      	movs	r0, r3
 80045bc:	f004 f986 	bl	80088cc <VL53L1_SetDistanceMode>
 80045c0:	0003      	movs	r3, r0
 80045c2:	617b      	str	r3, [r7, #20]
		status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(&pstdistancia->VL53L1_DEV[sensor], 50000);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	22e9      	movs	r2, #233	; 0xe9
 80045c8:	0092      	lsls	r2, r2, #2
 80045ca:	4353      	muls	r3, r2
 80045cc:	22b7      	movs	r2, #183	; 0xb7
 80045ce:	00d2      	lsls	r2, r2, #3
 80045d0:	4694      	mov	ip, r2
 80045d2:	4463      	add	r3, ip
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	18d3      	adds	r3, r2, r3
 80045d8:	4a20      	ldr	r2, [pc, #128]	; (800465c <IniciarSensores+0x24c>)
 80045da:	0011      	movs	r1, r2
 80045dc:	0018      	movs	r0, r3
 80045de:	f004 fa33 	bl	8008a48 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80045e2:	0003      	movs	r3, r0
 80045e4:	617b      	str	r3, [r7, #20]
		status = VL53L1_SetInterMeasurementPeriodMilliSeconds(&pstdistancia->VL53L1_DEV[sensor], 55);
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	22e9      	movs	r2, #233	; 0xe9
 80045ea:	0092      	lsls	r2, r2, #2
 80045ec:	4353      	muls	r3, r2
 80045ee:	22b7      	movs	r2, #183	; 0xb7
 80045f0:	00d2      	lsls	r2, r2, #3
 80045f2:	4694      	mov	ip, r2
 80045f4:	4463      	add	r3, ip
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	18d3      	adds	r3, r2, r3
 80045fa:	2137      	movs	r1, #55	; 0x37
 80045fc:	0018      	movs	r0, r3
 80045fe:	f004 fbf1 	bl	8008de4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8004602:	0003      	movs	r3, r0
 8004604:	617b      	str	r3, [r7, #20]
		status = VL53L1_SetUserROI(&pstdistancia->VL53L1_DEV[sensor], &roiConfig);
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	22e9      	movs	r2, #233	; 0xe9
 800460a:	0092      	lsls	r2, r2, #2
 800460c:	4353      	muls	r3, r2
 800460e:	22b7      	movs	r2, #183	; 0xb7
 8004610:	00d2      	lsls	r2, r2, #3
 8004612:	4694      	mov	ip, r2
 8004614:	4463      	add	r3, ip
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	18d3      	adds	r3, r2, r3
 800461a:	220c      	movs	r2, #12
 800461c:	18ba      	adds	r2, r7, r2
 800461e:	0011      	movs	r1, r2
 8004620:	0018      	movs	r0, r3
 8004622:	f004 fdb2 	bl	800918a <VL53L1_SetUserROI>
 8004626:	0003      	movs	r3, r0
 8004628:	617b      	str	r3, [r7, #20]
	for(sensor=0; sensor<pstdistancia->SenHab; sensor++){
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3301      	adds	r3, #1
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	23b2      	movs	r3, #178	; 0xb2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	5cd3      	ldrb	r3, [r2, r3]
 8004638:	001a      	movs	r2, r3
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4293      	cmp	r3, r2
 800463e:	da00      	bge.n	8004642 <IniciarSensores+0x232>
 8004640:	e6fe      	b.n	8004440 <IniciarSensores+0x30>
	}


	return 1;
 8004642:	2301      	movs	r3, #1
}
 8004644:	0018      	movs	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	b008      	add	sp, #32
 800464a:	bdb0      	pop	{r4, r5, r7, pc}
 800464c:	00000952 	.word	0x00000952
 8004650:	00000958 	.word	0x00000958
 8004654:	200004e4 	.word	0x200004e4
 8004658:	00000951 	.word	0x00000951
 800465c:	0000c350 	.word	0x0000c350

08004660 <EnableSensors>:
Salidas:          		0
Descripción:  		    Habilita los sensores secuencialmente para su configuración
Notas y Cambios:
****************************************************************************************/
uint8_t EnableSensors(stDistancia *pstdistancia)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	switch(pstdistancia->contParrilla)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2266      	movs	r2, #102	; 0x66
 800466c:	5c9b      	ldrb	r3, [r3, r2]
 800466e:	2b05      	cmp	r3, #5
 8004670:	d900      	bls.n	8004674 <EnableSensors+0x14>
 8004672:	e0f4      	b.n	800485e <EnableSensors+0x1fe>
 8004674:	009a      	lsls	r2, r3, #2
 8004676:	4b92      	ldr	r3, [pc, #584]	; (80048c0 <EnableSensors+0x260>)
 8004678:	18d3      	adds	r3, r2, r3
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	469f      	mov	pc, r3
	{
	case 0:
		HAL_GPIO_WritePin(VL53_XSHUT_1_GPIO_Port, VL53_XSHUT_1_Pin, GPIO_PIN_SET);
 800467e:	2380      	movs	r3, #128	; 0x80
 8004680:	01db      	lsls	r3, r3, #7
 8004682:	4890      	ldr	r0, [pc, #576]	; (80048c4 <EnableSensors+0x264>)
 8004684:	2201      	movs	r2, #1
 8004686:	0019      	movs	r1, r3
 8004688:	f00b fd1b 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_2_GPIO_Port, VL53_XSHUT_2_Pin, GPIO_PIN_RESET);
 800468c:	4b8d      	ldr	r3, [pc, #564]	; (80048c4 <EnableSensors+0x264>)
 800468e:	2200      	movs	r2, #0
 8004690:	2140      	movs	r1, #64	; 0x40
 8004692:	0018      	movs	r0, r3
 8004694:	f00b fd15 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_3_GPIO_Port, VL53_XSHUT_3_Pin, GPIO_PIN_RESET);
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	488a      	ldr	r0, [pc, #552]	; (80048c8 <EnableSensors+0x268>)
 800469e:	2200      	movs	r2, #0
 80046a0:	0019      	movs	r1, r3
 80046a2:	f00b fd0e 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_4_GPIO_Port, VL53_XSHUT_4_Pin, GPIO_PIN_RESET);
 80046a6:	4b88      	ldr	r3, [pc, #544]	; (80048c8 <EnableSensors+0x268>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	2102      	movs	r1, #2
 80046ac:	0018      	movs	r0, r3
 80046ae:	f00b fd08 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_5_GPIO_Port, VL53_XSHUT_5_Pin, GPIO_PIN_RESET);
 80046b2:	23a0      	movs	r3, #160	; 0xa0
 80046b4:	05db      	lsls	r3, r3, #23
 80046b6:	2200      	movs	r2, #0
 80046b8:	2120      	movs	r1, #32
 80046ba:	0018      	movs	r0, r3
 80046bc:	f00b fd01 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_6_GPIO_Port, VL53_XSHUT_6_Pin, GPIO_PIN_RESET);
 80046c0:	4b80      	ldr	r3, [pc, #512]	; (80048c4 <EnableSensors+0x264>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	2104      	movs	r1, #4
 80046c6:	0018      	movs	r0, r3
 80046c8:	f00b fcfb 	bl	80100c2 <HAL_GPIO_WritePin>
		break;
 80046cc:	e0ef      	b.n	80048ae <EnableSensors+0x24e>
	case 1:
		HAL_GPIO_WritePin(VL53_XSHUT_1_GPIO_Port, VL53_XSHUT_1_Pin, GPIO_PIN_SET);
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	01db      	lsls	r3, r3, #7
 80046d2:	487c      	ldr	r0, [pc, #496]	; (80048c4 <EnableSensors+0x264>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	0019      	movs	r1, r3
 80046d8:	f00b fcf3 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_2_GPIO_Port, VL53_XSHUT_2_Pin, GPIO_PIN_SET);
 80046dc:	4b79      	ldr	r3, [pc, #484]	; (80048c4 <EnableSensors+0x264>)
 80046de:	2201      	movs	r2, #1
 80046e0:	2140      	movs	r1, #64	; 0x40
 80046e2:	0018      	movs	r0, r3
 80046e4:	f00b fced 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_3_GPIO_Port, VL53_XSHUT_3_Pin, GPIO_PIN_RESET);
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4876      	ldr	r0, [pc, #472]	; (80048c8 <EnableSensors+0x268>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	0019      	movs	r1, r3
 80046f2:	f00b fce6 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_4_GPIO_Port, VL53_XSHUT_4_Pin, GPIO_PIN_RESET);
 80046f6:	4b74      	ldr	r3, [pc, #464]	; (80048c8 <EnableSensors+0x268>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	2102      	movs	r1, #2
 80046fc:	0018      	movs	r0, r3
 80046fe:	f00b fce0 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_5_GPIO_Port, VL53_XSHUT_5_Pin, GPIO_PIN_RESET);
 8004702:	23a0      	movs	r3, #160	; 0xa0
 8004704:	05db      	lsls	r3, r3, #23
 8004706:	2200      	movs	r2, #0
 8004708:	2120      	movs	r1, #32
 800470a:	0018      	movs	r0, r3
 800470c:	f00b fcd9 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_6_GPIO_Port, VL53_XSHUT_6_Pin, GPIO_PIN_RESET);
 8004710:	4b6c      	ldr	r3, [pc, #432]	; (80048c4 <EnableSensors+0x264>)
 8004712:	2200      	movs	r2, #0
 8004714:	2104      	movs	r1, #4
 8004716:	0018      	movs	r0, r3
 8004718:	f00b fcd3 	bl	80100c2 <HAL_GPIO_WritePin>
		break;
 800471c:	e0c7      	b.n	80048ae <EnableSensors+0x24e>
	case 2:
		HAL_GPIO_WritePin(VL53_XSHUT_1_GPIO_Port, VL53_XSHUT_1_Pin, GPIO_PIN_SET);
 800471e:	2380      	movs	r3, #128	; 0x80
 8004720:	01db      	lsls	r3, r3, #7
 8004722:	4868      	ldr	r0, [pc, #416]	; (80048c4 <EnableSensors+0x264>)
 8004724:	2201      	movs	r2, #1
 8004726:	0019      	movs	r1, r3
 8004728:	f00b fccb 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_2_GPIO_Port, VL53_XSHUT_2_Pin, GPIO_PIN_SET);
 800472c:	4b65      	ldr	r3, [pc, #404]	; (80048c4 <EnableSensors+0x264>)
 800472e:	2201      	movs	r2, #1
 8004730:	2140      	movs	r1, #64	; 0x40
 8004732:	0018      	movs	r0, r3
 8004734:	f00b fcc5 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_3_GPIO_Port, VL53_XSHUT_3_Pin, GPIO_PIN_SET);
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4862      	ldr	r0, [pc, #392]	; (80048c8 <EnableSensors+0x268>)
 800473e:	2201      	movs	r2, #1
 8004740:	0019      	movs	r1, r3
 8004742:	f00b fcbe 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_4_GPIO_Port, VL53_XSHUT_4_Pin, GPIO_PIN_RESET);
 8004746:	4b60      	ldr	r3, [pc, #384]	; (80048c8 <EnableSensors+0x268>)
 8004748:	2200      	movs	r2, #0
 800474a:	2102      	movs	r1, #2
 800474c:	0018      	movs	r0, r3
 800474e:	f00b fcb8 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_5_GPIO_Port, VL53_XSHUT_5_Pin, GPIO_PIN_RESET);
 8004752:	23a0      	movs	r3, #160	; 0xa0
 8004754:	05db      	lsls	r3, r3, #23
 8004756:	2200      	movs	r2, #0
 8004758:	2120      	movs	r1, #32
 800475a:	0018      	movs	r0, r3
 800475c:	f00b fcb1 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_6_GPIO_Port, VL53_XSHUT_6_Pin, GPIO_PIN_RESET);
 8004760:	4b58      	ldr	r3, [pc, #352]	; (80048c4 <EnableSensors+0x264>)
 8004762:	2200      	movs	r2, #0
 8004764:	2104      	movs	r1, #4
 8004766:	0018      	movs	r0, r3
 8004768:	f00b fcab 	bl	80100c2 <HAL_GPIO_WritePin>
		break;
 800476c:	e09f      	b.n	80048ae <EnableSensors+0x24e>
	case 3:
		HAL_GPIO_WritePin(VL53_XSHUT_1_GPIO_Port, VL53_XSHUT_1_Pin, GPIO_PIN_SET);
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	01db      	lsls	r3, r3, #7
 8004772:	4854      	ldr	r0, [pc, #336]	; (80048c4 <EnableSensors+0x264>)
 8004774:	2201      	movs	r2, #1
 8004776:	0019      	movs	r1, r3
 8004778:	f00b fca3 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_2_GPIO_Port, VL53_XSHUT_2_Pin, GPIO_PIN_SET);
 800477c:	4b51      	ldr	r3, [pc, #324]	; (80048c4 <EnableSensors+0x264>)
 800477e:	2201      	movs	r2, #1
 8004780:	2140      	movs	r1, #64	; 0x40
 8004782:	0018      	movs	r0, r3
 8004784:	f00b fc9d 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_3_GPIO_Port, VL53_XSHUT_3_Pin, GPIO_PIN_SET);
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	484e      	ldr	r0, [pc, #312]	; (80048c8 <EnableSensors+0x268>)
 800478e:	2201      	movs	r2, #1
 8004790:	0019      	movs	r1, r3
 8004792:	f00b fc96 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_4_GPIO_Port, VL53_XSHUT_4_Pin, GPIO_PIN_SET);
 8004796:	4b4c      	ldr	r3, [pc, #304]	; (80048c8 <EnableSensors+0x268>)
 8004798:	2201      	movs	r2, #1
 800479a:	2102      	movs	r1, #2
 800479c:	0018      	movs	r0, r3
 800479e:	f00b fc90 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_5_GPIO_Port, VL53_XSHUT_5_Pin, GPIO_PIN_RESET);
 80047a2:	23a0      	movs	r3, #160	; 0xa0
 80047a4:	05db      	lsls	r3, r3, #23
 80047a6:	2200      	movs	r2, #0
 80047a8:	2120      	movs	r1, #32
 80047aa:	0018      	movs	r0, r3
 80047ac:	f00b fc89 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_6_GPIO_Port, VL53_XSHUT_6_Pin, GPIO_PIN_RESET);
 80047b0:	4b44      	ldr	r3, [pc, #272]	; (80048c4 <EnableSensors+0x264>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	2104      	movs	r1, #4
 80047b6:	0018      	movs	r0, r3
 80047b8:	f00b fc83 	bl	80100c2 <HAL_GPIO_WritePin>
		break;
 80047bc:	e077      	b.n	80048ae <EnableSensors+0x24e>
	case 4:
		HAL_GPIO_WritePin(VL53_XSHUT_1_GPIO_Port, VL53_XSHUT_1_Pin, GPIO_PIN_SET);
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	01db      	lsls	r3, r3, #7
 80047c2:	4840      	ldr	r0, [pc, #256]	; (80048c4 <EnableSensors+0x264>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	0019      	movs	r1, r3
 80047c8:	f00b fc7b 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_2_GPIO_Port, VL53_XSHUT_2_Pin, GPIO_PIN_SET);
 80047cc:	4b3d      	ldr	r3, [pc, #244]	; (80048c4 <EnableSensors+0x264>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	2140      	movs	r1, #64	; 0x40
 80047d2:	0018      	movs	r0, r3
 80047d4:	f00b fc75 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_3_GPIO_Port, VL53_XSHUT_3_Pin, GPIO_PIN_SET);
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	483a      	ldr	r0, [pc, #232]	; (80048c8 <EnableSensors+0x268>)
 80047de:	2201      	movs	r2, #1
 80047e0:	0019      	movs	r1, r3
 80047e2:	f00b fc6e 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_4_GPIO_Port, VL53_XSHUT_4_Pin, GPIO_PIN_SET);
 80047e6:	4b38      	ldr	r3, [pc, #224]	; (80048c8 <EnableSensors+0x268>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	2102      	movs	r1, #2
 80047ec:	0018      	movs	r0, r3
 80047ee:	f00b fc68 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_5_GPIO_Port, VL53_XSHUT_5_Pin, GPIO_PIN_SET);
 80047f2:	23a0      	movs	r3, #160	; 0xa0
 80047f4:	05db      	lsls	r3, r3, #23
 80047f6:	2201      	movs	r2, #1
 80047f8:	2120      	movs	r1, #32
 80047fa:	0018      	movs	r0, r3
 80047fc:	f00b fc61 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_6_GPIO_Port, VL53_XSHUT_6_Pin, GPIO_PIN_RESET);
 8004800:	4b30      	ldr	r3, [pc, #192]	; (80048c4 <EnableSensors+0x264>)
 8004802:	2200      	movs	r2, #0
 8004804:	2104      	movs	r1, #4
 8004806:	0018      	movs	r0, r3
 8004808:	f00b fc5b 	bl	80100c2 <HAL_GPIO_WritePin>
		break;
 800480c:	e04f      	b.n	80048ae <EnableSensors+0x24e>
	case 5:
		HAL_GPIO_WritePin(VL53_XSHUT_1_GPIO_Port, VL53_XSHUT_1_Pin, GPIO_PIN_SET);
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	01db      	lsls	r3, r3, #7
 8004812:	482c      	ldr	r0, [pc, #176]	; (80048c4 <EnableSensors+0x264>)
 8004814:	2201      	movs	r2, #1
 8004816:	0019      	movs	r1, r3
 8004818:	f00b fc53 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_2_GPIO_Port, VL53_XSHUT_2_Pin, GPIO_PIN_SET);
 800481c:	4b29      	ldr	r3, [pc, #164]	; (80048c4 <EnableSensors+0x264>)
 800481e:	2201      	movs	r2, #1
 8004820:	2140      	movs	r1, #64	; 0x40
 8004822:	0018      	movs	r0, r3
 8004824:	f00b fc4d 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_3_GPIO_Port, VL53_XSHUT_3_Pin, GPIO_PIN_SET);
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4826      	ldr	r0, [pc, #152]	; (80048c8 <EnableSensors+0x268>)
 800482e:	2201      	movs	r2, #1
 8004830:	0019      	movs	r1, r3
 8004832:	f00b fc46 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_4_GPIO_Port, VL53_XSHUT_4_Pin, GPIO_PIN_SET);
 8004836:	4b24      	ldr	r3, [pc, #144]	; (80048c8 <EnableSensors+0x268>)
 8004838:	2201      	movs	r2, #1
 800483a:	2102      	movs	r1, #2
 800483c:	0018      	movs	r0, r3
 800483e:	f00b fc40 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_5_GPIO_Port, VL53_XSHUT_5_Pin, GPIO_PIN_SET);
 8004842:	23a0      	movs	r3, #160	; 0xa0
 8004844:	05db      	lsls	r3, r3, #23
 8004846:	2201      	movs	r2, #1
 8004848:	2120      	movs	r1, #32
 800484a:	0018      	movs	r0, r3
 800484c:	f00b fc39 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_6_GPIO_Port, VL53_XSHUT_6_Pin, GPIO_PIN_SET);
 8004850:	4b1c      	ldr	r3, [pc, #112]	; (80048c4 <EnableSensors+0x264>)
 8004852:	2201      	movs	r2, #1
 8004854:	2104      	movs	r1, #4
 8004856:	0018      	movs	r0, r3
 8004858:	f00b fc33 	bl	80100c2 <HAL_GPIO_WritePin>
		break;
 800485c:	e027      	b.n	80048ae <EnableSensors+0x24e>
	default:
		HAL_GPIO_WritePin(VL53_XSHUT_1_GPIO_Port, VL53_XSHUT_1_Pin, GPIO_PIN_SET);
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	01db      	lsls	r3, r3, #7
 8004862:	4818      	ldr	r0, [pc, #96]	; (80048c4 <EnableSensors+0x264>)
 8004864:	2201      	movs	r2, #1
 8004866:	0019      	movs	r1, r3
 8004868:	f00b fc2b 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_2_GPIO_Port, VL53_XSHUT_2_Pin, GPIO_PIN_RESET);
 800486c:	4b15      	ldr	r3, [pc, #84]	; (80048c4 <EnableSensors+0x264>)
 800486e:	2200      	movs	r2, #0
 8004870:	2140      	movs	r1, #64	; 0x40
 8004872:	0018      	movs	r0, r3
 8004874:	f00b fc25 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_3_GPIO_Port, VL53_XSHUT_3_Pin, GPIO_PIN_RESET);
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4812      	ldr	r0, [pc, #72]	; (80048c8 <EnableSensors+0x268>)
 800487e:	2200      	movs	r2, #0
 8004880:	0019      	movs	r1, r3
 8004882:	f00b fc1e 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_4_GPIO_Port, VL53_XSHUT_4_Pin, GPIO_PIN_RESET);
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <EnableSensors+0x268>)
 8004888:	2200      	movs	r2, #0
 800488a:	2102      	movs	r1, #2
 800488c:	0018      	movs	r0, r3
 800488e:	f00b fc18 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_5_GPIO_Port, VL53_XSHUT_5_Pin, GPIO_PIN_RESET);
 8004892:	23a0      	movs	r3, #160	; 0xa0
 8004894:	05db      	lsls	r3, r3, #23
 8004896:	2200      	movs	r2, #0
 8004898:	2120      	movs	r1, #32
 800489a:	0018      	movs	r0, r3
 800489c:	f00b fc11 	bl	80100c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VL53_XSHUT_6_GPIO_Port, VL53_XSHUT_6_Pin, GPIO_PIN_RESET);
 80048a0:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <EnableSensors+0x264>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	2104      	movs	r1, #4
 80048a6:	0018      	movs	r0, r3
 80048a8:	f00b fc0b 	bl	80100c2 <HAL_GPIO_WritePin>
		break;
 80048ac:	46c0      	nop			; (mov r8, r8)
	}
	HAL_Delay(30);
 80048ae:	201e      	movs	r0, #30
 80048b0:	f00a fff4 	bl	800f89c <HAL_Delay>

	return (uint8_t)0;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b002      	add	sp, #8
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	080162c0 	.word	0x080162c0
 80048c4:	50000800 	.word	0x50000800
 80048c8:	50000400 	.word	0x50000400

080048cc <Convertir4Cif>:
Entradas:
Salidas:
Descripción:  		    Esta función convierte de uint16_t a decimal
Notas y Cambios:
****************************************************************************************/
void Convertir4Cif(uint16_t numero, uint8_t *mil, uint8_t *centena,	uint8_t *decena, uint8_t *unidad) {
 80048cc:	b590      	push	{r4, r7, lr}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	210e      	movs	r1, #14
 80048da:	187b      	adds	r3, r7, r1
 80048dc:	1c02      	adds	r2, r0, #0
 80048de:	801a      	strh	r2, [r3, #0]
	uint16_t temp = 0;
 80048e0:	2416      	movs	r4, #22
 80048e2:	193b      	adds	r3, r7, r4
 80048e4:	2200      	movs	r2, #0
 80048e6:	801a      	strh	r2, [r3, #0]

	*unidad = 0;
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	2200      	movs	r2, #0
 80048ec:	701a      	strb	r2, [r3, #0]
	*decena = 0;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
	*centena = 0;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
	*mil = 0;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]

	temp = numero;
 8004900:	193b      	adds	r3, r7, r4
 8004902:	187a      	adds	r2, r7, r1
 8004904:	8812      	ldrh	r2, [r2, #0]
 8004906:	801a      	strh	r2, [r3, #0]

	if (numero < 9999) {
 8004908:	187b      	adds	r3, r7, r1
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	4a41      	ldr	r2, [pc, #260]	; (8004a14 <Convertir4Cif+0x148>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d870      	bhi.n	80049f4 <Convertir4Cif+0x128>
		*mil = temp / 1000;
 8004912:	193b      	adds	r3, r7, r4
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	22fa      	movs	r2, #250	; 0xfa
 8004918:	0091      	lsls	r1, r2, #2
 800491a:	0018      	movs	r0, r3
 800491c:	f7fb fc10 	bl	8000140 <__udivsi3>
 8004920:	0003      	movs	r3, r0
 8004922:	b29b      	uxth	r3, r3
 8004924:	b2da      	uxtb	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	701a      	strb	r2, [r3, #0]
		temp = temp - *mil * 1000;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	1c1a      	adds	r2, r3, #0
 8004932:	0192      	lsls	r2, r2, #6
 8004934:	1ad2      	subs	r2, r2, r3
 8004936:	0192      	lsls	r2, r2, #6
 8004938:	18d2      	adds	r2, r2, r3
 800493a:	1892      	adds	r2, r2, r2
 800493c:	18d3      	adds	r3, r2, r3
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	b299      	uxth	r1, r3
 8004942:	193b      	adds	r3, r7, r4
 8004944:	193a      	adds	r2, r7, r4
 8004946:	8812      	ldrh	r2, [r2, #0]
 8004948:	188a      	adds	r2, r1, r2
 800494a:	801a      	strh	r2, [r3, #0]
		*centena = temp / 100;
 800494c:	193b      	adds	r3, r7, r4
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	2164      	movs	r1, #100	; 0x64
 8004952:	0018      	movs	r0, r3
 8004954:	f7fb fbf4 	bl	8000140 <__udivsi3>
 8004958:	0003      	movs	r3, r0
 800495a:	b29b      	uxth	r3, r3
 800495c:	b2da      	uxtb	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	701a      	strb	r2, [r3, #0]
		temp = temp - *centena * 100;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	1c1a      	adds	r2, r3, #0
 800496a:	0252      	lsls	r2, r2, #9
 800496c:	1ad2      	subs	r2, r2, r3
 800496e:	0092      	lsls	r2, r2, #2
 8004970:	18d2      	adds	r2, r2, r3
 8004972:	00d2      	lsls	r2, r2, #3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	b299      	uxth	r1, r3
 800497a:	193b      	adds	r3, r7, r4
 800497c:	193a      	adds	r2, r7, r4
 800497e:	8812      	ldrh	r2, [r2, #0]
 8004980:	188a      	adds	r2, r1, r2
 8004982:	801a      	strh	r2, [r3, #0]
		*decena = temp / 10;
 8004984:	193b      	adds	r3, r7, r4
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	210a      	movs	r1, #10
 800498a:	0018      	movs	r0, r3
 800498c:	f7fb fbd8 	bl	8000140 <__udivsi3>
 8004990:	0003      	movs	r3, r0
 8004992:	b29b      	uxth	r3, r3
 8004994:	b2da      	uxtb	r2, r3
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	701a      	strb	r2, [r3, #0]
		temp = temp - *decena * 10;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	1c1a      	adds	r2, r3, #0
 80049a2:	0352      	lsls	r2, r2, #13
 80049a4:	1ad2      	subs	r2, r2, r3
 80049a6:	0092      	lsls	r2, r2, #2
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	18db      	adds	r3, r3, r3
 80049ac:	b299      	uxth	r1, r3
 80049ae:	193b      	adds	r3, r7, r4
 80049b0:	193a      	adds	r2, r7, r4
 80049b2:	8812      	ldrh	r2, [r2, #0]
 80049b4:	188a      	adds	r2, r1, r2
 80049b6:	801a      	strh	r2, [r3, #0]
		*unidad = temp;
 80049b8:	193b      	adds	r3, r7, r4
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	701a      	strb	r2, [r3, #0]
		*mil = *mil + 48;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	3330      	adds	r3, #48	; 0x30
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	701a      	strb	r2, [r3, #0]
		*centena = *centena + 48;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	3330      	adds	r3, #48	; 0x30
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	701a      	strb	r2, [r3, #0]
		*decena = *decena + 48;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	3330      	adds	r3, #48	; 0x30
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	701a      	strb	r2, [r3, #0]
		*unidad = *unidad + 48;
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	3330      	adds	r3, #48	; 0x30
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	701a      	strb	r2, [r3, #0]
		*mil = 255;
		*centena = 255;
		*decena = 255;
		*unidad = 255;
	}
}
 80049f2:	e00b      	b.n	8004a0c <Convertir4Cif+0x140>
		*mil = 255;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	22ff      	movs	r2, #255	; 0xff
 80049f8:	701a      	strb	r2, [r3, #0]
		*centena = 255;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	22ff      	movs	r2, #255	; 0xff
 80049fe:	701a      	strb	r2, [r3, #0]
		*decena = 255;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	22ff      	movs	r2, #255	; 0xff
 8004a04:	701a      	strb	r2, [r3, #0]
		*unidad = 255;
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	22ff      	movs	r2, #255	; 0xff
 8004a0a:	701a      	strb	r2, [r3, #0]
}
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b007      	add	sp, #28
 8004a12:	bd90      	pop	{r4, r7, pc}
 8004a14:	0000270e 	.word	0x0000270e

08004a18 <Iniciar_EstrucCaptura>:
Salidas:          				N/A
Descripción:  		    		Esta función inicia la Estructura de Datos del Bloque Captura
Notas y Cambios:  
****************************************************************************************/
char Iniciar_EstrucCaptura(stCaptura *pstcaptura)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	int i,j;

	pstcaptura->CAP_State = CAP_ESPERAR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
	pstcaptura->filaActual = 0;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	705a      	strb	r2, [r3, #1]
	pstcaptura->Distancia = 34;  // Profundidad dada en cm
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2222      	movs	r2, #34	; 0x22
 8004a30:	709a      	strb	r2, [r3, #2]
	
	for(i = 0; i < MAX_PARR; i++)
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e031      	b.n	8004a9c <Iniciar_EstrucCaptura+0x84>
	{
		for(j = 0; j < MAX_FILAS; j++)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60bb      	str	r3, [r7, #8]
 8004a3c:	e028      	b.n	8004a90 <Iniciar_EstrucCaptura+0x78>
		{
	//		pstcaptura->anchos[i] = 70; // 7cm
			pstcaptura->ancho[i][j] = 61; // 6.1cm
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	0013      	movs	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	189b      	adds	r3, r3, r2
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	18ca      	adds	r2, r1, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	18d3      	adds	r3, r2, r3
 8004a50:	3303      	adds	r3, #3
 8004a52:	223d      	movs	r2, #61	; 0x3d
 8004a54:	701a      	strb	r2, [r3, #0]
			pstcaptura->largo[i][j] = 61; // 6.1cm
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	2067      	movs	r0, #103	; 0x67
 8004a5c:	0013      	movs	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	18ca      	adds	r2, r1, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	18d3      	adds	r3, r2, r3
 8004a6a:	181b      	adds	r3, r3, r0
 8004a6c:	223d      	movs	r2, #61	; 0x3d
 8004a6e:	701a      	strb	r2, [r3, #0]
			pstcaptura->cantidades[i][j] = 255;
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	20cb      	movs	r0, #203	; 0xcb
 8004a76:	0013      	movs	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	189b      	adds	r3, r3, r2
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	18ca      	adds	r2, r1, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	18d3      	adds	r3, r2, r3
 8004a84:	181b      	adds	r3, r3, r0
 8004a86:	22ff      	movs	r2, #255	; 0xff
 8004a88:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < MAX_FILAS; j++)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b09      	cmp	r3, #9
 8004a94:	ddd3      	ble.n	8004a3e <Iniciar_EstrucCaptura+0x26>
	for(i = 0; i < MAX_PARR; i++)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b09      	cmp	r3, #9
 8004aa0:	ddca      	ble.n	8004a38 <Iniciar_EstrucCaptura+0x20>
		}
	}
	
	for(i = 0; i < TX_BUFFER_SIZE; i++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e00a      	b.n	8004abe <Iniciar_EstrucCaptura+0xa6>
	{
		pstcaptura->bufferTrama[i] = 0x00;
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	2330      	movs	r3, #48	; 0x30
 8004aac:	33ff      	adds	r3, #255	; 0xff
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	188a      	adds	r2, r1, r2
 8004ab2:	18d3      	adds	r3, r2, r3
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < TX_BUFFER_SIZE; i++)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3301      	adds	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b68      	cmp	r3, #104	; 0x68
 8004ac2:	ddf1      	ble.n	8004aa8 <Iniciar_EstrucCaptura+0x90>
	}
	
	return 1;
 8004ac4:	2301      	movs	r3, #1
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b004      	add	sp, #16
 8004acc:	bd80      	pop	{r7, pc}

08004ace <Iniciar_EstrucComCEIT>:
Salidas:          		N/A
Descripción:  		    Esta función inicia la Estructura de Datos del Bloque COM_CEIT
Notas y Cambios:  
****************************************************************************************/
char Iniciar_EstrucComCEIT(stComCEIT *pstcomceit)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
	int i;
	
	pstcomceit->SM_State = SM_STATE_START_RX;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]
	pstcomceit->enviarDatos = false;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	705a      	strb	r2, [r3, #1]
	pstcomceit->datosListos = false;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	709a      	strb	r2, [r3, #2]
	pstcomceit->envioOK = true;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	70da      	strb	r2, [r3, #3]
	pstcomceit->xRxDoneFlag = false;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	711a      	strb	r2, [r3, #4]
	pstcomceit->xTxDoneFlag = false;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	715a      	strb	r2, [r3, #5]
	pstcomceit->TxLength = 0;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	719a      	strb	r2, [r3, #6]
	pstcomceit->RxLength = 0;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	71da      	strb	r2, [r3, #7]
	
	for(i = 0; i < TX_BUFFER_SIZE; i++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	e008      	b.n	8004b1e <Iniciar_EstrucComCEIT+0x50>
	{
		pstcomceit->Tx_Buffer[i] = 0x00;
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	18d3      	adds	r3, r2, r3
 8004b12:	3308      	adds	r3, #8
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < TX_BUFFER_SIZE; i++)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b68      	cmp	r3, #104	; 0x68
 8004b22:	ddf3      	ble.n	8004b0c <Iniciar_EstrucComCEIT+0x3e>
	}
	
	for(i = 0; i < RX_BUFFER_SIZE; i++)
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	e009      	b.n	8004b3e <Iniciar_EstrucComCEIT+0x70>
	{
		pstcomceit->Rx_Buffer[i] = 0x00;
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	2171      	movs	r1, #113	; 0x71
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	18d3      	adds	r3, r2, r3
 8004b32:	185b      	adds	r3, r3, r1
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < RX_BUFFER_SIZE; i++)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b05      	cmp	r3, #5
 8004b42:	ddf2      	ble.n	8004b2a <Iniciar_EstrucComCEIT+0x5c>
	}
	
	for(i = 0; i < RX_DATA_SIZE; i++)
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e009      	b.n	8004b5e <Iniciar_EstrucComCEIT+0x90>
	{
		pstcomceit->Rx_Data[i] = 0x00;
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	2177      	movs	r1, #119	; 0x77
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	18d3      	adds	r3, r2, r3
 8004b52:	185b      	adds	r3, r3, r1
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < RX_DATA_SIZE; i++)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2bca      	cmp	r3, #202	; 0xca
 8004b62:	ddf2      	ble.n	8004b4a <Iniciar_EstrucComCEIT+0x7c>
	}

	return 1;
 8004b64:	2301      	movs	r3, #1
}
 8004b66:	0018      	movs	r0, r3
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b004      	add	sp, #16
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <Iniciar_EstrucDistancia>:
Salidas:          		N/A
Descripción:  		    Esta función inicia la Estructura de Datos del Bloque Distancia
Notas y Cambios:  
****************************************************************************************/
char Iniciar_EstrucDistancia(stDistancia *pstdistancia)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	int i,j,k;
	
	pstdistancia->bandDistancia = false;							
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]

	pstdistancia->contParrilla = 0;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2266      	movs	r2, #102	; 0x66
 8004b82:	2100      	movs	r1, #0
 8004b84:	5499      	strb	r1, [r3, r2]


	for(i = 0; i < MAX_PARR; i++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	e010      	b.n	8004bae <Iniciar_EstrucDistancia+0x3e>
	{
		pstdistancia->cantFilas[i] = CANT_FILAS;
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	2167      	movs	r1, #103	; 0x67
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	18d3      	adds	r3, r2, r3
 8004b94:	185b      	adds	r3, r3, r1
 8004b96:	2208      	movs	r2, #8
 8004b98:	701a      	strb	r2, [r3, #0]
		pstdistancia->bandInicio[i] = 0;
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	4928      	ldr	r1, [pc, #160]	; (8004c40 <Iniciar_EstrucDistancia+0xd0>)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	18d3      	adds	r3, r2, r3
 8004ba2:	185b      	adds	r3, r3, r1
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MAX_PARR; i++)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3301      	adds	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b09      	cmp	r3, #9
 8004bb2:	ddeb      	ble.n	8004b8c <Iniciar_EstrucDistancia+0x1c>
	}
	k=0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < PH; i++)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e038      	b.n	8004c30 <Iniciar_EstrucDistancia+0xc0>
	{
		pstdistancia->posSensor[i] = 0;
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4920      	ldr	r1, [pc, #128]	; (8004c44 <Iniciar_EstrucDistancia+0xd4>)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	18d3      	adds	r3, r2, r3
 8004bc6:	185b      	adds	r3, r3, r1
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < CANT_FILAS; j++)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]
 8004bd0:	e028      	b.n	8004c24 <Iniciar_EstrucDistancia+0xb4>
		{
			pstdistancia->datosDistancia[i][j] = 0;
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	0013      	movs	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	189b      	adds	r3, r3, r2
 8004be2:	3338      	adds	r3, #56	; 0x38
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	18cb      	adds	r3, r1, r3
 8004be8:	3302      	adds	r3, #2
 8004bea:	2200      	movs	r2, #0
 8004bec:	801a      	strh	r2, [r3, #0]
			pstdistancia->sensor[k] = i;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	b2d8      	uxtb	r0, r3
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4914      	ldr	r1, [pc, #80]	; (8004c48 <Iniciar_EstrucDistancia+0xd8>)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	18d3      	adds	r3, r2, r3
 8004bfa:	185b      	adds	r3, r3, r1
 8004bfc:	1c02      	adds	r2, r0, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
			pstdistancia->senStatus[i][j] = 0;
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	0013      	movs	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	189b      	adds	r3, r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	18ca      	adds	r2, r1, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	18d3      	adds	r3, r2, r3
 8004c12:	3301      	adds	r3, #1
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
			k++;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
		for(j = 0; j < CANT_FILAS; j++)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	3301      	adds	r3, #1
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b07      	cmp	r3, #7
 8004c28:	ddd3      	ble.n	8004bd2 <Iniciar_EstrucDistancia+0x62>
	for(i = 0; i < PH; i++)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	ddc3      	ble.n	8004bbe <Iniciar_EstrucDistancia+0x4e>
		}
	}
	return 1;
 8004c36:	2301      	movs	r3, #1
}
 8004c38:	0018      	movs	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b006      	add	sp, #24
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	00000591 	.word	0x00000591
 8004c44:	00000586 	.word	0x00000586
 8004c48:	00000522 	.word	0x00000522

08004c4c <Iniciar_EstrucMotor>:
Salidas:          		N/A
Descripción:  		    Esta función inicia la Estructura de Datos del Bloque Motor
Notas y Cambios:  
****************************************************************************************/
char Iniciar_EstrucMotor(stMotor *pstmotor)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	int i,j,k;

	pstmotor->bandMotor = false;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	701a      	strb	r2, [r3, #0]
	pstmotor->posInicial = 0;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	605a      	str	r2, [r3, #4]
	pstmotor->posMotor = 0;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	721a      	strb	r2, [r3, #8]
	for(i = 0; i < MAX_PARR; i++)
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e008      	b.n	8004c7e <Iniciar_EstrucMotor+0x32>
	{
		pstmotor->cantFilas[i] = CANT_FILAS;
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	18d3      	adds	r3, r2, r3
 8004c72:	3309      	adds	r3, #9
 8004c74:	2208      	movs	r2, #8
 8004c76:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MAX_PARR; i++)
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b09      	cmp	r3, #9
 8004c82:	ddf3      	ble.n	8004c6c <Iniciar_EstrucMotor+0x20>
	}
	pstmotor->ParrHab = PH;
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	23cd      	movs	r3, #205	; 0xcd
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	2105      	movs	r1, #5
 8004c8c:	54d1      	strb	r1, [r2, r3]
//	pstmotor->MaxPosMotor = pstmotor->ParrHab*CANT_FILAS;

	for(i = 0; i < pstmotor->ParrHab; i++)
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	e053      	b.n	8004d3c <Iniciar_EstrucMotor+0xf0>
	{
		pstmotor->distFilas[i][0] = -POS_LINE_1;
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	0013      	movs	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	189b      	adds	r3, r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	18cb      	adds	r3, r1, r3
 8004ca2:	3314      	adds	r3, #20
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
		pstmotor->distFilas[i][1] = -POS_LINE_2;
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	0013      	movs	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	189b      	adds	r3, r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	18cb      	adds	r3, r1, r3
 8004cb6:	3318      	adds	r3, #24
 8004cb8:	4a41      	ldr	r2, [pc, #260]	; (8004dc0 <Iniciar_EstrucMotor+0x174>)
 8004cba:	601a      	str	r2, [r3, #0]
		pstmotor->distFilas[i][2] = -POS_LINE_3;
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	0013      	movs	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	189b      	adds	r3, r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	18cb      	adds	r3, r1, r3
 8004cca:	331c      	adds	r3, #28
 8004ccc:	4a3d      	ldr	r2, [pc, #244]	; (8004dc4 <Iniciar_EstrucMotor+0x178>)
 8004cce:	601a      	str	r2, [r3, #0]
		pstmotor->distFilas[i][3] = -POS_LINE_4;
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	0013      	movs	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	189b      	adds	r3, r3, r2
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	18cb      	adds	r3, r1, r3
 8004cde:	3320      	adds	r3, #32
 8004ce0:	4a39      	ldr	r2, [pc, #228]	; (8004dc8 <Iniciar_EstrucMotor+0x17c>)
 8004ce2:	601a      	str	r2, [r3, #0]
		pstmotor->distFilas[i][4] = -POS_LINE_5;
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	0013      	movs	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	189b      	adds	r3, r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	18cb      	adds	r3, r1, r3
 8004cf2:	3324      	adds	r3, #36	; 0x24
 8004cf4:	4a35      	ldr	r2, [pc, #212]	; (8004dcc <Iniciar_EstrucMotor+0x180>)
 8004cf6:	601a      	str	r2, [r3, #0]
		pstmotor->distFilas[i][5] = -POS_LINE_6;
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	0013      	movs	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	189b      	adds	r3, r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	18cb      	adds	r3, r1, r3
 8004d06:	3328      	adds	r3, #40	; 0x28
 8004d08:	4a31      	ldr	r2, [pc, #196]	; (8004dd0 <Iniciar_EstrucMotor+0x184>)
 8004d0a:	601a      	str	r2, [r3, #0]
		pstmotor->distFilas[i][6] = -POS_LINE_7;
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	0013      	movs	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	18cb      	adds	r3, r1, r3
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	4a2d      	ldr	r2, [pc, #180]	; (8004dd4 <Iniciar_EstrucMotor+0x188>)
 8004d20:	601a      	str	r2, [r3, #0]
		pstmotor->distFilas[i][7] = -POS_LINE_8;
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	0013      	movs	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	189b      	adds	r3, r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	18cb      	adds	r3, r1, r3
 8004d30:	3330      	adds	r3, #48	; 0x30
 8004d32:	4a29      	ldr	r2, [pc, #164]	; (8004dd8 <Iniciar_EstrucMotor+0x18c>)
 8004d34:	601a      	str	r2, [r3, #0]
	for(i = 0; i < pstmotor->ParrHab; i++)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	23cd      	movs	r3, #205	; 0xcd
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	5cd3      	ldrb	r3, [r2, r3]
 8004d44:	001a      	movs	r2, r3
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	dba3      	blt.n	8004c94 <Iniciar_EstrucMotor+0x48>

	}
	k=0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < pstmotor->ParrHab; i++)
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e022      	b.n	8004d9c <Iniciar_EstrucMotor+0x150>
	{
		for(j=0; j<CANT_FILAS; j++)
 8004d56:	2300      	movs	r3, #0
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	e019      	b.n	8004d90 <Iniciar_EstrucMotor+0x144>
		{
			pstmotor->recorrido[k] = pstmotor->distFilas[i][j];
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	0013      	movs	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	189b      	adds	r3, r3, r2
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	189b      	adds	r3, r3, r2
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	18cb      	adds	r3, r1, r3
 8004d72:	3304      	adds	r3, #4
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3368      	adds	r3, #104	; 0x68
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	18cb      	adds	r3, r1, r3
 8004d80:	3304      	adds	r3, #4
 8004d82:	601a      	str	r2, [r3, #0]
			k++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3301      	adds	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
		for(j=0; j<CANT_FILAS; j++)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b07      	cmp	r3, #7
 8004d94:	dde2      	ble.n	8004d5c <Iniciar_EstrucMotor+0x110>
	for(i = 0; i < pstmotor->ParrHab; i++)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	23cd      	movs	r3, #205	; 0xcd
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	5cd3      	ldrb	r3, [r2, r3]
 8004da4:	001a      	movs	r2, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	4293      	cmp	r3, r2
 8004daa:	dbd4      	blt.n	8004d56 <Iniciar_EstrucMotor+0x10a>
		}
	}
	pstmotor->MaxPosMotor = k;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	b2d9      	uxtb	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <Iniciar_EstrucMotor+0x190>)
 8004db4:	5499      	strb	r1, [r3, r2]
//	pstmotor->initDeviceParameters.stepMode = STEP_MODE_1_32;  				//Step mode via enum motorStepMode_t
//	pstmotor->initDeviceParameters.stopMode = HOLD_MODE;
//	pstmotor->initDeviceParameters.vrefPwmFreq = 100000;           		//REF frequency (Hz)
       				//Automatic HIZ STOP
	
	return 1;
 8004db6:	2301      	movs	r3, #1
}
 8004db8:	0018      	movs	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b006      	add	sp, #24
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	0000ca5d 	.word	0x0000ca5d
 8004dc4:	000194ba 	.word	0x000194ba
 8004dc8:	00025f17 	.word	0x00025f17
 8004dcc:	00032974 	.word	0x00032974
 8004dd0:	0003f3d1 	.word	0x0003f3d1
 8004dd4:	0004be2e 	.word	0x0004be2e
 8004dd8:	0005888b 	.word	0x0005888b
 8004ddc:	00000335 	.word	0x00000335

08004de0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b08b      	sub	sp, #44	; 0x2c
 8004de4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004de6:	2414      	movs	r4, #20
 8004de8:	193b      	adds	r3, r7, r4
 8004dea:	0018      	movs	r0, r3
 8004dec:	2314      	movs	r3, #20
 8004dee:	001a      	movs	r2, r3
 8004df0:	2100      	movs	r1, #0
 8004df2:	f00e fbec 	bl	80135ce <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004df6:	4b96      	ldr	r3, [pc, #600]	; (8005050 <MX_GPIO_Init+0x270>)
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	4b95      	ldr	r3, [pc, #596]	; (8005050 <MX_GPIO_Init+0x270>)
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e02:	4b93      	ldr	r3, [pc, #588]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	2204      	movs	r2, #4
 8004e08:	4013      	ands	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e0e:	4b90      	ldr	r3, [pc, #576]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e12:	4b8f      	ldr	r3, [pc, #572]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e14:	2180      	movs	r1, #128	; 0x80
 8004e16:	430a      	orrs	r2, r1
 8004e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e1a:	4b8d      	ldr	r3, [pc, #564]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	2280      	movs	r2, #128	; 0x80
 8004e20:	4013      	ands	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e26:	4b8a      	ldr	r3, [pc, #552]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2a:	4b89      	ldr	r3, [pc, #548]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e32:	4b87      	ldr	r3, [pc, #540]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	2201      	movs	r2, #1
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e3e:	4b84      	ldr	r3, [pc, #528]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e42:	4b83      	ldr	r3, [pc, #524]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e44:	2102      	movs	r1, #2
 8004e46:	430a      	orrs	r2, r1
 8004e48:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e4a:	4b81      	ldr	r3, [pc, #516]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	2202      	movs	r2, #2
 8004e50:	4013      	ands	r3, r2
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e56:	4b7e      	ldr	r3, [pc, #504]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5a:	4b7d      	ldr	r3, [pc, #500]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e5c:	2108      	movs	r1, #8
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e62:	4b7b      	ldr	r3, [pc, #492]	; (8005050 <MX_GPIO_Init+0x270>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	2208      	movs	r2, #8
 8004e68:	4013      	ands	r3, r2
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53_XSHUT_1_Pin|VL53_XSHUT_6_Pin|GPIO_EXP_1_Pin|GPIO_EXP_2_Pin, GPIO_PIN_RESET);
 8004e6e:	4979      	ldr	r1, [pc, #484]	; (8005054 <MX_GPIO_Init+0x274>)
 8004e70:	4b79      	ldr	r3, [pc, #484]	; (8005058 <MX_GPIO_Init+0x278>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	0018      	movs	r0, r3
 8004e76:	f00b f924 	bl	80100c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_RES_6_GPIO_Port, DRV_RES_6_Pin, GPIO_PIN_SET);
 8004e7a:	4b78      	ldr	r3, [pc, #480]	; (800505c <MX_GPIO_Init+0x27c>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2102      	movs	r1, #2
 8004e80:	0018      	movs	r0, r3
 8004e82:	f00b f91e 	bl	80100c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV_EN_6_Pin|DRV_RES_4_Pin|VL53_XSHUT_2_Pin, GPIO_PIN_SET);
 8004e86:	4b74      	ldr	r3, [pc, #464]	; (8005058 <MX_GPIO_Init+0x278>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	2161      	movs	r1, #97	; 0x61
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f00b f918 	bl	80100c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRV_RES_5_Pin|DRV_EN_5_Pin|DRV_RES_2_Pin|DRV_EN_2_Pin, GPIO_PIN_SET);
 8004e92:	4973      	ldr	r1, [pc, #460]	; (8005060 <MX_GPIO_Init+0x280>)
 8004e94:	23a0      	movs	r3, #160	; 0xa0
 8004e96:	05db      	lsls	r3, r3, #23
 8004e98:	2201      	movs	r2, #1
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f00b f911 	bl	80100c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VL53_XSHUT_5_Pin|DRV_MOD4_Pin, GPIO_PIN_RESET);
 8004ea0:	2390      	movs	r3, #144	; 0x90
 8004ea2:	0059      	lsls	r1, r3, #1
 8004ea4:	23a0      	movs	r3, #160	; 0xa0
 8004ea6:	05db      	lsls	r3, r3, #23
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f00b f909 	bl	80100c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRV_EN_4_Pin|DRV_RES_3_Pin|DRV_EN_3_Pin|DRV_RES_1_Pin
 8004eb0:	496c      	ldr	r1, [pc, #432]	; (8005064 <MX_GPIO_Init+0x284>)
 8004eb2:	4b6d      	ldr	r3, [pc, #436]	; (8005068 <MX_GPIO_Init+0x288>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f00b f903 	bl	80100c2 <HAL_GPIO_WritePin>
                          |DRV_EN_1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VL53_XSHUT_4_Pin|VL53_XSHUT_3_Pin|DRV_MOD1_Pin|DRV_MOD2_Pin, GPIO_PIN_RESET);
 8004ebc:	496b      	ldr	r1, [pc, #428]	; (800506c <MX_GPIO_Init+0x28c>)
 8004ebe:	4b6a      	ldr	r3, [pc, #424]	; (8005068 <MX_GPIO_Init+0x288>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f00b f8fd 	bl	80100c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = VL53_XSHUT_1_Pin|VL53_XSHUT_6_Pin|VL53_XSHUT_2_Pin|GPIO_EXP_1_Pin
 8004ec8:	193b      	adds	r3, r7, r4
 8004eca:	4a69      	ldr	r2, [pc, #420]	; (8005070 <MX_GPIO_Init+0x290>)
 8004ecc:	601a      	str	r2, [r3, #0]
                          |GPIO_EXP_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ece:	193b      	adds	r3, r7, r4
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed4:	193b      	adds	r3, r7, r4
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eda:	193b      	adds	r3, r7, r4
 8004edc:	2200      	movs	r2, #0
 8004ede:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ee0:	193b      	adds	r3, r7, r4
 8004ee2:	4a5d      	ldr	r2, [pc, #372]	; (8005058 <MX_GPIO_Init+0x278>)
 8004ee4:	0019      	movs	r1, r3
 8004ee6:	0010      	movs	r0, r2
 8004ee8:	f00a fe6e 	bl	800fbc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DRV_FCA_6_Pin|DRV_FCA_5_Pin|DRV_FCB_4_Pin|DRV_FCB_2_Pin;
 8004eec:	193b      	adds	r3, r7, r4
 8004eee:	4a61      	ldr	r2, [pc, #388]	; (8005074 <MX_GPIO_Init+0x294>)
 8004ef0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ef2:	193b      	adds	r3, r7, r4
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef8:	193b      	adds	r3, r7, r4
 8004efa:	2200      	movs	r2, #0
 8004efc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	4a55      	ldr	r2, [pc, #340]	; (8005058 <MX_GPIO_Init+0x278>)
 8004f02:	0019      	movs	r1, r3
 8004f04:	0010      	movs	r0, r2
 8004f06:	f00a fe5f 	bl	800fbc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_FCB_6_Pin;
 8004f0a:	193b      	adds	r3, r7, r4
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f10:	193b      	adds	r3, r7, r4
 8004f12:	2200      	movs	r2, #0
 8004f14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f16:	193b      	adds	r3, r7, r4
 8004f18:	2200      	movs	r2, #0
 8004f1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DRV_FCB_6_GPIO_Port, &GPIO_InitStruct);
 8004f1c:	193b      	adds	r3, r7, r4
 8004f1e:	4a4f      	ldr	r2, [pc, #316]	; (800505c <MX_GPIO_Init+0x27c>)
 8004f20:	0019      	movs	r1, r3
 8004f22:	0010      	movs	r0, r2
 8004f24:	f00a fe50 	bl	800fbc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_RES_6_Pin;
 8004f28:	193b      	adds	r3, r7, r4
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f2e:	193b      	adds	r3, r7, r4
 8004f30:	2201      	movs	r2, #1
 8004f32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f34:	193b      	adds	r3, r7, r4
 8004f36:	2200      	movs	r2, #0
 8004f38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004f3a:	193b      	adds	r3, r7, r4
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DRV_RES_6_GPIO_Port, &GPIO_InitStruct);
 8004f40:	193b      	adds	r3, r7, r4
 8004f42:	4a46      	ldr	r2, [pc, #280]	; (800505c <MX_GPIO_Init+0x27c>)
 8004f44:	0019      	movs	r1, r3
 8004f46:	0010      	movs	r0, r2
 8004f48:	f00a fe3e 	bl	800fbc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DRV_EN_6_Pin|DRV_RES_4_Pin;
 8004f4c:	193b      	adds	r3, r7, r4
 8004f4e:	2221      	movs	r2, #33	; 0x21
 8004f50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f52:	193b      	adds	r3, r7, r4
 8004f54:	2201      	movs	r2, #1
 8004f56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f58:	193b      	adds	r3, r7, r4
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004f5e:	193b      	adds	r3, r7, r4
 8004f60:	2201      	movs	r2, #1
 8004f62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f64:	193b      	adds	r3, r7, r4
 8004f66:	4a3c      	ldr	r2, [pc, #240]	; (8005058 <MX_GPIO_Init+0x278>)
 8004f68:	0019      	movs	r1, r3
 8004f6a:	0010      	movs	r0, r2
 8004f6c:	f00a fe2c 	bl	800fbc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = DRV_FCB_5_Pin|DRV_FCA_4_Pin|DRV_FCA_2_Pin|DRV_FCB_1_Pin
 8004f70:	193b      	adds	r3, r7, r4
 8004f72:	4a41      	ldr	r2, [pc, #260]	; (8005078 <MX_GPIO_Init+0x298>)
 8004f74:	601a      	str	r2, [r3, #0]
                          |DRV_FCA_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f76:	193b      	adds	r3, r7, r4
 8004f78:	2200      	movs	r2, #0
 8004f7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	193b      	adds	r3, r7, r4
 8004f7e:	2200      	movs	r2, #0
 8004f80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f82:	193a      	adds	r2, r7, r4
 8004f84:	23a0      	movs	r3, #160	; 0xa0
 8004f86:	05db      	lsls	r3, r3, #23
 8004f88:	0011      	movs	r1, r2
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f00a fe1c 	bl	800fbc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = DRV_RES_5_Pin|DRV_EN_5_Pin|DRV_MOD4_Pin|DRV_RES_2_Pin
 8004f90:	193b      	adds	r3, r7, r4
 8004f92:	4a3a      	ldr	r2, [pc, #232]	; (800507c <MX_GPIO_Init+0x29c>)
 8004f94:	601a      	str	r2, [r3, #0]
                          |DRV_EN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f96:	193b      	adds	r3, r7, r4
 8004f98:	2201      	movs	r2, #1
 8004f9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9c:	193b      	adds	r3, r7, r4
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004fa2:	193b      	adds	r3, r7, r4
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa8:	193a      	adds	r2, r7, r4
 8004faa:	23a0      	movs	r3, #160	; 0xa0
 8004fac:	05db      	lsls	r3, r3, #23
 8004fae:	0011      	movs	r1, r2
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f00a fe09 	bl	800fbc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VL53_XSHUT_5_Pin;
 8004fb6:	193b      	adds	r3, r7, r4
 8004fb8:	2220      	movs	r2, #32
 8004fba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fbc:	193b      	adds	r3, r7, r4
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc2:	193b      	adds	r3, r7, r4
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc8:	193b      	adds	r3, r7, r4
 8004fca:	2200      	movs	r2, #0
 8004fcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(VL53_XSHUT_5_GPIO_Port, &GPIO_InitStruct);
 8004fce:	193a      	adds	r2, r7, r4
 8004fd0:	23a0      	movs	r3, #160	; 0xa0
 8004fd2:	05db      	lsls	r3, r3, #23
 8004fd4:	0011      	movs	r1, r2
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f00a fdf6 	bl	800fbc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRV_EN_4_Pin|DRV_RES_3_Pin|DRV_EN_3_Pin|DRV_MOD1_Pin
 8004fdc:	193b      	adds	r3, r7, r4
 8004fde:	4a28      	ldr	r2, [pc, #160]	; (8005080 <MX_GPIO_Init+0x2a0>)
 8004fe0:	601a      	str	r2, [r3, #0]
                          |DRV_RES_1_Pin|DRV_MOD2_Pin|DRV_EN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fe2:	193b      	adds	r3, r7, r4
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe8:	193b      	adds	r3, r7, r4
 8004fea:	2200      	movs	r2, #0
 8004fec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004fee:	193b      	adds	r3, r7, r4
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ff4:	193b      	adds	r3, r7, r4
 8004ff6:	4a1c      	ldr	r2, [pc, #112]	; (8005068 <MX_GPIO_Init+0x288>)
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	0010      	movs	r0, r2
 8004ffc:	f00a fde4 	bl	800fbc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = VL53_XSHUT_4_Pin|VL53_XSHUT_3_Pin;
 8005000:	193b      	adds	r3, r7, r4
 8005002:	4a20      	ldr	r2, [pc, #128]	; (8005084 <MX_GPIO_Init+0x2a4>)
 8005004:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005006:	193b      	adds	r3, r7, r4
 8005008:	2201      	movs	r2, #1
 800500a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	193b      	adds	r3, r7, r4
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005012:	193b      	adds	r3, r7, r4
 8005014:	2200      	movs	r2, #0
 8005016:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005018:	193b      	adds	r3, r7, r4
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <MX_GPIO_Init+0x288>)
 800501c:	0019      	movs	r1, r3
 800501e:	0010      	movs	r0, r2
 8005020:	f00a fdd2 	bl	800fbc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DRV_FCB_3_Pin|DRV_FCA_3_Pin;
 8005024:	0021      	movs	r1, r4
 8005026:	187b      	adds	r3, r7, r1
 8005028:	22c0      	movs	r2, #192	; 0xc0
 800502a:	0212      	lsls	r2, r2, #8
 800502c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800502e:	187b      	adds	r3, r7, r1
 8005030:	2200      	movs	r2, #0
 8005032:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005034:	187b      	adds	r3, r7, r1
 8005036:	2200      	movs	r2, #0
 8005038:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503a:	187b      	adds	r3, r7, r1
 800503c:	4a0a      	ldr	r2, [pc, #40]	; (8005068 <MX_GPIO_Init+0x288>)
 800503e:	0019      	movs	r1, r3
 8005040:	0010      	movs	r0, r2
 8005042:	f00a fdc1 	bl	800fbc8 <HAL_GPIO_Init>

}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	46bd      	mov	sp, r7
 800504a:	b00b      	add	sp, #44	; 0x2c
 800504c:	bd90      	pop	{r4, r7, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	40021000 	.word	0x40021000
 8005054:	00004c04 	.word	0x00004c04
 8005058:	50000800 	.word	0x50000800
 800505c:	50001c00 	.word	0x50001c00
 8005060:	00000612 	.word	0x00000612
 8005064:	000030a1 	.word	0x000030a1
 8005068:	50000400 	.word	0x50000400
 800506c:	00000452 	.word	0x00000452
 8005070:	00004c44 	.word	0x00004c44
 8005074:	00008218 	.word	0x00008218
 8005078:	00009881 	.word	0x00009881
 800507c:	00000712 	.word	0x00000712
 8005080:	000030f1 	.word	0x000030f1
 8005084:	00000402 	.word	0x00000402

08005088 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800508c:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <MX_I2C1_Init+0x74>)
 800508e:	4a1c      	ldr	r2, [pc, #112]	; (8005100 <MX_I2C1_Init+0x78>)
 8005090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8005092:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <MX_I2C1_Init+0x74>)
 8005094:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <MX_I2C1_Init+0x7c>)
 8005096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005098:	4b18      	ldr	r3, [pc, #96]	; (80050fc <MX_I2C1_Init+0x74>)
 800509a:	2200      	movs	r2, #0
 800509c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800509e:	4b17      	ldr	r3, [pc, #92]	; (80050fc <MX_I2C1_Init+0x74>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050a4:	4b15      	ldr	r3, [pc, #84]	; (80050fc <MX_I2C1_Init+0x74>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80050aa:	4b14      	ldr	r3, [pc, #80]	; (80050fc <MX_I2C1_Init+0x74>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80050b0:	4b12      	ldr	r3, [pc, #72]	; (80050fc <MX_I2C1_Init+0x74>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050b6:	4b11      	ldr	r3, [pc, #68]	; (80050fc <MX_I2C1_Init+0x74>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80050bc:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <MX_I2C1_Init+0x74>)
 80050be:	2200      	movs	r2, #0
 80050c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <MX_I2C1_Init+0x74>)
 80050c4:	0018      	movs	r0, r3
 80050c6:	f00b f819 	bl	80100fc <HAL_I2C_Init>
 80050ca:	1e03      	subs	r3, r0, #0
 80050cc:	d001      	beq.n	80050d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80050ce:	f001 f833 	bl	8006138 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <MX_I2C1_Init+0x74>)
 80050d4:	2100      	movs	r1, #0
 80050d6:	0018      	movs	r0, r3
 80050d8:	f00b fc9a 	bl	8010a10 <HAL_I2CEx_ConfigAnalogFilter>
 80050dc:	1e03      	subs	r3, r0, #0
 80050de:	d001      	beq.n	80050e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80050e0:	f001 f82a 	bl	8006138 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <MX_I2C1_Init+0x74>)
 80050e6:	2100      	movs	r1, #0
 80050e8:	0018      	movs	r0, r3
 80050ea:	f00b fcdd 	bl	8010aa8 <HAL_I2CEx_ConfigDigitalFilter>
 80050ee:	1e03      	subs	r3, r0, #0
 80050f0:	d001      	beq.n	80050f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80050f2:	f001 f821 	bl	8006138 <Error_Handler>
  }

}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	200004e4 	.word	0x200004e4
 8005100:	40005400 	.word	0x40005400
 8005104:	00707cbb 	.word	0x00707cbb

08005108 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b089      	sub	sp, #36	; 0x24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005110:	240c      	movs	r4, #12
 8005112:	193b      	adds	r3, r7, r4
 8005114:	0018      	movs	r0, r3
 8005116:	2314      	movs	r3, #20
 8005118:	001a      	movs	r2, r3
 800511a:	2100      	movs	r1, #0
 800511c:	f00e fa57 	bl	80135ce <memset>
  if(i2cHandle->Instance==I2C1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a18      	ldr	r2, [pc, #96]	; (8005188 <HAL_I2C_MspInit+0x80>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d129      	bne.n	800517e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800512a:	4b18      	ldr	r3, [pc, #96]	; (800518c <HAL_I2C_MspInit+0x84>)
 800512c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512e:	4b17      	ldr	r3, [pc, #92]	; (800518c <HAL_I2C_MspInit+0x84>)
 8005130:	2102      	movs	r1, #2
 8005132:	430a      	orrs	r2, r1
 8005134:	62da      	str	r2, [r3, #44]	; 0x2c
 8005136:	4b15      	ldr	r3, [pc, #84]	; (800518c <HAL_I2C_MspInit+0x84>)
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	2202      	movs	r2, #2
 800513c:	4013      	ands	r3, r2
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005142:	193b      	adds	r3, r7, r4
 8005144:	22c0      	movs	r2, #192	; 0xc0
 8005146:	0092      	lsls	r2, r2, #2
 8005148:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800514a:	0021      	movs	r1, r4
 800514c:	187b      	adds	r3, r7, r1
 800514e:	2212      	movs	r2, #18
 8005150:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005152:	187b      	adds	r3, r7, r1
 8005154:	2201      	movs	r2, #1
 8005156:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005158:	187b      	adds	r3, r7, r1
 800515a:	2203      	movs	r2, #3
 800515c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800515e:	187b      	adds	r3, r7, r1
 8005160:	2204      	movs	r2, #4
 8005162:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005164:	187b      	adds	r3, r7, r1
 8005166:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <HAL_I2C_MspInit+0x88>)
 8005168:	0019      	movs	r1, r3
 800516a:	0010      	movs	r0, r2
 800516c:	f00a fd2c 	bl	800fbc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <HAL_I2C_MspInit+0x84>)
 8005172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <HAL_I2C_MspInit+0x84>)
 8005176:	2180      	movs	r1, #128	; 0x80
 8005178:	0389      	lsls	r1, r1, #14
 800517a:	430a      	orrs	r2, r1
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	46bd      	mov	sp, r7
 8005182:	b009      	add	sp, #36	; 0x24
 8005184:	bd90      	pop	{r4, r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	40005400 	.word	0x40005400
 800518c:	40021000 	.word	0x40021000
 8005190:	50000400 	.word	0x50000400

08005194 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//----------Interrupt USART----------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
//USART CEIT-------------------
	if (huart->Instance == USART5) {
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a4e      	ldr	r2, [pc, #312]	; (80052dc <HAL_UART_RxCpltCallback+0x148>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d000      	beq.n	80051a8 <HAL_UART_RxCpltCallback+0x14>
 80051a6:	e095      	b.n	80052d4 <HAL_UART_RxCpltCallback+0x140>
		HAL_UART_Receive_IT(&huart5, &Char_USART5, 1);
 80051a8:	494d      	ldr	r1, [pc, #308]	; (80052e0 <HAL_UART_RxCpltCallback+0x14c>)
 80051aa:	4b4e      	ldr	r3, [pc, #312]	; (80052e4 <HAL_UART_RxCpltCallback+0x150>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	0018      	movs	r0, r3
 80051b0:	f00d fa64 	bl	801267c <HAL_UART_Receive_IT>
		if(garb){
 80051b4:	4b4c      	ldr	r3, [pc, #304]	; (80052e8 <HAL_UART_RxCpltCallback+0x154>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d013      	beq.n	80051e4 <HAL_UART_RxCpltCallback+0x50>
			if(Char_USART5 == 1){
 80051bc:	4b48      	ldr	r3, [pc, #288]	; (80052e0 <HAL_UART_RxCpltCallback+0x14c>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d000      	beq.n	80051c6 <HAL_UART_RxCpltCallback+0x32>
 80051c4:	e086      	b.n	80052d4 <HAL_UART_RxCpltCallback+0x140>
				garb = 0;
 80051c6:	4b48      	ldr	r3, [pc, #288]	; (80052e8 <HAL_UART_RxCpltCallback+0x154>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]
				stcomceit.Rx_Buffer[0] = Char_USART5;
 80051cc:	4b44      	ldr	r3, [pc, #272]	; (80052e0 <HAL_UART_RxCpltCallback+0x14c>)
 80051ce:	7819      	ldrb	r1, [r3, #0]
 80051d0:	4b46      	ldr	r3, [pc, #280]	; (80052ec <HAL_UART_RxCpltCallback+0x158>)
 80051d2:	2271      	movs	r2, #113	; 0x71
 80051d4:	5499      	strb	r1, [r3, r2]
				Cont_USART5++;
 80051d6:	4b46      	ldr	r3, [pc, #280]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	3301      	adds	r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4b44      	ldr	r3, [pc, #272]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 80051e0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, stcomceit.Rx_Data, sizeof(stcomceit.Rx_Data), 1000);
			}
		}
	}

}
 80051e2:	e077      	b.n	80052d4 <HAL_UART_RxCpltCallback+0x140>
			if (Char_USART5 != 250) {
 80051e4:	4b3e      	ldr	r3, [pc, #248]	; (80052e0 <HAL_UART_RxCpltCallback+0x14c>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2bfa      	cmp	r3, #250	; 0xfa
 80051ea:	d04d      	beq.n	8005288 <HAL_UART_RxCpltCallback+0xf4>
				if (Cont_USART5 < 5){
 80051ec:	4b40      	ldr	r3, [pc, #256]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d811      	bhi.n	8005218 <HAL_UART_RxCpltCallback+0x84>
					stcomceit.Rx_Buffer[Cont_USART5] = Char_USART5;
 80051f4:	4b3e      	ldr	r3, [pc, #248]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	0018      	movs	r0, r3
 80051fa:	4b39      	ldr	r3, [pc, #228]	; (80052e0 <HAL_UART_RxCpltCallback+0x14c>)
 80051fc:	7819      	ldrb	r1, [r3, #0]
 80051fe:	4b3b      	ldr	r3, [pc, #236]	; (80052ec <HAL_UART_RxCpltCallback+0x158>)
 8005200:	2271      	movs	r2, #113	; 0x71
 8005202:	181b      	adds	r3, r3, r0
 8005204:	189b      	adds	r3, r3, r2
 8005206:	1c0a      	adds	r2, r1, #0
 8005208:	701a      	strb	r2, [r3, #0]
					Cont_USART5++;
 800520a:	4b39      	ldr	r3, [pc, #228]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	3301      	adds	r3, #1
 8005210:	b2da      	uxtb	r2, r3
 8005212:	4b37      	ldr	r3, [pc, #220]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 8005214:	701a      	strb	r2, [r3, #0]
}
 8005216:	e05d      	b.n	80052d4 <HAL_UART_RxCpltCallback+0x140>
				}else if (stcomceit.Rx_Buffer[CMD] == GET_DATA) {
 8005218:	4b34      	ldr	r3, [pc, #208]	; (80052ec <HAL_UART_RxCpltCallback+0x158>)
 800521a:	2274      	movs	r2, #116	; 0x74
 800521c:	5c9b      	ldrb	r3, [r3, r2]
 800521e:	2b60      	cmp	r3, #96	; 0x60
 8005220:	d11b      	bne.n	800525a <HAL_UART_RxCpltCallback+0xc6>
					stcomceit.Rx_Buffer[Cont_USART5] = Char_USART5;
 8005222:	4b33      	ldr	r3, [pc, #204]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	0018      	movs	r0, r3
 8005228:	4b2d      	ldr	r3, [pc, #180]	; (80052e0 <HAL_UART_RxCpltCallback+0x14c>)
 800522a:	7819      	ldrb	r1, [r3, #0]
 800522c:	4b2f      	ldr	r3, [pc, #188]	; (80052ec <HAL_UART_RxCpltCallback+0x158>)
 800522e:	2271      	movs	r2, #113	; 0x71
 8005230:	181b      	adds	r3, r3, r0
 8005232:	189b      	adds	r3, r3, r2
 8005234:	1c0a      	adds	r2, r1, #0
 8005236:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, stcomceit.Rx_Buffer, sizeof(stcomceit.Rx_Buffer), 1000);
 8005238:	23fa      	movs	r3, #250	; 0xfa
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	492d      	ldr	r1, [pc, #180]	; (80052f4 <HAL_UART_RxCpltCallback+0x160>)
 800523e:	482e      	ldr	r0, [pc, #184]	; (80052f8 <HAL_UART_RxCpltCallback+0x164>)
 8005240:	2206      	movs	r2, #6
 8005242:	f00d f973 	bl	801252c <HAL_UART_Transmit>
					Cont_USART5 = 0;
 8005246:	4b2a      	ldr	r3, [pc, #168]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
					stcomceit.xRxDoneFlag = true;
 800524c:	4b27      	ldr	r3, [pc, #156]	; (80052ec <HAL_UART_RxCpltCallback+0x158>)
 800524e:	2201      	movs	r2, #1
 8005250:	711a      	strb	r2, [r3, #4]
					garb = 1;
 8005252:	4b25      	ldr	r3, [pc, #148]	; (80052e8 <HAL_UART_RxCpltCallback+0x154>)
 8005254:	2201      	movs	r2, #1
 8005256:	701a      	strb	r2, [r3, #0]
}
 8005258:	e03c      	b.n	80052d4 <HAL_UART_RxCpltCallback+0x140>
				}else if (stcomceit.Rx_Buffer[CMD] == CONFIG){
 800525a:	4b24      	ldr	r3, [pc, #144]	; (80052ec <HAL_UART_RxCpltCallback+0x158>)
 800525c:	2274      	movs	r2, #116	; 0x74
 800525e:	5c9b      	ldrb	r3, [r3, r2]
 8005260:	2b61      	cmp	r3, #97	; 0x61
 8005262:	d137      	bne.n	80052d4 <HAL_UART_RxCpltCallback+0x140>
					stcomceit.Rx_Data[Cont_USART5-5] = Char_USART5;
 8005264:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	3b05      	subs	r3, #5
 800526a:	4a1d      	ldr	r2, [pc, #116]	; (80052e0 <HAL_UART_RxCpltCallback+0x14c>)
 800526c:	7810      	ldrb	r0, [r2, #0]
 800526e:	4a1f      	ldr	r2, [pc, #124]	; (80052ec <HAL_UART_RxCpltCallback+0x158>)
 8005270:	2177      	movs	r1, #119	; 0x77
 8005272:	18d3      	adds	r3, r2, r3
 8005274:	185b      	adds	r3, r3, r1
 8005276:	1c02      	adds	r2, r0, #0
 8005278:	701a      	strb	r2, [r3, #0]
					Cont_USART5++;
 800527a:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	3301      	adds	r3, #1
 8005280:	b2da      	uxtb	r2, r3
 8005282:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 8005284:	701a      	strb	r2, [r3, #0]
}
 8005286:	e025      	b.n	80052d4 <HAL_UART_RxCpltCallback+0x140>
			else if (Char_USART5 == 250) {
 8005288:	4b15      	ldr	r3, [pc, #84]	; (80052e0 <HAL_UART_RxCpltCallback+0x14c>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2bfa      	cmp	r3, #250	; 0xfa
 800528e:	d121      	bne.n	80052d4 <HAL_UART_RxCpltCallback+0x140>
				stcomceit.Rx_Data[Cont_USART5-5] = Char_USART5;
 8005290:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	3b05      	subs	r3, #5
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <HAL_UART_RxCpltCallback+0x14c>)
 8005298:	7810      	ldrb	r0, [r2, #0]
 800529a:	4a14      	ldr	r2, [pc, #80]	; (80052ec <HAL_UART_RxCpltCallback+0x158>)
 800529c:	2177      	movs	r1, #119	; 0x77
 800529e:	18d3      	adds	r3, r2, r3
 80052a0:	185b      	adds	r3, r3, r1
 80052a2:	1c02      	adds	r2, r0, #0
 80052a4:	701a      	strb	r2, [r3, #0]
				Cont_USART5 = 0;
 80052a6:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <HAL_UART_RxCpltCallback+0x15c>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
				stcomceit.xRxDoneFlag = true;
 80052ac:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <HAL_UART_RxCpltCallback+0x158>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	711a      	strb	r2, [r3, #4]
				garb = 1;
 80052b2:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <HAL_UART_RxCpltCallback+0x154>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, stcomceit.Rx_Buffer, sizeof(stcomceit.Rx_Buffer), 1000);
 80052b8:	23fa      	movs	r3, #250	; 0xfa
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	490d      	ldr	r1, [pc, #52]	; (80052f4 <HAL_UART_RxCpltCallback+0x160>)
 80052be:	480e      	ldr	r0, [pc, #56]	; (80052f8 <HAL_UART_RxCpltCallback+0x164>)
 80052c0:	2206      	movs	r2, #6
 80052c2:	f00d f933 	bl	801252c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, stcomceit.Rx_Data, sizeof(stcomceit.Rx_Data), 1000);
 80052c6:	23fa      	movs	r3, #250	; 0xfa
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	490c      	ldr	r1, [pc, #48]	; (80052fc <HAL_UART_RxCpltCallback+0x168>)
 80052cc:	480a      	ldr	r0, [pc, #40]	; (80052f8 <HAL_UART_RxCpltCallback+0x164>)
 80052ce:	22cb      	movs	r2, #203	; 0xcb
 80052d0:	f00d f92c 	bl	801252c <HAL_UART_Transmit>
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b002      	add	sp, #8
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40005000 	.word	0x40005000
 80052e0:	200030e4 	.word	0x200030e4
 80052e4:	20003564 	.word	0x20003564
 80052e8:	20000000 	.word	0x20000000
 80052ec:	200030e8 	.word	0x200030e8
 80052f0:	20000456 	.word	0x20000456
 80052f4:	20003159 	.word	0x20003159
 80052f8:	200035e4 	.word	0x200035e4
 80052fc:	2000315f 	.word	0x2000315f

08005300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t sensorOK, respuesta, data=0,i,j;
 8005306:	1dbb      	adds	r3, r7, #6
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800530c:	f00a fa56 	bl	800f7bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005310:	f000 f8a6 	bl	8005460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005314:	f7ff fd64 	bl	8004de0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005318:	f7ff feb6 	bl	8005088 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800531c:	f001 f8f6 	bl	800650c <MX_USART2_UART_Init>
  MX_USART5_UART_Init();
 8005320:	f001 f924 	bl	800656c <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart5, &Char_USART5, 1);
 8005324:	4944      	ldr	r1, [pc, #272]	; (8005438 <main+0x138>)
 8005326:	4b45      	ldr	r3, [pc, #276]	; (800543c <main+0x13c>)
 8005328:	2201      	movs	r2, #1
 800532a:	0018      	movs	r0, r3
 800532c:	f00d f9a6 	bl	801267c <HAL_UART_Receive_IT>
  Iniciar_EstrucCaptura(&stcaptura);
 8005330:	4b43      	ldr	r3, [pc, #268]	; (8005440 <main+0x140>)
 8005332:	0018      	movs	r0, r3
 8005334:	f7ff fb70 	bl	8004a18 <Iniciar_EstrucCaptura>
  Iniciar_EstrucComCEIT(&stcomceit);
 8005338:	4b42      	ldr	r3, [pc, #264]	; (8005444 <main+0x144>)
 800533a:	0018      	movs	r0, r3
 800533c:	f7ff fbc7 	bl	8004ace <Iniciar_EstrucComCEIT>
  Iniciar_EstrucDistancia(&stdistancia);
 8005340:	4b41      	ldr	r3, [pc, #260]	; (8005448 <main+0x148>)
 8005342:	0018      	movs	r0, r3
 8005344:	f7ff fc14 	bl	8004b70 <Iniciar_EstrucDistancia>
  Iniciar_EstrucMotor(&stmotor);
 8005348:	4b40      	ldr	r3, [pc, #256]	; (800544c <main+0x14c>)
 800534a:	0018      	movs	r0, r3
 800534c:	f7ff fc7e 	bl	8004c4c <Iniciar_EstrucMotor>
  for(i=0; i<RX_DATA_SIZE;i++)
 8005350:	1dfb      	adds	r3, r7, #7
 8005352:	2200      	movs	r2, #0
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	e010      	b.n	800537a <main+0x7a>
  {
	  stcomceit.Rx_Data[i] = DataRX[i];
 8005358:	1dfb      	adds	r3, r7, #7
 800535a:	781a      	ldrb	r2, [r3, #0]
 800535c:	1dfb      	adds	r3, r7, #7
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	493b      	ldr	r1, [pc, #236]	; (8005450 <main+0x150>)
 8005362:	5c88      	ldrb	r0, [r1, r2]
 8005364:	4a37      	ldr	r2, [pc, #220]	; (8005444 <main+0x144>)
 8005366:	2177      	movs	r1, #119	; 0x77
 8005368:	18d3      	adds	r3, r2, r3
 800536a:	185b      	adds	r3, r3, r1
 800536c:	1c02      	adds	r2, r0, #0
 800536e:	701a      	strb	r2, [r3, #0]
  for(i=0; i<RX_DATA_SIZE;i++)
 8005370:	1dfb      	adds	r3, r7, #7
 8005372:	781a      	ldrb	r2, [r3, #0]
 8005374:	1dfb      	adds	r3, r7, #7
 8005376:	3201      	adds	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	1dfb      	adds	r3, r7, #7
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2bca      	cmp	r3, #202	; 0xca
 8005380:	d9ea      	bls.n	8005358 <main+0x58>
  }
  ConfigParrillas(&stcaptura, &stcomceit, &stmotor, &stdistancia);
 8005382:	4b31      	ldr	r3, [pc, #196]	; (8005448 <main+0x148>)
 8005384:	4a31      	ldr	r2, [pc, #196]	; (800544c <main+0x14c>)
 8005386:	492f      	ldr	r1, [pc, #188]	; (8005444 <main+0x144>)
 8005388:	482d      	ldr	r0, [pc, #180]	; (8005440 <main+0x140>)
 800538a:	f7fe f839 	bl	8003400 <ConfigParrillas>
  Ordenar(&stmotor,&stdistancia);
 800538e:	4a2e      	ldr	r2, [pc, #184]	; (8005448 <main+0x148>)
 8005390:	4b2e      	ldr	r3, [pc, #184]	; (800544c <main+0x14c>)
 8005392:	0011      	movs	r1, r2
 8005394:	0018      	movs	r0, r3
 8005396:	f7fe f9ab 	bl	80036f0 <Ordenar>
  IniciarSensores(&stdistancia);
 800539a:	4b2b      	ldr	r3, [pc, #172]	; (8005448 <main+0x148>)
 800539c:	0018      	movs	r0, r3
 800539e:	f7ff f837 	bl	8004410 <IniciarSensores>
  MyMotorInit();
 80053a2:	f000 fa7d 	bl	80058a0 <MyMotorInit>

//  calib_motor5();
  calib_motor();
 80053a6:	f000 fc75 	bl	8005c94 <calib_motor>
  calib_motor2();
 80053aa:	f000 fce5 	bl	8005d78 <calib_motor2>
  calib_motor4();
 80053ae:	f000 fdc5 	bl	8005f3c <calib_motor4>
  calib_motor5();
 80053b2:	f000 fe2d 	bl	8006010 <calib_motor5>
  calib_motor3();
 80053b6:	f000 fd51 	bl	8005e5c <calib_motor3>

//  calib_motor6();
  EnableMotors(7);
 80053ba:	2007      	movs	r0, #7
 80053bc:	f000 faac 	bl	8005918 <EnableMotors>
  HAL_UART_Transmit(&huart5, Data_CALIB_OK, 8 , 200);
 80053c0:	4924      	ldr	r1, [pc, #144]	; (8005454 <main+0x154>)
 80053c2:	481e      	ldr	r0, [pc, #120]	; (800543c <main+0x13c>)
 80053c4:	23c8      	movs	r3, #200	; 0xc8
 80053c6:	2208      	movs	r2, #8
 80053c8:	f00d f8b0 	bl	801252c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, Data_CALIB_OK, 8 , 200);
 80053cc:	4921      	ldr	r1, [pc, #132]	; (8005454 <main+0x154>)
 80053ce:	4822      	ldr	r0, [pc, #136]	; (8005458 <main+0x158>)
 80053d0:	23c8      	movs	r3, #200	; 0xc8
 80053d2:	2208      	movs	r2, #8
 80053d4:	f00d f8aa 	bl	801252c <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
//		sensorsTest();

	 /* Código máquinas de estado */
	  BloqueCOM_CEIT(&stcomceit);
 80053d8:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <main+0x144>)
 80053da:	0018      	movs	r0, r3
 80053dc:	f7fe fcea 	bl	8003db4 <BloqueCOM_CEIT>
	  BloqueCaptura(&stcaptura, &stcomceit, &stmotor, &stdistancia);
 80053e0:	4b19      	ldr	r3, [pc, #100]	; (8005448 <main+0x148>)
 80053e2:	4a1a      	ldr	r2, [pc, #104]	; (800544c <main+0x14c>)
 80053e4:	4917      	ldr	r1, [pc, #92]	; (8005444 <main+0x144>)
 80053e6:	4816      	ldr	r0, [pc, #88]	; (8005440 <main+0x140>)
 80053e8:	f7fd fe22 	bl	8003030 <BloqueCaptura>
	  BloqueMotor();
 80053ec:	f000 f8ae 	bl	800554c <BloqueMotor>
	  /* Bloque distancia */
	  if(stdistancia.bandDistancia){
 80053f0:	4b15      	ldr	r3, [pc, #84]	; (8005448 <main+0x148>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0ef      	beq.n	80053d8 <main+0xd8>
		  stdistancia.contParrilla = stdistancia.sensor[stdistancia.contDistancia];
 80053f8:	4b13      	ldr	r3, [pc, #76]	; (8005448 <main+0x148>)
 80053fa:	2265      	movs	r2, #101	; 0x65
 80053fc:	5c9b      	ldrb	r3, [r3, r2]
 80053fe:	0019      	movs	r1, r3
 8005400:	4b11      	ldr	r3, [pc, #68]	; (8005448 <main+0x148>)
 8005402:	4a16      	ldr	r2, [pc, #88]	; (800545c <main+0x15c>)
 8005404:	185b      	adds	r3, r3, r1
 8005406:	189b      	adds	r3, r3, r2
 8005408:	7819      	ldrb	r1, [r3, #0]
 800540a:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <main+0x148>)
 800540c:	2266      	movs	r2, #102	; 0x66
 800540e:	5499      	strb	r1, [r3, r2]
//		  VL53L1_StartMeasurement( &stdistancia.VL53L1_DEV[stdistancia.contParrilla] );
		  sensorOK = BloqueDistancia(&stdistancia);
 8005410:	1d7c      	adds	r4, r7, #5
 8005412:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <main+0x148>)
 8005414:	0018      	movs	r0, r3
 8005416:	f7fe fd9d 	bl	8003f54 <BloqueDistancia>
 800541a:	0003      	movs	r3, r0
 800541c:	7023      	strb	r3, [r4, #0]
		  stdistancia.bandDistancia = false;
 800541e:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <main+0x148>)
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
		  stdistancia.contDistancia++;
 8005424:	4b08      	ldr	r3, [pc, #32]	; (8005448 <main+0x148>)
 8005426:	2265      	movs	r2, #101	; 0x65
 8005428:	5c9b      	ldrb	r3, [r3, r2]
 800542a:	3301      	adds	r3, #1
 800542c:	b2d9      	uxtb	r1, r3
 800542e:	4b06      	ldr	r3, [pc, #24]	; (8005448 <main+0x148>)
 8005430:	2265      	movs	r2, #101	; 0x65
 8005432:	5499      	strb	r1, [r3, r2]
	  BloqueCOM_CEIT(&stcomceit);
 8005434:	e7d0      	b.n	80053d8 <main+0xd8>
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	200030e4 	.word	0x200030e4
 800543c:	20003564 	.word	0x20003564
 8005440:	20000530 	.word	0x20000530
 8005444:	200030e8 	.word	0x200030e8
 8005448:	200006c4 	.word	0x200006c4
 800544c:	2000322c 	.word	0x2000322c
 8005450:	2000000c 	.word	0x2000000c
 8005454:	20000004 	.word	0x20000004
 8005458:	200035e4 	.word	0x200035e4
 800545c:	00000522 	.word	0x00000522

08005460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b09f      	sub	sp, #124	; 0x7c
 8005464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005466:	2440      	movs	r4, #64	; 0x40
 8005468:	193b      	adds	r3, r7, r4
 800546a:	0018      	movs	r0, r3
 800546c:	2338      	movs	r3, #56	; 0x38
 800546e:	001a      	movs	r2, r3
 8005470:	2100      	movs	r1, #0
 8005472:	f00e f8ac 	bl	80135ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005476:	232c      	movs	r3, #44	; 0x2c
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	0018      	movs	r0, r3
 800547c:	2314      	movs	r3, #20
 800547e:	001a      	movs	r2, r3
 8005480:	2100      	movs	r1, #0
 8005482:	f00e f8a4 	bl	80135ce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	0018      	movs	r0, r3
 800548a:	2328      	movs	r3, #40	; 0x28
 800548c:	001a      	movs	r2, r3
 800548e:	2100      	movs	r1, #0
 8005490:	f00e f89d 	bl	80135ce <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005494:	4b2b      	ldr	r3, [pc, #172]	; (8005544 <SystemClock_Config+0xe4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2b      	ldr	r2, [pc, #172]	; (8005548 <SystemClock_Config+0xe8>)
 800549a:	401a      	ands	r2, r3
 800549c:	4b29      	ldr	r3, [pc, #164]	; (8005544 <SystemClock_Config+0xe4>)
 800549e:	2180      	movs	r1, #128	; 0x80
 80054a0:	0109      	lsls	r1, r1, #4
 80054a2:	430a      	orrs	r2, r1
 80054a4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80054a6:	0021      	movs	r1, r4
 80054a8:	187b      	adds	r3, r7, r1
 80054aa:	2202      	movs	r2, #2
 80054ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80054ae:	187b      	adds	r3, r7, r1
 80054b0:	2201      	movs	r2, #1
 80054b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80054b4:	187b      	adds	r3, r7, r1
 80054b6:	2210      	movs	r2, #16
 80054b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054ba:	187b      	adds	r3, r7, r1
 80054bc:	2202      	movs	r2, #2
 80054be:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80054c0:	187b      	adds	r3, r7, r1
 80054c2:	2200      	movs	r2, #0
 80054c4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80054c6:	187b      	adds	r3, r7, r1
 80054c8:	2280      	movs	r2, #128	; 0x80
 80054ca:	02d2      	lsls	r2, r2, #11
 80054cc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80054ce:	187b      	adds	r3, r7, r1
 80054d0:	2280      	movs	r2, #128	; 0x80
 80054d2:	03d2      	lsls	r2, r2, #15
 80054d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054d6:	187b      	adds	r3, r7, r1
 80054d8:	0018      	movs	r0, r3
 80054da:	f00b fb31 	bl	8010b40 <HAL_RCC_OscConfig>
 80054de:	1e03      	subs	r3, r0, #0
 80054e0:	d001      	beq.n	80054e6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80054e2:	f000 fe29 	bl	8006138 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054e6:	212c      	movs	r1, #44	; 0x2c
 80054e8:	187b      	adds	r3, r7, r1
 80054ea:	220f      	movs	r2, #15
 80054ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054ee:	187b      	adds	r3, r7, r1
 80054f0:	2203      	movs	r2, #3
 80054f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054f4:	187b      	adds	r3, r7, r1
 80054f6:	2200      	movs	r2, #0
 80054f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80054fa:	187b      	adds	r3, r7, r1
 80054fc:	2200      	movs	r2, #0
 80054fe:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005500:	187b      	adds	r3, r7, r1
 8005502:	2200      	movs	r2, #0
 8005504:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005506:	187b      	adds	r3, r7, r1
 8005508:	2101      	movs	r1, #1
 800550a:	0018      	movs	r0, r3
 800550c:	f00b fee8 	bl	80112e0 <HAL_RCC_ClockConfig>
 8005510:	1e03      	subs	r3, r0, #0
 8005512:	d001      	beq.n	8005518 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8005514:	f000 fe10 	bl	8006138 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8005518:	1d3b      	adds	r3, r7, #4
 800551a:	220a      	movs	r2, #10
 800551c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800551e:	1d3b      	adds	r3, r7, #4
 8005520:	2200      	movs	r2, #0
 8005522:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005524:	1d3b      	adds	r3, r7, #4
 8005526:	2200      	movs	r2, #0
 8005528:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800552a:	1d3b      	adds	r3, r7, #4
 800552c:	0018      	movs	r0, r3
 800552e:	f00c f8bd 	bl	80116ac <HAL_RCCEx_PeriphCLKConfig>
 8005532:	1e03      	subs	r3, r0, #0
 8005534:	d001      	beq.n	800553a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8005536:	f000 fdff 	bl	8006138 <Error_Handler>
  }
}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	46bd      	mov	sp, r7
 800553e:	b01f      	add	sp, #124	; 0x7c
 8005540:	bd90      	pop	{r4, r7, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	40007000 	.word	0x40007000
 8005548:	ffffe7ff 	.word	0xffffe7ff

0800554c <BloqueMotor>:

/* USER CODE BEGIN 4 */

void BloqueMotor(void) {
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b085      	sub	sp, #20
 8005550:	af02      	add	r7, sp, #8
	uint8_t unidad, decena, centena, mil;
	uint8_t i,j,k,aux;

	/* Bloque motor */
	if(stmotor.bandMotor){
 8005552:	4bca      	ldr	r3, [pc, #808]	; (800587c <BloqueMotor+0x330>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d100      	bne.n	800555c <BloqueMotor+0x10>
 800555a:	e18b      	b.n	8005874 <BloqueMotor+0x328>
		if(stmotor.posMotor < stmotor.MaxPosMotor){
 800555c:	4bc7      	ldr	r3, [pc, #796]	; (800587c <BloqueMotor+0x330>)
 800555e:	7a1b      	ldrb	r3, [r3, #8]
 8005560:	b25b      	sxtb	r3, r3
 8005562:	0019      	movs	r1, r3
 8005564:	4bc5      	ldr	r3, [pc, #788]	; (800587c <BloqueMotor+0x330>)
 8005566:	4ac6      	ldr	r2, [pc, #792]	; (8005880 <BloqueMotor+0x334>)
 8005568:	5c9b      	ldrb	r3, [r3, r2]
 800556a:	4299      	cmp	r1, r3
 800556c:	da1c      	bge.n	80055a8 <BloqueMotor+0x5c>
			/* Go next stop */
			BSP_MotorControl_GoTo(MOTOR_ID, stmotor.recorrido[stmotor.posMotor]);
 800556e:	4bc3      	ldr	r3, [pc, #780]	; (800587c <BloqueMotor+0x330>)
 8005570:	7a1b      	ldrb	r3, [r3, #8]
 8005572:	b25b      	sxtb	r3, r3
 8005574:	4ac1      	ldr	r2, [pc, #772]	; (800587c <BloqueMotor+0x330>)
 8005576:	3368      	adds	r3, #104	; 0x68
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	18d3      	adds	r3, r2, r3
 800557c:	3304      	adds	r3, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	0019      	movs	r1, r3
 8005582:	2000      	movs	r0, #0
 8005584:	f009 fe42 	bl	800f20c <BSP_MotorControl_GoTo>
			BSP_MotorControl_WaitWhileActive(MOTOR_ID);
 8005588:	2000      	movs	r0, #0
 800558a:	f009 ffc9 	bl	800f520 <BSP_MotorControl_WaitWhileActive>

			stmotor.posMotor++;
 800558e:	4bbb      	ldr	r3, [pc, #748]	; (800587c <BloqueMotor+0x330>)
 8005590:	7a1b      	ldrb	r3, [r3, #8]
 8005592:	b25b      	sxtb	r3, r3
 8005594:	b2db      	uxtb	r3, r3
 8005596:	3301      	adds	r3, #1
 8005598:	b2db      	uxtb	r3, r3
 800559a:	b25a      	sxtb	r2, r3
 800559c:	4bb7      	ldr	r3, [pc, #732]	; (800587c <BloqueMotor+0x330>)
 800559e:	721a      	strb	r2, [r3, #8]
			stmotor.bandMotor = false;
 80055a0:	4bb6      	ldr	r3, [pc, #728]	; (800587c <BloqueMotor+0x330>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
			  EnableMotors(7);
			  HAL_UART_Transmit(&huart5, Data_CALIB_OK, 8 , 200);
			  HAL_UART_Transmit(&huart2, Data_CALIB_OK, 8 , 200);
		}
	}
}
 80055a6:	e165      	b.n	8005874 <BloqueMotor+0x328>
		}else if(stmotor.posMotor <= stmotor.MaxPosMotor+2){
 80055a8:	4bb4      	ldr	r3, [pc, #720]	; (800587c <BloqueMotor+0x330>)
 80055aa:	7a1b      	ldrb	r3, [r3, #8]
 80055ac:	b25b      	sxtb	r3, r3
 80055ae:	0019      	movs	r1, r3
 80055b0:	4bb2      	ldr	r3, [pc, #712]	; (800587c <BloqueMotor+0x330>)
 80055b2:	4ab3      	ldr	r2, [pc, #716]	; (8005880 <BloqueMotor+0x334>)
 80055b4:	5c9b      	ldrb	r3, [r3, r2]
 80055b6:	3302      	adds	r3, #2
 80055b8:	4299      	cmp	r1, r3
 80055ba:	dc0c      	bgt.n	80055d6 <BloqueMotor+0x8a>
			stmotor.bandMotor = true;
 80055bc:	4baf      	ldr	r3, [pc, #700]	; (800587c <BloqueMotor+0x330>)
 80055be:	2201      	movs	r2, #1
 80055c0:	701a      	strb	r2, [r3, #0]
			stmotor.posMotor++;
 80055c2:	4bae      	ldr	r3, [pc, #696]	; (800587c <BloqueMotor+0x330>)
 80055c4:	7a1b      	ldrb	r3, [r3, #8]
 80055c6:	b25b      	sxtb	r3, r3
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	3301      	adds	r3, #1
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	b25a      	sxtb	r2, r3
 80055d0:	4baa      	ldr	r3, [pc, #680]	; (800587c <BloqueMotor+0x330>)
 80055d2:	721a      	strb	r2, [r3, #8]
}
 80055d4:	e14e      	b.n	8005874 <BloqueMotor+0x328>
			BSP_MotorControl_GoTo(MOTOR_ID, stmotor.recorrido[0]);
 80055d6:	4aa9      	ldr	r2, [pc, #676]	; (800587c <BloqueMotor+0x330>)
 80055d8:	23d2      	movs	r3, #210	; 0xd2
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	58d3      	ldr	r3, [r2, r3]
 80055de:	0019      	movs	r1, r3
 80055e0:	2000      	movs	r0, #0
 80055e2:	f009 fe13 	bl	800f20c <BSP_MotorControl_GoTo>
			BSP_MotorControl_WaitWhileActive(MOTOR_ID);
 80055e6:	2000      	movs	r0, #0
 80055e8:	f009 ff9a 	bl	800f520 <BSP_MotorControl_WaitWhileActive>
			BSP_MotorControl_CmdDisable(MOTOR_ID);
 80055ec:	2000      	movs	r0, #0
 80055ee:	f009 ffbb 	bl	800f568 <BSP_MotorControl_CmdDisable>
			BSP_MotorControl_SetStopMode(MOTOR_ID, HIZ_MODE);
 80055f2:	2101      	movs	r1, #1
 80055f4:	2000      	movs	r0, #0
 80055f6:	f00a f807 	bl	800f608 <BSP_MotorControl_SetStopMode>
			stmotor.posMotor = stmotor.posInicial;
 80055fa:	4ba0      	ldr	r3, [pc, #640]	; (800587c <BloqueMotor+0x330>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b25a      	sxtb	r2, r3
 8005600:	4b9e      	ldr	r3, [pc, #632]	; (800587c <BloqueMotor+0x330>)
 8005602:	721a      	strb	r2, [r3, #8]
			stmotor.bandMotor = false;
 8005604:	4b9d      	ldr	r3, [pc, #628]	; (800587c <BloqueMotor+0x330>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
			for(k=0; k<5; k++)
 800560a:	1d7b      	adds	r3, r7, #5
 800560c:	2200      	movs	r2, #0
 800560e:	701a      	strb	r2, [r3, #0]
 8005610:	e084      	b.n	800571c <BloqueMotor+0x1d0>
				HAL_UART_Transmit(&huart5, (uint8_t*)"\n", strlen("\n"), 20);
 8005612:	499c      	ldr	r1, [pc, #624]	; (8005884 <BloqueMotor+0x338>)
 8005614:	489c      	ldr	r0, [pc, #624]	; (8005888 <BloqueMotor+0x33c>)
 8005616:	2314      	movs	r3, #20
 8005618:	2201      	movs	r2, #1
 800561a:	f00c ff87 	bl	801252c <HAL_UART_Transmit>
				for(i=1; i<6; i++)
 800561e:	1dfb      	adds	r3, r7, #7
 8005620:	2201      	movs	r2, #1
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	e071      	b.n	800570a <BloqueMotor+0x1be>
					aux = i+48;
 8005626:	1dfb      	adds	r3, r7, #7
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	3330      	adds	r3, #48	; 0x30
 800562c:	b2da      	uxtb	r2, r3
 800562e:	003b      	movs	r3, r7
 8005630:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart5, (uint8_t*)"S", strlen("S"), 20);
 8005632:	4996      	ldr	r1, [pc, #600]	; (800588c <BloqueMotor+0x340>)
 8005634:	4894      	ldr	r0, [pc, #592]	; (8005888 <BloqueMotor+0x33c>)
 8005636:	2314      	movs	r3, #20
 8005638:	2201      	movs	r2, #1
 800563a:	f00c ff77 	bl	801252c <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart5, &aux, sizeof(aux), 20);
 800563e:	0039      	movs	r1, r7
 8005640:	4891      	ldr	r0, [pc, #580]	; (8005888 <BloqueMotor+0x33c>)
 8005642:	2314      	movs	r3, #20
 8005644:	2201      	movs	r2, #1
 8005646:	f00c ff71 	bl	801252c <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart5, (uint8_t*)";", strlen(";"), 20);
 800564a:	4991      	ldr	r1, [pc, #580]	; (8005890 <BloqueMotor+0x344>)
 800564c:	488e      	ldr	r0, [pc, #568]	; (8005888 <BloqueMotor+0x33c>)
 800564e:	2314      	movs	r3, #20
 8005650:	2201      	movs	r2, #1
 8005652:	f00c ff6b 	bl	801252c <HAL_UART_Transmit>
					for(j=0; j<stdistancia.cantFilas[i-1]; j++)
 8005656:	1dbb      	adds	r3, r7, #6
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	e03e      	b.n	80056dc <BloqueMotor+0x190>
						  Convertir4Cif(stdistancia.datosDistancia2[i-1][j][k], &mil, &centena, &decena, &unidad);
 800565e:	1dfb      	adds	r3, r7, #7
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	1e5c      	subs	r4, r3, #1
 8005664:	1dbb      	adds	r3, r7, #6
 8005666:	781a      	ldrb	r2, [r3, #0]
 8005668:	1d7b      	adds	r3, r7, #5
 800566a:	7818      	ldrb	r0, [r3, #0]
 800566c:	4989      	ldr	r1, [pc, #548]	; (8005894 <BloqueMotor+0x348>)
 800566e:	0013      	movs	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	189b      	adds	r3, r3, r2
 8005674:	2232      	movs	r2, #50	; 0x32
 8005676:	4362      	muls	r2, r4
 8005678:	189b      	adds	r3, r3, r2
 800567a:	181b      	adds	r3, r3, r0
 800567c:	339c      	adds	r3, #156	; 0x9c
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	18cb      	adds	r3, r1, r3
 8005682:	3302      	adds	r3, #2
 8005684:	8818      	ldrh	r0, [r3, #0]
 8005686:	1cfc      	adds	r4, r7, #3
 8005688:	1cba      	adds	r2, r7, #2
 800568a:	1c79      	adds	r1, r7, #1
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	0023      	movs	r3, r4
 8005692:	f7ff f91b 	bl	80048cc <Convertir4Cif>
						  HAL_UART_Transmit(&huart5, &mil, sizeof(centena), 50);
 8005696:	1c79      	adds	r1, r7, #1
 8005698:	487b      	ldr	r0, [pc, #492]	; (8005888 <BloqueMotor+0x33c>)
 800569a:	2332      	movs	r3, #50	; 0x32
 800569c:	2201      	movs	r2, #1
 800569e:	f00c ff45 	bl	801252c <HAL_UART_Transmit>
						  HAL_UART_Transmit(&huart5, &centena, sizeof(centena), 50);
 80056a2:	1cb9      	adds	r1, r7, #2
 80056a4:	4878      	ldr	r0, [pc, #480]	; (8005888 <BloqueMotor+0x33c>)
 80056a6:	2332      	movs	r3, #50	; 0x32
 80056a8:	2201      	movs	r2, #1
 80056aa:	f00c ff3f 	bl	801252c <HAL_UART_Transmit>
						  HAL_UART_Transmit(&huart5, &decena, sizeof(decena), 50);
 80056ae:	1cf9      	adds	r1, r7, #3
 80056b0:	4875      	ldr	r0, [pc, #468]	; (8005888 <BloqueMotor+0x33c>)
 80056b2:	2332      	movs	r3, #50	; 0x32
 80056b4:	2201      	movs	r2, #1
 80056b6:	f00c ff39 	bl	801252c <HAL_UART_Transmit>
						  HAL_UART_Transmit(&huart5, &unidad, sizeof(unidad), 50);
 80056ba:	1d39      	adds	r1, r7, #4
 80056bc:	4872      	ldr	r0, [pc, #456]	; (8005888 <BloqueMotor+0x33c>)
 80056be:	2332      	movs	r3, #50	; 0x32
 80056c0:	2201      	movs	r2, #1
 80056c2:	f00c ff33 	bl	801252c <HAL_UART_Transmit>
						  HAL_UART_Transmit(&huart5, (uint8_t*)";", strlen(";"), 20);
 80056c6:	4972      	ldr	r1, [pc, #456]	; (8005890 <BloqueMotor+0x344>)
 80056c8:	486f      	ldr	r0, [pc, #444]	; (8005888 <BloqueMotor+0x33c>)
 80056ca:	2314      	movs	r3, #20
 80056cc:	2201      	movs	r2, #1
 80056ce:	f00c ff2d 	bl	801252c <HAL_UART_Transmit>
					for(j=0; j<stdistancia.cantFilas[i-1]; j++)
 80056d2:	1dbb      	adds	r3, r7, #6
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	1dbb      	adds	r3, r7, #6
 80056d8:	3201      	adds	r2, #1
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	1dfb      	adds	r3, r7, #7
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	4a6c      	ldr	r2, [pc, #432]	; (8005894 <BloqueMotor+0x348>)
 80056e4:	2167      	movs	r1, #103	; 0x67
 80056e6:	18d3      	adds	r3, r2, r3
 80056e8:	185b      	adds	r3, r3, r1
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	1dba      	adds	r2, r7, #6
 80056ee:	7812      	ldrb	r2, [r2, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d3b4      	bcc.n	800565e <BloqueMotor+0x112>
					HAL_UART_Transmit(&huart5, (uint8_t*)"\n", strlen("\n"), 20);
 80056f4:	4963      	ldr	r1, [pc, #396]	; (8005884 <BloqueMotor+0x338>)
 80056f6:	4864      	ldr	r0, [pc, #400]	; (8005888 <BloqueMotor+0x33c>)
 80056f8:	2314      	movs	r3, #20
 80056fa:	2201      	movs	r2, #1
 80056fc:	f00c ff16 	bl	801252c <HAL_UART_Transmit>
				for(i=1; i<6; i++)
 8005700:	1dfb      	adds	r3, r7, #7
 8005702:	781a      	ldrb	r2, [r3, #0]
 8005704:	1dfb      	adds	r3, r7, #7
 8005706:	3201      	adds	r2, #1
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	1dfb      	adds	r3, r7, #7
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b05      	cmp	r3, #5
 8005710:	d989      	bls.n	8005626 <BloqueMotor+0xda>
			for(k=0; k<5; k++)
 8005712:	1d7b      	adds	r3, r7, #5
 8005714:	781a      	ldrb	r2, [r3, #0]
 8005716:	1d7b      	adds	r3, r7, #5
 8005718:	3201      	adds	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	1d7b      	adds	r3, r7, #5
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b04      	cmp	r3, #4
 8005722:	d800      	bhi.n	8005726 <BloqueMotor+0x1da>
 8005724:	e775      	b.n	8005612 <BloqueMotor+0xc6>
			for(k=0; k<5; k++)
 8005726:	1d7b      	adds	r3, r7, #5
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e084      	b.n	8005838 <BloqueMotor+0x2ec>
				HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), 20);
 800572e:	4955      	ldr	r1, [pc, #340]	; (8005884 <BloqueMotor+0x338>)
 8005730:	4859      	ldr	r0, [pc, #356]	; (8005898 <BloqueMotor+0x34c>)
 8005732:	2314      	movs	r3, #20
 8005734:	2201      	movs	r2, #1
 8005736:	f00c fef9 	bl	801252c <HAL_UART_Transmit>
				for(i=1; i<6; i++)
 800573a:	1dfb      	adds	r3, r7, #7
 800573c:	2201      	movs	r2, #1
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	e071      	b.n	8005826 <BloqueMotor+0x2da>
					aux = i+48;
 8005742:	1dfb      	adds	r3, r7, #7
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	3330      	adds	r3, #48	; 0x30
 8005748:	b2da      	uxtb	r2, r3
 800574a:	003b      	movs	r3, r7
 800574c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)"S", strlen("S"), 20);
 800574e:	494f      	ldr	r1, [pc, #316]	; (800588c <BloqueMotor+0x340>)
 8005750:	4851      	ldr	r0, [pc, #324]	; (8005898 <BloqueMotor+0x34c>)
 8005752:	2314      	movs	r3, #20
 8005754:	2201      	movs	r2, #1
 8005756:	f00c fee9 	bl	801252c <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, &aux, sizeof(aux), 20);
 800575a:	0039      	movs	r1, r7
 800575c:	484e      	ldr	r0, [pc, #312]	; (8005898 <BloqueMotor+0x34c>)
 800575e:	2314      	movs	r3, #20
 8005760:	2201      	movs	r2, #1
 8005762:	f00c fee3 	bl	801252c <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)";", strlen(";"), 20);
 8005766:	494a      	ldr	r1, [pc, #296]	; (8005890 <BloqueMotor+0x344>)
 8005768:	484b      	ldr	r0, [pc, #300]	; (8005898 <BloqueMotor+0x34c>)
 800576a:	2314      	movs	r3, #20
 800576c:	2201      	movs	r2, #1
 800576e:	f00c fedd 	bl	801252c <HAL_UART_Transmit>
					for(j=0; j<stdistancia.cantFilas[i-1]; j++)
 8005772:	1dbb      	adds	r3, r7, #6
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	e03e      	b.n	80057f8 <BloqueMotor+0x2ac>
						  Convertir4Cif(stdistancia.datosDistancia2[i-1][j][k], &mil, &centena, &decena, &unidad);
 800577a:	1dfb      	adds	r3, r7, #7
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	1e5c      	subs	r4, r3, #1
 8005780:	1dbb      	adds	r3, r7, #6
 8005782:	781a      	ldrb	r2, [r3, #0]
 8005784:	1d7b      	adds	r3, r7, #5
 8005786:	7818      	ldrb	r0, [r3, #0]
 8005788:	4942      	ldr	r1, [pc, #264]	; (8005894 <BloqueMotor+0x348>)
 800578a:	0013      	movs	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	189b      	adds	r3, r3, r2
 8005790:	2232      	movs	r2, #50	; 0x32
 8005792:	4362      	muls	r2, r4
 8005794:	189b      	adds	r3, r3, r2
 8005796:	181b      	adds	r3, r3, r0
 8005798:	339c      	adds	r3, #156	; 0x9c
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	18cb      	adds	r3, r1, r3
 800579e:	3302      	adds	r3, #2
 80057a0:	8818      	ldrh	r0, [r3, #0]
 80057a2:	1cfc      	adds	r4, r7, #3
 80057a4:	1cba      	adds	r2, r7, #2
 80057a6:	1c79      	adds	r1, r7, #1
 80057a8:	1d3b      	adds	r3, r7, #4
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	0023      	movs	r3, r4
 80057ae:	f7ff f88d 	bl	80048cc <Convertir4Cif>
						  HAL_UART_Transmit(&huart2, &mil, sizeof(centena), 50);
 80057b2:	1c79      	adds	r1, r7, #1
 80057b4:	4838      	ldr	r0, [pc, #224]	; (8005898 <BloqueMotor+0x34c>)
 80057b6:	2332      	movs	r3, #50	; 0x32
 80057b8:	2201      	movs	r2, #1
 80057ba:	f00c feb7 	bl	801252c <HAL_UART_Transmit>
						  HAL_UART_Transmit(&huart2, &centena, sizeof(centena), 50);
 80057be:	1cb9      	adds	r1, r7, #2
 80057c0:	4835      	ldr	r0, [pc, #212]	; (8005898 <BloqueMotor+0x34c>)
 80057c2:	2332      	movs	r3, #50	; 0x32
 80057c4:	2201      	movs	r2, #1
 80057c6:	f00c feb1 	bl	801252c <HAL_UART_Transmit>
						  HAL_UART_Transmit(&huart2, &decena, sizeof(decena), 50);
 80057ca:	1cf9      	adds	r1, r7, #3
 80057cc:	4832      	ldr	r0, [pc, #200]	; (8005898 <BloqueMotor+0x34c>)
 80057ce:	2332      	movs	r3, #50	; 0x32
 80057d0:	2201      	movs	r2, #1
 80057d2:	f00c feab 	bl	801252c <HAL_UART_Transmit>
						  HAL_UART_Transmit(&huart2, &unidad, sizeof(unidad), 50);
 80057d6:	1d39      	adds	r1, r7, #4
 80057d8:	482f      	ldr	r0, [pc, #188]	; (8005898 <BloqueMotor+0x34c>)
 80057da:	2332      	movs	r3, #50	; 0x32
 80057dc:	2201      	movs	r2, #1
 80057de:	f00c fea5 	bl	801252c <HAL_UART_Transmit>
						  HAL_UART_Transmit(&huart2, (uint8_t*)";", strlen(";"), 20);
 80057e2:	492b      	ldr	r1, [pc, #172]	; (8005890 <BloqueMotor+0x344>)
 80057e4:	482c      	ldr	r0, [pc, #176]	; (8005898 <BloqueMotor+0x34c>)
 80057e6:	2314      	movs	r3, #20
 80057e8:	2201      	movs	r2, #1
 80057ea:	f00c fe9f 	bl	801252c <HAL_UART_Transmit>
					for(j=0; j<stdistancia.cantFilas[i-1]; j++)
 80057ee:	1dbb      	adds	r3, r7, #6
 80057f0:	781a      	ldrb	r2, [r3, #0]
 80057f2:	1dbb      	adds	r3, r7, #6
 80057f4:	3201      	adds	r2, #1
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	1dfb      	adds	r3, r7, #7
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	4a25      	ldr	r2, [pc, #148]	; (8005894 <BloqueMotor+0x348>)
 8005800:	2167      	movs	r1, #103	; 0x67
 8005802:	18d3      	adds	r3, r2, r3
 8005804:	185b      	adds	r3, r3, r1
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	1dba      	adds	r2, r7, #6
 800580a:	7812      	ldrb	r2, [r2, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d3b4      	bcc.n	800577a <BloqueMotor+0x22e>
					HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), 20);
 8005810:	491c      	ldr	r1, [pc, #112]	; (8005884 <BloqueMotor+0x338>)
 8005812:	4821      	ldr	r0, [pc, #132]	; (8005898 <BloqueMotor+0x34c>)
 8005814:	2314      	movs	r3, #20
 8005816:	2201      	movs	r2, #1
 8005818:	f00c fe88 	bl	801252c <HAL_UART_Transmit>
				for(i=1; i<6; i++)
 800581c:	1dfb      	adds	r3, r7, #7
 800581e:	781a      	ldrb	r2, [r3, #0]
 8005820:	1dfb      	adds	r3, r7, #7
 8005822:	3201      	adds	r2, #1
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	1dfb      	adds	r3, r7, #7
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b05      	cmp	r3, #5
 800582c:	d989      	bls.n	8005742 <BloqueMotor+0x1f6>
			for(k=0; k<5; k++)
 800582e:	1d7b      	adds	r3, r7, #5
 8005830:	781a      	ldrb	r2, [r3, #0]
 8005832:	1d7b      	adds	r3, r7, #5
 8005834:	3201      	adds	r2, #1
 8005836:	701a      	strb	r2, [r3, #0]
 8005838:	1d7b      	adds	r3, r7, #5
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b04      	cmp	r3, #4
 800583e:	d800      	bhi.n	8005842 <BloqueMotor+0x2f6>
 8005840:	e775      	b.n	800572e <BloqueMotor+0x1e2>
			  calib_motor();
 8005842:	f000 fa27 	bl	8005c94 <calib_motor>
			  calib_motor2();
 8005846:	f000 fa97 	bl	8005d78 <calib_motor2>
			  calib_motor4();
 800584a:	f000 fb77 	bl	8005f3c <calib_motor4>
			  calib_motor5();
 800584e:	f000 fbdf 	bl	8006010 <calib_motor5>
			  calib_motor3();
 8005852:	f000 fb03 	bl	8005e5c <calib_motor3>
			  EnableMotors(7);
 8005856:	2007      	movs	r0, #7
 8005858:	f000 f85e 	bl	8005918 <EnableMotors>
			  HAL_UART_Transmit(&huart5, Data_CALIB_OK, 8 , 200);
 800585c:	490f      	ldr	r1, [pc, #60]	; (800589c <BloqueMotor+0x350>)
 800585e:	480a      	ldr	r0, [pc, #40]	; (8005888 <BloqueMotor+0x33c>)
 8005860:	23c8      	movs	r3, #200	; 0xc8
 8005862:	2208      	movs	r2, #8
 8005864:	f00c fe62 	bl	801252c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, Data_CALIB_OK, 8 , 200);
 8005868:	490c      	ldr	r1, [pc, #48]	; (800589c <BloqueMotor+0x350>)
 800586a:	480b      	ldr	r0, [pc, #44]	; (8005898 <BloqueMotor+0x34c>)
 800586c:	23c8      	movs	r3, #200	; 0xc8
 800586e:	2208      	movs	r2, #8
 8005870:	f00c fe5c 	bl	801252c <HAL_UART_Transmit>
}
 8005874:	46c0      	nop			; (mov r8, r8)
 8005876:	46bd      	mov	sp, r7
 8005878:	b003      	add	sp, #12
 800587a:	bd90      	pop	{r4, r7, pc}
 800587c:	2000322c 	.word	0x2000322c
 8005880:	00000335 	.word	0x00000335
 8005884:	08016120 	.word	0x08016120
 8005888:	20003564 	.word	0x20003564
 800588c:	08016124 	.word	0x08016124
 8005890:	08016128 	.word	0x08016128
 8005894:	200006c4 	.word	0x200006c4
 8005898:	200035e4 	.word	0x200035e4
 800589c:	20000004 	.word	0x20000004

080058a0 <MyMotorInit>:

void MyMotorInit(void) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0

	uint32_t myFreqPwm;
//----- Init of the Motor control library
	/* Set the STSPIN220 library to use 1 device */
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220, 1);
 80058a6:	2101      	movs	r1, #1
 80058a8:	20dc      	movs	r0, #220	; 0xdc
 80058aa:	f009 fedb 	bl	800f664 <BSP_MotorControl_SetNbDevices>
	/* When BSP_MotorControl_Init is called with NULL pointer,                  */
	/* the STSPIN220 parameters are set with the predefined values from file    */
	/* stspin220_target_config.h, otherwise the parameters are set using the    */
	/* initDeviceParameters structure values.                                   */
	//BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220, &initDeviceParameters);
	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220, NULL);
 80058ae:	2100      	movs	r1, #0
 80058b0:	20dc      	movs	r0, #220	; 0xdc
 80058b2:	f009 fc5f 	bl	800f174 <BSP_MotorControl_Init>
	/* Attach the function MyFlagInterruptHandler (defined below) to the flag interrupt */
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 80058b6:	4b14      	ldr	r3, [pc, #80]	; (8005908 <MyMotorInit+0x68>)
 80058b8:	0018      	movs	r0, r3
 80058ba:	f009 fc19 	bl	800f0f0 <BSP_MotorControl_AttachFlagInterrupt>
	/* Attach the function MyErrorHandler (defined below) to the error Handler*/
	BSP_MotorControl_AttachErrorHandler(MyErrorHandler);
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <MyMotorInit+0x6c>)
 80058c0:	0018      	movs	r0, r3
 80058c2:	f009 fbf3 	bl	800f0ac <BSP_MotorControl_AttachErrorHandler>
//----- Configure Button for user interaction
	/* Set Systick Interrupt priority highest to ensure no lock by using HAL_Delay */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0x0, 0x0);
 80058c6:	2301      	movs	r3, #1
 80058c8:	425b      	negs	r3, r3
 80058ca:	2200      	movs	r2, #0
 80058cc:	2100      	movs	r1, #0
 80058ce:	0018      	movs	r0, r3
 80058d0:	f00a f8e0 	bl	800fa94 <HAL_NVIC_SetPriority>
	/* Get the PWM frequency used for the VREFA and VREFB voltage generation */
	myFreqPwm = BSP_MotorControl_GetBridgeInputPwmFreq(0);
 80058d4:	2000      	movs	r0, #0
 80058d6:	f009 fe6b 	bl	800f5b0 <BSP_MotorControl_GetBridgeInputPwmFreq>
 80058da:	0003      	movs	r3, r0
 80058dc:	607b      	str	r3, [r7, #4]

	/* Select step mode */
	switch (AJUSTE_REL_PASOS){
	case 1:
		/* Increase acceleration microstep/s^2*/
		BSP_MotorControl_SetAcceleration(MOTOR_ID, 65535);
 80058de:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <MyMotorInit+0x70>)
 80058e0:	0019      	movs	r1, r3
 80058e2:	2000      	movs	r0, #0
 80058e4:	f009 fd0e 	bl	800f304 <BSP_MotorControl_SetAcceleration>
		/* Increase deceleration microstep/s^2 */
		BSP_MotorControl_SetDeceleration(MOTOR_ID, 65535);
 80058e8:	4b09      	ldr	r3, [pc, #36]	; (8005910 <MyMotorInit+0x70>)
 80058ea:	0019      	movs	r1, r3
 80058ec:	2000      	movs	r0, #0
 80058ee:	f009 fd3b 	bl	800f368 <BSP_MotorControl_SetDeceleration>
		/* Increase speed microstep/s */
		BSP_MotorControl_SetMaxSpeed(MOTOR_ID, 25000);//25000
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <MyMotorInit+0x74>)
 80058f4:	0019      	movs	r1, r3
 80058f6:	2000      	movs	r0, #0
 80058f8:	f009 fd8e 	bl	800f418 <BSP_MotorControl_SetMaxSpeed>
		break;
 80058fc:	46c0      	nop			; (mov r8, r8)
		BSP_MotorControl_SetDeceleration(MOTOR_ID, 65535);
		/* Increase speed microstep/s */
		BSP_MotorControl_SetMaxSpeed(MOTOR_ID, 25000);
		break;
	}
}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	46bd      	mov	sp, r7
 8005902:	b002      	add	sp, #8
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	0800610d 	.word	0x0800610d
 800590c:	0800611d 	.word	0x0800611d
 8005910:	0000ffff 	.word	0x0000ffff
 8005914:	000061a8 	.word	0x000061a8

08005918 <EnableMotors>:

void EnableMotors(uint8_t opc)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	0002      	movs	r2, r0
 8005920:	1dfb      	adds	r3, r7, #7
 8005922:	701a      	strb	r2, [r3, #0]
	switch(opc)
 8005924:	1dfb      	adds	r3, r7, #7
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b07      	cmp	r3, #7
 800592a:	d900      	bls.n	800592e <EnableMotors+0x16>
 800592c:	e154      	b.n	8005bd8 <EnableMotors+0x2c0>
 800592e:	009a      	lsls	r2, r3, #2
 8005930:	4bd4      	ldr	r3, [pc, #848]	; (8005c84 <EnableMotors+0x36c>)
 8005932:	18d3      	adds	r3, r2, r3
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	469f      	mov	pc, r3
	{
		case 1:
			HAL_GPIO_WritePin(DRV_EN_1_GPIO_Port, DRV_EN_1_Pin, GPIO_PIN_SET);
 8005938:	4bd3      	ldr	r3, [pc, #844]	; (8005c88 <EnableMotors+0x370>)
 800593a:	2201      	movs	r2, #1
 800593c:	2180      	movs	r1, #128	; 0x80
 800593e:	0018      	movs	r0, r3
 8005940:	f00a fbbf 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_1_GPIO_Port, DRV_RES_1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(DRV_EN_2_GPIO_Port, DRV_EN_2_Pin, GPIO_PIN_RESET);
 8005944:	2380      	movs	r3, #128	; 0x80
 8005946:	00d9      	lsls	r1, r3, #3
 8005948:	23a0      	movs	r3, #160	; 0xa0
 800594a:	05db      	lsls	r3, r3, #23
 800594c:	2200      	movs	r2, #0
 800594e:	0018      	movs	r0, r3
 8005950:	f00a fbb7 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_2_GPIO_Port, DRV_RES_2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_3_GPIO_Port, DRV_EN_3_Pin, GPIO_PIN_RESET);
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	019b      	lsls	r3, r3, #6
 8005958:	48cb      	ldr	r0, [pc, #812]	; (8005c88 <EnableMotors+0x370>)
 800595a:	2200      	movs	r2, #0
 800595c:	0019      	movs	r1, r3
 800595e:	f00a fbb0 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_3_GPIO_Port, DRV_RES_3_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_4_GPIO_Port, DRV_EN_4_Pin, GPIO_PIN_RESET);
 8005962:	4bc9      	ldr	r3, [pc, #804]	; (8005c88 <EnableMotors+0x370>)
 8005964:	2200      	movs	r2, #0
 8005966:	2101      	movs	r1, #1
 8005968:	0018      	movs	r0, r3
 800596a:	f00a fbaa 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_4_GPIO_Port, DRV_RES_4_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_5_GPIO_Port, DRV_EN_5_Pin, GPIO_PIN_RESET);
 800596e:	23a0      	movs	r3, #160	; 0xa0
 8005970:	05db      	lsls	r3, r3, #23
 8005972:	2200      	movs	r2, #0
 8005974:	2110      	movs	r1, #16
 8005976:	0018      	movs	r0, r3
 8005978:	f00a fba3 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_5_GPIO_Port, DRV_RES_5_Pin, GPIO_PIN_RESET);
 800597c:	23a0      	movs	r3, #160	; 0xa0
 800597e:	05db      	lsls	r3, r3, #23
 8005980:	2200      	movs	r2, #0
 8005982:	2102      	movs	r1, #2
 8005984:	0018      	movs	r0, r3
 8005986:	f00a fb9c 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_EN_6_GPIO_Port, DRV_EN_6_Pin, GPIO_PIN_RESET);
 800598a:	4bc0      	ldr	r3, [pc, #768]	; (8005c8c <EnableMotors+0x374>)
 800598c:	2200      	movs	r2, #0
 800598e:	2101      	movs	r1, #1
 8005990:	0018      	movs	r0, r3
 8005992:	f00a fb96 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_6_GPIO_Port, DRV_RES_6_Pin, GPIO_PIN_RESET);
			break;
 8005996:	e170      	b.n	8005c7a <EnableMotors+0x362>
		case 2:
			HAL_GPIO_WritePin(DRV_EN_1_GPIO_Port, DRV_EN_1_Pin, GPIO_PIN_RESET);
 8005998:	4bbb      	ldr	r3, [pc, #748]	; (8005c88 <EnableMotors+0x370>)
 800599a:	2200      	movs	r2, #0
 800599c:	2180      	movs	r1, #128	; 0x80
 800599e:	0018      	movs	r0, r3
 80059a0:	f00a fb8f 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_1_GPIO_Port, DRV_RES_1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_2_GPIO_Port, DRV_EN_2_Pin, GPIO_PIN_SET);
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	00d9      	lsls	r1, r3, #3
 80059a8:	23a0      	movs	r3, #160	; 0xa0
 80059aa:	05db      	lsls	r3, r3, #23
 80059ac:	2201      	movs	r2, #1
 80059ae:	0018      	movs	r0, r3
 80059b0:	f00a fb87 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_2_GPIO_Port, DRV_RES_2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(DRV_EN_3_GPIO_Port, DRV_EN_3_Pin, GPIO_PIN_RESET);
 80059b4:	2380      	movs	r3, #128	; 0x80
 80059b6:	019b      	lsls	r3, r3, #6
 80059b8:	48b3      	ldr	r0, [pc, #716]	; (8005c88 <EnableMotors+0x370>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	0019      	movs	r1, r3
 80059be:	f00a fb80 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_3_GPIO_Port, DRV_RES_3_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_4_GPIO_Port, DRV_EN_4_Pin, GPIO_PIN_RESET);
 80059c2:	4bb1      	ldr	r3, [pc, #708]	; (8005c88 <EnableMotors+0x370>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	2101      	movs	r1, #1
 80059c8:	0018      	movs	r0, r3
 80059ca:	f00a fb7a 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_4_GPIO_Port, DRV_RES_4_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_5_GPIO_Port, DRV_EN_5_Pin, GPIO_PIN_RESET);
 80059ce:	23a0      	movs	r3, #160	; 0xa0
 80059d0:	05db      	lsls	r3, r3, #23
 80059d2:	2200      	movs	r2, #0
 80059d4:	2110      	movs	r1, #16
 80059d6:	0018      	movs	r0, r3
 80059d8:	f00a fb73 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_5_GPIO_Port, DRV_RES_5_Pin, GPIO_PIN_RESET);
 80059dc:	23a0      	movs	r3, #160	; 0xa0
 80059de:	05db      	lsls	r3, r3, #23
 80059e0:	2200      	movs	r2, #0
 80059e2:	2102      	movs	r1, #2
 80059e4:	0018      	movs	r0, r3
 80059e6:	f00a fb6c 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_EN_6_GPIO_Port, DRV_EN_6_Pin, GPIO_PIN_RESET);
 80059ea:	4ba8      	ldr	r3, [pc, #672]	; (8005c8c <EnableMotors+0x374>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	2101      	movs	r1, #1
 80059f0:	0018      	movs	r0, r3
 80059f2:	f00a fb66 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_6_GPIO_Port, DRV_RES_6_Pin, GPIO_PIN_RESET);
			break;
 80059f6:	e140      	b.n	8005c7a <EnableMotors+0x362>
		case 3:
			HAL_GPIO_WritePin(DRV_EN_1_GPIO_Port, DRV_EN_1_Pin, GPIO_PIN_RESET);
 80059f8:	4ba3      	ldr	r3, [pc, #652]	; (8005c88 <EnableMotors+0x370>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	2180      	movs	r1, #128	; 0x80
 80059fe:	0018      	movs	r0, r3
 8005a00:	f00a fb5f 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_1_GPIO_Port, DRV_RES_1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_2_GPIO_Port, DRV_EN_2_Pin, GPIO_PIN_RESET);
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	00d9      	lsls	r1, r3, #3
 8005a08:	23a0      	movs	r3, #160	; 0xa0
 8005a0a:	05db      	lsls	r3, r3, #23
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f00a fb57 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_2_GPIO_Port, DRV_RES_2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_3_GPIO_Port, DRV_EN_3_Pin, GPIO_PIN_SET);
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	019b      	lsls	r3, r3, #6
 8005a18:	489b      	ldr	r0, [pc, #620]	; (8005c88 <EnableMotors+0x370>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	0019      	movs	r1, r3
 8005a1e:	f00a fb50 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_3_GPIO_Port, DRV_RES_3_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(DRV_EN_4_GPIO_Port, DRV_EN_4_Pin, GPIO_PIN_RESET);
 8005a22:	4b99      	ldr	r3, [pc, #612]	; (8005c88 <EnableMotors+0x370>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	2101      	movs	r1, #1
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f00a fb4a 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_4_GPIO_Port, DRV_RES_4_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_5_GPIO_Port, DRV_EN_5_Pin, GPIO_PIN_RESET);
 8005a2e:	23a0      	movs	r3, #160	; 0xa0
 8005a30:	05db      	lsls	r3, r3, #23
 8005a32:	2200      	movs	r2, #0
 8005a34:	2110      	movs	r1, #16
 8005a36:	0018      	movs	r0, r3
 8005a38:	f00a fb43 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_5_GPIO_Port, DRV_RES_5_Pin, GPIO_PIN_RESET);
 8005a3c:	23a0      	movs	r3, #160	; 0xa0
 8005a3e:	05db      	lsls	r3, r3, #23
 8005a40:	2200      	movs	r2, #0
 8005a42:	2102      	movs	r1, #2
 8005a44:	0018      	movs	r0, r3
 8005a46:	f00a fb3c 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_EN_6_GPIO_Port, DRV_EN_6_Pin, GPIO_PIN_RESET);
 8005a4a:	4b90      	ldr	r3, [pc, #576]	; (8005c8c <EnableMotors+0x374>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2101      	movs	r1, #1
 8005a50:	0018      	movs	r0, r3
 8005a52:	f00a fb36 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_6_GPIO_Port, DRV_RES_6_Pin, GPIO_PIN_RESET);
			break;
 8005a56:	e110      	b.n	8005c7a <EnableMotors+0x362>
		case 4:
			HAL_GPIO_WritePin(DRV_EN_1_GPIO_Port, DRV_EN_1_Pin, GPIO_PIN_RESET);
 8005a58:	4b8b      	ldr	r3, [pc, #556]	; (8005c88 <EnableMotors+0x370>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2180      	movs	r1, #128	; 0x80
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f00a fb2f 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_1_GPIO_Port, DRV_RES_1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_2_GPIO_Port, DRV_EN_2_Pin, GPIO_PIN_RESET);
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	00d9      	lsls	r1, r3, #3
 8005a68:	23a0      	movs	r3, #160	; 0xa0
 8005a6a:	05db      	lsls	r3, r3, #23
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f00a fb27 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_2_GPIO_Port, DRV_RES_2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_3_GPIO_Port, DRV_EN_3_Pin, GPIO_PIN_RESET);
 8005a74:	2380      	movs	r3, #128	; 0x80
 8005a76:	019b      	lsls	r3, r3, #6
 8005a78:	4883      	ldr	r0, [pc, #524]	; (8005c88 <EnableMotors+0x370>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	f00a fb20 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_3_GPIO_Port, DRV_RES_3_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_4_GPIO_Port, DRV_EN_4_Pin, GPIO_PIN_SET);
 8005a82:	4b81      	ldr	r3, [pc, #516]	; (8005c88 <EnableMotors+0x370>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	2101      	movs	r1, #1
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f00a fb1a 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_4_GPIO_Port, DRV_RES_4_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(DRV_EN_5_GPIO_Port, DRV_EN_5_Pin, GPIO_PIN_RESET);
 8005a8e:	23a0      	movs	r3, #160	; 0xa0
 8005a90:	05db      	lsls	r3, r3, #23
 8005a92:	2200      	movs	r2, #0
 8005a94:	2110      	movs	r1, #16
 8005a96:	0018      	movs	r0, r3
 8005a98:	f00a fb13 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_5_GPIO_Port, DRV_RES_5_Pin, GPIO_PIN_RESET);
 8005a9c:	23a0      	movs	r3, #160	; 0xa0
 8005a9e:	05db      	lsls	r3, r3, #23
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f00a fb0c 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_EN_6_GPIO_Port, DRV_EN_6_Pin, GPIO_PIN_RESET);
 8005aaa:	4b78      	ldr	r3, [pc, #480]	; (8005c8c <EnableMotors+0x374>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	2101      	movs	r1, #1
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f00a fb06 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_6_GPIO_Port, DRV_RES_6_Pin, GPIO_PIN_RESET);
			break;
 8005ab6:	e0e0      	b.n	8005c7a <EnableMotors+0x362>
		case 5:
			HAL_GPIO_WritePin(DRV_EN_1_GPIO_Port, DRV_EN_1_Pin, GPIO_PIN_RESET);
 8005ab8:	4b73      	ldr	r3, [pc, #460]	; (8005c88 <EnableMotors+0x370>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	2180      	movs	r1, #128	; 0x80
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f00a faff 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_1_GPIO_Port, DRV_RES_1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_2_GPIO_Port, DRV_EN_2_Pin, GPIO_PIN_RESET);
 8005ac4:	2380      	movs	r3, #128	; 0x80
 8005ac6:	00d9      	lsls	r1, r3, #3
 8005ac8:	23a0      	movs	r3, #160	; 0xa0
 8005aca:	05db      	lsls	r3, r3, #23
 8005acc:	2200      	movs	r2, #0
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f00a faf7 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_2_GPIO_Port, DRV_RES_2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_3_GPIO_Port, DRV_EN_3_Pin, GPIO_PIN_RESET);
 8005ad4:	2380      	movs	r3, #128	; 0x80
 8005ad6:	019b      	lsls	r3, r3, #6
 8005ad8:	486b      	ldr	r0, [pc, #428]	; (8005c88 <EnableMotors+0x370>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	0019      	movs	r1, r3
 8005ade:	f00a faf0 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_3_GPIO_Port, DRV_RES_3_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_4_GPIO_Port, DRV_EN_4_Pin, GPIO_PIN_RESET);
 8005ae2:	4b69      	ldr	r3, [pc, #420]	; (8005c88 <EnableMotors+0x370>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f00a faea 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_4_GPIO_Port, DRV_RES_4_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_5_GPIO_Port, DRV_EN_5_Pin, GPIO_PIN_SET);
 8005aee:	23a0      	movs	r3, #160	; 0xa0
 8005af0:	05db      	lsls	r3, r3, #23
 8005af2:	2201      	movs	r2, #1
 8005af4:	2110      	movs	r1, #16
 8005af6:	0018      	movs	r0, r3
 8005af8:	f00a fae3 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_5_GPIO_Port, DRV_RES_5_Pin, GPIO_PIN_SET);
 8005afc:	23a0      	movs	r3, #160	; 0xa0
 8005afe:	05db      	lsls	r3, r3, #23
 8005b00:	2201      	movs	r2, #1
 8005b02:	2102      	movs	r1, #2
 8005b04:	0018      	movs	r0, r3
 8005b06:	f00a fadc 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_EN_6_GPIO_Port, DRV_EN_6_Pin, GPIO_PIN_RESET);
 8005b0a:	4b60      	ldr	r3, [pc, #384]	; (8005c8c <EnableMotors+0x374>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2101      	movs	r1, #1
 8005b10:	0018      	movs	r0, r3
 8005b12:	f00a fad6 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_6_GPIO_Port, DRV_RES_6_Pin, GPIO_PIN_RESET);
			break;
 8005b16:	e0b0      	b.n	8005c7a <EnableMotors+0x362>
		case 6:
			HAL_GPIO_WritePin(DRV_EN_1_GPIO_Port, DRV_EN_1_Pin, GPIO_PIN_RESET);
 8005b18:	4b5b      	ldr	r3, [pc, #364]	; (8005c88 <EnableMotors+0x370>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2180      	movs	r1, #128	; 0x80
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f00a facf 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_1_GPIO_Port, DRV_RES_1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_2_GPIO_Port, DRV_EN_2_Pin, GPIO_PIN_RESET);
 8005b24:	2380      	movs	r3, #128	; 0x80
 8005b26:	00d9      	lsls	r1, r3, #3
 8005b28:	23a0      	movs	r3, #160	; 0xa0
 8005b2a:	05db      	lsls	r3, r3, #23
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f00a fac7 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_2_GPIO_Port, DRV_RES_2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_3_GPIO_Port, DRV_EN_3_Pin, GPIO_PIN_RESET);
 8005b34:	2380      	movs	r3, #128	; 0x80
 8005b36:	019b      	lsls	r3, r3, #6
 8005b38:	4853      	ldr	r0, [pc, #332]	; (8005c88 <EnableMotors+0x370>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	0019      	movs	r1, r3
 8005b3e:	f00a fac0 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_3_GPIO_Port, DRV_RES_3_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_4_GPIO_Port, DRV_EN_4_Pin, GPIO_PIN_RESET);
 8005b42:	4b51      	ldr	r3, [pc, #324]	; (8005c88 <EnableMotors+0x370>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	2101      	movs	r1, #1
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f00a faba 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_4_GPIO_Port, DRV_RES_4_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRV_EN_5_GPIO_Port, DRV_EN_5_Pin, GPIO_PIN_RESET);
 8005b4e:	23a0      	movs	r3, #160	; 0xa0
 8005b50:	05db      	lsls	r3, r3, #23
 8005b52:	2200      	movs	r2, #0
 8005b54:	2110      	movs	r1, #16
 8005b56:	0018      	movs	r0, r3
 8005b58:	f00a fab3 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_5_GPIO_Port, DRV_RES_5_Pin, GPIO_PIN_RESET);
 8005b5c:	23a0      	movs	r3, #160	; 0xa0
 8005b5e:	05db      	lsls	r3, r3, #23
 8005b60:	2200      	movs	r2, #0
 8005b62:	2102      	movs	r1, #2
 8005b64:	0018      	movs	r0, r3
 8005b66:	f00a faac 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_EN_6_GPIO_Port, DRV_EN_6_Pin, GPIO_PIN_SET);
 8005b6a:	4b48      	ldr	r3, [pc, #288]	; (8005c8c <EnableMotors+0x374>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	2101      	movs	r1, #1
 8005b70:	0018      	movs	r0, r3
 8005b72:	f00a faa6 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_6_GPIO_Port, DRV_RES_6_Pin, GPIO_PIN_SET);
			break;
 8005b76:	e080      	b.n	8005c7a <EnableMotors+0x362>
		case 7:
			HAL_GPIO_WritePin(DRV_EN_1_GPIO_Port, DRV_EN_1_Pin, GPIO_PIN_SET);
 8005b78:	4b43      	ldr	r3, [pc, #268]	; (8005c88 <EnableMotors+0x370>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	2180      	movs	r1, #128	; 0x80
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f00a fa9f 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_1_GPIO_Port, DRV_RES_1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(DRV_EN_2_GPIO_Port, DRV_EN_2_Pin, GPIO_PIN_SET);
 8005b84:	2380      	movs	r3, #128	; 0x80
 8005b86:	00d9      	lsls	r1, r3, #3
 8005b88:	23a0      	movs	r3, #160	; 0xa0
 8005b8a:	05db      	lsls	r3, r3, #23
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f00a fa97 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_2_GPIO_Port, DRV_RES_2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(DRV_EN_3_GPIO_Port, DRV_EN_3_Pin, GPIO_PIN_SET);
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	019b      	lsls	r3, r3, #6
 8005b98:	483b      	ldr	r0, [pc, #236]	; (8005c88 <EnableMotors+0x370>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	f00a fa90 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_3_GPIO_Port, DRV_RES_3_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(DRV_EN_4_GPIO_Port, DRV_EN_4_Pin, GPIO_PIN_SET);
 8005ba2:	4b39      	ldr	r3, [pc, #228]	; (8005c88 <EnableMotors+0x370>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f00a fa8a 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_4_GPIO_Port, DRV_RES_4_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(DRV_EN_5_GPIO_Port, DRV_EN_5_Pin, GPIO_PIN_SET);
 8005bae:	23a0      	movs	r3, #160	; 0xa0
 8005bb0:	05db      	lsls	r3, r3, #23
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	2110      	movs	r1, #16
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f00a fa83 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_5_GPIO_Port, DRV_RES_5_Pin, GPIO_PIN_SET);
 8005bbc:	23a0      	movs	r3, #160	; 0xa0
 8005bbe:	05db      	lsls	r3, r3, #23
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	2102      	movs	r1, #2
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f00a fa7c 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_EN_6_GPIO_Port, DRV_EN_6_Pin, GPIO_PIN_SET);
 8005bca:	4b30      	ldr	r3, [pc, #192]	; (8005c8c <EnableMotors+0x374>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	2101      	movs	r1, #1
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f00a fa76 	bl	80100c2 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(DRV_RES_6_GPIO_Port, DRV_RES_6_Pin, GPIO_PIN_SET);
			break;
 8005bd6:	e050      	b.n	8005c7a <EnableMotors+0x362>
		default:
			HAL_GPIO_WritePin(DRV_EN_1_GPIO_Port, DRV_EN_1_Pin, GPIO_PIN_RESET);
 8005bd8:	4b2b      	ldr	r3, [pc, #172]	; (8005c88 <EnableMotors+0x370>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2180      	movs	r1, #128	; 0x80
 8005bde:	0018      	movs	r0, r3
 8005be0:	f00a fa6f 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_1_GPIO_Port, DRV_RES_1_Pin, GPIO_PIN_RESET);
 8005be4:	4b28      	ldr	r3, [pc, #160]	; (8005c88 <EnableMotors+0x370>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	2120      	movs	r1, #32
 8005bea:	0018      	movs	r0, r3
 8005bec:	f00a fa69 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_EN_2_GPIO_Port, DRV_EN_2_Pin, GPIO_PIN_RESET);
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	00d9      	lsls	r1, r3, #3
 8005bf4:	23a0      	movs	r3, #160	; 0xa0
 8005bf6:	05db      	lsls	r3, r3, #23
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f00a fa61 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_2_GPIO_Port, DRV_RES_2_Pin, GPIO_PIN_RESET);
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	0099      	lsls	r1, r3, #2
 8005c04:	23a0      	movs	r3, #160	; 0xa0
 8005c06:	05db      	lsls	r3, r3, #23
 8005c08:	2200      	movs	r2, #0
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f00a fa59 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_EN_3_GPIO_Port, DRV_EN_3_Pin, GPIO_PIN_RESET);
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	019b      	lsls	r3, r3, #6
 8005c14:	481c      	ldr	r0, [pc, #112]	; (8005c88 <EnableMotors+0x370>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	0019      	movs	r1, r3
 8005c1a:	f00a fa52 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_3_GPIO_Port, DRV_RES_3_Pin, GPIO_PIN_RESET);
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	015b      	lsls	r3, r3, #5
 8005c22:	4819      	ldr	r0, [pc, #100]	; (8005c88 <EnableMotors+0x370>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	0019      	movs	r1, r3
 8005c28:	f00a fa4b 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_EN_4_GPIO_Port, DRV_EN_4_Pin, GPIO_PIN_RESET);
 8005c2c:	4b16      	ldr	r3, [pc, #88]	; (8005c88 <EnableMotors+0x370>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2101      	movs	r1, #1
 8005c32:	0018      	movs	r0, r3
 8005c34:	f00a fa45 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_4_GPIO_Port, DRV_RES_4_Pin, GPIO_PIN_RESET);
 8005c38:	4b14      	ldr	r3, [pc, #80]	; (8005c8c <EnableMotors+0x374>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2120      	movs	r1, #32
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f00a fa3f 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_EN_5_GPIO_Port, DRV_EN_5_Pin, GPIO_PIN_RESET);
 8005c44:	23a0      	movs	r3, #160	; 0xa0
 8005c46:	05db      	lsls	r3, r3, #23
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2110      	movs	r1, #16
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f00a fa38 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_5_GPIO_Port, DRV_RES_5_Pin, GPIO_PIN_RESET);
 8005c52:	23a0      	movs	r3, #160	; 0xa0
 8005c54:	05db      	lsls	r3, r3, #23
 8005c56:	2200      	movs	r2, #0
 8005c58:	2102      	movs	r1, #2
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f00a fa31 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_EN_6_GPIO_Port, DRV_EN_6_Pin, GPIO_PIN_RESET);
 8005c60:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <EnableMotors+0x374>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	2101      	movs	r1, #1
 8005c66:	0018      	movs	r0, r3
 8005c68:	f00a fa2b 	bl	80100c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRV_RES_6_GPIO_Port, DRV_RES_6_Pin, GPIO_PIN_RESET);
 8005c6c:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <EnableMotors+0x378>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2102      	movs	r1, #2
 8005c72:	0018      	movs	r0, r3
 8005c74:	f00a fa25 	bl	80100c2 <HAL_GPIO_WritePin>
			break;
 8005c78:	46c0      	nop			; (mov r8, r8)
	}
}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b002      	add	sp, #8
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	080162d8 	.word	0x080162d8
 8005c88:	50000400 	.word	0x50000400
 8005c8c:	50000800 	.word	0x50000800
 8005c90:	50001c00 	.word	0x50001c00

08005c94 <calib_motor>:


void calib_motor(void) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
	int32_t pos;

	EnableMotors(1);
 8005c9a:	2001      	movs	r0, #1
 8005c9c:	f7ff fe3c 	bl	8005918 <EnableMotors>
	//-----Set Home position according FCA
	if (HAL_GPIO_ReadPin(DRV_FCA_1_GPIO_Port, DRV_FCA_1_Pin) == GPIO_PIN_SET) {
 8005ca0:	2380      	movs	r3, #128	; 0x80
 8005ca2:	021a      	lsls	r2, r3, #8
 8005ca4:	23a0      	movs	r3, #160	; 0xa0
 8005ca6:	05db      	lsls	r3, r3, #23
 8005ca8:	0011      	movs	r1, r2
 8005caa:	0018      	movs	r0, r3
 8005cac:	f00a f9ec 	bl	8010088 <HAL_GPIO_ReadPin>
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d114      	bne.n	8005ce0 <calib_motor+0x4c>
		//-----Move device BACKWARD till get far from FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, BACKWARD);
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	2000      	movs	r0, #0
 8005cba:	f009 faf9 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8005cbe:	20c8      	movs	r0, #200	; 0xc8
 8005cc0:	f009 fdec 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_1_GPIO_Port, DRV_FCA_1_Pin) == GPIO_PIN_SET);
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	021a      	lsls	r2, r3, #8
 8005cc8:	23a0      	movs	r3, #160	; 0xa0
 8005cca:	05db      	lsls	r3, r3, #23
 8005ccc:	0011      	movs	r1, r2
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f00a f9da 	bl	8010088 <HAL_GPIO_ReadPin>
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d0ed      	beq.n	8005cb6 <calib_motor+0x22>

		stopMotor();
 8005cda:	f000 fa03 	bl	80060e4 <stopMotor>
 8005cde:	e022      	b.n	8005d26 <calib_motor+0x92>

	} else {
		//-----Move device FORWARD till get to FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, FORWARD);
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	f009 fae4 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8005ce8:	20c8      	movs	r0, #200	; 0xc8
 8005cea:	f009 fdd7 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_1_GPIO_Port, DRV_FCA_1_Pin)== GPIO_PIN_RESET);
 8005cee:	2380      	movs	r3, #128	; 0x80
 8005cf0:	021a      	lsls	r2, r3, #8
 8005cf2:	23a0      	movs	r3, #160	; 0xa0
 8005cf4:	05db      	lsls	r3, r3, #23
 8005cf6:	0011      	movs	r1, r2
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f00a f9c5 	bl	8010088 <HAL_GPIO_ReadPin>
 8005cfe:	1e03      	subs	r3, r0, #0
 8005d00:	d0ee      	beq.n	8005ce0 <calib_motor+0x4c>

		//-----Move device BACKWARD till get far from FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, BACKWARD);
 8005d02:	2100      	movs	r1, #0
 8005d04:	2000      	movs	r0, #0
 8005d06:	f009 fad3 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8005d0a:	20c8      	movs	r0, #200	; 0xc8
 8005d0c:	f009 fdc6 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_1_GPIO_Port, DRV_FCA_1_Pin) == GPIO_PIN_SET);
 8005d10:	2380      	movs	r3, #128	; 0x80
 8005d12:	021a      	lsls	r2, r3, #8
 8005d14:	23a0      	movs	r3, #160	; 0xa0
 8005d16:	05db      	lsls	r3, r3, #23
 8005d18:	0011      	movs	r1, r2
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f00a f9b4 	bl	8010088 <HAL_GPIO_ReadPin>
 8005d20:	0003      	movs	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d0ed      	beq.n	8005d02 <calib_motor+0x6e>
	}
	if(AJUSTE_INICIAL>=0) {
		BSP_MotorControl_Move(MOTOR_ID, BACKWARD, STEP_1MM *AJUSTE_INICIAL);
	}else {
		BSP_MotorControl_Move(MOTOR_ID, FORWARD, STEP_1MM *-AJUSTE_INICIAL);
 8005d26:	4b13      	ldr	r3, [pc, #76]	; (8005d74 <calib_motor+0xe0>)
 8005d28:	001a      	movs	r2, r3
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	f009 fa93 	bl	800f258 <BSP_MotorControl_Move>
	}
	BSP_MotorControl_WaitWhileActive(MOTOR_ID);
 8005d32:	2000      	movs	r0, #0
 8005d34:	f009 fbf4 	bl	800f520 <BSP_MotorControl_WaitWhileActive>
	if(AJUSTE_INICIAL_M1>=0) {
		BSP_MotorControl_Move(MOTOR_ID, BACKWARD, STEP_1MM *AJUSTE_INICIAL_M1);
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	f009 fa8b 	bl	800f258 <BSP_MotorControl_Move>
	}else {
		BSP_MotorControl_Move(MOTOR_ID, FORWARD, STEP_1MM *-AJUSTE_INICIAL_M1);
	}
	BSP_MotorControl_WaitWhileActive(MOTOR_ID);
 8005d42:	2000      	movs	r0, #0
 8005d44:	f009 fbec 	bl	800f520 <BSP_MotorControl_WaitWhileActive>
	stopMotor();
 8005d48:	f000 f9cc 	bl	80060e4 <stopMotor>
	/* Get current position */
	pos = BSP_MotorControl_GetPosition(MOTOR_ID);
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	f009 fa35 	bl	800f1bc <BSP_MotorControl_GetPosition>
 8005d52:	0003      	movs	r3, r0
 8005d54:	607b      	str	r3, [r7, #4]
	/* Set the current position to be the Home position */
	BSP_MotorControl_SetHome(MOTOR_ID, pos);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	0019      	movs	r1, r3
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f009 fb36 	bl	800f3cc <BSP_MotorControl_SetHome>
	HAL_Delay(T_STOP);
 8005d60:	23fa      	movs	r3, #250	; 0xfa
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	0018      	movs	r0, r3
 8005d66:	f009 fd99 	bl	800f89c <HAL_Delay>
		BSP_MotorControl_WaitWhileActive(MOTOR_ID);
		/* Get current position */
		pos = BSP_MotorControl_GetPosition(MOTOR_ID);
		stopMotor();
	}
}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b002      	add	sp, #8
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	000015cb 	.word	0x000015cb

08005d78 <calib_motor2>:

void calib_motor2(void) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
	int32_t pos;

	EnableMotors(2);
 8005d7e:	2002      	movs	r0, #2
 8005d80:	f7ff fdca 	bl	8005918 <EnableMotors>
	//-----Set Home position according FC1
	if (HAL_GPIO_ReadPin(DRV_FCA_2_GPIO_Port, DRV_FCA_2_Pin) == GPIO_PIN_SET) {
 8005d84:	2380      	movs	r3, #128	; 0x80
 8005d86:	011a      	lsls	r2, r3, #4
 8005d88:	23a0      	movs	r3, #160	; 0xa0
 8005d8a:	05db      	lsls	r3, r3, #23
 8005d8c:	0011      	movs	r1, r2
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f00a f97a 	bl	8010088 <HAL_GPIO_ReadPin>
 8005d94:	0003      	movs	r3, r0
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d114      	bne.n	8005dc4 <calib_motor2+0x4c>
		//-----Move device BACKWARD till get far from FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, BACKWARD);
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	f009 fa87 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8005da2:	20c8      	movs	r0, #200	; 0xc8
 8005da4:	f009 fd7a 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_2_GPIO_Port, DRV_FCA_2_Pin) == GPIO_PIN_SET);
 8005da8:	2380      	movs	r3, #128	; 0x80
 8005daa:	011a      	lsls	r2, r3, #4
 8005dac:	23a0      	movs	r3, #160	; 0xa0
 8005dae:	05db      	lsls	r3, r3, #23
 8005db0:	0011      	movs	r1, r2
 8005db2:	0018      	movs	r0, r3
 8005db4:	f00a f968 	bl	8010088 <HAL_GPIO_ReadPin>
 8005db8:	0003      	movs	r3, r0
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d0ed      	beq.n	8005d9a <calib_motor2+0x22>

		stopMotor();
 8005dbe:	f000 f991 	bl	80060e4 <stopMotor>
 8005dc2:	e022      	b.n	8005e0a <calib_motor2+0x92>

	} else {
		//-----Move device FORWARD till get to FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, FORWARD);
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	f009 fa72 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8005dcc:	20c8      	movs	r0, #200	; 0xc8
 8005dce:	f009 fd65 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_2_GPIO_Port, DRV_FCA_2_Pin)== GPIO_PIN_RESET);
 8005dd2:	2380      	movs	r3, #128	; 0x80
 8005dd4:	011a      	lsls	r2, r3, #4
 8005dd6:	23a0      	movs	r3, #160	; 0xa0
 8005dd8:	05db      	lsls	r3, r3, #23
 8005dda:	0011      	movs	r1, r2
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f00a f953 	bl	8010088 <HAL_GPIO_ReadPin>
 8005de2:	1e03      	subs	r3, r0, #0
 8005de4:	d0ee      	beq.n	8005dc4 <calib_motor2+0x4c>

		//-----Move device BACKWARD till get far from FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, BACKWARD);
 8005de6:	2100      	movs	r1, #0
 8005de8:	2000      	movs	r0, #0
 8005dea:	f009 fa61 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8005dee:	20c8      	movs	r0, #200	; 0xc8
 8005df0:	f009 fd54 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_2_GPIO_Port, DRV_FCA_2_Pin)
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	011a      	lsls	r2, r3, #4
 8005df8:	23a0      	movs	r3, #160	; 0xa0
 8005dfa:	05db      	lsls	r3, r3, #23
 8005dfc:	0011      	movs	r1, r2
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f00a f942 	bl	8010088 <HAL_GPIO_ReadPin>
 8005e04:	0003      	movs	r3, r0
				== GPIO_PIN_SET);
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d0ed      	beq.n	8005de6 <calib_motor2+0x6e>
	if(AJUSTE_INICIAL>=0)
	{
		BSP_MotorControl_Move(MOTOR_ID, BACKWARD, STEP_1MM *AJUSTE_INICIAL);
	}else
	{
		BSP_MotorControl_Move(MOTOR_ID, FORWARD, STEP_1MM *-AJUSTE_INICIAL);
 8005e0a:	4b13      	ldr	r3, [pc, #76]	; (8005e58 <calib_motor2+0xe0>)
 8005e0c:	001a      	movs	r2, r3
 8005e0e:	2101      	movs	r1, #1
 8005e10:	2000      	movs	r0, #0
 8005e12:	f009 fa21 	bl	800f258 <BSP_MotorControl_Move>
	}
	BSP_MotorControl_WaitWhileActive(MOTOR_ID);
 8005e16:	2000      	movs	r0, #0
 8005e18:	f009 fb82 	bl	800f520 <BSP_MotorControl_WaitWhileActive>
	if(AJUSTE_INICIAL_M2>=0) {
		BSP_MotorControl_Move(MOTOR_ID, BACKWARD, STEP_1MM *AJUSTE_INICIAL_M2);
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2100      	movs	r1, #0
 8005e20:	2000      	movs	r0, #0
 8005e22:	f009 fa19 	bl	800f258 <BSP_MotorControl_Move>
	}else {
		BSP_MotorControl_Move(MOTOR_ID, FORWARD, STEP_1MM *-AJUSTE_INICIAL_M2);
	}
	BSP_MotorControl_WaitWhileActive(MOTOR_ID);
 8005e26:	2000      	movs	r0, #0
 8005e28:	f009 fb7a 	bl	800f520 <BSP_MotorControl_WaitWhileActive>
//	BSP_MotorControl_Move(MOTOR_ID, FORWARD, STEP_1MM *5);

	stopMotor();
 8005e2c:	f000 f95a 	bl	80060e4 <stopMotor>
	/* Get current position */
	pos = BSP_MotorControl_GetPosition(MOTOR_ID);
 8005e30:	2000      	movs	r0, #0
 8005e32:	f009 f9c3 	bl	800f1bc <BSP_MotorControl_GetPosition>
 8005e36:	0003      	movs	r3, r0
 8005e38:	607b      	str	r3, [r7, #4]
	/* Set the current position to be the Home position */
	BSP_MotorControl_SetHome(MOTOR_ID, pos);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	0019      	movs	r1, r3
 8005e3e:	2000      	movs	r0, #0
 8005e40:	f009 fac4 	bl	800f3cc <BSP_MotorControl_SetHome>

	HAL_Delay(T_STOP);
 8005e44:	23fa      	movs	r3, #250	; 0xfa
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f009 fd27 	bl	800f89c <HAL_Delay>
		/* Get current position */
		pos = BSP_MotorControl_GetPosition(MOTOR_ID);

		stopMotor();
	}
}
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b002      	add	sp, #8
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	000015cb 	.word	0x000015cb

08005e5c <calib_motor3>:

void calib_motor3(void) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
	int32_t pos;

	EnableMotors(3);
 8005e62:	2003      	movs	r0, #3
 8005e64:	f7ff fd58 	bl	8005918 <EnableMotors>
////-------------------------------------------------------------------------------------------------
	//-----Set Home position according FC1
	if (HAL_GPIO_ReadPin(DRV_FCA_3_GPIO_Port, DRV_FCA_3_Pin) == GPIO_PIN_SET) {
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	4a31      	ldr	r2, [pc, #196]	; (8005f34 <calib_motor3+0xd8>)
 8005e6e:	0019      	movs	r1, r3
 8005e70:	0010      	movs	r0, r2
 8005e72:	f00a f909 	bl	8010088 <HAL_GPIO_ReadPin>
 8005e76:	0003      	movs	r3, r0
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d113      	bne.n	8005ea4 <calib_motor3+0x48>
//-----Move device BACKWARD till get far from FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, BACKWARD);
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	2000      	movs	r0, #0
 8005e80:	f009 fa16 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8005e84:	20c8      	movs	r0, #200	; 0xc8
 8005e86:	f009 fd09 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_3_GPIO_Port, DRV_FCA_3_Pin) == GPIO_PIN_SET);
 8005e8a:	2380      	movs	r3, #128	; 0x80
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	4a29      	ldr	r2, [pc, #164]	; (8005f34 <calib_motor3+0xd8>)
 8005e90:	0019      	movs	r1, r3
 8005e92:	0010      	movs	r0, r2
 8005e94:	f00a f8f8 	bl	8010088 <HAL_GPIO_ReadPin>
 8005e98:	0003      	movs	r3, r0
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d0ee      	beq.n	8005e7c <calib_motor3+0x20>
		stopMotor();
 8005e9e:	f000 f921 	bl	80060e4 <stopMotor>
 8005ea2:	e020      	b.n	8005ee6 <calib_motor3+0x8a>
	} else {
//-----Move device FORWARD till get to FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, FORWARD);
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	f009 fa02 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8005eac:	20c8      	movs	r0, #200	; 0xc8
 8005eae:	f009 fcf5 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_3_GPIO_Port, DRV_FCA_3_Pin)== GPIO_PIN_RESET);
 8005eb2:	2380      	movs	r3, #128	; 0x80
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	4a1f      	ldr	r2, [pc, #124]	; (8005f34 <calib_motor3+0xd8>)
 8005eb8:	0019      	movs	r1, r3
 8005eba:	0010      	movs	r0, r2
 8005ebc:	f00a f8e4 	bl	8010088 <HAL_GPIO_ReadPin>
 8005ec0:	1e03      	subs	r3, r0, #0
 8005ec2:	d0ef      	beq.n	8005ea4 <calib_motor3+0x48>
//-----Move device BACKWARD till get far from FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, BACKWARD);
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f009 f9f2 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8005ecc:	20c8      	movs	r0, #200	; 0xc8
 8005ece:	f009 fce5 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_3_GPIO_Port, DRV_FCA_3_Pin)
 8005ed2:	2380      	movs	r3, #128	; 0x80
 8005ed4:	021b      	lsls	r3, r3, #8
 8005ed6:	4a17      	ldr	r2, [pc, #92]	; (8005f34 <calib_motor3+0xd8>)
 8005ed8:	0019      	movs	r1, r3
 8005eda:	0010      	movs	r0, r2
 8005edc:	f00a f8d4 	bl	8010088 <HAL_GPIO_ReadPin>
 8005ee0:	0003      	movs	r3, r0
				== GPIO_PIN_SET);
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d0ee      	beq.n	8005ec4 <calib_motor3+0x68>
	if(AJUSTE_INICIAL>=0)
	{
		BSP_MotorControl_Move(MOTOR_ID, BACKWARD, STEP_1MM *AJUSTE_INICIAL);
	}else
	{
		BSP_MotorControl_Move(MOTOR_ID, FORWARD, STEP_1MM *-AJUSTE_INICIAL);
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <calib_motor3+0xdc>)
 8005ee8:	001a      	movs	r2, r3
 8005eea:	2101      	movs	r1, #1
 8005eec:	2000      	movs	r0, #0
 8005eee:	f009 f9b3 	bl	800f258 <BSP_MotorControl_Move>
	}
	BSP_MotorControl_WaitWhileActive(MOTOR_ID);
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	f009 fb14 	bl	800f520 <BSP_MotorControl_WaitWhileActive>
	if(AJUSTE_INICIAL_M3>=0) {
		BSP_MotorControl_Move(MOTOR_ID, BACKWARD, STEP_1MM *AJUSTE_INICIAL_M3);
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2100      	movs	r1, #0
 8005efc:	2000      	movs	r0, #0
 8005efe:	f009 f9ab 	bl	800f258 <BSP_MotorControl_Move>
	}else {
		BSP_MotorControl_Move(MOTOR_ID, FORWARD, STEP_1MM *-AJUSTE_INICIAL_M3);
	}
	BSP_MotorControl_WaitWhileActive(MOTOR_ID);
 8005f02:	2000      	movs	r0, #0
 8005f04:	f009 fb0c 	bl	800f520 <BSP_MotorControl_WaitWhileActive>
	stopMotor();
 8005f08:	f000 f8ec 	bl	80060e4 <stopMotor>
	/* Get current position */
	pos = BSP_MotorControl_GetPosition(MOTOR_ID);
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f009 f955 	bl	800f1bc <BSP_MotorControl_GetPosition>
 8005f12:	0003      	movs	r3, r0
 8005f14:	607b      	str	r3, [r7, #4]

	/* Set the current position to be the Home position */
	BSP_MotorControl_SetHome(MOTOR_ID, pos);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	0019      	movs	r1, r3
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	f009 fa56 	bl	800f3cc <BSP_MotorControl_SetHome>

	HAL_Delay(T_STOP);
 8005f20:	23fa      	movs	r3, #250	; 0xfa
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	0018      	movs	r0, r3
 8005f26:	f009 fcb9 	bl	800f89c <HAL_Delay>
		BSP_MotorControl_WaitWhileActive(MOTOR_ID);
		/* Get current position */
		pos = BSP_MotorControl_GetPosition(MOTOR_ID);
		stopMotor();
	}
}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b002      	add	sp, #8
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	50000400 	.word	0x50000400
 8005f38:	000015cb 	.word	0x000015cb

08005f3c <calib_motor4>:

void calib_motor4(void) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
	int32_t pos;

	EnableMotors(4);
 8005f42:	2004      	movs	r0, #4
 8005f44:	f7ff fce8 	bl	8005918 <EnableMotors>
////-------------------------------------------------------------------------------------------------
	//-----Set Home position according FC1
	if (HAL_GPIO_ReadPin(DRV_FCA_4_GPIO_Port, DRV_FCA_4_Pin) == GPIO_PIN_SET) {
 8005f48:	23a0      	movs	r3, #160	; 0xa0
 8005f4a:	05db      	lsls	r3, r3, #23
 8005f4c:	2180      	movs	r1, #128	; 0x80
 8005f4e:	0018      	movs	r0, r3
 8005f50:	f00a f89a 	bl	8010088 <HAL_GPIO_ReadPin>
 8005f54:	0003      	movs	r3, r0
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d112      	bne.n	8005f80 <calib_motor4+0x44>
//-----Move device BACKWARD till get far from FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, BACKWARD);
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f009 f9a7 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8005f62:	20c8      	movs	r0, #200	; 0xc8
 8005f64:	f009 fc9a 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_4_GPIO_Port, DRV_FCA_4_Pin) == GPIO_PIN_SET);
 8005f68:	23a0      	movs	r3, #160	; 0xa0
 8005f6a:	05db      	lsls	r3, r3, #23
 8005f6c:	2180      	movs	r1, #128	; 0x80
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f00a f88a 	bl	8010088 <HAL_GPIO_ReadPin>
 8005f74:	0003      	movs	r3, r0
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d0ef      	beq.n	8005f5a <calib_motor4+0x1e>

		stopMotor();
 8005f7a:	f000 f8b3 	bl	80060e4 <stopMotor>
 8005f7e:	e01e      	b.n	8005fbe <calib_motor4+0x82>

	} else {
//-----Move device FORWARD till get to FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, FORWARD);
 8005f80:	2101      	movs	r1, #1
 8005f82:	2000      	movs	r0, #0
 8005f84:	f009 f994 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8005f88:	20c8      	movs	r0, #200	; 0xc8
 8005f8a:	f009 fc87 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_4_GPIO_Port, DRV_FCA_4_Pin)== GPIO_PIN_RESET);
 8005f8e:	23a0      	movs	r3, #160	; 0xa0
 8005f90:	05db      	lsls	r3, r3, #23
 8005f92:	2180      	movs	r1, #128	; 0x80
 8005f94:	0018      	movs	r0, r3
 8005f96:	f00a f877 	bl	8010088 <HAL_GPIO_ReadPin>
 8005f9a:	1e03      	subs	r3, r0, #0
 8005f9c:	d0f0      	beq.n	8005f80 <calib_motor4+0x44>

//-----Move device BACKWARD till get far from FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, BACKWARD);
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f009 f985 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8005fa6:	20c8      	movs	r0, #200	; 0xc8
 8005fa8:	f009 fc78 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_4_GPIO_Port, DRV_FCA_4_Pin)
 8005fac:	23a0      	movs	r3, #160	; 0xa0
 8005fae:	05db      	lsls	r3, r3, #23
 8005fb0:	2180      	movs	r1, #128	; 0x80
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f00a f868 	bl	8010088 <HAL_GPIO_ReadPin>
 8005fb8:	0003      	movs	r3, r0
				== GPIO_PIN_SET);
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d0ef      	beq.n	8005f9e <calib_motor4+0x62>
	if(AJUSTE_INICIAL>=0)
	{
		BSP_MotorControl_Move(MOTOR_ID, BACKWARD, STEP_1MM *AJUSTE_INICIAL);
	}else
	{
		BSP_MotorControl_Move(MOTOR_ID, FORWARD, STEP_1MM *-AJUSTE_INICIAL);
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <calib_motor4+0xd0>)
 8005fc0:	001a      	movs	r2, r3
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f009 f947 	bl	800f258 <BSP_MotorControl_Move>
	}
	BSP_MotorControl_WaitWhileActive(MOTOR_ID);
 8005fca:	2000      	movs	r0, #0
 8005fcc:	f009 faa8 	bl	800f520 <BSP_MotorControl_WaitWhileActive>
	if(AJUSTE_INICIAL_M4>=0) {
		BSP_MotorControl_Move(MOTOR_ID, BACKWARD, STEP_1MM *AJUSTE_INICIAL_M4);
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	f009 f93f 	bl	800f258 <BSP_MotorControl_Move>
	}else {
		BSP_MotorControl_Move(MOTOR_ID, FORWARD, STEP_1MM *-AJUSTE_INICIAL_M4);
	}
	BSP_MotorControl_WaitWhileActive(MOTOR_ID);
 8005fda:	2000      	movs	r0, #0
 8005fdc:	f009 faa0 	bl	800f520 <BSP_MotorControl_WaitWhileActive>
	stopMotor();
 8005fe0:	f000 f880 	bl	80060e4 <stopMotor>

	/* Get current position */
	pos = BSP_MotorControl_GetPosition(MOTOR_ID);
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	f009 f8e9 	bl	800f1bc <BSP_MotorControl_GetPosition>
 8005fea:	0003      	movs	r3, r0
 8005fec:	607b      	str	r3, [r7, #4]

	/* Set the current position to be the Home position */
	BSP_MotorControl_SetHome(MOTOR_ID, pos);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	0019      	movs	r1, r3
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	f009 f9ea 	bl	800f3cc <BSP_MotorControl_SetHome>

	HAL_Delay(T_STOP);
 8005ff8:	23fa      	movs	r3, #250	; 0xfa
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f009 fc4d 	bl	800f89c <HAL_Delay>
		BSP_MotorControl_WaitWhileActive(MOTOR_ID);
		/* Get current position */
		pos = BSP_MotorControl_GetPosition(MOTOR_ID);
		stopMotor();
	}
}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	46bd      	mov	sp, r7
 8006006:	b002      	add	sp, #8
 8006008:	bd80      	pop	{r7, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	000015cb 	.word	0x000015cb

08006010 <calib_motor5>:

void calib_motor5(void) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
	int32_t pos;

	EnableMotors(5);
 8006016:	2005      	movs	r0, #5
 8006018:	f7ff fc7e 	bl	8005918 <EnableMotors>
////-------------------------------------------------------------------------------------------------
	//-----Set Home position according FC1
	if (HAL_GPIO_ReadPin(DRV_FCA_5_GPIO_Port, DRV_FCA_5_Pin) == GPIO_PIN_SET) {
 800601c:	4b2e      	ldr	r3, [pc, #184]	; (80060d8 <calib_motor5+0xc8>)
 800601e:	2108      	movs	r1, #8
 8006020:	0018      	movs	r0, r3
 8006022:	f00a f831 	bl	8010088 <HAL_GPIO_ReadPin>
 8006026:	0003      	movs	r3, r0
 8006028:	2b01      	cmp	r3, #1
 800602a:	d111      	bne.n	8006050 <calib_motor5+0x40>
//-----Move device BACKWARD till get far from FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, BACKWARD);
 800602c:	2100      	movs	r1, #0
 800602e:	2000      	movs	r0, #0
 8006030:	f009 f93e 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8006034:	20c8      	movs	r0, #200	; 0xc8
 8006036:	f009 fc31 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_5_GPIO_Port, DRV_FCA_5_Pin) == GPIO_PIN_SET);
 800603a:	4b27      	ldr	r3, [pc, #156]	; (80060d8 <calib_motor5+0xc8>)
 800603c:	2108      	movs	r1, #8
 800603e:	0018      	movs	r0, r3
 8006040:	f00a f822 	bl	8010088 <HAL_GPIO_ReadPin>
 8006044:	0003      	movs	r3, r0
 8006046:	2b01      	cmp	r3, #1
 8006048:	d0f0      	beq.n	800602c <calib_motor5+0x1c>

		stopMotor();
 800604a:	f000 f84b 	bl	80060e4 <stopMotor>
 800604e:	e01c      	b.n	800608a <calib_motor5+0x7a>

	} else {
//-----Move device FORWARD till get to FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, FORWARD);
 8006050:	2101      	movs	r1, #1
 8006052:	2000      	movs	r0, #0
 8006054:	f009 f92c 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8006058:	20c8      	movs	r0, #200	; 0xc8
 800605a:	f009 fc1f 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_5_GPIO_Port, DRV_FCA_5_Pin)== GPIO_PIN_RESET);
 800605e:	4b1e      	ldr	r3, [pc, #120]	; (80060d8 <calib_motor5+0xc8>)
 8006060:	2108      	movs	r1, #8
 8006062:	0018      	movs	r0, r3
 8006064:	f00a f810 	bl	8010088 <HAL_GPIO_ReadPin>
 8006068:	1e03      	subs	r3, r0, #0
 800606a:	d0f1      	beq.n	8006050 <calib_motor5+0x40>

//-----Move device BACKWARD till get far from FC1
		do {
			BSP_MotorControl_Run(MOTOR_ID, BACKWARD);
 800606c:	2100      	movs	r1, #0
 800606e:	2000      	movs	r0, #0
 8006070:	f009 f91e 	bl	800f2b0 <BSP_MotorControl_Run>
			HAL_Delay(T_FC);
 8006074:	20c8      	movs	r0, #200	; 0xc8
 8006076:	f009 fc11 	bl	800f89c <HAL_Delay>
		} while (HAL_GPIO_ReadPin(DRV_FCA_5_GPIO_Port, DRV_FCA_5_Pin)
 800607a:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <calib_motor5+0xc8>)
 800607c:	2108      	movs	r1, #8
 800607e:	0018      	movs	r0, r3
 8006080:	f00a f802 	bl	8010088 <HAL_GPIO_ReadPin>
 8006084:	0003      	movs	r3, r0
				== GPIO_PIN_SET);
 8006086:	2b01      	cmp	r3, #1
 8006088:	d0f0      	beq.n	800606c <calib_motor5+0x5c>
	if(AJUSTE_INICIAL>=0)
	{
		BSP_MotorControl_Move(MOTOR_ID, BACKWARD, STEP_1MM *AJUSTE_INICIAL);
	}else
	{
		BSP_MotorControl_Move(MOTOR_ID, FORWARD, STEP_1MM *-AJUSTE_INICIAL);
 800608a:	4b14      	ldr	r3, [pc, #80]	; (80060dc <calib_motor5+0xcc>)
 800608c:	001a      	movs	r2, r3
 800608e:	2101      	movs	r1, #1
 8006090:	2000      	movs	r0, #0
 8006092:	f009 f8e1 	bl	800f258 <BSP_MotorControl_Move>
	}
	BSP_MotorControl_WaitWhileActive(MOTOR_ID);
 8006096:	2000      	movs	r0, #0
 8006098:	f009 fa42 	bl	800f520 <BSP_MotorControl_WaitWhileActive>
	if(AJUSTE_INICIAL_M5>=0) {
		BSP_MotorControl_Move(MOTOR_ID, BACKWARD, STEP_1MM *AJUSTE_INICIAL_M5);
	}else {
		BSP_MotorControl_Move(MOTOR_ID, FORWARD, STEP_1MM *-AJUSTE_INICIAL_M5);
 800609c:	4b10      	ldr	r3, [pc, #64]	; (80060e0 <calib_motor5+0xd0>)
 800609e:	001a      	movs	r2, r3
 80060a0:	2101      	movs	r1, #1
 80060a2:	2000      	movs	r0, #0
 80060a4:	f009 f8d8 	bl	800f258 <BSP_MotorControl_Move>
	}
	BSP_MotorControl_WaitWhileActive(MOTOR_ID);
 80060a8:	2000      	movs	r0, #0
 80060aa:	f009 fa39 	bl	800f520 <BSP_MotorControl_WaitWhileActive>
	stopMotor();
 80060ae:	f000 f819 	bl	80060e4 <stopMotor>
	/* Get current position */
	pos = BSP_MotorControl_GetPosition(MOTOR_ID);
 80060b2:	2000      	movs	r0, #0
 80060b4:	f009 f882 	bl	800f1bc <BSP_MotorControl_GetPosition>
 80060b8:	0003      	movs	r3, r0
 80060ba:	607b      	str	r3, [r7, #4]
	/* Set the current position to be the Home position */
	BSP_MotorControl_SetHome(MOTOR_ID, pos);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	0019      	movs	r1, r3
 80060c0:	2000      	movs	r0, #0
 80060c2:	f009 f983 	bl	800f3cc <BSP_MotorControl_SetHome>

	HAL_Delay(T_STOP);
 80060c6:	23fa      	movs	r3, #250	; 0xfa
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	0018      	movs	r0, r3
 80060cc:	f009 fbe6 	bl	800f89c <HAL_Delay>
		BSP_MotorControl_WaitWhileActive(MOTOR_ID);
		/* Get current position */
		pos = BSP_MotorControl_GetPosition(MOTOR_ID);
		stopMotor();
	}
}
 80060d0:	46c0      	nop			; (mov r8, r8)
 80060d2:	46bd      	mov	sp, r7
 80060d4:	b002      	add	sp, #8
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	50000800 	.word	0x50000800
 80060dc:	000015cb 	.word	0x000015cb
 80060e0:	000018e8 	.word	0x000018e8

080060e4 <stopMotor>:
		BSP_MotorControl_WaitWhileActive(MOTOR_ID);
		stopMotor();
	}
}

void stopMotor(void){
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
	/* Request soft stop */
	BSP_MotorControl_SoftStop(MOTOR_ID);
 80060e8:	2000      	movs	r0, #0
 80060ea:	f009 f9c7 	bl	800f47c <BSP_MotorControl_SoftStop>
	/* Disable the power bridges */
	BSP_MotorControl_CmdDisable(MOTOR_ID);
 80060ee:	2000      	movs	r0, #0
 80060f0:	f009 fa3a 	bl	800f568 <BSP_MotorControl_CmdDisable>
	/* Wait for 0.5 second */
	HAL_Delay(T_STOP);
 80060f4:	23fa      	movs	r3, #250	; 0xfa
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	0018      	movs	r0, r3
 80060fa:	f009 fbcf 	bl	800f89c <HAL_Delay>
	/* Turn off power bridges when motor is stopped */
	BSP_MotorControl_SetStopMode(MOTOR_ID, HIZ_MODE);
 80060fe:	2101      	movs	r1, #1
 8006100:	2000      	movs	r0, #0
 8006102:	f009 fa81 	bl	800f608 <BSP_MotorControl_SetStopMode>
}
 8006106:	46c0      	nop			; (mov r8, r8)
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <MyFlagInterruptHandler>:
/**
 * @brief  This function is the User handler for the flag interrupt
 * @param  None
 * @retval None
 */
void MyFlagInterruptHandler(void) {
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
	//When EN pin is forced low by a failure, configure the GPIO as an ouput low
	BSP_MotorControl_CmdDisable(0);
 8006110:	2000      	movs	r0, #0
 8006112:	f009 fa29 	bl	800f568 <BSP_MotorControl_CmdDisable>
}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <MyErrorHandler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  error number of the error
 * @retval None
 */
void MyErrorHandler(uint16_t error) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	0002      	movs	r2, r0
 8006124:	1dbb      	adds	r3, r7, #6
 8006126:	801a      	strh	r2, [r3, #0]
	/* Backup error number */
	gLastError = error;
 8006128:	4b02      	ldr	r3, [pc, #8]	; (8006134 <MyErrorHandler+0x18>)
 800612a:	1dba      	adds	r2, r7, #6
 800612c:	8812      	ldrh	r2, [r2, #0]
 800612e:	801a      	strh	r2, [r3, #0]

	/* Infinite loop */
	while (1) {
 8006130:	e7fe      	b.n	8006130 <MyErrorHandler+0x14>
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	20000454 	.word	0x20000454

08006138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800613c:	46c0      	nop			; (mov r8, r8)
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <HAL_TIM_PWM_MspInit>:
  * @brief PWM MSP Initialization 
  * @param[in] htim_pwm PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  if(htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_PWM_REF)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a11      	ldr	r2, [pc, #68]	; (8006198 <HAL_TIM_PWM_MspInit+0x54>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d11b      	bne.n	800618e <HAL_TIM_PWM_MspInit+0x4a>
  {
    /* Peripheral clock enable */
    __BSP_MOTOR_CONTROL_BOARD_CLCK_ENABLE_PWM_REF();
 8006156:	4b11      	ldr	r3, [pc, #68]	; (800619c <HAL_TIM_PWM_MspInit+0x58>)
 8006158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800615a:	4b10      	ldr	r3, [pc, #64]	; (800619c <HAL_TIM_PWM_MspInit+0x58>)
 800615c:	2120      	movs	r1, #32
 800615e:	430a      	orrs	r2, r1
 8006160:	635a      	str	r2, [r3, #52]	; 0x34
  
    /* GPIO clock enable -----------------------------------------------------*/
    /* already done in STSPIN220 GPIO initialization function */
  
    /* Configure STSPIN220 - PWM for REF pin ---------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_PWM_REF;
 8006162:	210c      	movs	r1, #12
 8006164:	187b      	adds	r3, r7, r1
 8006166:	2280      	movs	r2, #128	; 0x80
 8006168:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800616a:	187b      	adds	r3, r7, r1
 800616c:	2202      	movs	r2, #2
 800616e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006170:	187b      	adds	r3, r7, r1
 8006172:	2200      	movs	r2, #0
 8006174:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8006176:	187b      	adds	r3, r7, r1
 8006178:	2201      	movs	r2, #1
 800617a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AF_PWM_REF;
 800617c:	187b      	adds	r3, r7, r1
 800617e:	2200      	movs	r2, #0
 8006180:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_PWM_REF, &GPIO_InitStruct);
 8006182:	187b      	adds	r3, r7, r1
 8006184:	4a06      	ldr	r2, [pc, #24]	; (80061a0 <HAL_TIM_PWM_MspInit+0x5c>)
 8006186:	0019      	movs	r1, r3
 8006188:	0010      	movs	r0, r2
 800618a:	f009 fd1d 	bl	800fbc8 <HAL_GPIO_Init>
  }
}
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	46bd      	mov	sp, r7
 8006192:	b008      	add	sp, #32
 8006194:	bd80      	pop	{r7, pc}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	40011400 	.word	0x40011400
 800619c:	40021000 	.word	0x40021000
 80061a0:	50000800 	.word	0x50000800

080061a4 <HAL_TIM_OC_MspInit>:
  * @brief TIM MSP Initialization
  * @param[in] htim TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  if(htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIM_STCK)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	2380      	movs	r3, #128	; 0x80
 80061b2:	05db      	lsls	r3, r3, #23
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d123      	bne.n	8006200 <HAL_TIM_OC_MspInit+0x5c>
  {
    /* Peripheral clock enable -----------------------------------------------*/
    __BSP_MOTOR_CONTROL_BOARD_CLCK_ENABLE_TIM_STCK();
 80061b8:	4b13      	ldr	r3, [pc, #76]	; (8006208 <HAL_TIM_OC_MspInit+0x64>)
 80061ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061bc:	4b12      	ldr	r3, [pc, #72]	; (8006208 <HAL_TIM_OC_MspInit+0x64>)
 80061be:	2101      	movs	r1, #1
 80061c0:	430a      	orrs	r2, r1
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* GPIO clock enable -----------------------------------------------------*/
    /* already done in STSPIN220 GPIO initialization function */
  
    /* Configure STSPIN220 - TIMER for STCK pin ------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3;
 80061c4:	210c      	movs	r1, #12
 80061c6:	187b      	adds	r3, r7, r1
 80061c8:	2208      	movs	r2, #8
 80061ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061cc:	187b      	adds	r3, r7, r1
 80061ce:	2202      	movs	r2, #2
 80061d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d2:	187b      	adds	r3, r7, r1
 80061d4:	2200      	movs	r2, #0
 80061d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80061d8:	187b      	adds	r3, r7, r1
 80061da:	2201      	movs	r2, #1
 80061dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AF_TIM_STCK;
 80061de:	187b      	adds	r3, r7, r1
 80061e0:	2202      	movs	r2, #2
 80061e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3, &GPIO_InitStruct);
 80061e4:	187b      	adds	r3, r7, r1
 80061e6:	4a09      	ldr	r2, [pc, #36]	; (800620c <HAL_TIM_OC_MspInit+0x68>)
 80061e8:	0019      	movs	r1, r3
 80061ea:	0010      	movs	r0, r2
 80061ec:	f009 fcec 	bl	800fbc8 <HAL_GPIO_Init>
      
    /* Enable the timer interrupt & set priority -----------------------------*/
    HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_IRQn_TIM_STCK,\
 80061f0:	2200      	movs	r2, #0
 80061f2:	2102      	movs	r1, #2
 80061f4:	200f      	movs	r0, #15
 80061f6:	f009 fc4d 	bl	800fa94 <HAL_NVIC_SetPriority>
      BSP_MOTOR_CONTROL_BOARD_PRIORITY_TIM_STCK,\
      0);
    HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_IRQn_TIM_STCK);
 80061fa:	200f      	movs	r0, #15
 80061fc:	f009 fc5f 	bl	800fabe <HAL_NVIC_EnableIRQ>
  }
}
 8006200:	46c0      	nop			; (mov r8, r8)
 8006202:	46bd      	mov	sp, r7
 8006204:	b008      	add	sp, #32
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40021000 	.word	0x40021000
 800620c:	50000400 	.word	0x50000400

08006210 <HAL_TIM_OC_MspDeInit>:
  * @brief TIM MSP DeInitialization
  * @param[in] htim TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  if(htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIM_STCK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	2380      	movs	r3, #128	; 0x80
 800621e:	05db      	lsls	r3, r3, #23
 8006220:	429a      	cmp	r2, r3
 8006222:	d10d      	bne.n	8006240 <HAL_TIM_OC_MspDeInit+0x30>
  {
    /* Peripheral clock disable ----------------------------------------------*/
    __BSP_MOTOR_CONTROL_BOARD_CLCK_DISABLE_TIM_STCK();
 8006224:	4b08      	ldr	r3, [pc, #32]	; (8006248 <HAL_TIM_OC_MspDeInit+0x38>)
 8006226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006228:	4b07      	ldr	r3, [pc, #28]	; (8006248 <HAL_TIM_OC_MspDeInit+0x38>)
 800622a:	2101      	movs	r1, #1
 800622c:	438a      	bics	r2, r1
 800622e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* GPIO clock disable ----------------------------------------------------*/
    /* do not disable as the clock is likely used for other HW resources */
  
    /* STCK pin GPIO deinitialization ----------------------------------------*/
    HAL_GPIO_DeInit(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3,\
 8006230:	4b06      	ldr	r3, [pc, #24]	; (800624c <HAL_TIM_OC_MspDeInit+0x3c>)
 8006232:	2108      	movs	r1, #8
 8006234:	0018      	movs	r0, r3
 8006236:	f009 fe45 	bl	800fec4 <HAL_GPIO_DeInit>
      BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3);
      
    /* Disable the timer interrupt -------------------------------------------*/
    HAL_NVIC_DisableIRQ(BSP_MOTOR_CONTROL_BOARD_IRQn_TIM_STCK);
 800623a:	200f      	movs	r0, #15
 800623c:	f009 fc4f 	bl	800fade <HAL_NVIC_DisableIRQ>
  }
}
 8006240:	46c0      	nop			; (mov r8, r8)
 8006242:	46bd      	mov	sp, r7
 8006244:	b002      	add	sp, #8
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40021000 	.word	0x40021000
 800624c:	50000400 	.word	0x50000400

08006250 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  if((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIM_STCK)&&\
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	05db      	lsls	r3, r3, #23
 8006260:	429a      	cmp	r2, r3
 8006262:	d106      	bne.n	8006272 <HAL_TIM_OC_DelayElapsedCallback+0x22>
     (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIM_STCK))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	7e1b      	ldrb	r3, [r3, #24]
  if((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIM_STCK)&&\
 8006268:	2b02      	cmp	r3, #2
 800626a:	d102      	bne.n	8006272 <HAL_TIM_OC_DelayElapsedCallback+0x22>
    {
      BSP_MotorControl_StepClockHandler(0);
 800626c:	2000      	movs	r0, #0
 800626e:	f009 f933 	bl	800f4d8 <BSP_MotorControl_StepClockHandler>
    }
}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	46bd      	mov	sp, r7
 8006276:	b002      	add	sp, #8
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006280:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <HAL_MspInit+0x24>)
 8006282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006284:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <HAL_MspInit+0x24>)
 8006286:	2101      	movs	r1, #1
 8006288:	430a      	orrs	r2, r1
 800628a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800628c:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <HAL_MspInit+0x24>)
 800628e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006290:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <HAL_MspInit+0x24>)
 8006292:	2180      	movs	r1, #128	; 0x80
 8006294:	0549      	lsls	r1, r1, #21
 8006296:	430a      	orrs	r2, r1
 8006298:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	40021000 	.word	0x40021000

080062a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80062a8:	46c0      	nop			; (mov r8, r8)
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062b2:	e7fe      	b.n	80062b2 <HardFault_Handler+0x4>

080062b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80062b8:	46c0      	nop			; (mov r8, r8)
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062cc:	f009 faca 	bl	800f864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80062d0:	46c0      	nop			; (mov r8, r8)
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80062dc:	4b03      	ldr	r3, [pc, #12]	; (80062ec <USART4_5_IRQHandler+0x14>)
 80062de:	0018      	movs	r0, r3
 80062e0:	f00c fa84 	bl	80127ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80062e4:	46c0      	nop			; (mov r8, r8)
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	20003564 	.word	0x20003564

080062f0 <EXTI4_15_IRQHandler>:
  * @brief  This function handles interrupt for External lines 4 to 15
  * @param  None
  * @retval None
  */
void EXTI4_15_IRQHandler(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
//  HAL_GPIO_EXTI_IRQHandler(BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT);
//  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
}
 80062f4:	46c0      	nop			; (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimerStepClock);
 8006300:	4b03      	ldr	r3, [pc, #12]	; (8006310 <TIM2_IRQHandler+0x14>)
 8006302:	0018      	movs	r0, r3
 8006304:	f00b fcd4 	bl	8011cb0 <HAL_TIM_IRQHandler>
}
 8006308:	46c0      	nop			; (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	200037b0 	.word	0x200037b0

08006314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
	return 1;
 8006318:	2301      	movs	r3, #1
}
 800631a:	0018      	movs	r0, r3
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <_kill>:

int _kill(int pid, int sig)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800632a:	f00d f91d 	bl	8013568 <__errno>
 800632e:	0003      	movs	r3, r0
 8006330:	2216      	movs	r2, #22
 8006332:	601a      	str	r2, [r3, #0]
	return -1;
 8006334:	2301      	movs	r3, #1
 8006336:	425b      	negs	r3, r3
}
 8006338:	0018      	movs	r0, r3
 800633a:	46bd      	mov	sp, r7
 800633c:	b002      	add	sp, #8
 800633e:	bd80      	pop	{r7, pc}

08006340 <_exit>:

void _exit (int status)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006348:	2301      	movs	r3, #1
 800634a:	425a      	negs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	0011      	movs	r1, r2
 8006350:	0018      	movs	r0, r3
 8006352:	f7ff ffe5 	bl	8006320 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006356:	e7fe      	b.n	8006356 <_exit+0x16>

08006358 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	e00a      	b.n	8006380 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800636a:	e000      	b.n	800636e <_read+0x16>
 800636c:	bf00      	nop
 800636e:	0001      	movs	r1, r0
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	60ba      	str	r2, [r7, #8]
 8006376:	b2ca      	uxtb	r2, r1
 8006378:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	3301      	adds	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	429a      	cmp	r2, r3
 8006386:	dbf0      	blt.n	800636a <_read+0x12>
	}

return len;
 8006388:	687b      	ldr	r3, [r7, #4]
}
 800638a:	0018      	movs	r0, r3
 800638c:	46bd      	mov	sp, r7
 800638e:	b006      	add	sp, #24
 8006390:	bd80      	pop	{r7, pc}

08006392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b086      	sub	sp, #24
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800639e:	2300      	movs	r3, #0
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	e009      	b.n	80063b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	60ba      	str	r2, [r7, #8]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	0018      	movs	r0, r3
 80063ae:	e000      	b.n	80063b2 <_write+0x20>
 80063b0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	3301      	adds	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	429a      	cmp	r2, r3
 80063be:	dbf1      	blt.n	80063a4 <_write+0x12>
	}
	return len;
 80063c0:	687b      	ldr	r3, [r7, #4]
}
 80063c2:	0018      	movs	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b006      	add	sp, #24
 80063c8:	bd80      	pop	{r7, pc}

080063ca <_close>:

int _close(int file)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
	return -1;
 80063d2:	2301      	movs	r3, #1
 80063d4:	425b      	negs	r3, r3
}
 80063d6:	0018      	movs	r0, r3
 80063d8:	46bd      	mov	sp, r7
 80063da:	b002      	add	sp, #8
 80063dc:	bd80      	pop	{r7, pc}

080063de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2280      	movs	r2, #128	; 0x80
 80063ec:	0192      	lsls	r2, r2, #6
 80063ee:	605a      	str	r2, [r3, #4]
	return 0;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	0018      	movs	r0, r3
 80063f4:	46bd      	mov	sp, r7
 80063f6:	b002      	add	sp, #8
 80063f8:	bd80      	pop	{r7, pc}

080063fa <_isatty>:

int _isatty(int file)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
	return 1;
 8006402:	2301      	movs	r3, #1
}
 8006404:	0018      	movs	r0, r3
 8006406:	46bd      	mov	sp, r7
 8006408:	b002      	add	sp, #8
 800640a:	bd80      	pop	{r7, pc}

0800640c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
	return 0;
 8006418:	2300      	movs	r3, #0
}
 800641a:	0018      	movs	r0, r3
 800641c:	46bd      	mov	sp, r7
 800641e:	b004      	add	sp, #16
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800642c:	4a14      	ldr	r2, [pc, #80]	; (8006480 <_sbrk+0x5c>)
 800642e:	4b15      	ldr	r3, [pc, #84]	; (8006484 <_sbrk+0x60>)
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006438:	4b13      	ldr	r3, [pc, #76]	; (8006488 <_sbrk+0x64>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006440:	4b11      	ldr	r3, [pc, #68]	; (8006488 <_sbrk+0x64>)
 8006442:	4a12      	ldr	r2, [pc, #72]	; (800648c <_sbrk+0x68>)
 8006444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006446:	4b10      	ldr	r3, [pc, #64]	; (8006488 <_sbrk+0x64>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	18d3      	adds	r3, r2, r3
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	429a      	cmp	r2, r3
 8006452:	d207      	bcs.n	8006464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006454:	f00d f888 	bl	8013568 <__errno>
 8006458:	0003      	movs	r3, r0
 800645a:	220c      	movs	r2, #12
 800645c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800645e:	2301      	movs	r3, #1
 8006460:	425b      	negs	r3, r3
 8006462:	e009      	b.n	8006478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006464:	4b08      	ldr	r3, [pc, #32]	; (8006488 <_sbrk+0x64>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <_sbrk+0x64>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	18d2      	adds	r2, r2, r3
 8006472:	4b05      	ldr	r3, [pc, #20]	; (8006488 <_sbrk+0x64>)
 8006474:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006476:	68fb      	ldr	r3, [r7, #12]
}
 8006478:	0018      	movs	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	b006      	add	sp, #24
 800647e:	bd80      	pop	{r7, pc}
 8006480:	20005000 	.word	0x20005000
 8006484:	00000400 	.word	0x00000400
 8006488:	20000458 	.word	0x20000458
 800648c:	20003840 	.word	0x20003840

08006490 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
 /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8006494:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <SystemInit+0x64>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	4b16      	ldr	r3, [pc, #88]	; (80064f4 <SystemInit+0x64>)
 800649a:	2180      	movs	r1, #128	; 0x80
 800649c:	0049      	lsls	r1, r1, #1
 800649e:	430a      	orrs	r2, r1
 80064a0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400C;
 80064a2:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <SystemInit+0x64>)
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <SystemInit+0x64>)
 80064a8:	4913      	ldr	r1, [pc, #76]	; (80064f8 <SystemInit+0x68>)
 80064aa:	400a      	ands	r2, r1
 80064ac:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6;
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <SystemInit+0x64>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <SystemInit+0x64>)
 80064b4:	4911      	ldr	r1, [pc, #68]	; (80064fc <SystemInit+0x6c>)
 80064b6:	400a      	ands	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 80064ba:	4b0e      	ldr	r3, [pc, #56]	; (80064f4 <SystemInit+0x64>)
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <SystemInit+0x64>)
 80064c0:	2101      	movs	r1, #1
 80064c2:	438a      	bics	r2, r1
 80064c4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <SystemInit+0x64>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <SystemInit+0x64>)
 80064cc:	490c      	ldr	r1, [pc, #48]	; (8006500 <SystemInit+0x70>)
 80064ce:	400a      	ands	r2, r1
 80064d0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80064d2:	4b08      	ldr	r3, [pc, #32]	; (80064f4 <SystemInit+0x64>)
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <SystemInit+0x64>)
 80064d8:	490a      	ldr	r1, [pc, #40]	; (8006504 <SystemInit+0x74>)
 80064da:	400a      	ands	r2, r1
 80064dc:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000;
 80064de:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <SystemInit+0x64>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80064e4:	4b08      	ldr	r3, [pc, #32]	; (8006508 <SystemInit+0x78>)
 80064e6:	2280      	movs	r2, #128	; 0x80
 80064e8:	0512      	lsls	r2, r2, #20
 80064ea:	609a      	str	r2, [r3, #8]
#endif
}
 80064ec:	46c0      	nop			; (mov r8, r8)
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	40021000 	.word	0x40021000
 80064f8:	88ff400c 	.word	0x88ff400c
 80064fc:	fef6fff6 	.word	0xfef6fff6
 8006500:	fffbffff 	.word	0xfffbffff
 8006504:	ff02ffff 	.word	0xff02ffff
 8006508:	e000ed00 	.word	0xe000ed00

0800650c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart5;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006510:	4b14      	ldr	r3, [pc, #80]	; (8006564 <MX_USART2_UART_Init+0x58>)
 8006512:	4a15      	ldr	r2, [pc, #84]	; (8006568 <MX_USART2_UART_Init+0x5c>)
 8006514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006516:	4b13      	ldr	r3, [pc, #76]	; (8006564 <MX_USART2_UART_Init+0x58>)
 8006518:	22e1      	movs	r2, #225	; 0xe1
 800651a:	0252      	lsls	r2, r2, #9
 800651c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800651e:	4b11      	ldr	r3, [pc, #68]	; (8006564 <MX_USART2_UART_Init+0x58>)
 8006520:	2200      	movs	r2, #0
 8006522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006524:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <MX_USART2_UART_Init+0x58>)
 8006526:	2200      	movs	r2, #0
 8006528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800652a:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <MX_USART2_UART_Init+0x58>)
 800652c:	2200      	movs	r2, #0
 800652e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006530:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <MX_USART2_UART_Init+0x58>)
 8006532:	220c      	movs	r2, #12
 8006534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006536:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <MX_USART2_UART_Init+0x58>)
 8006538:	2200      	movs	r2, #0
 800653a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800653c:	4b09      	ldr	r3, [pc, #36]	; (8006564 <MX_USART2_UART_Init+0x58>)
 800653e:	2200      	movs	r2, #0
 8006540:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006542:	4b08      	ldr	r3, [pc, #32]	; (8006564 <MX_USART2_UART_Init+0x58>)
 8006544:	2200      	movs	r2, #0
 8006546:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006548:	4b06      	ldr	r3, [pc, #24]	; (8006564 <MX_USART2_UART_Init+0x58>)
 800654a:	2200      	movs	r2, #0
 800654c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800654e:	4b05      	ldr	r3, [pc, #20]	; (8006564 <MX_USART2_UART_Init+0x58>)
 8006550:	0018      	movs	r0, r3
 8006552:	f00b ff97 	bl	8012484 <HAL_UART_Init>
 8006556:	1e03      	subs	r3, r0, #0
 8006558:	d001      	beq.n	800655e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800655a:	f7ff fded 	bl	8006138 <Error_Handler>
  }

}
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	200035e4 	.word	0x200035e4
 8006568:	40004400 	.word	0x40004400

0800656c <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0

  huart5.Instance = USART5;
 8006570:	4b14      	ldr	r3, [pc, #80]	; (80065c4 <MX_USART5_UART_Init+0x58>)
 8006572:	4a15      	ldr	r2, [pc, #84]	; (80065c8 <MX_USART5_UART_Init+0x5c>)
 8006574:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <MX_USART5_UART_Init+0x58>)
 8006578:	22e1      	movs	r2, #225	; 0xe1
 800657a:	0252      	lsls	r2, r2, #9
 800657c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800657e:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <MX_USART5_UART_Init+0x58>)
 8006580:	2200      	movs	r2, #0
 8006582:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006584:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <MX_USART5_UART_Init+0x58>)
 8006586:	2200      	movs	r2, #0
 8006588:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800658a:	4b0e      	ldr	r3, [pc, #56]	; (80065c4 <MX_USART5_UART_Init+0x58>)
 800658c:	2200      	movs	r2, #0
 800658e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <MX_USART5_UART_Init+0x58>)
 8006592:	220c      	movs	r2, #12
 8006594:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006596:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <MX_USART5_UART_Init+0x58>)
 8006598:	2200      	movs	r2, #0
 800659a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800659c:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <MX_USART5_UART_Init+0x58>)
 800659e:	2200      	movs	r2, #0
 80065a0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80065a2:	4b08      	ldr	r3, [pc, #32]	; (80065c4 <MX_USART5_UART_Init+0x58>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80065a8:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <MX_USART5_UART_Init+0x58>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <MX_USART5_UART_Init+0x58>)
 80065b0:	0018      	movs	r0, r3
 80065b2:	f00b ff67 	bl	8012484 <HAL_UART_Init>
 80065b6:	1e03      	subs	r3, r0, #0
 80065b8:	d001      	beq.n	80065be <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 80065ba:	f7ff fdbd 	bl	8006138 <Error_Handler>
  }

}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20003564 	.word	0x20003564
 80065c8:	40005000 	.word	0x40005000

080065cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80065cc:	b590      	push	{r4, r7, lr}
 80065ce:	b08b      	sub	sp, #44	; 0x2c
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065d4:	2414      	movs	r4, #20
 80065d6:	193b      	adds	r3, r7, r4
 80065d8:	0018      	movs	r0, r3
 80065da:	2314      	movs	r3, #20
 80065dc:	001a      	movs	r2, r3
 80065de:	2100      	movs	r1, #0
 80065e0:	f00c fff5 	bl	80135ce <memset>
  if(uartHandle->Instance==USART2)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a45      	ldr	r2, [pc, #276]	; (8006700 <HAL_UART_MspInit+0x134>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d12a      	bne.n	8006644 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80065ee:	4b45      	ldr	r3, [pc, #276]	; (8006704 <HAL_UART_MspInit+0x138>)
 80065f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f2:	4b44      	ldr	r3, [pc, #272]	; (8006704 <HAL_UART_MspInit+0x138>)
 80065f4:	2180      	movs	r1, #128	; 0x80
 80065f6:	0289      	lsls	r1, r1, #10
 80065f8:	430a      	orrs	r2, r1
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065fc:	4b41      	ldr	r3, [pc, #260]	; (8006704 <HAL_UART_MspInit+0x138>)
 80065fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006600:	4b40      	ldr	r3, [pc, #256]	; (8006704 <HAL_UART_MspInit+0x138>)
 8006602:	2101      	movs	r1, #1
 8006604:	430a      	orrs	r2, r1
 8006606:	62da      	str	r2, [r3, #44]	; 0x2c
 8006608:	4b3e      	ldr	r3, [pc, #248]	; (8006704 <HAL_UART_MspInit+0x138>)
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	2201      	movs	r2, #1
 800660e:	4013      	ands	r3, r2
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006614:	0021      	movs	r1, r4
 8006616:	187b      	adds	r3, r7, r1
 8006618:	220c      	movs	r2, #12
 800661a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800661c:	187b      	adds	r3, r7, r1
 800661e:	2202      	movs	r2, #2
 8006620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006622:	187b      	adds	r3, r7, r1
 8006624:	2200      	movs	r2, #0
 8006626:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006628:	187b      	adds	r3, r7, r1
 800662a:	2203      	movs	r2, #3
 800662c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800662e:	187b      	adds	r3, r7, r1
 8006630:	2204      	movs	r2, #4
 8006632:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006634:	187a      	adds	r2, r7, r1
 8006636:	23a0      	movs	r3, #160	; 0xa0
 8006638:	05db      	lsls	r3, r3, #23
 800663a:	0011      	movs	r1, r2
 800663c:	0018      	movs	r0, r3
 800663e:	f009 fac3 	bl	800fbc8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
}
 8006642:	e059      	b.n	80066f8 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART5)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a2f      	ldr	r2, [pc, #188]	; (8006708 <HAL_UART_MspInit+0x13c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d154      	bne.n	80066f8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART5_CLK_ENABLE();
 800664e:	4b2d      	ldr	r3, [pc, #180]	; (8006704 <HAL_UART_MspInit+0x138>)
 8006650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006652:	4b2c      	ldr	r3, [pc, #176]	; (8006704 <HAL_UART_MspInit+0x138>)
 8006654:	2180      	movs	r1, #128	; 0x80
 8006656:	0349      	lsls	r1, r1, #13
 8006658:	430a      	orrs	r2, r1
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800665c:	4b29      	ldr	r3, [pc, #164]	; (8006704 <HAL_UART_MspInit+0x138>)
 800665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006660:	4b28      	ldr	r3, [pc, #160]	; (8006704 <HAL_UART_MspInit+0x138>)
 8006662:	2104      	movs	r1, #4
 8006664:	430a      	orrs	r2, r1
 8006666:	62da      	str	r2, [r3, #44]	; 0x2c
 8006668:	4b26      	ldr	r3, [pc, #152]	; (8006704 <HAL_UART_MspInit+0x138>)
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	2204      	movs	r2, #4
 800666e:	4013      	ands	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006674:	4b23      	ldr	r3, [pc, #140]	; (8006704 <HAL_UART_MspInit+0x138>)
 8006676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006678:	4b22      	ldr	r3, [pc, #136]	; (8006704 <HAL_UART_MspInit+0x138>)
 800667a:	2108      	movs	r1, #8
 800667c:	430a      	orrs	r2, r1
 800667e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006680:	4b20      	ldr	r3, [pc, #128]	; (8006704 <HAL_UART_MspInit+0x138>)
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	2208      	movs	r2, #8
 8006686:	4013      	ands	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]
 800668a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800668c:	2114      	movs	r1, #20
 800668e:	187b      	adds	r3, r7, r1
 8006690:	2280      	movs	r2, #128	; 0x80
 8006692:	0152      	lsls	r2, r2, #5
 8006694:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006696:	000c      	movs	r4, r1
 8006698:	193b      	adds	r3, r7, r4
 800669a:	2202      	movs	r2, #2
 800669c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669e:	193b      	adds	r3, r7, r4
 80066a0:	2200      	movs	r2, #0
 80066a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066a4:	193b      	adds	r3, r7, r4
 80066a6:	2203      	movs	r2, #3
 80066a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 80066aa:	193b      	adds	r3, r7, r4
 80066ac:	2202      	movs	r2, #2
 80066ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066b0:	193b      	adds	r3, r7, r4
 80066b2:	4a16      	ldr	r2, [pc, #88]	; (800670c <HAL_UART_MspInit+0x140>)
 80066b4:	0019      	movs	r1, r3
 80066b6:	0010      	movs	r0, r2
 80066b8:	f009 fa86 	bl	800fbc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80066bc:	0021      	movs	r1, r4
 80066be:	187b      	adds	r3, r7, r1
 80066c0:	2204      	movs	r2, #4
 80066c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066c4:	187b      	adds	r3, r7, r1
 80066c6:	2202      	movs	r2, #2
 80066c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ca:	187b      	adds	r3, r7, r1
 80066cc:	2200      	movs	r2, #0
 80066ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	2203      	movs	r2, #3
 80066d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 80066d6:	187b      	adds	r3, r7, r1
 80066d8:	2206      	movs	r2, #6
 80066da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066dc:	187b      	adds	r3, r7, r1
 80066de:	4a0c      	ldr	r2, [pc, #48]	; (8006710 <HAL_UART_MspInit+0x144>)
 80066e0:	0019      	movs	r1, r3
 80066e2:	0010      	movs	r0, r2
 80066e4:	f009 fa70 	bl	800fbc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80066e8:	2200      	movs	r2, #0
 80066ea:	2100      	movs	r1, #0
 80066ec:	200e      	movs	r0, #14
 80066ee:	f009 f9d1 	bl	800fa94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80066f2:	200e      	movs	r0, #14
 80066f4:	f009 f9e3 	bl	800fabe <HAL_NVIC_EnableIRQ>
}
 80066f8:	46c0      	nop			; (mov r8, r8)
 80066fa:	46bd      	mov	sp, r7
 80066fc:	b00b      	add	sp, #44	; 0x2c
 80066fe:	bd90      	pop	{r4, r7, pc}
 8006700:	40004400 	.word	0x40004400
 8006704:	40021000 	.word	0x40021000
 8006708:	40005000 	.word	0x40005000
 800670c:	50000800 	.word	0x50000800
 8006710:	50000c00 	.word	0x50000c00

08006714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006714:	480d      	ldr	r0, [pc, #52]	; (800674c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006716:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800671a:	e003      	b.n	8006724 <LoopCopyDataInit>

0800671c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800671c:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800671e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006722:	3104      	adds	r1, #4

08006724 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8006724:	480b      	ldr	r0, [pc, #44]	; (8006754 <LoopForever+0xa>)
  ldr  r3, =_edata
 8006726:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <LoopForever+0xe>)
  adds  r2, r0, r1
 8006728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800672a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800672c:	d3f6      	bcc.n	800671c <CopyDataInit>
  ldr  r2, =_sbss
 800672e:	4a0b      	ldr	r2, [pc, #44]	; (800675c <LoopForever+0x12>)
  b  LoopFillZerobss
 8006730:	e002      	b.n	8006738 <LoopFillZerobss>

08006732 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006732:	2300      	movs	r3, #0
  str  r3, [r2]
 8006734:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006736:	3204      	adds	r2, #4

08006738 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8006738:	4b09      	ldr	r3, [pc, #36]	; (8006760 <LoopForever+0x16>)
  cmp  r2, r3
 800673a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800673c:	d3f9      	bcc.n	8006732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800673e:	f7ff fea7 	bl	8006490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006742:	f00c ff17 	bl	8013574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006746:	f7fe fddb 	bl	8005300 <main>

0800674a <LoopForever>:

LoopForever:
    b LoopForever
 800674a:	e7fe      	b.n	800674a <LoopForever>
   ldr   r0, =_estack
 800674c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8006750:	08016a2c 	.word	0x08016a2c
  ldr  r0, =_sdata
 8006754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006758:	20000438 	.word	0x20000438
  ldr  r2, =_sbss
 800675c:	20000438 	.word	0x20000438
  ldr  r3, = _ebss
 8006760:	2000383c 	.word	0x2000383c

08006764 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006764:	e7fe      	b.n	8006764 <ADC1_COMP_IRQHandler>
	...

08006768 <Stspin220_GetMotorHandle>:
/******************************************************//**
 * @brief Return motor handle (pointer to the STSPIN220 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* Stspin220_GetMotorHandle(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
  return (&stspin220Drv);
 800676c:	4b01      	ldr	r3, [pc, #4]	; (8006774 <Stspin220_GetMotorHandle+0xc>)
}
 800676e:	0018      	movs	r0, r3
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	200000dc 	.word	0x200000dc

08006778 <Stspin220_Init>:
 * @brief Start the STSPIN220 library
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void Stspin220_Init(void* pInit)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  stspin220DriverInstance++;
 8006780:	4b0c      	ldr	r3, [pc, #48]	; (80067b4 <Stspin220_Init+0x3c>)
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <Stspin220_Init+0x3c>)
 800678a:	801a      	strh	r2, [r3, #0]
  
  /* Initialise the GPIOs */
  Stspin220_Board_GpioInit();
 800678c:	f008 f920 	bl	800e9d0 <Stspin220_Board_GpioInit>

  /* Initialise the timer used for the step clock and ------------------------*/
  /* the PWM for the reference voltage generation ----------------------------*/
  Stspin220_Board_TimStckInit();
 8006790:	f008 fa8c 	bl	800ecac <Stspin220_Board_TimStckInit>
  Stspin220_Board_PwmRefInit();
 8006794:	f008 fa4e 	bl	800ec34 <Stspin220_Board_PwmRefInit>

  if (pInit == 0)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <Stspin220_Init+0x2c>
  {
    /* Set all context variables to the predefined values */
    /* from stspin220_target_config.h */
    Stspin220_SetDeviceParamsToPredefinedValues();
 800679e:	f001 f989 	bl	8007ab4 <Stspin220_SetDeviceParamsToPredefinedValues>
  }
  else
  {
    Stspin220_SetDeviceParamsToGivenValues((Stspin220_Init_t*) pInit);
  }
}
 80067a2:	e003      	b.n	80067ac <Stspin220_Init+0x34>
    Stspin220_SetDeviceParamsToGivenValues((Stspin220_Init_t*) pInit);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	0018      	movs	r0, r3
 80067a8:	f001 f8f0 	bl	800798c <Stspin220_SetDeviceParamsToGivenValues>
}
 80067ac:	46c0      	nop			; (mov r8, r8)
 80067ae:	46bd      	mov	sp, r7
 80067b0:	b002      	add	sp, #8
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	2000045c 	.word	0x2000045c

080067b8 <Stspin220_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the stspin220 Driver Instance
 **********************************************************/
uint16_t Stspin220_ReadId(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  return (stspin220DriverInstance);
 80067bc:	4b02      	ldr	r3, [pc, #8]	; (80067c8 <Stspin220_ReadId+0x10>)
 80067be:	881b      	ldrh	r3, [r3, #0]
}
 80067c0:	0018      	movs	r0, r3
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	2000045c 	.word	0x2000045c

080067cc <Stspin220_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void Stspin220_AttachErrorHandler(void (*callback)(uint16_t))
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 80067d4:	4b03      	ldr	r3, [pc, #12]	; (80067e4 <Stspin220_AttachErrorHandler+0x18>)
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	601a      	str	r2, [r3, #0]
}
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	46bd      	mov	sp, r7
 80067de:	b002      	add	sp, #8
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	200036a4 	.word	0x200036a4

080067e8 <Stspin220_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void Stspin220_AttachFlagInterrupt(void (*callback)(void))
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 80067f0:	4b03      	ldr	r3, [pc, #12]	; (8006800 <Stspin220_AttachFlagInterrupt+0x18>)
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b002      	add	sp, #8
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	200036a8 	.word	0x200036a8

08006804 <Stspin220_CheckStatusHw>:
/******************************************************//**
 * @brief Check if STSPIN220 has a fault by reading EN pin position.
 * @retval One if STSPIN220 has EN pin down, otherwise zero
 **********************************************************/
uint8_t Stspin220_CheckStatusHw(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
	if(!Stspin220_Board_EN_AND_FAULT_PIN_GetState())
 8006808:	f008 fb7c 	bl	800ef04 <Stspin220_Board_EN_AND_FAULT_PIN_GetState>
 800680c:	1e03      	subs	r3, r0, #0
 800680e:	d101      	bne.n	8006814 <Stspin220_CheckStatusHw+0x10>
  {
    return 0x01;
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <Stspin220_CheckStatusHw+0x12>
  }
  else
  {
    return 0x00;
 8006814:	2300      	movs	r3, #0
  }
}
 8006816:	0018      	movs	r0, r3
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <Stspin220_Disable>:
 * @brief Disable the power bridges (leave the output bridges HiZ)
 * @param[in] deviceId Unused parameter
 * @retval None
 **********************************************************/
void Stspin220_Disable(uint8_t deviceId)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	0002      	movs	r2, r0
 8006824:	1dfb      	adds	r3, r7, #7
 8006826:	701a      	strb	r2, [r3, #0]
  Stspin220_Board_Disable();
 8006828:	f008 fb00 	bl	800ee2c <Stspin220_Board_Disable>
}
 800682c:	46c0      	nop			; (mov r8, r8)
 800682e:	46bd      	mov	sp, r7
 8006830:	b002      	add	sp, #8
 8006832:	bd80      	pop	{r7, pc}

08006834 <Stspin220_Enable>:
 * @brief Enable the power bridges
 * @param[in] deviceId Unused parameter
 * @retval None
 **********************************************************/
void Stspin220_Enable(uint8_t deviceId)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	0002      	movs	r2, r0
 800683c:	1dfb      	adds	r3, r7, #7
 800683e:	701a      	strb	r2, [r3, #0]
  Stspin220_Board_Enable();
 8006840:	f008 fb22 	bl	800ee88 <Stspin220_Board_Enable>
}
 8006844:	46c0      	nop			; (mov r8, r8)
 8006846:	46bd      	mov	sp, r7
 8006848:	b002      	add	sp, #8
 800684a:	bd80      	pop	{r7, pc}

0800684c <Stspin220_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void Stspin220_ErrorHandler(uint16_t error)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	0002      	movs	r2, r0
 8006854:	1dbb      	adds	r3, r7, #6
 8006856:	801a      	strh	r2, [r3, #0]
  if (errorHandlerCallback != 0)
 8006858:	4b07      	ldr	r3, [pc, #28]	; (8006878 <Stspin220_ErrorHandler+0x2c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d006      	beq.n	800686e <Stspin220_ErrorHandler+0x22>
  {
    (void) errorHandlerCallback(error);
 8006860:	4b05      	ldr	r3, [pc, #20]	; (8006878 <Stspin220_ErrorHandler+0x2c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	1dba      	adds	r2, r7, #6
 8006866:	8812      	ldrh	r2, [r2, #0]
 8006868:	0010      	movs	r0, r2
 800686a:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 800686c:	e000      	b.n	8006870 <Stspin220_ErrorHandler+0x24>
    while(1)
 800686e:	e7fe      	b.n	800686e <Stspin220_ErrorHandler+0x22>
}
 8006870:	46bd      	mov	sp, r7
 8006872:	b002      	add	sp, #8
 8006874:	bd80      	pop	{r7, pc}
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	200036a4 	.word	0x200036a4

0800687c <Stspin220_ExitDeviceFromStandby>:
 * @brief Exit STSPIN220 device from standby (low power consumption)
 * @param[in] deviceId Unused parameter
 * @retval None
 **********************************************************/
void Stspin220_ExitDeviceFromStandby(uint8_t deviceId)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	0002      	movs	r2, r0
 8006884:	1dfb      	adds	r3, r7, #7
 8006886:	701a      	strb	r2, [r3, #0]
  uint32_t sequencerPosition = devicePrm.sequencerPosition;
 8006888:	4b1e      	ldr	r3, [pc, #120]	; (8006904 <Stspin220_ExitDeviceFromStandby+0x88>)
 800688a:	891b      	ldrh	r3, [r3, #8]
 800688c:	b21b      	sxth	r3, r3
 800688e:	60fb      	str	r3, [r7, #12]
  
  /* Exit standby and set step mode */
  Stspin220_SetStepModeWithoutReset(0, devicePrm.stepMode);
 8006890:	4b1c      	ldr	r3, [pc, #112]	; (8006904 <Stspin220_ExitDeviceFromStandby+0x88>)
 8006892:	223d      	movs	r2, #61	; 0x3d
 8006894:	5c9b      	ldrb	r3, [r3, r2]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	0019      	movs	r1, r3
 800689a:	2000      	movs	r0, #0
 800689c:	f001 f98e 	bl	8007bbc <Stspin220_SetStepModeWithoutReset>
  
  if (devicePrm.sequencerPosition != 0)
 80068a0:	4b18      	ldr	r3, [pc, #96]	; (8006904 <Stspin220_ExitDeviceFromStandby+0x88>)
 80068a2:	891b      	ldrh	r3, [r3, #8]
 80068a4:	b21b      	sxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d024      	beq.n	80068f4 <Stspin220_ExitDeviceFromStandby+0x78>
  {
    /* Set direction to FORWARD to ensure the HW sequencer is increased at */
    /* each step clock rising edge */
    Stspin220_SetDirection(0, FORWARD);
 80068aa:	2101      	movs	r1, #1
 80068ac:	2000      	movs	r0, #0
 80068ae:	f000 fc13 	bl	80070d8 <Stspin220_SetDirection>
    /* Going out of standby */
    devicePrm.motionState = STANDBYTOINACTIVE;
 80068b2:	4b14      	ldr	r3, [pc, #80]	; (8006904 <Stspin220_ExitDeviceFromStandby+0x88>)
 80068b4:	223c      	movs	r2, #60	; 0x3c
 80068b6:	210a      	movs	r1, #10
 80068b8:	5499      	strb	r1, [r3, r2]
    /* Initialize the step clock timer */
    Stspin220_Board_TimStckInit();
 80068ba:	f008 f9f7 	bl	800ecac <Stspin220_Board_TimStckInit>
    /* Program the step clock */    
    Stspin220_Board_TimStckCompareInit();
 80068be:	f008 f935 	bl	800eb2c <Stspin220_Board_TimStckCompareInit>
    Stspin220_Board_TimStckSetFreq(STSPIN220_MAX_STCK_FREQ);
 80068c2:	4b11      	ldr	r3, [pc, #68]	; (8006908 <Stspin220_ExitDeviceFromStandby+0x8c>)
 80068c4:	0018      	movs	r0, r3
 80068c6:	f008 f93f 	bl	800eb48 <Stspin220_Board_TimStckSetFreq>
    toggleOdd = 0;
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <Stspin220_ExitDeviceFromStandby+0x90>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	701a      	strb	r2, [r3, #0]
    Stspin220_Board_TimStckStart();
 80068d0:	f008 f908 	bl	800eae4 <Stspin220_Board_TimStckStart>
    while (devicePrm.sequencerPosition != 0);
 80068d4:	46c0      	nop			; (mov r8, r8)
 80068d6:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <Stspin220_ExitDeviceFromStandby+0x88>)
 80068d8:	891b      	ldrh	r3, [r3, #8]
 80068da:	b21b      	sxth	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1fa      	bne.n	80068d6 <Stspin220_ExitDeviceFromStandby+0x5a>
    while (toggleOdd!=0);
 80068e0:	46c0      	nop			; (mov r8, r8)
 80068e2:	4b0a      	ldr	r3, [pc, #40]	; (800690c <Stspin220_ExitDeviceFromStandby+0x90>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1fa      	bne.n	80068e2 <Stspin220_ExitDeviceFromStandby+0x66>
    devicePrm.sequencerPosition = sequencerPosition;    
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	b21a      	sxth	r2, r3
 80068f0:	4b04      	ldr	r3, [pc, #16]	; (8006904 <Stspin220_ExitDeviceFromStandby+0x88>)
 80068f2:	811a      	strh	r2, [r3, #8]
  }
  
  devicePrm.motionState = INACTIVE;
 80068f4:	4b03      	ldr	r3, [pc, #12]	; (8006904 <Stspin220_ExitDeviceFromStandby+0x88>)
 80068f6:	223c      	movs	r2, #60	; 0x3c
 80068f8:	2108      	movs	r1, #8
 80068fa:	5499      	strb	r1, [r3, r2]
}
 80068fc:	46c0      	nop			; (mov r8, r8)
 80068fe:	46bd      	mov	sp, r7
 8006900:	b004      	add	sp, #16
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20003664 	.word	0x20003664
 8006908:	00002710 	.word	0x00002710
 800690c:	2000045f 	.word	0x2000045f

08006910 <Stspin220_GetAcceleration>:
 * @brief Return the acceleration of the specified device
 * @param[in] deviceId Unused parameter
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t Stspin220_GetAcceleration(uint8_t deviceId)
{                                                  
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	0002      	movs	r2, r0
 8006918:	1dfb      	adds	r3, r7, #7
 800691a:	701a      	strb	r2, [r3, #0]
  return (devicePrm.acceleration);
 800691c:	4b03      	ldr	r3, [pc, #12]	; (800692c <Stspin220_GetAcceleration+0x1c>)
 800691e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006920:	b29b      	uxth	r3, r3
}            
 8006922:	0018      	movs	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	b002      	add	sp, #8
 8006928:	bd80      	pop	{r7, pc}
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	20003664 	.word	0x20003664

08006930 <Stspin220_GetCurrentSpeed>:
 * @brief Return the current speed of the specified device
 * @param[in] deviceId Unused parameter
 * @retval Speed in pps
 **********************************************************/
uint16_t Stspin220_GetCurrentSpeed(uint8_t deviceId)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	0002      	movs	r2, r0
 8006938:	1dfb      	adds	r3, r7, #7
 800693a:	701a      	strb	r2, [r3, #0]
  return devicePrm.speed;
 800693c:	4b03      	ldr	r3, [pc, #12]	; (800694c <Stspin220_GetCurrentSpeed+0x1c>)
 800693e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006940:	b29b      	uxth	r3, r3
}
 8006942:	0018      	movs	r0, r3
 8006944:	46bd      	mov	sp, r7
 8006946:	b002      	add	sp, #8
 8006948:	bd80      	pop	{r7, pc}
 800694a:	46c0      	nop			; (mov r8, r8)
 800694c:	20003664 	.word	0x20003664

08006950 <Stspin220_GetDeceleration>:
 * @brief Return the deceleration of the specified device
 * @param[in] deviceId Unused parameter
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t Stspin220_GetDeceleration(uint8_t deviceId)
{                                                  
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	0002      	movs	r2, r0
 8006958:	1dfb      	adds	r3, r7, #7
 800695a:	701a      	strb	r2, [r3, #0]
  return (devicePrm.deceleration);
 800695c:	4b03      	ldr	r3, [pc, #12]	; (800696c <Stspin220_GetDeceleration+0x1c>)
 800695e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006960:	b29b      	uxth	r3, r3
}          
 8006962:	0018      	movs	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	b002      	add	sp, #8
 8006968:	bd80      	pop	{r7, pc}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	20003664 	.word	0x20003664

08006970 <Stspin220_GetDeviceState>:
 * @brief Return the device state
 * @param[in] deviceId Unused parameter
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t Stspin220_GetDeviceState(uint8_t deviceId)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	0002      	movs	r2, r0
 8006978:	1dfb      	adds	r3, r7, #7
 800697a:	701a      	strb	r2, [r3, #0]
  return devicePrm.motionState;
 800697c:	4b03      	ldr	r3, [pc, #12]	; (800698c <Stspin220_GetDeviceState+0x1c>)
 800697e:	223c      	movs	r2, #60	; 0x3c
 8006980:	5c9b      	ldrb	r3, [r3, r2]
 8006982:	b2db      	uxtb	r3, r3
}
 8006984:	0018      	movs	r0, r3
 8006986:	46bd      	mov	sp, r7
 8006988:	b002      	add	sp, #8
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20003664 	.word	0x20003664

08006990 <Stspin220_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t Stspin220_GetDirection(uint8_t deviceId)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	0002      	movs	r2, r0
 8006998:	1dfb      	adds	r3, r7, #7
 800699a:	701a      	strb	r2, [r3, #0]
  return devicePrm.direction;
 800699c:	4b03      	ldr	r3, [pc, #12]	; (80069ac <Stspin220_GetDirection+0x1c>)
 800699e:	223b      	movs	r2, #59	; 0x3b
 80069a0:	5c9b      	ldrb	r3, [r3, r2]
 80069a2:	b2db      	uxtb	r3, r3
}
 80069a4:	0018      	movs	r0, r3
 80069a6:	46bd      	mov	sp, r7
 80069a8:	b002      	add	sp, #8
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20003664 	.word	0x20003664

080069b0 <Stspin220_GetFwVersion>:
/******************************************************//**
 * @brief Return the FW version of the library
 * @retval Stspin220_FW_VERSION
 **********************************************************/
uint32_t Stspin220_GetFwVersion(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
  return (STSPIN220_FW_VERSION);
 80069b4:	4b01      	ldr	r3, [pc, #4]	; (80069bc <Stspin220_GetFwVersion+0xc>)
}
 80069b6:	0018      	movs	r0, r3
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	00010300 	.word	0x00010300

080069c0 <Stspin220_GetMark>:
 * @brief Return the mark position of the specified device
 * @param[in] deviceId Unused parameter
 * @retval mark position value
 **********************************************************/
int32_t Stspin220_GetMark(uint8_t deviceId)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	0002      	movs	r2, r0
 80069c8:	1dfb      	adds	r3, r7, #7
 80069ca:	701a      	strb	r2, [r3, #0]
  return devicePrm.markPosition;
 80069cc:	4b02      	ldr	r3, [pc, #8]	; (80069d8 <Stspin220_GetMark+0x18>)
 80069ce:	68db      	ldr	r3, [r3, #12]
}
 80069d0:	0018      	movs	r0, r3
 80069d2:	46bd      	mov	sp, r7
 80069d4:	b002      	add	sp, #8
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	20003664 	.word	0x20003664

080069dc <Stspin220_GetMaxSpeed>:
 * @brief Return the max speed of the specified device
 * @param[in] deviceId Unused parameter
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t Stspin220_GetMaxSpeed(uint8_t deviceId)
{                                                  
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	0002      	movs	r2, r0
 80069e4:	1dfb      	adds	r3, r7, #7
 80069e6:	701a      	strb	r2, [r3, #0]
  return (devicePrm.maxSpeed);
 80069e8:	4b03      	ldr	r3, [pc, #12]	; (80069f8 <Stspin220_GetMaxSpeed+0x1c>)
 80069ea:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80069ec:	b29b      	uxth	r3, r3
}
 80069ee:	0018      	movs	r0, r3
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b002      	add	sp, #8
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	20003664 	.word	0x20003664

080069fc <Stspin220_GetMinSpeed>:
 * @brief Return the min speed of the specified device
 * @param[in] deviceId Unused parameter
 * @retval minSpeed in pps
 **********************************************************/
uint16_t Stspin220_GetMinSpeed(uint8_t deviceId)
{                                                  
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	0002      	movs	r2, r0
 8006a04:	1dfb      	adds	r3, r7, #7
 8006a06:	701a      	strb	r2, [r3, #0]
  return (devicePrm.minSpeed);
 8006a08:	4b03      	ldr	r3, [pc, #12]	; (8006a18 <Stspin220_GetMinSpeed+0x1c>)
 8006a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a0c:	b29b      	uxth	r3, r3
}                                                     
 8006a0e:	0018      	movs	r0, r3
 8006a10:	46bd      	mov	sp, r7
 8006a12:	b002      	add	sp, #8
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	20003664 	.word	0x20003664

08006a1c <Stspin220_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t Stspin220_GetNbDevices(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  return (stspin220NumberOfDevices);
 8006a20:	4b02      	ldr	r3, [pc, #8]	; (8006a2c <Stspin220_GetNbDevices+0x10>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
}
 8006a24:	0018      	movs	r0, r3
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	2000045e 	.word	0x2000045e

08006a30 <Stspin220_GetPosition>:
 * @brief Return the current position value of the specified device
 * @param[in] deviceId Unused parameter
 * @retval current position value
 **********************************************************/
int32_t Stspin220_GetPosition(uint8_t deviceId)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	0002      	movs	r2, r0
 8006a38:	1dfb      	adds	r3, r7, #7
 8006a3a:	701a      	strb	r2, [r3, #0]
  return devicePrm.currentPosition;
 8006a3c:	4b02      	ldr	r3, [pc, #8]	; (8006a48 <Stspin220_GetPosition+0x18>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
}
 8006a40:	0018      	movs	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b002      	add	sp, #8
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20003664 	.word	0x20003664

08006a4c <Stspin220_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t Stspin220_GetStepMode(uint8_t deviceId)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	0002      	movs	r2, r0
 8006a54:	1dfb      	adds	r3, r7, #7
 8006a56:	701a      	strb	r2, [r3, #0]
  return devicePrm.stepMode;
 8006a58:	4b03      	ldr	r3, [pc, #12]	; (8006a68 <Stspin220_GetStepMode+0x1c>)
 8006a5a:	223d      	movs	r2, #61	; 0x3d
 8006a5c:	5c9b      	ldrb	r3, [r3, r2]
 8006a5e:	b2db      	uxtb	r3, r3
}
 8006a60:	0018      	movs	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b002      	add	sp, #8
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20003664 	.word	0x20003664

08006a6c <Stspin220_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t Stspin220_GetStopMode(uint8_t deviceId)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	0002      	movs	r2, r0
 8006a74:	1dfb      	adds	r3, r7, #7
 8006a76:	701a      	strb	r2, [r3, #0]
  return devicePrm.stopMode;
 8006a78:	4b03      	ldr	r3, [pc, #12]	; (8006a88 <Stspin220_GetStopMode+0x1c>)
 8006a7a:	223f      	movs	r2, #63	; 0x3f
 8006a7c:	5c9b      	ldrb	r3, [r3, r2]
}
 8006a7e:	0018      	movs	r0, r3
 8006a80:	46bd      	mov	sp, r7
 8006a82:	b002      	add	sp, #8
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	46c0      	nop			; (mov r8, r8)
 8006a88:	20003664 	.word	0x20003664

08006a8c <Stspin220_GetTorque>:
 * @param[in] torqueMode torque mode
 * @retval the torqueValue in % (from 0 to 100)
 * @note
 **********************************************************/
uint8_t Stspin220_GetTorque(uint8_t deviceId, motorTorqueMode_t torqueMode)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	0002      	movs	r2, r0
 8006a94:	1dfb      	adds	r3, r7, #7
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	1dbb      	adds	r3, r7, #6
 8006a9a:	1c0a      	adds	r2, r1, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
  uint8_t torqueValue = 0;
 8006a9e:	230f      	movs	r3, #15
 8006aa0:	18fb      	adds	r3, r7, r3
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
  switch(torqueMode)
 8006aa6:	1dbb      	adds	r3, r7, #6
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d827      	bhi.n	8006afe <Stspin220_GetTorque+0x72>
 8006aae:	009a      	lsls	r2, r3, #2
 8006ab0:	4b17      	ldr	r3, [pc, #92]	; (8006b10 <Stspin220_GetTorque+0x84>)
 8006ab2:	18d3      	adds	r3, r2, r3
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	469f      	mov	pc, r3
  {
    case ACC_TORQUE:
      torqueValue = devicePrm.accelTorque;
 8006ab8:	230f      	movs	r3, #15
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	4a15      	ldr	r2, [pc, #84]	; (8006b14 <Stspin220_GetTorque+0x88>)
 8006abe:	2121      	movs	r1, #33	; 0x21
 8006ac0:	5c52      	ldrb	r2, [r2, r1]
 8006ac2:	701a      	strb	r2, [r3, #0]
      break;
 8006ac4:	e01c      	b.n	8006b00 <Stspin220_GetTorque+0x74>
    case DEC_TORQUE:
      torqueValue = devicePrm.decelTorque;
 8006ac6:	230f      	movs	r3, #15
 8006ac8:	18fb      	adds	r3, r7, r3
 8006aca:	4a12      	ldr	r2, [pc, #72]	; (8006b14 <Stspin220_GetTorque+0x88>)
 8006acc:	2122      	movs	r1, #34	; 0x22
 8006ace:	5c52      	ldrb	r2, [r2, r1]
 8006ad0:	701a      	strb	r2, [r3, #0]
      break;
 8006ad2:	e015      	b.n	8006b00 <Stspin220_GetTorque+0x74>
    case RUN_TORQUE:
      torqueValue = devicePrm.runTorque;
 8006ad4:	230f      	movs	r3, #15
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	4a0e      	ldr	r2, [pc, #56]	; (8006b14 <Stspin220_GetTorque+0x88>)
 8006ada:	2120      	movs	r1, #32
 8006adc:	5c52      	ldrb	r2, [r2, r1]
 8006ade:	701a      	strb	r2, [r3, #0]
      break;
 8006ae0:	e00e      	b.n	8006b00 <Stspin220_GetTorque+0x74>
    case HOLD_TORQUE:
      torqueValue = devicePrm.holdTorque;
 8006ae2:	230f      	movs	r3, #15
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	4a0b      	ldr	r2, [pc, #44]	; (8006b14 <Stspin220_GetTorque+0x88>)
 8006ae8:	2123      	movs	r1, #35	; 0x23
 8006aea:	5c52      	ldrb	r2, [r2, r1]
 8006aec:	701a      	strb	r2, [r3, #0]
      break;
 8006aee:	e007      	b.n	8006b00 <Stspin220_GetTorque+0x74>
    case CURRENT_TORQUE:
      torqueValue = devicePrm.currentTorque;
 8006af0:	230f      	movs	r3, #15
 8006af2:	18fb      	adds	r3, r7, r3
 8006af4:	4a07      	ldr	r2, [pc, #28]	; (8006b14 <Stspin220_GetTorque+0x88>)
 8006af6:	2124      	movs	r1, #36	; 0x24
 8006af8:	5c52      	ldrb	r2, [r2, r1]
 8006afa:	701a      	strb	r2, [r3, #0]
      break;
 8006afc:	e000      	b.n	8006b00 <Stspin220_GetTorque+0x74>
    default:
      break;
 8006afe:	46c0      	nop			; (mov r8, r8)
  }
  return torqueValue;
 8006b00:	230f      	movs	r3, #15
 8006b02:	18fb      	adds	r3, r7, r3
 8006b04:	781b      	ldrb	r3, [r3, #0]
}
 8006b06:	0018      	movs	r0, r3
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	b004      	add	sp, #16
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	46c0      	nop			; (mov r8, r8)
 8006b10:	0801631c 	.word	0x0801631c
 8006b14:	20003664 	.word	0x20003664

08006b18 <Stspin220_GetTorqueBoostEnable>:
 * @brief Get the torque boost feature status
 * @param[in] deviceId Unused parameter
 * @retval TRUE if enabled, FALSE if disabled
 **********************************************************/
bool Stspin220_GetTorqueBoostEnable(uint8_t deviceId)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	0002      	movs	r2, r0
 8006b20:	1dfb      	adds	r3, r7, #7
 8006b22:	701a      	strb	r2, [r3, #0]
  return devicePrm.torqueBoostEnable;
 8006b24:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <Stspin220_GetTorqueBoostEnable+0x1c>)
 8006b26:	222c      	movs	r2, #44	; 0x2c
 8006b28:	5c9b      	ldrb	r3, [r3, r2]
 8006b2a:	b2db      	uxtb	r3, r3
}
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b002      	add	sp, #8
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20003664 	.word	0x20003664

08006b38 <Stspin220_GetTorqueBoostThreshold>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * @retval the torque boost threshold above which the step mode is
 * changed to full step
 **********************************************************/
uint16_t Stspin220_GetTorqueBoostThreshold(uint8_t deviceId)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	0002      	movs	r2, r0
 8006b40:	1dfb      	adds	r3, r7, #7
 8006b42:	701a      	strb	r2, [r3, #0]
  return devicePrm.torqueBoostSpeedThreshold;
 8006b44:	4b03      	ldr	r3, [pc, #12]	; (8006b54 <Stspin220_GetTorqueBoostThreshold+0x1c>)
 8006b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b48:	b29b      	uxth	r3, r3
}
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	b002      	add	sp, #8
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	46c0      	nop			; (mov r8, r8)
 8006b54:	20003664 	.word	0x20003664

08006b58 <Stspin220_GoHome>:
 * @brief Request the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId Unused parameter
 * @retval None
 **********************************************************/
void Stspin220_GoHome(uint8_t deviceId)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	0002      	movs	r2, r0
 8006b60:	1dfb      	adds	r3, r7, #7
 8006b62:	701a      	strb	r2, [r3, #0]
  deviceId = 0;
 8006b64:	1dfb      	adds	r3, r7, #7
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]
  
  Stspin220_GoTo(deviceId, 0);
 8006b6a:	1dfb      	adds	r3, r7, #7
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2100      	movs	r1, #0
 8006b70:	0018      	movs	r0, r3
 8006b72:	f000 f81d 	bl	8006bb0 <Stspin220_GoTo>
} 
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	b002      	add	sp, #8
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <Stspin220_GoMark>:
 * @brief Request the motor to move to the mark position 
 * @param[in] deviceId Unused parameter
 * @retval None
 **********************************************************/
void Stspin220_GoMark(uint8_t deviceId)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	0002      	movs	r2, r0
 8006b88:	1dfb      	adds	r3, r7, #7
 8006b8a:	701a      	strb	r2, [r3, #0]
  deviceId = 0;
 8006b8c:	1dfb      	adds	r3, r7, #7
 8006b8e:	2200      	movs	r2, #0
 8006b90:	701a      	strb	r2, [r3, #0]
  
	Stspin220_GoTo(deviceId, devicePrm.markPosition);
 8006b92:	4b06      	ldr	r3, [pc, #24]	; (8006bac <Stspin220_GoMark+0x2c>)
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	1dfb      	adds	r3, r7, #7
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	0011      	movs	r1, r2
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f000 f807 	bl	8006bb0 <Stspin220_GoTo>
}
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	b002      	add	sp, #8
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	20003664 	.word	0x20003664

08006bb0 <Stspin220_GoTo>:
 * STEP_MODE_1_64                   : 1/64 step
 * STEP_MODE_1_128                  : 1/128 step
 * STEP_MODE_1_256                  : 1/256 step
 **********************************************************/
void Stspin220_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	0002      	movs	r2, r0
 8006bb8:	6039      	str	r1, [r7, #0]
 8006bba:	1dfb      	adds	r3, r7, #7
 8006bbc:	701a      	strb	r2, [r3, #0]
  motorDir_t direction;
  deviceId = 0;
 8006bbe:	1dfb      	adds	r3, r7, #7
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
  
  /* Exit from standby if needed */
  if (devicePrm.motionState == STANDBY)
 8006bc4:	4b39      	ldr	r3, [pc, #228]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006bc6:	223c      	movs	r2, #60	; 0x3c
 8006bc8:	5c9b      	ldrb	r3, [r3, r2]
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b09      	cmp	r3, #9
 8006bce:	d105      	bne.n	8006bdc <Stspin220_GoTo+0x2c>
  {
    Stspin220_ExitDeviceFromStandby(deviceId);
 8006bd0:	1dfb      	adds	r3, r7, #7
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f7ff fe51 	bl	800687c <Stspin220_ExitDeviceFromStandby>
 8006bda:	e00a      	b.n	8006bf2 <Stspin220_GoTo+0x42>
  }
  /* Deactivate motor if needed */
  else if (devicePrm.motionState != INACTIVE)
 8006bdc:	4b33      	ldr	r3, [pc, #204]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006bde:	223c      	movs	r2, #60	; 0x3c
 8006be0:	5c9b      	ldrb	r3, [r3, r2]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d004      	beq.n	8006bf2 <Stspin220_GoTo+0x42>
  { 
    Stspin220_HardHiZ(deviceId);
 8006be8:	1dfb      	adds	r3, r7, #7
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	0018      	movs	r0, r3
 8006bee:	f000 f8d5 	bl	8006d9c <Stspin220_HardHiZ>
  }
  
  if (targetPosition > devicePrm.currentPosition)
 8006bf2:	4b2e      	ldr	r3, [pc, #184]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	dd1a      	ble.n	8006c32 <Stspin220_GoTo+0x82>
  {
    devicePrm.stepsToTake = targetPosition -\
                                      devicePrm.currentPosition;
 8006bfc:	4b2b      	ldr	r3, [pc, #172]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
    devicePrm.stepsToTake = targetPosition -\
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	001a      	movs	r2, r3
 8006c06:	4b29      	ldr	r3, [pc, #164]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006c08:	61da      	str	r2, [r3, #28]
    if (devicePrm.stepsToTake < (STSPIN220_POSITION_RANGE>>1))
 8006c0a:	4b28      	ldr	r3, [pc, #160]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	4a28      	ldr	r2, [pc, #160]	; (8006cb0 <Stspin220_GoTo+0x100>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d804      	bhi.n	8006c1e <Stspin220_GoTo+0x6e>
    {
      direction = FORWARD;
 8006c14:	230f      	movs	r3, #15
 8006c16:	18fb      	adds	r3, r7, r3
 8006c18:	2201      	movs	r2, #1
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	e023      	b.n	8006c66 <Stspin220_GoTo+0xb6>
    }
    else
    {
      direction = BACKWARD;
 8006c1e:	230f      	movs	r3, #15
 8006c20:	18fb      	adds	r3, r7, r3
 8006c22:	2200      	movs	r2, #0
 8006c24:	701a      	strb	r2, [r3, #0]
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
                                        devicePrm.stepsToTake;
 8006c26:	4b21      	ldr	r3, [pc, #132]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006c28:	69db      	ldr	r3, [r3, #28]
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
 8006c2a:	43da      	mvns	r2, r3
 8006c2c:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006c2e:	61da      	str	r2, [r3, #28]
 8006c30:	e019      	b.n	8006c66 <Stspin220_GoTo+0xb6>
    }
  }
  else
  {
    devicePrm.stepsToTake = devicePrm.currentPosition -\
 8006c32:	4b1e      	ldr	r3, [pc, #120]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	001a      	movs	r2, r3
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006c3e:	61da      	str	r2, [r3, #28]
                                      targetPosition;
    if (devicePrm.stepsToTake < (STSPIN220_POSITION_RANGE>>1))
 8006c40:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	4a1a      	ldr	r2, [pc, #104]	; (8006cb0 <Stspin220_GoTo+0x100>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d804      	bhi.n	8006c54 <Stspin220_GoTo+0xa4>
    {
      direction = BACKWARD;
 8006c4a:	230f      	movs	r3, #15
 8006c4c:	18fb      	adds	r3, r7, r3
 8006c4e:	2200      	movs	r2, #0
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e008      	b.n	8006c66 <Stspin220_GoTo+0xb6>
    }
    else
    {
      direction = FORWARD; 
 8006c54:	230f      	movs	r3, #15
 8006c56:	18fb      	adds	r3, r7, r3
 8006c58:	2201      	movs	r2, #1
 8006c5a:	701a      	strb	r2, [r3, #0]
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
                                        devicePrm.stepsToTake;
 8006c5c:	4b13      	ldr	r3, [pc, #76]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006c5e:	69db      	ldr	r3, [r3, #28]
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE -\
 8006c60:	43da      	mvns	r2, r3
 8006c62:	4b12      	ldr	r3, [pc, #72]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006c64:	61da      	str	r2, [r3, #28]
    }
  }
  
  if (devicePrm.stepsToTake != 0) 
 8006c66:	4b11      	ldr	r3, [pc, #68]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d019      	beq.n	8006ca2 <Stspin220_GoTo+0xf2>
  {
    devicePrm.commandExecuted = MOVE_CMD;
 8006c6e:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006c70:	223a      	movs	r2, #58	; 0x3a
 8006c72:	2102      	movs	r1, #2
 8006c74:	5499      	strb	r1, [r3, r2]
    
    /* Direction setup */
    Stspin220_SetDirection(deviceId, direction);
 8006c76:	230f      	movs	r3, #15
 8006c78:	18fb      	adds	r3, r7, r3
 8006c7a:	781a      	ldrb	r2, [r3, #0]
 8006c7c:	1dfb      	adds	r3, r7, #7
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	0011      	movs	r1, r2
 8006c82:	0018      	movs	r0, r3
 8006c84:	f000 fa28 	bl	80070d8 <Stspin220_SetDirection>
    
    Stspin220_ComputeSpeedProfile(deviceId, devicePrm.stepsToTake);
 8006c88:	4b08      	ldr	r3, [pc, #32]	; (8006cac <Stspin220_GoTo+0xfc>)
 8006c8a:	69da      	ldr	r2, [r3, #28]
 8006c8c:	1dfb      	adds	r3, r7, #7
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	0011      	movs	r1, r2
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 fda8 	bl	80077e8 <Stspin220_ComputeSpeedProfile>
    
    /* Motor activation */
    Stspin220_StartMovement(deviceId);
 8006c98:	1dfb      	adds	r3, r7, #7
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f000 fffd 	bl	8007c9c <Stspin220_StartMovement>
  }
}
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	b004      	add	sp, #16
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	20003664 	.word	0x20003664
 8006cb0:	7ffffffe 	.word	0x7ffffffe

08006cb4 <Stspin220_GoToDir>:
 * STEP_MODE_1_64                   : 1/64 step
 * STEP_MODE_1_128                  : 1/128 step
 * STEP_MODE_1_256                  : 1/256 step
 **********************************************************/
void Stspin220_GoToDir(uint8_t deviceId, motorDir_t direction, int32_t targetPosition)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	603a      	str	r2, [r7, #0]
 8006cbc:	1dfb      	adds	r3, r7, #7
 8006cbe:	1c02      	adds	r2, r0, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	1dbb      	adds	r3, r7, #6
 8006cc4:	1c0a      	adds	r2, r1, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
  deviceId = 0;
 8006cc8:	1dfb      	adds	r3, r7, #7
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
  
  /* Exit from standby if needed */
  if (devicePrm.motionState == STANDBY)
 8006cce:	4b32      	ldr	r3, [pc, #200]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006cd0:	223c      	movs	r2, #60	; 0x3c
 8006cd2:	5c9b      	ldrb	r3, [r3, r2]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b09      	cmp	r3, #9
 8006cd8:	d105      	bne.n	8006ce6 <Stspin220_GoToDir+0x32>
  {
    Stspin220_ExitDeviceFromStandby(deviceId);
 8006cda:	1dfb      	adds	r3, r7, #7
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	0018      	movs	r0, r3
 8006ce0:	f7ff fdcc 	bl	800687c <Stspin220_ExitDeviceFromStandby>
 8006ce4:	e00a      	b.n	8006cfc <Stspin220_GoToDir+0x48>
  }
  /* Deactivate motor if needed */
  else if (devicePrm.motionState != INACTIVE)
 8006ce6:	4b2c      	ldr	r3, [pc, #176]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006ce8:	223c      	movs	r2, #60	; 0x3c
 8006cea:	5c9b      	ldrb	r3, [r3, r2]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b08      	cmp	r3, #8
 8006cf0:	d004      	beq.n	8006cfc <Stspin220_GoToDir+0x48>
  { 
    Stspin220_HardHiZ(deviceId);
 8006cf2:	1dfb      	adds	r3, r7, #7
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f000 f850 	bl	8006d9c <Stspin220_HardHiZ>
  }
  
  if (direction != BACKWARD)
 8006cfc:	1dbb      	adds	r3, r7, #6
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d014      	beq.n	8006d2e <Stspin220_GoToDir+0x7a>
  {
    if (targetPosition > devicePrm.currentPosition)
 8006d04:	4b24      	ldr	r3, [pc, #144]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	dd07      	ble.n	8006d1e <Stspin220_GoToDir+0x6a>
    {
      devicePrm.stepsToTake = targetPosition -\
                                        devicePrm.currentPosition;
 8006d0e:	4b22      	ldr	r3, [pc, #136]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d10:	685b      	ldr	r3, [r3, #4]
      devicePrm.stepsToTake = targetPosition -\
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	001a      	movs	r2, r3
 8006d18:	4b1f      	ldr	r3, [pc, #124]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d1a:	61da      	str	r2, [r3, #28]
 8006d1c:	e01b      	b.n	8006d56 <Stspin220_GoToDir+0xa2>
    }
    else
    {
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE +\
                                       (targetPosition -\
                                        devicePrm.currentPosition);
 8006d1e:	4b1e      	ldr	r3, [pc, #120]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d20:	685b      	ldr	r3, [r3, #4]
                                       (targetPosition -\
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	1ad3      	subs	r3, r2, r3
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE +\
 8006d26:	1e5a      	subs	r2, r3, #1
 8006d28:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d2a:	61da      	str	r2, [r3, #28]
 8006d2c:	e013      	b.n	8006d56 <Stspin220_GoToDir+0xa2>
    }
  }
  else
  {
    if (targetPosition > devicePrm.currentPosition)
 8006d2e:	4b1a      	ldr	r3, [pc, #104]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	dd07      	ble.n	8006d48 <Stspin220_GoToDir+0x94>
    {
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE +\
                                        (devicePrm.currentPosition -\
 8006d38:	4b17      	ldr	r3, [pc, #92]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	1ad3      	subs	r3, r2, r3
      devicePrm.stepsToTake = STSPIN220_POSITION_RANGE +\
 8006d40:	1e5a      	subs	r2, r3, #1
 8006d42:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d44:	61da      	str	r2, [r3, #28]
 8006d46:	e006      	b.n	8006d56 <Stspin220_GoToDir+0xa2>
                                         targetPosition);
    }
    else
    {
      devicePrm.stepsToTake = devicePrm.currentPosition -\
 8006d48:	4b13      	ldr	r3, [pc, #76]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	001a      	movs	r2, r3
 8006d52:	4b11      	ldr	r3, [pc, #68]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d54:	61da      	str	r2, [r3, #28]
                                        targetPosition;
    }
  }

  if (devicePrm.stepsToTake != 0) 
 8006d56:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d018      	beq.n	8006d90 <Stspin220_GoToDir+0xdc>
  {
    devicePrm.commandExecuted = MOVE_CMD;
 8006d5e:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d60:	223a      	movs	r2, #58	; 0x3a
 8006d62:	2102      	movs	r1, #2
 8006d64:	5499      	strb	r1, [r3, r2]
    
    /* Direction setup */
    Stspin220_SetDirection(deviceId, direction);
 8006d66:	1dbb      	adds	r3, r7, #6
 8006d68:	781a      	ldrb	r2, [r3, #0]
 8006d6a:	1dfb      	adds	r3, r7, #7
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	0011      	movs	r1, r2
 8006d70:	0018      	movs	r0, r3
 8006d72:	f000 f9b1 	bl	80070d8 <Stspin220_SetDirection>
    
    Stspin220_ComputeSpeedProfile(deviceId, devicePrm.stepsToTake);
 8006d76:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <Stspin220_GoToDir+0xe4>)
 8006d78:	69da      	ldr	r2, [r3, #28]
 8006d7a:	1dfb      	adds	r3, r7, #7
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	0011      	movs	r1, r2
 8006d80:	0018      	movs	r0, r3
 8006d82:	f000 fd31 	bl	80077e8 <Stspin220_ComputeSpeedProfile>
    
    /* Motor activation */
    Stspin220_StartMovement(deviceId);
 8006d86:	1dfb      	adds	r3, r7, #7
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f000 ff86 	bl	8007c9c <Stspin220_StartMovement>
  }  
}
 8006d90:	46c0      	nop			; (mov r8, r8)
 8006d92:	46bd      	mov	sp, r7
 8006d94:	b002      	add	sp, #8
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20003664 	.word	0x20003664

08006d9c <Stspin220_HardHiZ>:
 * @brief  Immediatly stop the motor and disable the power bridge
 * @param[in] deviceId Unused parameter
 * @retval None
 **********************************************************/
void Stspin220_HardHiZ(uint8_t deviceId) 
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	0002      	movs	r2, r0
 8006da4:	1dfb      	adds	r3, r7, #7
 8006da6:	701a      	strb	r2, [r3, #0]
  /* Set inactive state */
  devicePrm.motionState = INACTIVE;
 8006da8:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <Stspin220_HardHiZ+0x7c>)
 8006daa:	223c      	movs	r2, #60	; 0x3c
 8006dac:	2108      	movs	r1, #8
 8006dae:	5499      	strb	r1, [r3, r2]
  
  /* Disable step clock */
  if (Stspin220_Board_TimStckStop(&toggleOdd) == 0)
 8006db0:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <Stspin220_HardHiZ+0x80>)
 8006db2:	0018      	movs	r0, r3
 8006db4:	f007 ffde 	bl	800ed74 <Stspin220_Board_TimStckStop>
 8006db8:	1e03      	subs	r3, r0, #0
 8006dba:	d103      	bne.n	8006dc4 <Stspin220_HardHiZ+0x28>
  {
    Stspin220_ErrorHandler(STSPIN220_ERROR_STEP_CLOCK);
 8006dbc:	4b18      	ldr	r3, [pc, #96]	; (8006e20 <Stspin220_HardHiZ+0x84>)
 8006dbe:	0018      	movs	r0, r3
 8006dc0:	f7ff fd44 	bl	800684c <Stspin220_ErrorHandler>
  }

  /* Let the PWM REF and bridges enabled at least for DISABLE_DELAY time */
  /* after the last step clock rising edge triggering the last step */
  Stspin220_Board_Delay(DISABLE_DELAY);
 8006dc4:	2001      	movs	r0, #1
 8006dc6:	f007 fdf7 	bl	800e9b8 <Stspin220_Board_Delay>
  
  /* Set reference voltage to 0 */
  Stspin220_SetTorque(0, CURRENT_TORQUE, 0);
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2104      	movs	r1, #4
 8006dce:	2000      	movs	r0, #0
 8006dd0:	f000 fad4 	bl	800737c <Stspin220_SetTorque>

  /* Disable power bridges */
  Stspin220_Board_Disable();
 8006dd4:	f008 f82a 	bl	800ee2c <Stspin220_Board_Disable>
  
  /* Comeback to nominal step mode */
  if (devicePrm.stepModeLatched != devicePrm.stepMode)
 8006dd8:	4b0f      	ldr	r3, [pc, #60]	; (8006e18 <Stspin220_HardHiZ+0x7c>)
 8006dda:	223e      	movs	r2, #62	; 0x3e
 8006ddc:	5c9a      	ldrb	r2, [r3, r2]
 8006dde:	4b0e      	ldr	r3, [pc, #56]	; (8006e18 <Stspin220_HardHiZ+0x7c>)
 8006de0:	213d      	movs	r1, #61	; 0x3d
 8006de2:	5c5b      	ldrb	r3, [r3, r1]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d007      	beq.n	8006dfa <Stspin220_HardHiZ+0x5e>
  {
    Stspin220_Board_UnsetFullStep();
 8006dea:	f008 f927 	bl	800f03c <Stspin220_Board_UnsetFullStep>
    devicePrm.stepMode = devicePrm.stepModeLatched;
 8006dee:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <Stspin220_HardHiZ+0x7c>)
 8006df0:	223e      	movs	r2, #62	; 0x3e
 8006df2:	5c99      	ldrb	r1, [r3, r2]
 8006df4:	4b08      	ldr	r3, [pc, #32]	; (8006e18 <Stspin220_HardHiZ+0x7c>)
 8006df6:	223d      	movs	r2, #61	; 0x3d
 8006df8:	5499      	strb	r1, [r3, r2]
  }

  devicePrm.commandExecuted = NO_CMD;
 8006dfa:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <Stspin220_HardHiZ+0x7c>)
 8006dfc:	223a      	movs	r2, #58	; 0x3a
 8006dfe:	2100      	movs	r1, #0
 8006e00:	5499      	strb	r1, [r3, r2]
  devicePrm.stepsToTake = 0;  
 8006e02:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <Stspin220_HardHiZ+0x7c>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	61da      	str	r2, [r3, #28]
  devicePrm.speed = 0;
 8006e08:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <Stspin220_HardHiZ+0x7c>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8006e0e:	46c0      	nop			; (mov r8, r8)
 8006e10:	46bd      	mov	sp, r7
 8006e12:	b002      	add	sp, #8
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	46c0      	nop			; (mov r8, r8)
 8006e18:	20003664 	.word	0x20003664
 8006e1c:	2000045f 	.word	0x2000045f
 8006e20:	0000a00e 	.word	0x0000a00e

08006e24 <Stspin220_HardStop>:
 * or call Stspin220_PutDeviceInStandby function when stop mode is STANDBY_MODE
 * @param[in] deviceId Unused parameter
 * @retval None
 **********************************************************/
void Stspin220_HardStop(uint8_t deviceId) 
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	0002      	movs	r2, r0
 8006e2c:	1dfb      	adds	r3, r7, #7
 8006e2e:	701a      	strb	r2, [r3, #0]
  deviceId = 0;
 8006e30:	1dfb      	adds	r3, r7, #7
 8006e32:	2200      	movs	r2, #0
 8006e34:	701a      	strb	r2, [r3, #0]
  
  if (devicePrm.stopMode == HOLD_MODE)
 8006e36:	4b27      	ldr	r3, [pc, #156]	; (8006ed4 <Stspin220_HardStop+0xb0>)
 8006e38:	223f      	movs	r2, #63	; 0x3f
 8006e3a:	5c9b      	ldrb	r3, [r3, r2]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d12f      	bne.n	8006ea0 <Stspin220_HardStop+0x7c>
  {
    /* Set inactive state */
    devicePrm.motionState = INACTIVE;
 8006e40:	4b24      	ldr	r3, [pc, #144]	; (8006ed4 <Stspin220_HardStop+0xb0>)
 8006e42:	223c      	movs	r2, #60	; 0x3c
 8006e44:	2108      	movs	r1, #8
 8006e46:	5499      	strb	r1, [r3, r2]

    /* Disable step clock */
    if (Stspin220_Board_TimStckStop(&toggleOdd) == 0)
 8006e48:	4b23      	ldr	r3, [pc, #140]	; (8006ed8 <Stspin220_HardStop+0xb4>)
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f007 ff92 	bl	800ed74 <Stspin220_Board_TimStckStop>
 8006e50:	1e03      	subs	r3, r0, #0
 8006e52:	d103      	bne.n	8006e5c <Stspin220_HardStop+0x38>
    {
      Stspin220_ErrorHandler(STSPIN220_ERROR_STEP_CLOCK);
 8006e54:	4b21      	ldr	r3, [pc, #132]	; (8006edc <Stspin220_HardStop+0xb8>)
 8006e56:	0018      	movs	r0, r3
 8006e58:	f7ff fcf8 	bl	800684c <Stspin220_ErrorHandler>
    }
    
    /* Set holding torque */
    Stspin220_ApplyTorque(deviceId, HOLD_TORQUE);
 8006e5c:	1dfb      	adds	r3, r7, #7
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2103      	movs	r1, #3
 8006e62:	0018      	movs	r0, r3
 8006e64:	f000 fc6e 	bl	8007744 <Stspin220_ApplyTorque>
 
    /* Comeback to nominal step mode */
    if (devicePrm.stepModeLatched != devicePrm.stepMode)
 8006e68:	4b1a      	ldr	r3, [pc, #104]	; (8006ed4 <Stspin220_HardStop+0xb0>)
 8006e6a:	223e      	movs	r2, #62	; 0x3e
 8006e6c:	5c9a      	ldrb	r2, [r3, r2]
 8006e6e:	4b19      	ldr	r3, [pc, #100]	; (8006ed4 <Stspin220_HardStop+0xb0>)
 8006e70:	213d      	movs	r1, #61	; 0x3d
 8006e72:	5c5b      	ldrb	r3, [r3, r1]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d007      	beq.n	8006e8a <Stspin220_HardStop+0x66>
    {
      Stspin220_Board_UnsetFullStep();
 8006e7a:	f008 f8df 	bl	800f03c <Stspin220_Board_UnsetFullStep>
      devicePrm.stepMode = devicePrm.stepModeLatched;
 8006e7e:	4b15      	ldr	r3, [pc, #84]	; (8006ed4 <Stspin220_HardStop+0xb0>)
 8006e80:	223e      	movs	r2, #62	; 0x3e
 8006e82:	5c99      	ldrb	r1, [r3, r2]
 8006e84:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <Stspin220_HardStop+0xb0>)
 8006e86:	223d      	movs	r2, #61	; 0x3d
 8006e88:	5499      	strb	r1, [r3, r2]
    }    
    
    devicePrm.commandExecuted = NO_CMD;
 8006e8a:	4b12      	ldr	r3, [pc, #72]	; (8006ed4 <Stspin220_HardStop+0xb0>)
 8006e8c:	223a      	movs	r2, #58	; 0x3a
 8006e8e:	2100      	movs	r1, #0
 8006e90:	5499      	strb	r1, [r3, r2]
    devicePrm.stepsToTake = 0;  
 8006e92:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <Stspin220_HardStop+0xb0>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	61da      	str	r2, [r3, #28]
    devicePrm.speed = 0;
 8006e98:	4b0e      	ldr	r3, [pc, #56]	; (8006ed4 <Stspin220_HardStop+0xb0>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	871a      	strh	r2, [r3, #56]	; 0x38
  }
  else if (devicePrm.stopMode == STANDBY_MODE)
  {
    Stspin220_PutDeviceInStandby(deviceId);
  }
}
 8006e9e:	e014      	b.n	8006eca <Stspin220_HardStop+0xa6>
  else if (devicePrm.stopMode == HIZ_MODE)
 8006ea0:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <Stspin220_HardStop+0xb0>)
 8006ea2:	223f      	movs	r2, #63	; 0x3f
 8006ea4:	5c9b      	ldrb	r3, [r3, r2]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d105      	bne.n	8006eb6 <Stspin220_HardStop+0x92>
    Stspin220_HardHiZ(deviceId);
 8006eaa:	1dfb      	adds	r3, r7, #7
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	0018      	movs	r0, r3
 8006eb0:	f7ff ff74 	bl	8006d9c <Stspin220_HardHiZ>
}
 8006eb4:	e009      	b.n	8006eca <Stspin220_HardStop+0xa6>
  else if (devicePrm.stopMode == STANDBY_MODE)
 8006eb6:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <Stspin220_HardStop+0xb0>)
 8006eb8:	223f      	movs	r2, #63	; 0x3f
 8006eba:	5c9b      	ldrb	r3, [r3, r2]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d104      	bne.n	8006eca <Stspin220_HardStop+0xa6>
    Stspin220_PutDeviceInStandby(deviceId);
 8006ec0:	1dfb      	adds	r3, r7, #7
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	f000 f853 	bl	8006f70 <Stspin220_PutDeviceInStandby>
}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b002      	add	sp, #8
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	20003664 	.word	0x20003664
 8006ed8:	2000045f 	.word	0x2000045f
 8006edc:	0000a00e 	.word	0x0000a00e

08006ee0 <Stspin220_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void Stspin220_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	603a      	str	r2, [r7, #0]
 8006ee8:	1dfb      	adds	r3, r7, #7
 8006eea:	1c02      	adds	r2, r0, #0
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	1dbb      	adds	r3, r7, #6
 8006ef0:	1c0a      	adds	r2, r1, #0
 8006ef2:	701a      	strb	r2, [r3, #0]
  deviceId = 0;
 8006ef4:	1dfb      	adds	r3, r7, #7
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
  
  /* Exit from standby if needed */
  if (devicePrm.motionState == STANDBY)
 8006efa:	4b1c      	ldr	r3, [pc, #112]	; (8006f6c <Stspin220_Move+0x8c>)
 8006efc:	223c      	movs	r2, #60	; 0x3c
 8006efe:	5c9b      	ldrb	r3, [r3, r2]
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b09      	cmp	r3, #9
 8006f04:	d105      	bne.n	8006f12 <Stspin220_Move+0x32>
  {
    Stspin220_ExitDeviceFromStandby(deviceId);
 8006f06:	1dfb      	adds	r3, r7, #7
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	f7ff fcb6 	bl	800687c <Stspin220_ExitDeviceFromStandby>
 8006f10:	e00a      	b.n	8006f28 <Stspin220_Move+0x48>
  }
  /* Deactivate motor if needed */
  else if (devicePrm.motionState != INACTIVE)
 8006f12:	4b16      	ldr	r3, [pc, #88]	; (8006f6c <Stspin220_Move+0x8c>)
 8006f14:	223c      	movs	r2, #60	; 0x3c
 8006f16:	5c9b      	ldrb	r3, [r3, r2]
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b08      	cmp	r3, #8
 8006f1c:	d004      	beq.n	8006f28 <Stspin220_Move+0x48>
  {
    Stspin220_HardHiZ(deviceId);
 8006f1e:	1dfb      	adds	r3, r7, #7
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	0018      	movs	r0, r3
 8006f24:	f7ff ff3a 	bl	8006d9c <Stspin220_HardHiZ>
  }
  
  if (stepCount != 0) 
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01a      	beq.n	8006f64 <Stspin220_Move+0x84>
  {
    devicePrm.stepsToTake = stepCount;    
 8006f2e:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <Stspin220_Move+0x8c>)
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	61da      	str	r2, [r3, #28]
    devicePrm.commandExecuted = MOVE_CMD;
 8006f34:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <Stspin220_Move+0x8c>)
 8006f36:	223a      	movs	r2, #58	; 0x3a
 8006f38:	2102      	movs	r1, #2
 8006f3a:	5499      	strb	r1, [r3, r2]
    
    /* Direction setup */
    Stspin220_SetDirection(deviceId, direction);
 8006f3c:	1dbb      	adds	r3, r7, #6
 8006f3e:	781a      	ldrb	r2, [r3, #0]
 8006f40:	1dfb      	adds	r3, r7, #7
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	0011      	movs	r1, r2
 8006f46:	0018      	movs	r0, r3
 8006f48:	f000 f8c6 	bl	80070d8 <Stspin220_SetDirection>
    
    Stspin220_ComputeSpeedProfile(deviceId, stepCount);
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	1dfb      	adds	r3, r7, #7
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	0011      	movs	r1, r2
 8006f54:	0018      	movs	r0, r3
 8006f56:	f000 fc47 	bl	80077e8 <Stspin220_ComputeSpeedProfile>
    
    /* Motor activation */
    Stspin220_StartMovement(deviceId);
 8006f5a:	1dfb      	adds	r3, r7, #7
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	0018      	movs	r0, r3
 8006f60:	f000 fe9c 	bl	8007c9c <Stspin220_StartMovement>
  }  
}
 8006f64:	46c0      	nop			; (mov r8, r8)
 8006f66:	46bd      	mov	sp, r7
 8006f68:	b002      	add	sp, #8
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20003664 	.word	0x20003664

08006f70 <Stspin220_PutDeviceInStandby>:
 * @brief Put STSPIN220 device in standby (low power consumption)
 * @param[in] deviceId Unused parameter
 * @retval None
 **********************************************************/
void Stspin220_PutDeviceInStandby(uint8_t deviceId)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	0002      	movs	r2, r0
 8006f78:	1dfb      	adds	r3, r7, #7
 8006f7a:	701a      	strb	r2, [r3, #0]
  /* Stop movement */
  Stspin220_HardHiZ(deviceId);
 8006f7c:	1dfb      	adds	r3, r7, #7
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	0018      	movs	r0, r3
 8006f82:	f7ff ff0b 	bl	8006d9c <Stspin220_HardHiZ>
  
  /* Enter standby */
	Stspin220_Board_Reset();
 8006f86:	f007 ff2f 	bl	800ede8 <Stspin220_Board_Reset>
  
  devicePrm.motionState = STANDBY;
 8006f8a:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <Stspin220_PutDeviceInStandby+0x2c>)
 8006f8c:	223c      	movs	r2, #60	; 0x3c
 8006f8e:	2109      	movs	r1, #9
 8006f90:	5499      	strb	r1, [r3, r2]
}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b002      	add	sp, #8
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	20003664 	.word	0x20003664

08006fa0 <Stspin220_Run>:
 * @param[in] deviceId Unused parameter
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void Stspin220_Run(uint8_t deviceId, motorDir_t direction)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	0002      	movs	r2, r0
 8006fa8:	1dfb      	adds	r3, r7, #7
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	1dbb      	adds	r3, r7, #6
 8006fae:	1c0a      	adds	r2, r1, #0
 8006fb0:	701a      	strb	r2, [r3, #0]
  /* Exit from standby if needed */
  if (devicePrm.motionState == STANDBY)
 8006fb2:	4b16      	ldr	r3, [pc, #88]	; (800700c <Stspin220_Run+0x6c>)
 8006fb4:	223c      	movs	r2, #60	; 0x3c
 8006fb6:	5c9b      	ldrb	r3, [r3, r2]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b09      	cmp	r3, #9
 8006fbc:	d105      	bne.n	8006fca <Stspin220_Run+0x2a>
  {
    Stspin220_ExitDeviceFromStandby(deviceId);
 8006fbe:	1dfb      	adds	r3, r7, #7
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f7ff fc5a 	bl	800687c <Stspin220_ExitDeviceFromStandby>
 8006fc8:	e00a      	b.n	8006fe0 <Stspin220_Run+0x40>
  }
  /* Deactivate motor if needed */
  else if (devicePrm.motionState != INACTIVE)
 8006fca:	4b10      	ldr	r3, [pc, #64]	; (800700c <Stspin220_Run+0x6c>)
 8006fcc:	223c      	movs	r2, #60	; 0x3c
 8006fce:	5c9b      	ldrb	r3, [r3, r2]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d004      	beq.n	8006fe0 <Stspin220_Run+0x40>
  {
    Stspin220_HardHiZ(deviceId);
 8006fd6:	1dfb      	adds	r3, r7, #7
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f7ff fede 	bl	8006d9c <Stspin220_HardHiZ>
  }
  
	/* Direction setup */
	Stspin220_SetDirection(deviceId,direction);
 8006fe0:	1dbb      	adds	r3, r7, #6
 8006fe2:	781a      	ldrb	r2, [r3, #0]
 8006fe4:	1dfb      	adds	r3, r7, #7
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	0011      	movs	r1, r2
 8006fea:	0018      	movs	r0, r3
 8006fec:	f000 f874 	bl	80070d8 <Stspin220_SetDirection>
	devicePrm.commandExecuted = RUN_CMD;
 8006ff0:	4b06      	ldr	r3, [pc, #24]	; (800700c <Stspin220_Run+0x6c>)
 8006ff2:	223a      	movs	r2, #58	; 0x3a
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	5499      	strb	r1, [r3, r2]
	/* Motor activation */
	Stspin220_StartMovement(deviceId); 
 8006ff8:	1dfb      	adds	r3, r7, #7
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f000 fe4d 	bl	8007c9c <Stspin220_StartMovement>
}
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	46bd      	mov	sp, r7
 8007006:	b002      	add	sp, #8
 8007008:	bd80      	pop	{r7, pc}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	20003664 	.word	0x20003664

08007010 <Stspin220_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed if the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool Stspin220_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	0002      	movs	r2, r0
 8007018:	1dfb      	adds	r3, r7, #7
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	1d3b      	adds	r3, r7, #4
 800701e:	1c0a      	adds	r2, r1, #0
 8007020:	801a      	strh	r2, [r3, #0]
  bool cmdExecuted = FALSE;
 8007022:	230f      	movs	r3, #15
 8007024:	18fb      	adds	r3, r7, r3
 8007026:	2200      	movs	r2, #0
 8007028:	701a      	strb	r2, [r3, #0]
  if ((newAcc != 0)&&
 800702a:	1d3b      	adds	r3, r7, #4
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d016      	beq.n	8007060 <Stspin220_SetAcceleration+0x50>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8007032:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <Stspin220_SetAcceleration+0x60>)
 8007034:	223c      	movs	r2, #60	; 0x3c
 8007036:	5c9b      	ldrb	r3, [r3, r2]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	001a      	movs	r2, r3
 800703c:	2308      	movs	r3, #8
 800703e:	4013      	ands	r3, r2
  if ((newAcc != 0)&&
 8007040:	2b08      	cmp	r3, #8
 8007042:	d005      	beq.n	8007050 <Stspin220_SetAcceleration+0x40>
       (devicePrm.commandExecuted == RUN_CMD)))
 8007044:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <Stspin220_SetAcceleration+0x60>)
 8007046:	223a      	movs	r2, #58	; 0x3a
 8007048:	5c9b      	ldrb	r3, [r3, r2]
 800704a:	b2db      	uxtb	r3, r3
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 800704c:	2b01      	cmp	r3, #1
 800704e:	d107      	bne.n	8007060 <Stspin220_SetAcceleration+0x50>
  {
    devicePrm.acceleration = newAcc;
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <Stspin220_SetAcceleration+0x60>)
 8007052:	1d3a      	adds	r2, r7, #4
 8007054:	8812      	ldrh	r2, [r2, #0]
 8007056:	861a      	strh	r2, [r3, #48]	; 0x30
    cmdExecuted = TRUE;
 8007058:	230f      	movs	r3, #15
 800705a:	18fb      	adds	r3, r7, r3
 800705c:	2201      	movs	r2, #1
 800705e:	701a      	strb	r2, [r3, #0]
  }    
  return cmdExecuted;
 8007060:	230f      	movs	r3, #15
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	781b      	ldrb	r3, [r3, #0]
}            
 8007066:	0018      	movs	r0, r3
 8007068:	46bd      	mov	sp, r7
 800706a:	b004      	add	sp, #16
 800706c:	bd80      	pop	{r7, pc}
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	20003664 	.word	0x20003664

08007074 <Stspin220_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed if the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool Stspin220_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	0002      	movs	r2, r0
 800707c:	1dfb      	adds	r3, r7, #7
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	1d3b      	adds	r3, r7, #4
 8007082:	1c0a      	adds	r2, r1, #0
 8007084:	801a      	strh	r2, [r3, #0]
  bool cmdExecuted = FALSE;
 8007086:	230f      	movs	r3, #15
 8007088:	18fb      	adds	r3, r7, r3
 800708a:	2200      	movs	r2, #0
 800708c:	701a      	strb	r2, [r3, #0]
  if ((newDec != 0)&& 
 800708e:	1d3b      	adds	r3, r7, #4
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d016      	beq.n	80070c4 <Stspin220_SetDeceleration+0x50>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8007096:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <Stspin220_SetDeceleration+0x60>)
 8007098:	223c      	movs	r2, #60	; 0x3c
 800709a:	5c9b      	ldrb	r3, [r3, r2]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	001a      	movs	r2, r3
 80070a0:	2308      	movs	r3, #8
 80070a2:	4013      	ands	r3, r2
  if ((newDec != 0)&& 
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d005      	beq.n	80070b4 <Stspin220_SetDeceleration+0x40>
       (devicePrm.commandExecuted == RUN_CMD)))
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <Stspin220_SetDeceleration+0x60>)
 80070aa:	223a      	movs	r2, #58	; 0x3a
 80070ac:	5c9b      	ldrb	r3, [r3, r2]
 80070ae:	b2db      	uxtb	r3, r3
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d107      	bne.n	80070c4 <Stspin220_SetDeceleration+0x50>
  {
    devicePrm.deceleration = newDec;
 80070b4:	4b07      	ldr	r3, [pc, #28]	; (80070d4 <Stspin220_SetDeceleration+0x60>)
 80070b6:	1d3a      	adds	r2, r7, #4
 80070b8:	8812      	ldrh	r2, [r2, #0]
 80070ba:	865a      	strh	r2, [r3, #50]	; 0x32
    cmdExecuted = TRUE;
 80070bc:	230f      	movs	r3, #15
 80070be:	18fb      	adds	r3, r7, r3
 80070c0:	2201      	movs	r2, #1
 80070c2:	701a      	strb	r2, [r3, #0]
  }      
  return cmdExecuted;
 80070c4:	230f      	movs	r3, #15
 80070c6:	18fb      	adds	r3, r7, r3
 80070c8:	781b      	ldrb	r3, [r3, #0]
}
 80070ca:	0018      	movs	r0, r3
 80070cc:	46bd      	mov	sp, r7
 80070ce:	b004      	add	sp, #16
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	46c0      	nop			; (mov r8, r8)
 80070d4:	20003664 	.word	0x20003664

080070d8 <Stspin220_SetDirection>:
 * is in INACTIVE or STANDBY state or if the device is 
 * executing a run command
 * @retval None
 **********************************************************/
void Stspin220_SetDirection(uint8_t deviceId, motorDir_t dir)
{ 
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	0002      	movs	r2, r0
 80070e0:	1dfb      	adds	r3, r7, #7
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	1dbb      	adds	r3, r7, #6
 80070e6:	1c0a      	adds	r2, r1, #0
 80070e8:	701a      	strb	r2, [r3, #0]
  if ((devicePrm.motionState == INACTIVE)||\
 80070ea:	4b16      	ldr	r3, [pc, #88]	; (8007144 <Stspin220_SetDirection+0x6c>)
 80070ec:	223c      	movs	r2, #60	; 0x3c
 80070ee:	5c9b      	ldrb	r3, [r3, r2]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d005      	beq.n	8007102 <Stspin220_SetDirection+0x2a>
      (devicePrm.motionState == STANDBY))
 80070f6:	4b13      	ldr	r3, [pc, #76]	; (8007144 <Stspin220_SetDirection+0x6c>)
 80070f8:	223c      	movs	r2, #60	; 0x3c
 80070fa:	5c9b      	ldrb	r3, [r3, r2]
 80070fc:	b2db      	uxtb	r3, r3
  if ((devicePrm.motionState == INACTIVE)||\
 80070fe:	2b09      	cmp	r3, #9
 8007100:	d10a      	bne.n	8007118 <Stspin220_SetDirection+0x40>
  {
    devicePrm.direction = dir;
 8007102:	4b10      	ldr	r3, [pc, #64]	; (8007144 <Stspin220_SetDirection+0x6c>)
 8007104:	1dba      	adds	r2, r7, #6
 8007106:	213b      	movs	r1, #59	; 0x3b
 8007108:	7812      	ldrb	r2, [r2, #0]
 800710a:	545a      	strb	r2, [r3, r1]
    Stspin220_Board_SetDirectionGpio(dir);
 800710c:	1dbb      	adds	r3, r7, #6
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	0018      	movs	r0, r3
 8007112:	f007 fe77 	bl	800ee04 <Stspin220_Board_SetDirectionGpio>
  }
  else if ((devicePrm.commandExecuted&RUN_CMD)!=0)
  {
    devicePrm.commandExecuted|=STSPIN220_DIR_CHANGE_BIT_MASK;
  }
}
 8007116:	e011      	b.n	800713c <Stspin220_SetDirection+0x64>
  else if ((devicePrm.commandExecuted&RUN_CMD)!=0)
 8007118:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <Stspin220_SetDirection+0x6c>)
 800711a:	223a      	movs	r2, #58	; 0x3a
 800711c:	5c9b      	ldrb	r3, [r3, r2]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	001a      	movs	r2, r3
 8007122:	2301      	movs	r3, #1
 8007124:	4013      	ands	r3, r2
 8007126:	d009      	beq.n	800713c <Stspin220_SetDirection+0x64>
    devicePrm.commandExecuted|=STSPIN220_DIR_CHANGE_BIT_MASK;
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <Stspin220_SetDirection+0x6c>)
 800712a:	223a      	movs	r2, #58	; 0x3a
 800712c:	5c9b      	ldrb	r3, [r3, r2]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2208      	movs	r2, #8
 8007132:	4313      	orrs	r3, r2
 8007134:	b2d9      	uxtb	r1, r3
 8007136:	4b03      	ldr	r3, [pc, #12]	; (8007144 <Stspin220_SetDirection+0x6c>)
 8007138:	223a      	movs	r2, #58	; 0x3a
 800713a:	5499      	strb	r1, [r3, r2]
}
 800713c:	46c0      	nop			; (mov r8, r8)
 800713e:	46bd      	mov	sp, r7
 8007140:	b002      	add	sp, #8
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20003664 	.word	0x20003664

08007148 <Stspin220_SetHome>:
 * STEP_MODE_1_64                   : 1/64 step
 * STEP_MODE_1_128                  : 1/128 step
 * STEP_MODE_1_256                  : 1/256 step
 **********************************************************/
void Stspin220_SetHome(uint8_t deviceId, int32_t homePosition)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	0002      	movs	r2, r0
 8007150:	6039      	str	r1, [r7, #0]
 8007152:	1dfb      	adds	r3, r7, #7
 8007154:	701a      	strb	r2, [r3, #0]
  devicePrm.currentPosition -= homePosition;
 8007156:	4b05      	ldr	r3, [pc, #20]	; (800716c <Stspin220_SetHome+0x24>)
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	1ad2      	subs	r2, r2, r3
 800715e:	4b03      	ldr	r3, [pc, #12]	; (800716c <Stspin220_SetHome+0x24>)
 8007160:	605a      	str	r2, [r3, #4]
}
 8007162:	46c0      	nop			; (mov r8, r8)
 8007164:	46bd      	mov	sp, r7
 8007166:	b002      	add	sp, #8
 8007168:	bd80      	pop	{r7, pc}
 800716a:	46c0      	nop			; (mov r8, r8)
 800716c:	20003664 	.word	0x20003664

08007170 <Stspin220_SetMark>:
 * STEP_MODE_1_64                   : 1/64 step
 * STEP_MODE_1_128                  : 1/128 step
 * STEP_MODE_1_256                  : 1/256 step
 **********************************************************/
void Stspin220_SetMark(uint8_t deviceId, int32_t markPosition)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	0002      	movs	r2, r0
 8007178:	6039      	str	r1, [r7, #0]
 800717a:	1dfb      	adds	r3, r7, #7
 800717c:	701a      	strb	r2, [r3, #0]
  devicePrm.markPosition = markPosition;
 800717e:	4b03      	ldr	r3, [pc, #12]	; (800718c <Stspin220_SetMark+0x1c>)
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	60da      	str	r2, [r3, #12]
}
 8007184:	46c0      	nop			; (mov r8, r8)
 8007186:	46bd      	mov	sp, r7
 8007188:	b002      	add	sp, #8
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20003664 	.word	0x20003664

08007190 <Stspin220_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool Stspin220_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8007190:	b590      	push	{r4, r7, lr}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	0002      	movs	r2, r0
 8007198:	1dfb      	adds	r3, r7, #7
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	1d3b      	adds	r3, r7, #4
 800719e:	1c0a      	adds	r2, r1, #0
 80071a0:	801a      	strh	r2, [r3, #0]
  bool cmdExecuted = FALSE;
 80071a2:	230f      	movs	r3, #15
 80071a4:	18fb      	adds	r3, r7, r3
 80071a6:	2200      	movs	r2, #0
 80071a8:	701a      	strb	r2, [r3, #0]
  if ((newMaxSpeed >= STSPIN220_MIN_STCK_FREQ)&&\
 80071aa:	1d3b      	adds	r3, r7, #4
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	2b07      	cmp	r3, #7
 80071b0:	d935      	bls.n	800721e <Stspin220_SetMaxSpeed+0x8e>
 80071b2:	1d3b      	adds	r3, r7, #4
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	4a1d      	ldr	r2, [pc, #116]	; (800722c <Stspin220_SetMaxSpeed+0x9c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d912      	bls.n	80071e2 <Stspin220_SetMaxSpeed+0x52>
      ((newMaxSpeed <= STSPIN220_MAX_STCK_FREQ)||\
       ((devicePrm.torqueBoostEnable != FALSE)&&\
 80071bc:	4b1c      	ldr	r3, [pc, #112]	; (8007230 <Stspin220_SetMaxSpeed+0xa0>)
 80071be:	222c      	movs	r2, #44	; 0x2c
 80071c0:	5c9b      	ldrb	r3, [r3, r2]
 80071c2:	b2db      	uxtb	r3, r3
      ((newMaxSpeed <= STSPIN220_MAX_STCK_FREQ)||\
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d02a      	beq.n	800721e <Stspin220_SetMaxSpeed+0x8e>
        ((newMaxSpeed>>Stspin220_GetStepMode(deviceId))<= STSPIN220_MAX_STCK_FREQ)))&&\
 80071c8:	1d3b      	adds	r3, r7, #4
 80071ca:	881c      	ldrh	r4, [r3, #0]
 80071cc:	1dfb      	adds	r3, r7, #7
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	0018      	movs	r0, r3
 80071d2:	f7ff fc3b 	bl	8006a4c <Stspin220_GetStepMode>
 80071d6:	0003      	movs	r3, r0
 80071d8:	411c      	asrs	r4, r3
 80071da:	0023      	movs	r3, r4
       ((devicePrm.torqueBoostEnable != FALSE)&&\
 80071dc:	4a13      	ldr	r2, [pc, #76]	; (800722c <Stspin220_SetMaxSpeed+0x9c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	dc1d      	bgt.n	800721e <Stspin220_SetMaxSpeed+0x8e>
      (devicePrm.minSpeed <= newMaxSpeed) &&\
 80071e2:	4b13      	ldr	r3, [pc, #76]	; (8007230 <Stspin220_SetMaxSpeed+0xa0>)
 80071e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071e6:	b29b      	uxth	r3, r3
        ((newMaxSpeed>>Stspin220_GetStepMode(deviceId))<= STSPIN220_MAX_STCK_FREQ)))&&\
 80071e8:	1d3a      	adds	r2, r7, #4
 80071ea:	8812      	ldrh	r2, [r2, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d316      	bcc.n	800721e <Stspin220_SetMaxSpeed+0x8e>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||\
 80071f0:	4b0f      	ldr	r3, [pc, #60]	; (8007230 <Stspin220_SetMaxSpeed+0xa0>)
 80071f2:	223c      	movs	r2, #60	; 0x3c
 80071f4:	5c9b      	ldrb	r3, [r3, r2]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	001a      	movs	r2, r3
 80071fa:	2308      	movs	r3, #8
 80071fc:	4013      	ands	r3, r2
      (devicePrm.minSpeed <= newMaxSpeed) &&\
 80071fe:	2b08      	cmp	r3, #8
 8007200:	d005      	beq.n	800720e <Stspin220_SetMaxSpeed+0x7e>
      (devicePrm.commandExecuted == RUN_CMD)))
 8007202:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <Stspin220_SetMaxSpeed+0xa0>)
 8007204:	223a      	movs	r2, #58	; 0x3a
 8007206:	5c9b      	ldrb	r3, [r3, r2]
 8007208:	b2db      	uxtb	r3, r3
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||\
 800720a:	2b01      	cmp	r3, #1
 800720c:	d107      	bne.n	800721e <Stspin220_SetMaxSpeed+0x8e>
  {
    devicePrm.maxSpeed = newMaxSpeed;
 800720e:	4b08      	ldr	r3, [pc, #32]	; (8007230 <Stspin220_SetMaxSpeed+0xa0>)
 8007210:	1d3a      	adds	r2, r7, #4
 8007212:	8812      	ldrh	r2, [r2, #0]
 8007214:	869a      	strh	r2, [r3, #52]	; 0x34
    cmdExecuted = TRUE;
 8007216:	230f      	movs	r3, #15
 8007218:	18fb      	adds	r3, r7, r3
 800721a:	2201      	movs	r2, #1
 800721c:	701a      	strb	r2, [r3, #0]
  }
  return cmdExecuted;
 800721e:	230f      	movs	r3, #15
 8007220:	18fb      	adds	r3, r7, r3
 8007222:	781b      	ldrb	r3, [r3, #0]
}                                                     
 8007224:	0018      	movs	r0, r3
 8007226:	46bd      	mov	sp, r7
 8007228:	b005      	add	sp, #20
 800722a:	bd90      	pop	{r4, r7, pc}
 800722c:	00002710 	.word	0x00002710
 8007230:	20003664 	.word	0x20003664

08007234 <Stspin220_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool Stspin220_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	0002      	movs	r2, r0
 800723c:	1dfb      	adds	r3, r7, #7
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	1d3b      	adds	r3, r7, #4
 8007242:	1c0a      	adds	r2, r1, #0
 8007244:	801a      	strh	r2, [r3, #0]
  bool cmdExecuted = FALSE;
 8007246:	230f      	movs	r3, #15
 8007248:	18fb      	adds	r3, r7, r3
 800724a:	2200      	movs	r2, #0
 800724c:	701a      	strb	r2, [r3, #0]
  if ((newMinSpeed >= STSPIN220_MIN_STCK_FREQ)&&
 800724e:	1d3b      	adds	r3, r7, #4
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	2b07      	cmp	r3, #7
 8007254:	d922      	bls.n	800729c <Stspin220_SetMinSpeed+0x68>
 8007256:	1d3b      	adds	r3, r7, #4
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	4a14      	ldr	r2, [pc, #80]	; (80072ac <Stspin220_SetMinSpeed+0x78>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d81d      	bhi.n	800729c <Stspin220_SetMinSpeed+0x68>
      (newMinSpeed <= STSPIN220_MAX_STCK_FREQ) &&
      (newMinSpeed <= devicePrm.maxSpeed) && 
 8007260:	4b13      	ldr	r3, [pc, #76]	; (80072b0 <Stspin220_SetMinSpeed+0x7c>)
 8007262:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007264:	b29b      	uxth	r3, r3
      (newMinSpeed <= STSPIN220_MAX_STCK_FREQ) &&
 8007266:	1d3a      	adds	r2, r7, #4
 8007268:	8812      	ldrh	r2, [r2, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d816      	bhi.n	800729c <Stspin220_SetMinSpeed+0x68>
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 800726e:	4b10      	ldr	r3, [pc, #64]	; (80072b0 <Stspin220_SetMinSpeed+0x7c>)
 8007270:	223c      	movs	r2, #60	; 0x3c
 8007272:	5c9b      	ldrb	r3, [r3, r2]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	001a      	movs	r2, r3
 8007278:	2308      	movs	r3, #8
 800727a:	4013      	ands	r3, r2
      (newMinSpeed <= devicePrm.maxSpeed) && 
 800727c:	2b08      	cmp	r3, #8
 800727e:	d005      	beq.n	800728c <Stspin220_SetMinSpeed+0x58>
       (devicePrm.commandExecuted == RUN_CMD)))
 8007280:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <Stspin220_SetMinSpeed+0x7c>)
 8007282:	223a      	movs	r2, #58	; 0x3a
 8007284:	5c9b      	ldrb	r3, [r3, r2]
 8007286:	b2db      	uxtb	r3, r3
      (((devicePrm.motionState & INACTIVE) == INACTIVE)||
 8007288:	2b01      	cmp	r3, #1
 800728a:	d107      	bne.n	800729c <Stspin220_SetMinSpeed+0x68>
  {
    devicePrm.minSpeed = newMinSpeed;
 800728c:	4b08      	ldr	r3, [pc, #32]	; (80072b0 <Stspin220_SetMinSpeed+0x7c>)
 800728e:	1d3a      	adds	r2, r7, #4
 8007290:	8812      	ldrh	r2, [r2, #0]
 8007292:	86da      	strh	r2, [r3, #54]	; 0x36
    cmdExecuted = TRUE;
 8007294:	230f      	movs	r3, #15
 8007296:	18fb      	adds	r3, r7, r3
 8007298:	2201      	movs	r2, #1
 800729a:	701a      	strb	r2, [r3, #0]
  }  
  return cmdExecuted;
 800729c:	230f      	movs	r3, #15
 800729e:	18fb      	adds	r3, r7, r3
 80072a0:	781b      	ldrb	r3, [r3, #0]
}
 80072a2:	0018      	movs	r0, r3
 80072a4:	46bd      	mov	sp, r7
 80072a6:	b004      	add	sp, #16
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	46c0      	nop			; (mov r8, r8)
 80072ac:	00002710 	.word	0x00002710
 80072b0:	20003664 	.word	0x20003664

080072b4 <Stspin220_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool Stspin220_SetNbDevices(uint8_t nbDevices)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	0002      	movs	r2, r0
 80072bc:	1dfb      	adds	r3, r7, #7
 80072be:	701a      	strb	r2, [r3, #0]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 80072c0:	1dfb      	adds	r3, r7, #7
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d808      	bhi.n	80072da <Stspin220_SetNbDevices+0x26>
  {
    stspin220NumberOfDevices = nbDevices;
 80072c8:	4b06      	ldr	r3, [pc, #24]	; (80072e4 <Stspin220_SetNbDevices+0x30>)
 80072ca:	1dfa      	adds	r2, r7, #7
 80072cc:	7812      	ldrb	r2, [r2, #0]
 80072ce:	701a      	strb	r2, [r3, #0]
    stspin220DriverInstance = 0;
 80072d0:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <Stspin220_SetNbDevices+0x34>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	801a      	strh	r2, [r3, #0]
    return TRUE;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <Stspin220_SetNbDevices+0x28>
  }
  else
  {
    return FALSE;
 80072da:	2300      	movs	r3, #0
  }
}
 80072dc:	0018      	movs	r0, r3
 80072de:	46bd      	mov	sp, r7
 80072e0:	b002      	add	sp, #8
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	2000045e 	.word	0x2000045e
 80072e8:	2000045c 	.word	0x2000045c

080072ec <Stspin220_SetStepMode>:
 * @param[in] stepMode from full step to 1/256 microstep
 * as specified in enum motorStepMode_t
 * @retval true if the command is successfully executed, else false
 **********************************************************/
bool Stspin220_SetStepMode(uint8_t deviceId, motorStepMode_t stepMode)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	0002      	movs	r2, r0
 80072f4:	1dfb      	adds	r3, r7, #7
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	1dbb      	adds	r3, r7, #6
 80072fa:	1c0a      	adds	r2, r1, #0
 80072fc:	701a      	strb	r2, [r3, #0]
  /* Eventually deactivate motor */
  if ((devicePrm.motionState != INACTIVE)&&\
 80072fe:	4b14      	ldr	r3, [pc, #80]	; (8007350 <Stspin220_SetStepMode+0x64>)
 8007300:	223c      	movs	r2, #60	; 0x3c
 8007302:	5c9b      	ldrb	r3, [r3, r2]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b08      	cmp	r3, #8
 8007308:	d00a      	beq.n	8007320 <Stspin220_SetStepMode+0x34>
      (devicePrm.motionState != STANDBY))
 800730a:	4b11      	ldr	r3, [pc, #68]	; (8007350 <Stspin220_SetStepMode+0x64>)
 800730c:	223c      	movs	r2, #60	; 0x3c
 800730e:	5c9b      	ldrb	r3, [r3, r2]
 8007310:	b2db      	uxtb	r3, r3
  if ((devicePrm.motionState != INACTIVE)&&\
 8007312:	2b09      	cmp	r3, #9
 8007314:	d004      	beq.n	8007320 <Stspin220_SetStepMode+0x34>
  {
    Stspin220_HardHiZ(deviceId);
 8007316:	1dfb      	adds	r3, r7, #7
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	0018      	movs	r0, r3
 800731c:	f7ff fd3e 	bl	8006d9c <Stspin220_HardHiZ>
  }

  /* Enter standby */
  Stspin220_Board_Reset();
 8007320:	f007 fd62 	bl	800ede8 <Stspin220_Board_Reset>
  
  /* Reset the microstepping sequencer position */
  devicePrm.sequencerPosition = 0;
 8007324:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <Stspin220_SetStepMode+0x64>)
 8007326:	2200      	movs	r2, #0
 8007328:	811a      	strh	r2, [r3, #8]

  /* Reset current and mark positions */
  devicePrm.currentPosition = 0; 
 800732a:	4b09      	ldr	r3, [pc, #36]	; (8007350 <Stspin220_SetStepMode+0x64>)
 800732c:	2200      	movs	r2, #0
 800732e:	605a      	str	r2, [r3, #4]
  devicePrm.markPosition = 0;
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <Stspin220_SetStepMode+0x64>)
 8007332:	2200      	movs	r2, #0
 8007334:	60da      	str	r2, [r3, #12]
  
  /* Set the step mode */
  return (Stspin220_SetStepModeWithoutReset(deviceId, stepMode));
 8007336:	1dbb      	adds	r3, r7, #6
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	1dfb      	adds	r3, r7, #7
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	0011      	movs	r1, r2
 8007340:	0018      	movs	r0, r3
 8007342:	f000 fc3b 	bl	8007bbc <Stspin220_SetStepModeWithoutReset>
 8007346:	0003      	movs	r3, r0
}
 8007348:	0018      	movs	r0, r3
 800734a:	46bd      	mov	sp, r7
 800734c:	b002      	add	sp, #8
 800734e:	bd80      	pop	{r7, pc}
 8007350:	20003664 	.word	0x20003664

08007354 <Stspin220_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void Stspin220_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	0002      	movs	r2, r0
 800735c:	1dfb      	adds	r3, r7, #7
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	1dbb      	adds	r3, r7, #6
 8007362:	1c0a      	adds	r2, r1, #0
 8007364:	701a      	strb	r2, [r3, #0]
  devicePrm.stopMode = stopMode;
 8007366:	4b04      	ldr	r3, [pc, #16]	; (8007378 <Stspin220_SetStopMode+0x24>)
 8007368:	1dba      	adds	r2, r7, #6
 800736a:	213f      	movs	r1, #63	; 0x3f
 800736c:	7812      	ldrb	r2, [r2, #0]
 800736e:	545a      	strb	r2, [r3, r1]
}
 8007370:	46c0      	nop			; (mov r8, r8)
 8007372:	46bd      	mov	sp, r7
 8007374:	b002      	add	sp, #8
 8007376:	bd80      	pop	{r7, pc}
 8007378:	20003664 	.word	0x20003664

0800737c <Stspin220_SetTorque>:
 * @param[in] torqueValue in % (from 0 to 100)
 * @retval None
 * @note
 **********************************************************/
void Stspin220_SetTorque(uint8_t deviceId, motorTorqueMode_t torqueMode, uint8_t torqueValue)
{
 800737c:	b590      	push	{r4, r7, lr}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	0004      	movs	r4, r0
 8007384:	0008      	movs	r0, r1
 8007386:	0011      	movs	r1, r2
 8007388:	1dfb      	adds	r3, r7, #7
 800738a:	1c22      	adds	r2, r4, #0
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	1dbb      	adds	r3, r7, #6
 8007390:	1c02      	adds	r2, r0, #0
 8007392:	701a      	strb	r2, [r3, #0]
 8007394:	1d7b      	adds	r3, r7, #5
 8007396:	1c0a      	adds	r2, r1, #0
 8007398:	701a      	strb	r2, [r3, #0]
  devicePrm.updateTorque = TRUE;
 800739a:	4b24      	ldr	r3, [pc, #144]	; (800742c <Stspin220_SetTorque+0xb0>)
 800739c:	2225      	movs	r2, #37	; 0x25
 800739e:	2101      	movs	r1, #1
 80073a0:	5499      	strb	r1, [r3, r2]
  if (torqueValue>100) torqueValue = 100;
 80073a2:	1d7b      	adds	r3, r7, #5
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	2b64      	cmp	r3, #100	; 0x64
 80073a8:	d902      	bls.n	80073b0 <Stspin220_SetTorque+0x34>
 80073aa:	1d7b      	adds	r3, r7, #5
 80073ac:	2264      	movs	r2, #100	; 0x64
 80073ae:	701a      	strb	r2, [r3, #0]
  switch(torqueMode)
 80073b0:	1dbb      	adds	r3, r7, #6
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d82e      	bhi.n	8007416 <Stspin220_SetTorque+0x9a>
 80073b8:	009a      	lsls	r2, r3, #2
 80073ba:	4b1d      	ldr	r3, [pc, #116]	; (8007430 <Stspin220_SetTorque+0xb4>)
 80073bc:	18d3      	adds	r3, r2, r3
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	469f      	mov	pc, r3
  {
    case ACC_TORQUE:
      devicePrm.accelTorque = torqueValue;
 80073c2:	4b1a      	ldr	r3, [pc, #104]	; (800742c <Stspin220_SetTorque+0xb0>)
 80073c4:	1d7a      	adds	r2, r7, #5
 80073c6:	2121      	movs	r1, #33	; 0x21
 80073c8:	7812      	ldrb	r2, [r2, #0]
 80073ca:	545a      	strb	r2, [r3, r1]
      break;
 80073cc:	e029      	b.n	8007422 <Stspin220_SetTorque+0xa6>
    case DEC_TORQUE:
      devicePrm.decelTorque = torqueValue;
 80073ce:	4b17      	ldr	r3, [pc, #92]	; (800742c <Stspin220_SetTorque+0xb0>)
 80073d0:	1d7a      	adds	r2, r7, #5
 80073d2:	2122      	movs	r1, #34	; 0x22
 80073d4:	7812      	ldrb	r2, [r2, #0]
 80073d6:	545a      	strb	r2, [r3, r1]
      break;
 80073d8:	e023      	b.n	8007422 <Stspin220_SetTorque+0xa6>
    case RUN_TORQUE:
      devicePrm.runTorque = torqueValue;
 80073da:	4b14      	ldr	r3, [pc, #80]	; (800742c <Stspin220_SetTorque+0xb0>)
 80073dc:	1d7a      	adds	r2, r7, #5
 80073de:	2120      	movs	r1, #32
 80073e0:	7812      	ldrb	r2, [r2, #0]
 80073e2:	545a      	strb	r2, [r3, r1]
      break;
 80073e4:	e01d      	b.n	8007422 <Stspin220_SetTorque+0xa6>
    case HOLD_TORQUE:
      devicePrm.holdTorque = torqueValue;
 80073e6:	4b11      	ldr	r3, [pc, #68]	; (800742c <Stspin220_SetTorque+0xb0>)
 80073e8:	1d7a      	adds	r2, r7, #5
 80073ea:	2123      	movs	r1, #35	; 0x23
 80073ec:	7812      	ldrb	r2, [r2, #0]
 80073ee:	545a      	strb	r2, [r3, r1]
      if (devicePrm.motionState != INACTIVE)
 80073f0:	4b0e      	ldr	r3, [pc, #56]	; (800742c <Stspin220_SetTorque+0xb0>)
 80073f2:	223c      	movs	r2, #60	; 0x3c
 80073f4:	5c9b      	ldrb	r3, [r3, r2]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d111      	bne.n	8007420 <Stspin220_SetTorque+0xa4>
      {
        break;
      }
    case CURRENT_TORQUE:
      devicePrm.currentTorque = torqueValue;
 80073fc:	4b0b      	ldr	r3, [pc, #44]	; (800742c <Stspin220_SetTorque+0xb0>)
 80073fe:	1d7a      	adds	r2, r7, #5
 8007400:	2124      	movs	r1, #36	; 0x24
 8007402:	7812      	ldrb	r2, [r2, #0]
 8007404:	545a      	strb	r2, [r3, r1]
      Stspin220_Board_PwmRefSetFreqAndDutyCycle(devicePrm.refPwmFreq,torqueValue);
 8007406:	4b09      	ldr	r3, [pc, #36]	; (800742c <Stspin220_SetTorque+0xb0>)
 8007408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800740a:	1d7b      	adds	r3, r7, #5
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	0019      	movs	r1, r3
 8007410:	0010      	movs	r0, r2
 8007412:	f007 fbcd 	bl	800ebb0 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
    default:
      devicePrm.updateTorque = FALSE;
 8007416:	4b05      	ldr	r3, [pc, #20]	; (800742c <Stspin220_SetTorque+0xb0>)
 8007418:	2225      	movs	r2, #37	; 0x25
 800741a:	2100      	movs	r1, #0
 800741c:	5499      	strb	r1, [r3, r2]
      break; //ignore error
 800741e:	e000      	b.n	8007422 <Stspin220_SetTorque+0xa6>
        break;
 8007420:	46c0      	nop			; (mov r8, r8)
  }
}
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	46bd      	mov	sp, r7
 8007426:	b003      	add	sp, #12
 8007428:	bd90      	pop	{r4, r7, pc}
 800742a:	46c0      	nop			; (mov r8, r8)
 800742c:	20003664 	.word	0x20003664
 8007430:	08016330 	.word	0x08016330

08007434 <Stspin220_SetTorqueBoostEnable>:
 * @param[in] deviceId Unused parameter
 * @param[in] enable true to enable torque boost, false to disable
 * @retval None
 **********************************************************/
void Stspin220_SetTorqueBoostEnable(uint8_t deviceId, bool enable)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	0002      	movs	r2, r0
 800743c:	1dfb      	adds	r3, r7, #7
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	1dbb      	adds	r3, r7, #6
 8007442:	1c0a      	adds	r2, r1, #0
 8007444:	701a      	strb	r2, [r3, #0]
  devicePrm.torqueBoostEnable = enable;
 8007446:	4b04      	ldr	r3, [pc, #16]	; (8007458 <Stspin220_SetTorqueBoostEnable+0x24>)
 8007448:	1dba      	adds	r2, r7, #6
 800744a:	212c      	movs	r1, #44	; 0x2c
 800744c:	7812      	ldrb	r2, [r2, #0]
 800744e:	545a      	strb	r2, [r3, r1]
}
 8007450:	46c0      	nop			; (mov r8, r8)
 8007452:	46bd      	mov	sp, r7
 8007454:	b002      	add	sp, #8
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20003664 	.word	0x20003664

0800745c <Stspin220_SetTorqueBoostThreshold>:
 * @param[in] speedThreshold speed threshold above which the step mode is
 * changed to full step
 * @retval None
 **********************************************************/
void Stspin220_SetTorqueBoostThreshold(uint8_t deviceId, uint16_t speedThreshold)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	0002      	movs	r2, r0
 8007464:	1dfb      	adds	r3, r7, #7
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	1d3b      	adds	r3, r7, #4
 800746a:	1c0a      	adds	r2, r1, #0
 800746c:	801a      	strh	r2, [r3, #0]
  devicePrm.torqueBoostSpeedThreshold = speedThreshold;
 800746e:	4b04      	ldr	r3, [pc, #16]	; (8007480 <Stspin220_SetTorqueBoostThreshold+0x24>)
 8007470:	1d3a      	adds	r2, r7, #4
 8007472:	8812      	ldrh	r2, [r2, #0]
 8007474:	85da      	strh	r2, [r3, #46]	; 0x2e
}
 8007476:	46c0      	nop			; (mov r8, r8)
 8007478:	46bd      	mov	sp, r7
 800747a:	b002      	add	sp, #8
 800747c:	bd80      	pop	{r7, pc}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	20003664 	.word	0x20003664

08007484 <Stspin220_SoftStop>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed if the device is in INACTIVE,
 * STANDBYTOINACTIVE or STANDBY state.
 **********************************************************/
bool Stspin220_SoftStop(uint8_t deviceId)
{	
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	0002      	movs	r2, r0
 800748c:	1dfb      	adds	r3, r7, #7
 800748e:	701a      	strb	r2, [r3, #0]
  bool cmdExecuted = FALSE;
 8007490:	200f      	movs	r0, #15
 8007492:	183b      	adds	r3, r7, r0
 8007494:	2200      	movs	r2, #0
 8007496:	701a      	strb	r2, [r3, #0]
  if ((devicePrm.motionState & INACTIVE) != INACTIVE)
 8007498:	4b0e      	ldr	r3, [pc, #56]	; (80074d4 <Stspin220_SoftStop+0x50>)
 800749a:	223c      	movs	r2, #60	; 0x3c
 800749c:	5c9b      	ldrb	r3, [r3, r2]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	001a      	movs	r2, r3
 80074a2:	2308      	movs	r3, #8
 80074a4:	4013      	ands	r3, r2
 80074a6:	2b08      	cmp	r3, #8
 80074a8:	d00c      	beq.n	80074c4 <Stspin220_SoftStop+0x40>
  {
    devicePrm.commandExecuted |= STSPIN220_SOFT_STOP_BIT_MASK;
 80074aa:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <Stspin220_SoftStop+0x50>)
 80074ac:	223a      	movs	r2, #58	; 0x3a
 80074ae:	5c9b      	ldrb	r3, [r3, r2]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2204      	movs	r2, #4
 80074b4:	4313      	orrs	r3, r2
 80074b6:	b2d9      	uxtb	r1, r3
 80074b8:	4b06      	ldr	r3, [pc, #24]	; (80074d4 <Stspin220_SoftStop+0x50>)
 80074ba:	223a      	movs	r2, #58	; 0x3a
 80074bc:	5499      	strb	r1, [r3, r2]
    cmdExecuted = TRUE;
 80074be:	183b      	adds	r3, r7, r0
 80074c0:	2201      	movs	r2, #1
 80074c2:	701a      	strb	r2, [r3, #0]
  }
  return (cmdExecuted);
 80074c4:	230f      	movs	r3, #15
 80074c6:	18fb      	adds	r3, r7, r3
 80074c8:	781b      	ldrb	r3, [r3, #0]
}
 80074ca:	0018      	movs	r0, r3
 80074cc:	46bd      	mov	sp, r7
 80074ce:	b004      	add	sp, #16
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	46c0      	nop			; (mov r8, r8)
 80074d4:	20003664 	.word	0x20003664

080074d8 <Stspin220_VrefPwmGetFreq>:
 * @param[in] deviceId Unused parameter
 * @retval the frequency of REF PWM in Hz
 * @note
 **********************************************************/
uint32_t Stspin220_VrefPwmGetFreq(uint8_t deviceId)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	0002      	movs	r2, r0
 80074e0:	1dfb      	adds	r3, r7, #7
 80074e2:	701a      	strb	r2, [r3, #0]
  return devicePrm.refPwmFreq;
 80074e4:	4b02      	ldr	r3, [pc, #8]	; (80074f0 <Stspin220_VrefPwmGetFreq+0x18>)
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80074e8:	0018      	movs	r0, r3
 80074ea:	46bd      	mov	sp, r7
 80074ec:	b002      	add	sp, #8
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20003664 	.word	0x20003664

080074f4 <Stspin220_VrefPwmSetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note
 **********************************************************/
void Stspin220_VrefPwmSetFreq(uint8_t deviceId, uint32_t newFreq)
{ 
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	0002      	movs	r2, r0
 80074fc:	6039      	str	r1, [r7, #0]
 80074fe:	1dfb      	adds	r3, r7, #7
 8007500:	701a      	strb	r2, [r3, #0]
  devicePrm.refPwmFreq = newFreq;
 8007502:	4b08      	ldr	r3, [pc, #32]	; (8007524 <Stspin220_VrefPwmSetFreq+0x30>)
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	629a      	str	r2, [r3, #40]	; 0x28
  Stspin220_Board_PwmRefSetFreqAndDutyCycle(newFreq,devicePrm.currentTorque);
 8007508:	4b06      	ldr	r3, [pc, #24]	; (8007524 <Stspin220_VrefPwmSetFreq+0x30>)
 800750a:	2224      	movs	r2, #36	; 0x24
 800750c:	5c9b      	ldrb	r3, [r3, r2]
 800750e:	b2da      	uxtb	r2, r3
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	0011      	movs	r1, r2
 8007514:	0018      	movs	r0, r3
 8007516:	f007 fb4b 	bl	800ebb0 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
}
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	46bd      	mov	sp, r7
 800751e:	b002      	add	sp, #8
 8007520:	bd80      	pop	{r7, pc}
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	20003664 	.word	0x20003664

08007528 <Stspin220_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId Unused parameter
 * @retval None
 **********************************************************/
void Stspin220_WaitWhileActive(uint8_t deviceId)
 {
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	0002      	movs	r2, r0
 8007530:	1dfb      	adds	r3, r7, #7
 8007532:	701a      	strb	r2, [r3, #0]
  /* Wait while motor is running */
  while (((Stspin220_GetDeviceState(deviceId)&INACTIVE)!=INACTIVE)||\
 8007534:	46c0      	nop			; (mov r8, r8)
 8007536:	1dfb      	adds	r3, r7, #7
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	0018      	movs	r0, r3
 800753c:	f7ff fa18 	bl	8006970 <Stspin220_GetDeviceState>
 8007540:	0003      	movs	r3, r0
 8007542:	001a      	movs	r2, r3
 8007544:	2308      	movs	r3, #8
 8007546:	4013      	ands	r3, r2
 8007548:	2b08      	cmp	r3, #8
 800754a:	d1f4      	bne.n	8007536 <Stspin220_WaitWhileActive+0xe>
   (((Stspin220_GetDeviceState(deviceId)&INACTIVE)==INACTIVE)&&(toggleOdd!=0)));
 800754c:	1dfb      	adds	r3, r7, #7
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	0018      	movs	r0, r3
 8007552:	f7ff fa0d 	bl	8006970 <Stspin220_GetDeviceState>
 8007556:	0003      	movs	r3, r0
 8007558:	001a      	movs	r2, r3
 800755a:	2308      	movs	r3, #8
 800755c:	4013      	ands	r3, r2
  while (((Stspin220_GetDeviceState(deviceId)&INACTIVE)!=INACTIVE)||\
 800755e:	2b08      	cmp	r3, #8
 8007560:	d104      	bne.n	800756c <Stspin220_WaitWhileActive+0x44>
   (((Stspin220_GetDeviceState(deviceId)&INACTIVE)==INACTIVE)&&(toggleOdd!=0)));
 8007562:	4b04      	ldr	r3, [pc, #16]	; (8007574 <Stspin220_WaitWhileActive+0x4c>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e4      	bne.n	8007536 <Stspin220_WaitWhileActive+0xe>
}
 800756c:	46c0      	nop			; (mov r8, r8)
 800756e:	46bd      	mov	sp, r7
 8007570:	b002      	add	sp, #8
 8007572:	bd80      	pop	{r7, pc}
 8007574:	2000045f 	.word	0x2000045f

08007578 <Stspin220_ApplySpeed>:
 * @param[in] deviceId Unused parameter
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void Stspin220_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	0002      	movs	r2, r0
 8007580:	1dfb      	adds	r3, r7, #7
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	1d3b      	adds	r3, r7, #4
 8007586:	1c0a      	adds	r2, r1, #0
 8007588:	801a      	strh	r2, [r3, #0]
  if (devicePrm.torqueBoostEnable != FALSE)
 800758a:	4b6b      	ldr	r3, [pc, #428]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 800758c:	222c      	movs	r2, #44	; 0x2c
 800758e:	5c9b      	ldrb	r3, [r3, r2]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d100      	bne.n	8007598 <Stspin220_ApplySpeed+0x20>
 8007596:	e08f      	b.n	80076b8 <Stspin220_ApplySpeed+0x140>
  {
    if (devicePrm.stepMode > STEP_MODE_1_256)
 8007598:	4b67      	ldr	r3, [pc, #412]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 800759a:	223d      	movs	r2, #61	; 0x3d
 800759c:	5c9b      	ldrb	r3, [r3, r2]
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d903      	bls.n	80075ac <Stspin220_ApplySpeed+0x34>
    {
      Stspin220_ErrorHandler(STSPIN220_ERROR_APPLY_SPEED);
 80075a4:	4b65      	ldr	r3, [pc, #404]	; (800773c <Stspin220_ApplySpeed+0x1c4>)
 80075a6:	0018      	movs	r0, r3
 80075a8:	f7ff f950 	bl	800684c <Stspin220_ErrorHandler>
    }
    if (devicePrm.stepMode != STEP_MODE_FULL)
 80075ac:	4b62      	ldr	r3, [pc, #392]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80075ae:	223d      	movs	r2, #61	; 0x3d
 80075b0:	5c9b      	ldrb	r3, [r3, r2]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d042      	beq.n	800763e <Stspin220_ApplySpeed+0xc6>
    {
      if (((newSpeed>>devicePrm.stepModeLatched)>\
 80075b8:	1d3b      	adds	r3, r7, #4
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	4a5e      	ldr	r2, [pc, #376]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80075be:	213e      	movs	r1, #62	; 0x3e
 80075c0:	5c52      	ldrb	r2, [r2, r1]
 80075c2:	4113      	asrs	r3, r2
           devicePrm.torqueBoostSpeedThreshold)&&\
 80075c4:	4a5c      	ldr	r2, [pc, #368]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80075c6:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80075c8:	b292      	uxth	r2, r2
      if (((newSpeed>>devicePrm.stepModeLatched)>\
 80075ca:	4293      	cmp	r3, r2
 80075cc:	dc00      	bgt.n	80075d0 <Stspin220_ApplySpeed+0x58>
 80075ce:	e096      	b.n	80076fe <Stspin220_ApplySpeed+0x186>
          (((devicePrm.commandExecuted & STSPIN220_MOVE_BIT_MASK) != MOVE_CMD) ||\
 80075d0:	4b59      	ldr	r3, [pc, #356]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80075d2:	223a      	movs	r2, #58	; 0x3a
 80075d4:	5c9b      	ldrb	r3, [r3, r2]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	001a      	movs	r2, r3
 80075da:	2302      	movs	r3, #2
 80075dc:	4013      	ands	r3, r2
           devicePrm.torqueBoostSpeedThreshold)&&\
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d10a      	bne.n	80075f8 <Stspin220_ApplySpeed+0x80>
           ((devicePrm.stepsToTake-devicePrm.relativePos)>=\
 80075e2:	4b55      	ldr	r3, [pc, #340]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80075e4:	69da      	ldr	r2, [r3, #28]
 80075e6:	4b54      	ldr	r3, [pc, #336]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	1ad3      	subs	r3, r2, r3
            (1<<devicePrm.stepModeLatched))))
 80075ec:	4a52      	ldr	r2, [pc, #328]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80075ee:	213e      	movs	r1, #62	; 0x3e
 80075f0:	5c52      	ldrb	r2, [r2, r1]
           ((devicePrm.stepsToTake-devicePrm.relativePos)>=\
 80075f2:	40d3      	lsrs	r3, r2
          (((devicePrm.commandExecuted & STSPIN220_MOVE_BIT_MASK) != MOVE_CMD) ||\
 80075f4:	d100      	bne.n	80075f8 <Stspin220_ApplySpeed+0x80>
 80075f6:	e082      	b.n	80076fe <Stspin220_ApplySpeed+0x186>
      {
        if ((devicePrm.sequencerPosition & 0xFF) == 0X80)
 80075f8:	4b4f      	ldr	r3, [pc, #316]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80075fa:	891b      	ldrh	r3, [r3, #8]
 80075fc:	b21b      	sxth	r3, r3
 80075fe:	b29b      	uxth	r3, r3
 8007600:	001a      	movs	r2, r3
 8007602:	23ff      	movs	r3, #255	; 0xff
 8007604:	4013      	ands	r3, r2
 8007606:	2b80      	cmp	r3, #128	; 0x80
 8007608:	d000      	beq.n	800760c <Stspin220_ApplySpeed+0x94>
 800760a:	e078      	b.n	80076fe <Stspin220_ApplySpeed+0x186>
        {
          Stspin220_Board_SetFullStep();
 800760c:	f007 fd02 	bl	800f014 <Stspin220_Board_SetFullStep>
          devicePrm.stepMode = STEP_MODE_FULL;
 8007610:	4b49      	ldr	r3, [pc, #292]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 8007612:	223d      	movs	r2, #61	; 0x3d
 8007614:	2100      	movs	r1, #0
 8007616:	5499      	strb	r1, [r3, r2]
          devicePrm.accu >>= devicePrm.stepModeLatched;
 8007618:	4b47      	ldr	r3, [pc, #284]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a46      	ldr	r2, [pc, #280]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 800761e:	213e      	movs	r1, #62	; 0x3e
 8007620:	5c52      	ldrb	r2, [r2, r1]
 8007622:	40d3      	lsrs	r3, r2
 8007624:	001a      	movs	r2, r3
 8007626:	4b44      	ldr	r3, [pc, #272]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 8007628:	601a      	str	r2, [r3, #0]
          newSpeed >>= devicePrm.stepModeLatched;
 800762a:	1d3b      	adds	r3, r7, #4
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	4a42      	ldr	r2, [pc, #264]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 8007630:	213e      	movs	r1, #62	; 0x3e
 8007632:	5c52      	ldrb	r2, [r2, r1]
 8007634:	4113      	asrs	r3, r2
 8007636:	001a      	movs	r2, r3
 8007638:	1d3b      	adds	r3, r7, #4
 800763a:	801a      	strh	r2, [r3, #0]
 800763c:	e05f      	b.n	80076fe <Stspin220_ApplySpeed+0x186>
        }
      }
    }
    else if (((newSpeed <= devicePrm.torqueBoostSpeedThreshold) &&\
 800763e:	4b3e      	ldr	r3, [pc, #248]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 8007640:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007642:	b29b      	uxth	r3, r3
 8007644:	1d3a      	adds	r2, r7, #4
 8007646:	8812      	ldrh	r2, [r2, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d804      	bhi.n	8007656 <Stspin220_ApplySpeed+0xde>
              (devicePrm.stepModeLatched != STEP_MODE_FULL))||\
 800764c:	4b3a      	ldr	r3, [pc, #232]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 800764e:	223e      	movs	r2, #62	; 0x3e
 8007650:	5c9b      	ldrb	r3, [r3, r2]
    else if (((newSpeed <= devicePrm.torqueBoostSpeedThreshold) &&\
 8007652:	2b00      	cmp	r3, #0
 8007654:	d115      	bne.n	8007682 <Stspin220_ApplySpeed+0x10a>
             (((devicePrm.commandExecuted & STSPIN220_MOVE_BIT_MASK) == MOVE_CMD)&&\
 8007656:	4b38      	ldr	r3, [pc, #224]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 8007658:	223a      	movs	r2, #58	; 0x3a
 800765a:	5c9b      	ldrb	r3, [r3, r2]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	001a      	movs	r2, r3
 8007660:	2302      	movs	r3, #2
 8007662:	4013      	ands	r3, r2
              (devicePrm.stepModeLatched != STEP_MODE_FULL))||\
 8007664:	2b02      	cmp	r3, #2
 8007666:	d14a      	bne.n	80076fe <Stspin220_ApplySpeed+0x186>
               ((devicePrm.stepsToTake-devicePrm.relativePos)<=\
 8007668:	4b33      	ldr	r3, [pc, #204]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 800766a:	69da      	ldr	r2, [r3, #28]
 800766c:	4b32      	ldr	r3, [pc, #200]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	1ad3      	subs	r3, r2, r3
                (1<<devicePrm.stepModeLatched))))
 8007672:	4a31      	ldr	r2, [pc, #196]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 8007674:	213e      	movs	r1, #62	; 0x3e
 8007676:	5c52      	ldrb	r2, [r2, r1]
 8007678:	0011      	movs	r1, r2
 800767a:	2201      	movs	r2, #1
 800767c:	408a      	lsls	r2, r1
             (((devicePrm.commandExecuted & STSPIN220_MOVE_BIT_MASK) == MOVE_CMD)&&\
 800767e:	4293      	cmp	r3, r2
 8007680:	d83d      	bhi.n	80076fe <Stspin220_ApplySpeed+0x186>
    {
      Stspin220_Board_UnsetFullStep();
 8007682:	f007 fcdb 	bl	800f03c <Stspin220_Board_UnsetFullStep>
      devicePrm.stepMode = devicePrm.stepModeLatched;
 8007686:	4b2c      	ldr	r3, [pc, #176]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 8007688:	223e      	movs	r2, #62	; 0x3e
 800768a:	5c99      	ldrb	r1, [r3, r2]
 800768c:	4b2a      	ldr	r3, [pc, #168]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 800768e:	223d      	movs	r2, #61	; 0x3d
 8007690:	5499      	strb	r1, [r3, r2]
      devicePrm.accu <<= devicePrm.stepModeLatched;
 8007692:	4b29      	ldr	r3, [pc, #164]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a28      	ldr	r2, [pc, #160]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 8007698:	213e      	movs	r1, #62	; 0x3e
 800769a:	5c52      	ldrb	r2, [r2, r1]
 800769c:	4093      	lsls	r3, r2
 800769e:	001a      	movs	r2, r3
 80076a0:	4b25      	ldr	r3, [pc, #148]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80076a2:	601a      	str	r2, [r3, #0]
      newSpeed <<= devicePrm.stepModeLatched;
 80076a4:	1d3b      	adds	r3, r7, #4
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	4a23      	ldr	r2, [pc, #140]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80076aa:	213e      	movs	r1, #62	; 0x3e
 80076ac:	5c52      	ldrb	r2, [r2, r1]
 80076ae:	4093      	lsls	r3, r2
 80076b0:	001a      	movs	r2, r3
 80076b2:	1d3b      	adds	r3, r7, #4
 80076b4:	801a      	strh	r2, [r3, #0]
 80076b6:	e022      	b.n	80076fe <Stspin220_ApplySpeed+0x186>
    }
  }
  else if (devicePrm.stepMode != devicePrm.stepModeLatched)
 80076b8:	4b1f      	ldr	r3, [pc, #124]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80076ba:	223d      	movs	r2, #61	; 0x3d
 80076bc:	5c9b      	ldrb	r3, [r3, r2]
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	4b1d      	ldr	r3, [pc, #116]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80076c2:	213e      	movs	r1, #62	; 0x3e
 80076c4:	5c5b      	ldrb	r3, [r3, r1]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d019      	beq.n	80076fe <Stspin220_ApplySpeed+0x186>
  {
    //torqueBoostEnable has just been disabled
    Stspin220_Board_UnsetFullStep();
 80076ca:	f007 fcb7 	bl	800f03c <Stspin220_Board_UnsetFullStep>
    devicePrm.stepMode = devicePrm.stepModeLatched;
 80076ce:	4b1a      	ldr	r3, [pc, #104]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80076d0:	223e      	movs	r2, #62	; 0x3e
 80076d2:	5c99      	ldrb	r1, [r3, r2]
 80076d4:	4b18      	ldr	r3, [pc, #96]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80076d6:	223d      	movs	r2, #61	; 0x3d
 80076d8:	5499      	strb	r1, [r3, r2]
    devicePrm.accu <<= devicePrm.stepModeLatched;
 80076da:	4b17      	ldr	r3, [pc, #92]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a16      	ldr	r2, [pc, #88]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80076e0:	213e      	movs	r1, #62	; 0x3e
 80076e2:	5c52      	ldrb	r2, [r2, r1]
 80076e4:	4093      	lsls	r3, r2
 80076e6:	001a      	movs	r2, r3
 80076e8:	4b13      	ldr	r3, [pc, #76]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80076ea:	601a      	str	r2, [r3, #0]
    newSpeed <<= devicePrm.stepModeLatched;
 80076ec:	1d3b      	adds	r3, r7, #4
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	4a11      	ldr	r2, [pc, #68]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 80076f2:	213e      	movs	r1, #62	; 0x3e
 80076f4:	5c52      	ldrb	r2, [r2, r1]
 80076f6:	4093      	lsls	r3, r2
 80076f8:	001a      	movs	r2, r3
 80076fa:	1d3b      	adds	r3, r7, #4
 80076fc:	801a      	strh	r2, [r3, #0]
  }
  
  if (newSpeed < STSPIN220_MIN_STCK_FREQ)
 80076fe:	1d3b      	adds	r3, r7, #4
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	2b07      	cmp	r3, #7
 8007704:	d802      	bhi.n	800770c <Stspin220_ApplySpeed+0x194>
  {
    newSpeed = STSPIN220_MIN_STCK_FREQ;  
 8007706:	1d3b      	adds	r3, r7, #4
 8007708:	2208      	movs	r2, #8
 800770a:	801a      	strh	r2, [r3, #0]
  }
  if (newSpeed > STSPIN220_MAX_STCK_FREQ)
 800770c:	1d3b      	adds	r3, r7, #4
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	4a0b      	ldr	r2, [pc, #44]	; (8007740 <Stspin220_ApplySpeed+0x1c8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d902      	bls.n	800771c <Stspin220_ApplySpeed+0x1a4>
  {
    newSpeed = STSPIN220_MAX_STCK_FREQ;
 8007716:	1d3b      	adds	r3, r7, #4
 8007718:	4a09      	ldr	r2, [pc, #36]	; (8007740 <Stspin220_ApplySpeed+0x1c8>)
 800771a:	801a      	strh	r2, [r3, #0]
  }
  
  devicePrm.speed = newSpeed;
 800771c:	4b06      	ldr	r3, [pc, #24]	; (8007738 <Stspin220_ApplySpeed+0x1c0>)
 800771e:	1d3a      	adds	r2, r7, #4
 8007720:	8812      	ldrh	r2, [r2, #0]
 8007722:	871a      	strh	r2, [r3, #56]	; 0x38
  Stspin220_Board_TimStckSetFreq(newSpeed);
 8007724:	1d3b      	adds	r3, r7, #4
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	0018      	movs	r0, r3
 800772a:	f007 fa0d 	bl	800eb48 <Stspin220_Board_TimStckSetFreq>

}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	46bd      	mov	sp, r7
 8007732:	b002      	add	sp, #8
 8007734:	bd80      	pop	{r7, pc}
 8007736:	46c0      	nop			; (mov r8, r8)
 8007738:	20003664 	.word	0x20003664
 800773c:	0000a00c 	.word	0x0000a00c
 8007740:	00002710 	.word	0x00002710

08007744 <Stspin220_ApplyTorque>:
 * @param[in] torqueMode torque mode
 * @retval None
 * @note
 **********************************************************/
void Stspin220_ApplyTorque(uint8_t deviceId, motorTorqueMode_t torqueMode)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	0002      	movs	r2, r0
 800774c:	1dfb      	adds	r3, r7, #7
 800774e:	701a      	strb	r2, [r3, #0]
 8007750:	1dbb      	adds	r3, r7, #6
 8007752:	1c0a      	adds	r2, r1, #0
 8007754:	701a      	strb	r2, [r3, #0]
  uint8_t torqueValue = 0;
 8007756:	230f      	movs	r3, #15
 8007758:	18fb      	adds	r3, r7, r3
 800775a:	2200      	movs	r2, #0
 800775c:	701a      	strb	r2, [r3, #0]
  devicePrm.updateTorque = FALSE;
 800775e:	4b20      	ldr	r3, [pc, #128]	; (80077e0 <Stspin220_ApplyTorque+0x9c>)
 8007760:	2225      	movs	r2, #37	; 0x25
 8007762:	2100      	movs	r1, #0
 8007764:	5499      	strb	r1, [r3, r2]
  switch(torqueMode)
 8007766:	1dbb      	adds	r3, r7, #6
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b04      	cmp	r3, #4
 800776c:	d834      	bhi.n	80077d8 <Stspin220_ApplyTorque+0x94>
 800776e:	009a      	lsls	r2, r3, #2
 8007770:	4b1c      	ldr	r3, [pc, #112]	; (80077e4 <Stspin220_ApplyTorque+0xa0>)
 8007772:	18d3      	adds	r3, r2, r3
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	469f      	mov	pc, r3
  {
    case ACC_TORQUE:
      devicePrm.currentTorque = devicePrm.accelTorque;
 8007778:	4b19      	ldr	r3, [pc, #100]	; (80077e0 <Stspin220_ApplyTorque+0x9c>)
 800777a:	2221      	movs	r2, #33	; 0x21
 800777c:	5c9b      	ldrb	r3, [r3, r2]
 800777e:	b2d9      	uxtb	r1, r3
 8007780:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <Stspin220_ApplyTorque+0x9c>)
 8007782:	2224      	movs	r2, #36	; 0x24
 8007784:	5499      	strb	r1, [r3, r2]
      break;
 8007786:	e018      	b.n	80077ba <Stspin220_ApplyTorque+0x76>
    case DEC_TORQUE:
      devicePrm.currentTorque = devicePrm.decelTorque;
 8007788:	4b15      	ldr	r3, [pc, #84]	; (80077e0 <Stspin220_ApplyTorque+0x9c>)
 800778a:	2222      	movs	r2, #34	; 0x22
 800778c:	5c9b      	ldrb	r3, [r3, r2]
 800778e:	b2d9      	uxtb	r1, r3
 8007790:	4b13      	ldr	r3, [pc, #76]	; (80077e0 <Stspin220_ApplyTorque+0x9c>)
 8007792:	2224      	movs	r2, #36	; 0x24
 8007794:	5499      	strb	r1, [r3, r2]
      break;
 8007796:	e010      	b.n	80077ba <Stspin220_ApplyTorque+0x76>
    case RUN_TORQUE:
      devicePrm.currentTorque = devicePrm.runTorque;
 8007798:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <Stspin220_ApplyTorque+0x9c>)
 800779a:	2220      	movs	r2, #32
 800779c:	5c9b      	ldrb	r3, [r3, r2]
 800779e:	b2d9      	uxtb	r1, r3
 80077a0:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <Stspin220_ApplyTorque+0x9c>)
 80077a2:	2224      	movs	r2, #36	; 0x24
 80077a4:	5499      	strb	r1, [r3, r2]
      break;
 80077a6:	e008      	b.n	80077ba <Stspin220_ApplyTorque+0x76>
    case HOLD_TORQUE:
      devicePrm.currentTorque = devicePrm.holdTorque;
 80077a8:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <Stspin220_ApplyTorque+0x9c>)
 80077aa:	2223      	movs	r2, #35	; 0x23
 80077ac:	5c9b      	ldrb	r3, [r3, r2]
 80077ae:	b2d9      	uxtb	r1, r3
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <Stspin220_ApplyTorque+0x9c>)
 80077b2:	2224      	movs	r2, #36	; 0x24
 80077b4:	5499      	strb	r1, [r3, r2]
      break;
 80077b6:	e000      	b.n	80077ba <Stspin220_ApplyTorque+0x76>
    case CURRENT_TORQUE:
      break;
 80077b8:	46c0      	nop			; (mov r8, r8)
    default:
      return; //ignore error
  }
  torqueValue = devicePrm.currentTorque;
 80077ba:	200f      	movs	r0, #15
 80077bc:	183b      	adds	r3, r7, r0
 80077be:	4a08      	ldr	r2, [pc, #32]	; (80077e0 <Stspin220_ApplyTorque+0x9c>)
 80077c0:	2124      	movs	r1, #36	; 0x24
 80077c2:	5c52      	ldrb	r2, [r2, r1]
 80077c4:	701a      	strb	r2, [r3, #0]
  Stspin220_Board_PwmRefSetFreqAndDutyCycle(devicePrm.refPwmFreq,torqueValue);
 80077c6:	4b06      	ldr	r3, [pc, #24]	; (80077e0 <Stspin220_ApplyTorque+0x9c>)
 80077c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ca:	183b      	adds	r3, r7, r0
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	0019      	movs	r1, r3
 80077d0:	0010      	movs	r0, r2
 80077d2:	f007 f9ed 	bl	800ebb0 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>
 80077d6:	e000      	b.n	80077da <Stspin220_ApplyTorque+0x96>
      return; //ignore error
 80077d8:	46c0      	nop			; (mov r8, r8)
}
 80077da:	46bd      	mov	sp, r7
 80077dc:	b004      	add	sp, #16
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20003664 	.word	0x20003664
 80077e4:	08016344 	.word	0x08016344

080077e8 <Stspin220_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void Stspin220_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	0002      	movs	r2, r0
 80077f0:	6039      	str	r1, [r7, #0]
 80077f2:	1dfb      	adds	r3, r7, #7
 80077f4:	701a      	strb	r2, [r3, #0]
  uint32_t reqAccSteps; 
	uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm.minSpeed;
 80077f6:	211a      	movs	r1, #26
 80077f8:	187b      	adds	r3, r7, r1
 80077fa:	4a36      	ldr	r2, [pc, #216]	; (80078d4 <Stspin220_ComputeSpeedProfile+0xec>)
 80077fc:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 80077fe:	801a      	strh	r2, [r3, #0]
  reqAccSteps = (devicePrm.maxSpeed - minSpeed);
 8007800:	4b34      	ldr	r3, [pc, #208]	; (80078d4 <Stspin220_ComputeSpeedProfile+0xec>)
 8007802:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007804:	b29b      	uxth	r3, r3
 8007806:	001a      	movs	r2, r3
 8007808:	187b      	adds	r3, r7, r1
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm.maxSpeed + minSpeed);
 8007810:	4b30      	ldr	r3, [pc, #192]	; (80078d4 <Stspin220_ComputeSpeedProfile+0xec>)
 8007812:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007814:	b29b      	uxth	r3, r3
 8007816:	001a      	movs	r2, r3
 8007818:	187b      	adds	r3, r7, r1
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	18d3      	adds	r3, r2, r3
 800781e:	001a      	movs	r2, r3
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	4353      	muls	r3, r2
 8007824:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm.acceleration;
 800782a:	4b2a      	ldr	r3, [pc, #168]	; (80078d4 <Stspin220_ComputeSpeedProfile+0xec>)
 800782c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800782e:	b29b      	uxth	r3, r3
 8007830:	0019      	movs	r1, r3
 8007832:	69f8      	ldr	r0, [r7, #28]
 8007834:	f7f8 fc84 	bl	8000140 <__udivsi3>
 8007838:	0003      	movs	r3, r0
 800783a:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	085b      	lsrs	r3, r3, #1
 8007840:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm.deceleration;
 8007842:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <Stspin220_ComputeSpeedProfile+0xec>)
 8007844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007846:	b29b      	uxth	r3, r3
 8007848:	0019      	movs	r1, r3
 800784a:	6978      	ldr	r0, [r7, #20]
 800784c:	f7f8 fc78 	bl	8000140 <__udivsi3>
 8007850:	0003      	movs	r3, r0
 8007852:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	085b      	lsrs	r3, r3, #1
 8007858:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	18d3      	adds	r3, r2, r3
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d228      	bcs.n	80078b8 <Stspin220_ComputeSpeedProfile+0xd0>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm.deceleration;
 8007866:	4b1b      	ldr	r3, [pc, #108]	; (80078d4 <Stspin220_ComputeSpeedProfile+0xec>)
 8007868:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800786a:	b29b      	uxth	r3, r3
 800786c:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm.acceleration;
 800786e:	4b19      	ldr	r3, [pc, #100]	; (80078d4 <Stspin220_ComputeSpeedProfile+0xec>)
 8007870:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007872:	b29b      	uxth	r3, r3
 8007874:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	435a      	muls	r2, r3
 800787c:	0010      	movs	r0, r2
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	18d3      	adds	r3, r2, r3
 8007884:	0019      	movs	r1, r3
 8007886:	f7f8 fc5b 	bl	8000140 <__udivsi3>
 800788a:	0003      	movs	r3, r0
 800788c:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d908      	bls.n	80078a6 <Stspin220_ComputeSpeedProfile+0xbe>
    {
      reqAccSteps = reqDecSteps - 1;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	3b01      	subs	r3, #1
 8007898:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <Stspin220_ComputeSpeedProfile+0xc2>
      {
        reqAccSteps = 1;
 80078a0:	2301      	movs	r3, #1
 80078a2:	61fb      	str	r3, [r7, #28]
 80078a4:	e001      	b.n	80078aa <Stspin220_ComputeSpeedProfile+0xc2>
      }      
    }
    else
    {
      reqAccSteps = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	61fb      	str	r3, [r7, #28]
    }
    devicePrm.endAccPos = reqAccSteps;
 80078aa:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <Stspin220_ComputeSpeedProfile+0xec>)
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	611a      	str	r2, [r3, #16]
    devicePrm.startDecPos = reqDecSteps;
 80078b0:	4b08      	ldr	r3, [pc, #32]	; (80078d4 <Stspin220_ComputeSpeedProfile+0xec>)
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	619a      	str	r2, [r3, #24]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm.endAccPos = reqAccSteps;
    devicePrm.startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 80078b6:	e008      	b.n	80078ca <Stspin220_ComputeSpeedProfile+0xe2>
    devicePrm.endAccPos = reqAccSteps;
 80078b8:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <Stspin220_ComputeSpeedProfile+0xec>)
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	611a      	str	r2, [r3, #16]
    devicePrm.startDecPos = nbSteps - reqDecSteps - 1;
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	1e5a      	subs	r2, r3, #1
 80078c6:	4b03      	ldr	r3, [pc, #12]	; (80078d4 <Stspin220_ComputeSpeedProfile+0xec>)
 80078c8:	619a      	str	r2, [r3, #24]
}
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b008      	add	sp, #32
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	46c0      	nop			; (mov r8, r8)
 80078d4:	20003664 	.word	0x20003664

080078d8 <Stspin220_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Stspin220_FlagInterruptHandler(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 80078dc:	4b04      	ldr	r3, [pc, #16]	; (80078f0 <Stspin220_FlagInterruptHandler+0x18>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <Stspin220_FlagInterruptHandler+0x12>
  {
    flagInterruptCallback();
 80078e4:	4b02      	ldr	r3, [pc, #8]	; (80078f0 <Stspin220_FlagInterruptHandler+0x18>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4798      	blx	r3
  }
}
 80078ea:	46c0      	nop			; (mov r8, r8)
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	200036a8 	.word	0x200036a8

080078f4 <Stspin220_SetDeviceParamsOtherValues>:
 * @brief  Set the parameters of the device whose values are not defined in
 * stspin220_target_config.h
 * @retval None
 **********************************************************/
void Stspin220_SetDeviceParamsOtherValues(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
  uint16_t tmp;

  devicePrm.accu = 0;
 80078fa:	4b21      	ldr	r3, [pc, #132]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
  devicePrm.currentPosition = 0;
 8007900:	4b1f      	ldr	r3, [pc, #124]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 8007902:	2200      	movs	r2, #0
 8007904:	605a      	str	r2, [r3, #4]
  devicePrm.sequencerPosition = 0;
 8007906:	4b1e      	ldr	r3, [pc, #120]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 8007908:	2200      	movs	r2, #0
 800790a:	811a      	strh	r2, [r3, #8]
  devicePrm.endAccPos = 0;
 800790c:	4b1c      	ldr	r3, [pc, #112]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 800790e:	2200      	movs	r2, #0
 8007910:	611a      	str	r2, [r3, #16]
  devicePrm.relativePos = 0;
 8007912:	4b1b      	ldr	r3, [pc, #108]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 8007914:	2200      	movs	r2, #0
 8007916:	615a      	str	r2, [r3, #20]
  devicePrm.startDecPos = 0;
 8007918:	4b19      	ldr	r3, [pc, #100]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 800791a:	2200      	movs	r2, #0
 800791c:	619a      	str	r2, [r3, #24]
  devicePrm.stepsToTake = 0;
 800791e:	4b18      	ldr	r3, [pc, #96]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 8007920:	2200      	movs	r2, #0
 8007922:	61da      	str	r2, [r3, #28]
  devicePrm.updateTorque = FALSE;
 8007924:	4b16      	ldr	r3, [pc, #88]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 8007926:	2225      	movs	r2, #37	; 0x25
 8007928:	2100      	movs	r1, #0
 800792a:	5499      	strb	r1, [r3, r2]
  devicePrm.speed = 0;
 800792c:	4b14      	ldr	r3, [pc, #80]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 800792e:	2200      	movs	r2, #0
 8007930:	871a      	strh	r2, [r3, #56]	; 0x38
  devicePrm.commandExecuted = NO_CMD;
 8007932:	4b13      	ldr	r3, [pc, #76]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 8007934:	223a      	movs	r2, #58	; 0x3a
 8007936:	2100      	movs	r1, #0
 8007938:	5499      	strb	r1, [r3, r2]
  devicePrm.direction = FORWARD;
 800793a:	4b11      	ldr	r3, [pc, #68]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 800793c:	223b      	movs	r2, #59	; 0x3b
 800793e:	2101      	movs	r1, #1
 8007940:	5499      	strb	r1, [r3, r2]
  tmp = devicePrm.minSpeed;
 8007942:	1dbb      	adds	r3, r7, #6
 8007944:	4a0e      	ldr	r2, [pc, #56]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 8007946:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8007948:	801a      	strh	r2, [r3, #0]
  if (((devicePrm.torqueBoostEnable != FALSE)&&\
 800794a:	4b0d      	ldr	r3, [pc, #52]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 800794c:	222c      	movs	r2, #44	; 0x2c
 800794e:	5c9b      	ldrb	r3, [r3, r2]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d005      	beq.n	8007962 <Stspin220_SetDeviceParamsOtherValues+0x6e>
       (devicePrm.torqueBoostSpeedThreshold>STSPIN220_MAX_STCK_FREQ))||\
 8007956:	4b0a      	ldr	r3, [pc, #40]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 8007958:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800795a:	b29b      	uxth	r3, r3
  if (((devicePrm.torqueBoostEnable != FALSE)&&\
 800795c:	4a09      	ldr	r2, [pc, #36]	; (8007984 <Stspin220_SetDeviceParamsOtherValues+0x90>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d806      	bhi.n	8007970 <Stspin220_SetDeviceParamsOtherValues+0x7c>
      (tmp>devicePrm.maxSpeed))
 8007962:	4b07      	ldr	r3, [pc, #28]	; (8007980 <Stspin220_SetDeviceParamsOtherValues+0x8c>)
 8007964:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007966:	b29b      	uxth	r3, r3
       (devicePrm.torqueBoostSpeedThreshold>STSPIN220_MAX_STCK_FREQ))||\
 8007968:	1dba      	adds	r2, r7, #6
 800796a:	8812      	ldrh	r2, [r2, #0]
 800796c:	429a      	cmp	r2, r3
 800796e:	d903      	bls.n	8007978 <Stspin220_SetDeviceParamsOtherValues+0x84>
  {
    Stspin220_ErrorHandler(STSPIN220_ERROR_INIT);
 8007970:	4b05      	ldr	r3, [pc, #20]	; (8007988 <Stspin220_SetDeviceParamsOtherValues+0x94>)
 8007972:	0018      	movs	r0, r3
 8007974:	f7fe ff6a 	bl	800684c <Stspin220_ErrorHandler>
  }
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	46bd      	mov	sp, r7
 800797c:	b002      	add	sp, #8
 800797e:	bd80      	pop	{r7, pc}
 8007980:	20003664 	.word	0x20003664
 8007984:	00002710 	.word	0x00002710
 8007988:	0000a009 	.word	0x0000a009

0800798c <Stspin220_SetDeviceParamsToGivenValues>:
 * @param pInitDevicePrm structure containing values to initialize the device 
 * parameters
 * @retval None
 **********************************************************/
void Stspin220_SetDeviceParamsToGivenValues(Stspin220_Init_t* pInitDevicePrm)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  devicePrm.motionState = STANDBY;;
 8007994:	4b42      	ldr	r3, [pc, #264]	; (8007aa0 <Stspin220_SetDeviceParamsToGivenValues+0x114>)
 8007996:	223c      	movs	r2, #60	; 0x3c
 8007998:	2109      	movs	r1, #9
 800799a:	5499      	strb	r1, [r3, r2]

  if (Stspin220_SetAcceleration(0,pInitDevicePrm->acceleration)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_ACCELERATION); 
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	0019      	movs	r1, r3
 80079a2:	2000      	movs	r0, #0
 80079a4:	f7ff fb34 	bl	8007010 <Stspin220_SetAcceleration>
 80079a8:	0003      	movs	r3, r0
 80079aa:	001a      	movs	r2, r3
 80079ac:	2301      	movs	r3, #1
 80079ae:	4053      	eors	r3, r2
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <Stspin220_SetDeviceParamsToGivenValues+0x32>
 80079b6:	4b3b      	ldr	r3, [pc, #236]	; (8007aa4 <Stspin220_SetDeviceParamsToGivenValues+0x118>)
 80079b8:	0018      	movs	r0, r3
 80079ba:	f7fe ff47 	bl	800684c <Stspin220_ErrorHandler>
  if (Stspin220_SetDeceleration(0,pInitDevicePrm->deceleration)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_DECELERATION);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	885b      	ldrh	r3, [r3, #2]
 80079c2:	0019      	movs	r1, r3
 80079c4:	2000      	movs	r0, #0
 80079c6:	f7ff fb55 	bl	8007074 <Stspin220_SetDeceleration>
 80079ca:	0003      	movs	r3, r0
 80079cc:	001a      	movs	r2, r3
 80079ce:	2301      	movs	r3, #1
 80079d0:	4053      	eors	r3, r2
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <Stspin220_SetDeviceParamsToGivenValues+0x54>
 80079d8:	4b33      	ldr	r3, [pc, #204]	; (8007aa8 <Stspin220_SetDeviceParamsToGivenValues+0x11c>)
 80079da:	0018      	movs	r0, r3
 80079dc:	f7fe ff36 	bl	800684c <Stspin220_ErrorHandler>
  if (Stspin220_SetMaxSpeed(0,pInitDevicePrm->maxSpeed)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_MAX_SPEED);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	889b      	ldrh	r3, [r3, #4]
 80079e4:	0019      	movs	r1, r3
 80079e6:	2000      	movs	r0, #0
 80079e8:	f7ff fbd2 	bl	8007190 <Stspin220_SetMaxSpeed>
 80079ec:	0003      	movs	r3, r0
 80079ee:	001a      	movs	r2, r3
 80079f0:	2301      	movs	r3, #1
 80079f2:	4053      	eors	r3, r2
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <Stspin220_SetDeviceParamsToGivenValues+0x76>
 80079fa:	4b2c      	ldr	r3, [pc, #176]	; (8007aac <Stspin220_SetDeviceParamsToGivenValues+0x120>)
 80079fc:	0018      	movs	r0, r3
 80079fe:	f7fe ff25 	bl	800684c <Stspin220_ErrorHandler>
  if (Stspin220_SetMinSpeed(0,pInitDevicePrm->minSpeed)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_MIN_SPEED);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	88db      	ldrh	r3, [r3, #6]
 8007a06:	0019      	movs	r1, r3
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f7ff fc13 	bl	8007234 <Stspin220_SetMinSpeed>
 8007a0e:	0003      	movs	r3, r0
 8007a10:	001a      	movs	r2, r3
 8007a12:	2301      	movs	r3, #1
 8007a14:	4053      	eors	r3, r2
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <Stspin220_SetDeviceParamsToGivenValues+0x98>
 8007a1c:	4b24      	ldr	r3, [pc, #144]	; (8007ab0 <Stspin220_SetDeviceParamsToGivenValues+0x124>)
 8007a1e:	0018      	movs	r0, r3
 8007a20:	f7fe ff14 	bl	800684c <Stspin220_ErrorHandler>
 
  Stspin220_VrefPwmSetFreq(0,pInitDevicePrm->vrefPwmFreq);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	0019      	movs	r1, r3
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f7ff fd62 	bl	80074f4 <Stspin220_VrefPwmSetFreq>
  Stspin220_SetTorque(0,ACC_TORQUE,pInitDevicePrm->accelTorque);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	7a1b      	ldrb	r3, [r3, #8]
 8007a34:	001a      	movs	r2, r3
 8007a36:	2100      	movs	r1, #0
 8007a38:	2000      	movs	r0, #0
 8007a3a:	f7ff fc9f 	bl	800737c <Stspin220_SetTorque>
  Stspin220_SetTorque(0,DEC_TORQUE,pInitDevicePrm->decelTorque);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	7a5b      	ldrb	r3, [r3, #9]
 8007a42:	001a      	movs	r2, r3
 8007a44:	2101      	movs	r1, #1
 8007a46:	2000      	movs	r0, #0
 8007a48:	f7ff fc98 	bl	800737c <Stspin220_SetTorque>
  Stspin220_SetTorque(0,RUN_TORQUE,pInitDevicePrm->runTorque);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	7a9b      	ldrb	r3, [r3, #10]
 8007a50:	001a      	movs	r2, r3
 8007a52:	2102      	movs	r1, #2
 8007a54:	2000      	movs	r0, #0
 8007a56:	f7ff fc91 	bl	800737c <Stspin220_SetTorque>
  Stspin220_SetTorque(0,HOLD_TORQUE,pInitDevicePrm->holdTorque);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	7adb      	ldrb	r3, [r3, #11]
 8007a5e:	001a      	movs	r2, r3
 8007a60:	2103      	movs	r1, #3
 8007a62:	2000      	movs	r0, #0
 8007a64:	f7ff fc8a 	bl	800737c <Stspin220_SetTorque>
  devicePrm.torqueBoostEnable = pInitDevicePrm->torqueBoostEnable;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	7b19      	ldrb	r1, [r3, #12]
 8007a6c:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <Stspin220_SetDeviceParamsToGivenValues+0x114>)
 8007a6e:	222c      	movs	r2, #44	; 0x2c
 8007a70:	5499      	strb	r1, [r3, r2]
  devicePrm.torqueBoostSpeedThreshold = pInitDevicePrm->torqueBoostSpeedThreshold;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	89da      	ldrh	r2, [r3, #14]
 8007a76:	4b0a      	ldr	r3, [pc, #40]	; (8007aa0 <Stspin220_SetDeviceParamsToGivenValues+0x114>)
 8007a78:	85da      	strh	r2, [r3, #46]	; 0x2e
  Stspin220_SetStopMode(0,pInitDevicePrm->stopMode);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	7c5b      	ldrb	r3, [r3, #17]
 8007a7e:	0019      	movs	r1, r3
 8007a80:	2000      	movs	r0, #0
 8007a82:	f7ff fc67 	bl	8007354 <Stspin220_SetStopMode>

  Stspin220_SetDeviceParamsOtherValues();
 8007a86:	f7ff ff35 	bl	80078f4 <Stspin220_SetDeviceParamsOtherValues>
  
  /* Set predefined step mode */
  /* Standby-reset deactivation included to latch the MODEX inputs */
  Stspin220_SetStepMode(0, pInitDevicePrm->stepMode);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7c1b      	ldrb	r3, [r3, #16]
 8007a8e:	0019      	movs	r1, r3
 8007a90:	2000      	movs	r0, #0
 8007a92:	f7ff fc2b 	bl	80072ec <Stspin220_SetStepMode>
}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	b002      	add	sp, #8
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	46c0      	nop			; (mov r8, r8)
 8007aa0:	20003664 	.word	0x20003664
 8007aa4:	0000a003 	.word	0x0000a003
 8007aa8:	0000a004 	.word	0x0000a004
 8007aac:	0000a001 	.word	0x0000a001
 8007ab0:	0000a002 	.word	0x0000a002

08007ab4 <Stspin220_SetDeviceParamsToPredefinedValues>:
 * @brief  Sets the parameters of the device to predefined values
 * from stspin220_target_config.h
 * @retval None
 **********************************************************/
void Stspin220_SetDeviceParamsToPredefinedValues(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  devicePrm.motionState = STANDBY;
 8007ab8:	4b3a      	ldr	r3, [pc, #232]	; (8007ba4 <Stspin220_SetDeviceParamsToPredefinedValues+0xf0>)
 8007aba:	223c      	movs	r2, #60	; 0x3c
 8007abc:	2109      	movs	r1, #9
 8007abe:	5499      	strb	r1, [r3, r2]

  if (Stspin220_SetAcceleration(0,STSPIN220_CONF_PARAM_ACC)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_ACCELERATION);
 8007ac0:	23f0      	movs	r3, #240	; 0xf0
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	0019      	movs	r1, r3
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	f7ff faa2 	bl	8007010 <Stspin220_SetAcceleration>
 8007acc:	0003      	movs	r3, r0
 8007ace:	001a      	movs	r2, r3
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	4053      	eors	r3, r2
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <Stspin220_SetDeviceParamsToPredefinedValues+0x2e>
 8007ada:	4b33      	ldr	r3, [pc, #204]	; (8007ba8 <Stspin220_SetDeviceParamsToPredefinedValues+0xf4>)
 8007adc:	0018      	movs	r0, r3
 8007ade:	f7fe feb5 	bl	800684c <Stspin220_ErrorHandler>
  if (Stspin220_SetDeceleration(0,STSPIN220_CONF_PARAM_DEC)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_DECELERATION);
 8007ae2:	23f0      	movs	r3, #240	; 0xf0
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	0019      	movs	r1, r3
 8007ae8:	2000      	movs	r0, #0
 8007aea:	f7ff fac3 	bl	8007074 <Stspin220_SetDeceleration>
 8007aee:	0003      	movs	r3, r0
 8007af0:	001a      	movs	r2, r3
 8007af2:	2301      	movs	r3, #1
 8007af4:	4053      	eors	r3, r2
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <Stspin220_SetDeviceParamsToPredefinedValues+0x50>
 8007afc:	4b2b      	ldr	r3, [pc, #172]	; (8007bac <Stspin220_SetDeviceParamsToPredefinedValues+0xf8>)
 8007afe:	0018      	movs	r0, r3
 8007b00:	f7fe fea4 	bl	800684c <Stspin220_ErrorHandler>
  if (Stspin220_SetMaxSpeed(0,STSPIN220_CONF_PARAM_RUNNING_SPEED)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_MAX_SPEED);
 8007b04:	23c8      	movs	r3, #200	; 0xc8
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	0019      	movs	r1, r3
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	f7ff fb40 	bl	8007190 <Stspin220_SetMaxSpeed>
 8007b10:	0003      	movs	r3, r0
 8007b12:	001a      	movs	r2, r3
 8007b14:	2301      	movs	r3, #1
 8007b16:	4053      	eors	r3, r2
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <Stspin220_SetDeviceParamsToPredefinedValues+0x72>
 8007b1e:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <Stspin220_SetDeviceParamsToPredefinedValues+0xfc>)
 8007b20:	0018      	movs	r0, r3
 8007b22:	f7fe fe93 	bl	800684c <Stspin220_ErrorHandler>
  if (Stspin220_SetMinSpeed(0,STSPIN220_CONF_PARAM_MIN_SPEED)==FALSE) Stspin220_ErrorHandler(STSPIN220_ERROR_SET_MIN_SPEED);
 8007b26:	23c8      	movs	r3, #200	; 0xc8
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	0019      	movs	r1, r3
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	f7ff fb81 	bl	8007234 <Stspin220_SetMinSpeed>
 8007b32:	0003      	movs	r3, r0
 8007b34:	001a      	movs	r2, r3
 8007b36:	2301      	movs	r3, #1
 8007b38:	4053      	eors	r3, r2
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <Stspin220_SetDeviceParamsToPredefinedValues+0x94>
 8007b40:	4b1c      	ldr	r3, [pc, #112]	; (8007bb4 <Stspin220_SetDeviceParamsToPredefinedValues+0x100>)
 8007b42:	0018      	movs	r0, r3
 8007b44:	f7fe fe82 	bl	800684c <Stspin220_ErrorHandler>

  Stspin220_VrefPwmSetFreq(0,STSPIN220_CONF_PARAM_REF_PWM_FREQUENCY);
 8007b48:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <Stspin220_SetDeviceParamsToPredefinedValues+0x104>)
 8007b4a:	0019      	movs	r1, r3
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	f7ff fcd1 	bl	80074f4 <Stspin220_VrefPwmSetFreq>
  Stspin220_SetTorque(0,ACC_TORQUE,STSPIN220_CONF_PARAM_ACC_TORQUE);
 8007b52:	2214      	movs	r2, #20
 8007b54:	2100      	movs	r1, #0
 8007b56:	2000      	movs	r0, #0
 8007b58:	f7ff fc10 	bl	800737c <Stspin220_SetTorque>
  Stspin220_SetTorque(0,DEC_TORQUE,STSPIN220_CONF_PARAM_DEC_TORQUE);
 8007b5c:	220f      	movs	r2, #15
 8007b5e:	2101      	movs	r1, #1
 8007b60:	2000      	movs	r0, #0
 8007b62:	f7ff fc0b 	bl	800737c <Stspin220_SetTorque>
  Stspin220_SetTorque(0,RUN_TORQUE,STSPIN220_CONF_PARAM_RUNNING_TORQUE);
 8007b66:	220a      	movs	r2, #10
 8007b68:	2102      	movs	r1, #2
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	f7ff fc06 	bl	800737c <Stspin220_SetTorque>
  Stspin220_SetTorque(0,HOLD_TORQUE,STSPIN220_CONF_PARAM_HOLDING_TORQUE);
 8007b70:	2219      	movs	r2, #25
 8007b72:	2103      	movs	r1, #3
 8007b74:	2000      	movs	r0, #0
 8007b76:	f7ff fc01 	bl	800737c <Stspin220_SetTorque>
  devicePrm.torqueBoostEnable = STSPIN220_CONF_PARAM_TORQUE_BOOST_EN;
 8007b7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <Stspin220_SetDeviceParamsToPredefinedValues+0xf0>)
 8007b7c:	222c      	movs	r2, #44	; 0x2c
 8007b7e:	2101      	movs	r1, #1
 8007b80:	5499      	strb	r1, [r3, r2]
  devicePrm.torqueBoostSpeedThreshold = STSPIN220_CONF_PARAM_TORQUE_BOOST_TH;
 8007b82:	4b08      	ldr	r3, [pc, #32]	; (8007ba4 <Stspin220_SetDeviceParamsToPredefinedValues+0xf0>)
 8007b84:	22c8      	movs	r2, #200	; 0xc8
 8007b86:	85da      	strh	r2, [r3, #46]	; 0x2e
  Stspin220_SetStopMode(0,STSPIN220_CONF_PARAM_AUTO_HIZ_STOP);
 8007b88:	2100      	movs	r1, #0
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	f7ff fbe2 	bl	8007354 <Stspin220_SetStopMode>

  Stspin220_SetDeviceParamsOtherValues();
 8007b90:	f7ff feb0 	bl	80078f4 <Stspin220_SetDeviceParamsOtherValues>
  
  /* Set predefined step mode */
  /* Standby-reset deactivation included to latch the MODEX inputs */
  Stspin220_SetStepMode(0, STSPIN220_CONF_PARAM_STEP_MODE);
 8007b94:	2105      	movs	r1, #5
 8007b96:	2000      	movs	r0, #0
 8007b98:	f7ff fba8 	bl	80072ec <Stspin220_SetStepMode>
}
 8007b9c:	46c0      	nop			; (mov r8, r8)
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	20003664 	.word	0x20003664
 8007ba8:	0000a003 	.word	0x0000a003
 8007bac:	0000a004 	.word	0x0000a004
 8007bb0:	0000a001 	.word	0x0000a001
 8007bb4:	0000a002 	.word	0x0000a002
 8007bb8:	000186a0 	.word	0x000186a0

08007bbc <Stspin220_SetStepModeWithoutReset>:
 * @param[in] stepMode from full step to 1/256 microstep
 * as specified in enum motorStepMode_t
 * @retval true if the command is successfully executed, else false
 **********************************************************/
bool Stspin220_SetStepModeWithoutReset(uint8_t deviceId, motorStepMode_t stepMode)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	0002      	movs	r2, r0
 8007bc4:	1dfb      	adds	r3, r7, #7
 8007bc6:	701a      	strb	r2, [r3, #0]
 8007bc8:	1dbb      	adds	r3, r7, #6
 8007bca:	1c0a      	adds	r2, r1, #0
 8007bcc:	701a      	strb	r2, [r3, #0]
  /* Store step mode */
  devicePrm.stepMode = stepMode;
 8007bce:	4b31      	ldr	r3, [pc, #196]	; (8007c94 <Stspin220_SetStepModeWithoutReset+0xd8>)
 8007bd0:	1dba      	adds	r2, r7, #6
 8007bd2:	213d      	movs	r1, #61	; 0x3d
 8007bd4:	7812      	ldrb	r2, [r2, #0]
 8007bd6:	545a      	strb	r2, [r3, r1]
  devicePrm.stepModeLatched = stepMode;
 8007bd8:	4b2e      	ldr	r3, [pc, #184]	; (8007c94 <Stspin220_SetStepModeWithoutReset+0xd8>)
 8007bda:	1dba      	adds	r2, r7, #6
 8007bdc:	213e      	movs	r1, #62	; 0x3e
 8007bde:	7812      	ldrb	r2, [r2, #0]
 8007be0:	545a      	strb	r2, [r3, r1]
  
  /* Set the mode pins to the levels corresponding to the selected step mode */
  switch (stepMode)
 8007be2:	1dbb      	adds	r3, r7, #6
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d83f      	bhi.n	8007c6a <Stspin220_SetStepModeWithoutReset+0xae>
 8007bea:	009a      	lsls	r2, r3, #2
 8007bec:	4b2a      	ldr	r3, [pc, #168]	; (8007c98 <Stspin220_SetStepModeWithoutReset+0xdc>)
 8007bee:	18d3      	adds	r3, r2, r3
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	469f      	mov	pc, r3
  {
    case STEP_MODE_FULL:
      Stspin220_Board_SetFullStep();
 8007bf4:	f007 fa0e 	bl	800f014 <Stspin220_Board_SetFullStep>
      break;
 8007bf8:	e039      	b.n	8007c6e <Stspin220_SetStepModeWithoutReset+0xb2>
    case STEP_MODE_HALF:
      Stspin220_Board_SetModePins(1, 0, 1, 0);
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	2100      	movs	r1, #0
 8007c00:	2001      	movs	r0, #1
 8007c02:	f007 f98f 	bl	800ef24 <Stspin220_Board_SetModePins>
      break;    
 8007c06:	e032      	b.n	8007c6e <Stspin220_SetStepModeWithoutReset+0xb2>
    case STEP_MODE_1_4:
      Stspin220_Board_SetModePins(0, 1, 0, 1);
 8007c08:	2301      	movs	r3, #1
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	2000      	movs	r0, #0
 8007c10:	f007 f988 	bl	800ef24 <Stspin220_Board_SetModePins>
      break;        
 8007c14:	e02b      	b.n	8007c6e <Stspin220_SetStepModeWithoutReset+0xb2>
    case STEP_MODE_1_8:
      Stspin220_Board_SetModePins(1, 1, 1, 0);
 8007c16:	2300      	movs	r3, #0
 8007c18:	2201      	movs	r2, #1
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	2001      	movs	r0, #1
 8007c1e:	f007 f981 	bl	800ef24 <Stspin220_Board_SetModePins>
      break;
 8007c22:	e024      	b.n	8007c6e <Stspin220_SetStepModeWithoutReset+0xb2>
    case STEP_MODE_1_16:
      Stspin220_Board_SetModePins(1, 1, 1, 1);
 8007c24:	2301      	movs	r3, #1
 8007c26:	2201      	movs	r2, #1
 8007c28:	2101      	movs	r1, #1
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	f007 f97a 	bl	800ef24 <Stspin220_Board_SetModePins>
      break;   
 8007c30:	e01d      	b.n	8007c6e <Stspin220_SetStepModeWithoutReset+0xb2>
    case STEP_MODE_1_32:
      Stspin220_Board_SetModePins(0, 0, 0, 1);
 8007c32:	2301      	movs	r3, #1
 8007c34:	2200      	movs	r2, #0
 8007c36:	2100      	movs	r1, #0
 8007c38:	2000      	movs	r0, #0
 8007c3a:	f007 f973 	bl	800ef24 <Stspin220_Board_SetModePins>
      break;   
 8007c3e:	e016      	b.n	8007c6e <Stspin220_SetStepModeWithoutReset+0xb2>
    case STEP_MODE_1_64:
      Stspin220_Board_SetModePins(1, 1, 0, 1);
 8007c40:	2301      	movs	r3, #1
 8007c42:	2200      	movs	r2, #0
 8007c44:	2101      	movs	r1, #1
 8007c46:	2001      	movs	r0, #1
 8007c48:	f007 f96c 	bl	800ef24 <Stspin220_Board_SetModePins>
      break;
 8007c4c:	e00f      	b.n	8007c6e <Stspin220_SetStepModeWithoutReset+0xb2>
    case STEP_MODE_1_128:
      Stspin220_Board_SetModePins(0, 0, 1, 0);
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2201      	movs	r2, #1
 8007c52:	2100      	movs	r1, #0
 8007c54:	2000      	movs	r0, #0
 8007c56:	f007 f965 	bl	800ef24 <Stspin220_Board_SetModePins>
      break;  
 8007c5a:	e008      	b.n	8007c6e <Stspin220_SetStepModeWithoutReset+0xb2>
    case STEP_MODE_1_256:
      Stspin220_Board_SetModePins(1, 1, 0, 0);
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2101      	movs	r1, #1
 8007c62:	2001      	movs	r0, #1
 8007c64:	f007 f95e 	bl	800ef24 <Stspin220_Board_SetModePins>
      break;
 8007c68:	e001      	b.n	8007c6e <Stspin220_SetStepModeWithoutReset+0xb2>
    default:
      return FALSE;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e00e      	b.n	8007c8c <Stspin220_SetStepModeWithoutReset+0xd0>
  }

  /* Wait */
  Stspin220_Board_Delay(SELECT_STEP_MODE_DELAY);
 8007c6e:	2001      	movs	r0, #1
 8007c70:	f006 fea2 	bl	800e9b8 <Stspin220_Board_Delay>
  
  /* Exit standby, selected step mode is latched */
  Stspin220_Board_ReleaseReset();
 8007c74:	f007 f8aa 	bl	800edcc <Stspin220_Board_ReleaseReset>
  
  /* Let a delay after reset release and step mode latching*/
  Stspin220_Board_Delay(AFTER_STANDBY_EXIT_DEAD_TIME);
 8007c78:	2001      	movs	r0, #1
 8007c7a:	f006 fe9d 	bl	800e9b8 <Stspin220_Board_Delay>
  
  /* If full step mode is not selected, do not keep MODE1 = MODE2 = 0 */
  /* after the device quit the standby condition */
  if (stepMode!=STEP_MODE_FULL)
 8007c7e:	1dbb      	adds	r3, r7, #6
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <Stspin220_SetStepModeWithoutReset+0xce>
  {
    Stspin220_Board_UnsetFullStep();
 8007c86:	f007 f9d9 	bl	800f03c <Stspin220_Board_UnsetFullStep>
  }

  return TRUE;
 8007c8a:	2301      	movs	r3, #1
}
 8007c8c:	0018      	movs	r0, r3
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	b002      	add	sp, #8
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	20003664 	.word	0x20003664
 8007c98:	08016358 	.word	0x08016358

08007c9c <Stspin220_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId Unused parameter
 * @retval None
 **********************************************************/
void Stspin220_StartMovement(uint8_t deviceId)  
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	0002      	movs	r2, r0
 8007ca4:	1dfb      	adds	r3, r7, #7
 8007ca6:	701a      	strb	r2, [r3, #0]
  deviceId = 0;
 8007ca8:	1dfb      	adds	r3, r7, #7
 8007caa:	2200      	movs	r2, #0
 8007cac:	701a      	strb	r2, [r3, #0]
  
  /* Enable STSPIN220 powerstage */
  Stspin220_Enable(deviceId);
 8007cae:	1dfb      	adds	r3, r7, #7
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	f7fe fdbe 	bl	8006834 <Stspin220_Enable>
  toggleOdd = 0;
 8007cb8:	4b1e      	ldr	r3, [pc, #120]	; (8007d34 <Stspin220_StartMovement+0x98>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	701a      	strb	r2, [r3, #0]
  devicePrm.accu = 0;
 8007cbe:	4b1e      	ldr	r3, [pc, #120]	; (8007d38 <Stspin220_StartMovement+0x9c>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
  devicePrm.relativePos = 0;  
 8007cc4:	4b1c      	ldr	r3, [pc, #112]	; (8007d38 <Stspin220_StartMovement+0x9c>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	615a      	str	r2, [r3, #20]
  if ((devicePrm.endAccPos == 0)&&\
 8007cca:	4b1b      	ldr	r3, [pc, #108]	; (8007d38 <Stspin220_StartMovement+0x9c>)
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d110      	bne.n	8007cf4 <Stspin220_StartMovement+0x58>
      (devicePrm.commandExecuted != RUN_CMD))
 8007cd2:	4b19      	ldr	r3, [pc, #100]	; (8007d38 <Stspin220_StartMovement+0x9c>)
 8007cd4:	223a      	movs	r2, #58	; 0x3a
 8007cd6:	5c9b      	ldrb	r3, [r3, r2]
 8007cd8:	b2db      	uxtb	r3, r3
  if ((devicePrm.endAccPos == 0)&&\
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d00a      	beq.n	8007cf4 <Stspin220_StartMovement+0x58>
  {
    devicePrm.motionState = DECELERATING;
 8007cde:	4b16      	ldr	r3, [pc, #88]	; (8007d38 <Stspin220_StartMovement+0x9c>)
 8007ce0:	223c      	movs	r2, #60	; 0x3c
 8007ce2:	2102      	movs	r1, #2
 8007ce4:	5499      	strb	r1, [r3, r2]
    Stspin220_ApplyTorque(deviceId, DEC_TORQUE);
 8007ce6:	1dfb      	adds	r3, r7, #7
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2101      	movs	r1, #1
 8007cec:	0018      	movs	r0, r3
 8007cee:	f7ff fd29 	bl	8007744 <Stspin220_ApplyTorque>
 8007cf2:	e009      	b.n	8007d08 <Stspin220_StartMovement+0x6c>
  }
  else
  {
    devicePrm.motionState = ACCELERATING;
 8007cf4:	4b10      	ldr	r3, [pc, #64]	; (8007d38 <Stspin220_StartMovement+0x9c>)
 8007cf6:	223c      	movs	r2, #60	; 0x3c
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	5499      	strb	r1, [r3, r2]
    Stspin220_ApplyTorque(deviceId, ACC_TORQUE);
 8007cfc:	1dfb      	adds	r3, r7, #7
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2100      	movs	r1, #0
 8007d02:	0018      	movs	r0, r3
 8007d04:	f7ff fd1e 	bl	8007744 <Stspin220_ApplyTorque>
  }
  Stspin220_Board_PwmRefStart();
 8007d08:	f006 ff42 	bl	800eb90 <Stspin220_Board_PwmRefStart>
  /* Initialize the step clock timer */
  Stspin220_Board_TimStckInit();
 8007d0c:	f006 ffce 	bl	800ecac <Stspin220_Board_TimStckInit>
  /* Program the step clock */
  Stspin220_Board_TimStckCompareInit();
 8007d10:	f006 ff0c 	bl	800eb2c <Stspin220_Board_TimStckCompareInit>
  Stspin220_ApplySpeed(deviceId, devicePrm.minSpeed);
 8007d14:	4b08      	ldr	r3, [pc, #32]	; (8007d38 <Stspin220_StartMovement+0x9c>)
 8007d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	1dfb      	adds	r3, r7, #7
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	0011      	movs	r1, r2
 8007d20:	0018      	movs	r0, r3
 8007d22:	f7ff fc29 	bl	8007578 <Stspin220_ApplySpeed>
  Stspin220_Board_TimStckStart();
 8007d26:	f006 fedd 	bl	800eae4 <Stspin220_Board_TimStckStart>
}
 8007d2a:	46c0      	nop			; (mov r8, r8)
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	b002      	add	sp, #8
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	46c0      	nop			; (mov r8, r8)
 8007d34:	2000045f 	.word	0x2000045f
 8007d38:	20003664 	.word	0x20003664

08007d3c <Stspin220_StepClockHandler>:
 * @param[in] deviceId Unused parameter
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void Stspin220_StepClockHandler(uint8_t deviceId)
{
 8007d3c:	b590      	push	{r4, r7, lr}
 8007d3e:	b08d      	sub	sp, #52	; 0x34
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	0002      	movs	r2, r0
 8007d44:	1dfb      	adds	r3, r7, #7
 8007d46:	701a      	strb	r2, [r3, #0]
  uint32_t stepModeShift = devicePrm.stepModeLatched - devicePrm.stepMode;
 8007d48:	4bc5      	ldr	r3, [pc, #788]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007d4a:	223e      	movs	r2, #62	; 0x3e
 8007d4c:	5c9b      	ldrb	r3, [r3, r2]
 8007d4e:	0019      	movs	r1, r3
 8007d50:	4bc3      	ldr	r3, [pc, #780]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007d52:	223d      	movs	r2, #61	; 0x3d
 8007d54:	5c9b      	ldrb	r3, [r3, r2]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	1acb      	subs	r3, r1, r3
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t tmp;
  deviceId = 0;
 8007d5c:	1dfb      	adds	r3, r7, #7
 8007d5e:	2200      	movs	r2, #0
 8007d60:	701a      	strb	r2, [r3, #0]
  
  if (devicePrm.motionState == STANDBYTOINACTIVE)
 8007d62:	4bbf      	ldr	r3, [pc, #764]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007d64:	223c      	movs	r2, #60	; 0x3c
 8007d66:	5c9b      	ldrb	r3, [r3, r2]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b0a      	cmp	r3, #10
 8007d6c:	d137      	bne.n	8007dde <Stspin220_StepClockHandler+0xa2>
  {
    if (toggleOdd != 0)
 8007d6e:	4bbd      	ldr	r3, [pc, #756]	; (8008064 <Stspin220_StepClockHandler+0x328>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d013      	beq.n	8007da0 <Stspin220_StepClockHandler+0x64>
    {
      toggleOdd = 0;
 8007d78:	4bba      	ldr	r3, [pc, #744]	; (8008064 <Stspin220_StepClockHandler+0x328>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]
      if (devicePrm.sequencerPosition == 0)
 8007d7e:	4bb8      	ldr	r3, [pc, #736]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007d80:	891b      	ldrh	r3, [r3, #8]
 8007d82:	b21b      	sxth	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d125      	bne.n	8007dd4 <Stspin220_StepClockHandler+0x98>
      {
        if (Stspin220_Board_TimStckStop(&toggleOdd) == 0)
 8007d88:	4bb6      	ldr	r3, [pc, #728]	; (8008064 <Stspin220_StepClockHandler+0x328>)
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	f006 fff2 	bl	800ed74 <Stspin220_Board_TimStckStop>
 8007d90:	1e03      	subs	r3, r0, #0
 8007d92:	d000      	beq.n	8007d96 <Stspin220_StepClockHandler+0x5a>
 8007d94:	e312      	b.n	80083bc <Stspin220_StepClockHandler+0x680>
        {
          Stspin220_ErrorHandler(STSPIN220_ERROR_STEP_CLOCK);
 8007d96:	4bb4      	ldr	r3, [pc, #720]	; (8008068 <Stspin220_StepClockHandler+0x32c>)
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f7fe fd57 	bl	800684c <Stspin220_ErrorHandler>
        }
        return;
 8007d9e:	e30d      	b.n	80083bc <Stspin220_StepClockHandler+0x680>
      }      
    }
    else
    {
      toggleOdd = 1;
 8007da0:	4bb0      	ldr	r3, [pc, #704]	; (8008064 <Stspin220_StepClockHandler+0x328>)
 8007da2:	2201      	movs	r2, #1
 8007da4:	701a      	strb	r2, [r3, #0]
      tmp = (1 << (STEP_MODE_1_256-devicePrm.stepMode));
 8007da6:	4bae      	ldr	r3, [pc, #696]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007da8:	223d      	movs	r2, #61	; 0x3d
 8007daa:	5c9b      	ldrb	r3, [r3, r2]
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	001a      	movs	r2, r3
 8007db0:	2308      	movs	r3, #8
 8007db2:	1a9b      	subs	r3, r3, r2
 8007db4:	2201      	movs	r2, #1
 8007db6:	409a      	lsls	r2, r3
 8007db8:	2122      	movs	r1, #34	; 0x22
 8007dba:	187b      	adds	r3, r7, r1
 8007dbc:	801a      	strh	r2, [r3, #0]
      devicePrm.sequencerPosition -= tmp;
 8007dbe:	4ba8      	ldr	r3, [pc, #672]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007dc0:	891b      	ldrh	r3, [r3, #8]
 8007dc2:	b21b      	sxth	r3, r3
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	187b      	adds	r3, r7, r1
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	b21a      	sxth	r2, r3
 8007dd0:	4ba3      	ldr	r3, [pc, #652]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007dd2:	811a      	strh	r2, [r3, #8]
    }
    Stspin220_Board_TimStckSetFreq(STSPIN220_MAX_STCK_FREQ);
 8007dd4:	4ba5      	ldr	r3, [pc, #660]	; (800806c <Stspin220_StepClockHandler+0x330>)
 8007dd6:	0018      	movs	r0, r3
 8007dd8:	f006 feb6 	bl	800eb48 <Stspin220_Board_TimStckSetFreq>
    return;
 8007ddc:	e2ef      	b.n	80083be <Stspin220_StepClockHandler+0x682>
  }  
  
  if (toggleOdd == 0)
 8007dde:	4ba1      	ldr	r3, [pc, #644]	; (8008064 <Stspin220_StepClockHandler+0x328>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d103      	bne.n	8007df0 <Stspin220_StepClockHandler+0xb4>
  {
    toggleOdd = 1;
 8007de8:	4b9e      	ldr	r3, [pc, #632]	; (8008064 <Stspin220_StepClockHandler+0x328>)
 8007dea:	2201      	movs	r2, #1
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	e2bf      	b.n	8008370 <Stspin220_StepClockHandler+0x634>
  }
  else
  {
    toggleOdd = 0;
 8007df0:	4b9c      	ldr	r3, [pc, #624]	; (8008064 <Stspin220_StepClockHandler+0x328>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]
    /* Incrementation of the relative position */
    devicePrm.relativePos += (1 << stepModeShift);
 8007df6:	4b9a      	ldr	r3, [pc, #616]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfe:	4091      	lsls	r1, r2
 8007e00:	000a      	movs	r2, r1
 8007e02:	189a      	adds	r2, r3, r2
 8007e04:	4b96      	ldr	r3, [pc, #600]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e06:	615a      	str	r2, [r3, #20]

    /* Incrementation of the current position */
    if (devicePrm.direction != BACKWARD)
 8007e08:	4b95      	ldr	r3, [pc, #596]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e0a:	223b      	movs	r2, #59	; 0x3b
 8007e0c:	5c9b      	ldrb	r3, [r3, r2]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d032      	beq.n	8007e7a <Stspin220_StepClockHandler+0x13e>
    {
      devicePrm.currentPosition += (1 << stepModeShift);
 8007e14:	4b92      	ldr	r3, [pc, #584]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	2101      	movs	r1, #1
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	4099      	lsls	r1, r3
 8007e1e:	000b      	movs	r3, r1
 8007e20:	18d2      	adds	r2, r2, r3
 8007e22:	4b8f      	ldr	r3, [pc, #572]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e24:	605a      	str	r2, [r3, #4]
      tmp = (1 << (STEP_MODE_1_256-devicePrm.stepMode));
 8007e26:	4b8e      	ldr	r3, [pc, #568]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e28:	223d      	movs	r2, #61	; 0x3d
 8007e2a:	5c9b      	ldrb	r3, [r3, r2]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	001a      	movs	r2, r3
 8007e30:	2308      	movs	r3, #8
 8007e32:	1a9b      	subs	r3, r3, r2
 8007e34:	2201      	movs	r2, #1
 8007e36:	409a      	lsls	r2, r3
 8007e38:	2122      	movs	r1, #34	; 0x22
 8007e3a:	187b      	adds	r3, r7, r1
 8007e3c:	801a      	strh	r2, [r3, #0]
      devicePrm.sequencerPosition += tmp;
 8007e3e:	4b88      	ldr	r3, [pc, #544]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e40:	891b      	ldrh	r3, [r3, #8]
 8007e42:	b21b      	sxth	r3, r3
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	187b      	adds	r3, r7, r1
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	18d3      	adds	r3, r2, r3
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	b21a      	sxth	r2, r3
 8007e50:	4b83      	ldr	r3, [pc, #524]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e52:	811a      	strh	r2, [r3, #8]
      if (devicePrm.sequencerPosition >= (SEQUENCER_MAX_VALUE+1))
 8007e54:	4b82      	ldr	r3, [pc, #520]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e56:	891b      	ldrh	r3, [r3, #8]
 8007e58:	b21a      	sxth	r2, r3
 8007e5a:	2380      	movs	r3, #128	; 0x80
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	db3c      	blt.n	8007edc <Stspin220_StepClockHandler+0x1a0>
      {
        devicePrm.sequencerPosition -= (SEQUENCER_MAX_VALUE+1);
 8007e62:	4b7f      	ldr	r3, [pc, #508]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e64:	891b      	ldrh	r3, [r3, #8]
 8007e66:	b21b      	sxth	r3, r3
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	4a81      	ldr	r2, [pc, #516]	; (8008070 <Stspin220_StepClockHandler+0x334>)
 8007e6c:	4694      	mov	ip, r2
 8007e6e:	4463      	add	r3, ip
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	b21a      	sxth	r2, r3
 8007e74:	4b7a      	ldr	r3, [pc, #488]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e76:	811a      	strh	r2, [r3, #8]
 8007e78:	e030      	b.n	8007edc <Stspin220_StepClockHandler+0x1a0>
      }
    }
    else
    {
      devicePrm.currentPosition -= (1 << stepModeShift);
 8007e7a:	4b79      	ldr	r3, [pc, #484]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	2101      	movs	r1, #1
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	4099      	lsls	r1, r3
 8007e84:	000b      	movs	r3, r1
 8007e86:	1ad2      	subs	r2, r2, r3
 8007e88:	4b75      	ldr	r3, [pc, #468]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e8a:	605a      	str	r2, [r3, #4]
      tmp = (1 << (STEP_MODE_1_256-devicePrm.stepMode));
 8007e8c:	4b74      	ldr	r3, [pc, #464]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007e8e:	223d      	movs	r2, #61	; 0x3d
 8007e90:	5c9b      	ldrb	r3, [r3, r2]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	001a      	movs	r2, r3
 8007e96:	2308      	movs	r3, #8
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	409a      	lsls	r2, r3
 8007e9e:	2122      	movs	r1, #34	; 0x22
 8007ea0:	187b      	adds	r3, r7, r1
 8007ea2:	801a      	strh	r2, [r3, #0]
      devicePrm.sequencerPosition -= tmp;
 8007ea4:	4b6e      	ldr	r3, [pc, #440]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007ea6:	891b      	ldrh	r3, [r3, #8]
 8007ea8:	b21b      	sxth	r3, r3
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	187b      	adds	r3, r7, r1
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	b21a      	sxth	r2, r3
 8007eb6:	4b6a      	ldr	r3, [pc, #424]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007eb8:	811a      	strh	r2, [r3, #8]
      if (devicePrm.sequencerPosition < 0)
 8007eba:	4b69      	ldr	r3, [pc, #420]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007ebc:	891b      	ldrh	r3, [r3, #8]
 8007ebe:	b21b      	sxth	r3, r3
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	da0b      	bge.n	8007edc <Stspin220_StepClockHandler+0x1a0>
      {
        devicePrm.sequencerPosition += (SEQUENCER_MAX_VALUE+1);
 8007ec4:	4b66      	ldr	r3, [pc, #408]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007ec6:	891b      	ldrh	r3, [r3, #8]
 8007ec8:	b21b      	sxth	r3, r3
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	2280      	movs	r2, #128	; 0x80
 8007ece:	00d2      	lsls	r2, r2, #3
 8007ed0:	4694      	mov	ip, r2
 8007ed2:	4463      	add	r3, ip
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	b21a      	sxth	r2, r3
 8007ed8:	4b61      	ldr	r3, [pc, #388]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007eda:	811a      	strh	r2, [r3, #8]
      }
    }

    switch (devicePrm.motionState) 
 8007edc:	4b60      	ldr	r3, [pc, #384]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007ede:	223c      	movs	r2, #60	; 0x3c
 8007ee0:	5c9b      	ldrb	r3, [r3, r2]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d100      	bne.n	8007eea <Stspin220_StepClockHandler+0x1ae>
 8007ee8:	e0c6      	b.n	8008078 <Stspin220_StepClockHandler+0x33c>
 8007eea:	dd00      	ble.n	8007eee <Stspin220_StepClockHandler+0x1b2>
 8007eec:	e239      	b.n	8008362 <Stspin220_StepClockHandler+0x626>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <Stspin220_StepClockHandler+0x1be>
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d100      	bne.n	8007ef8 <Stspin220_StepClockHandler+0x1bc>
 8007ef6:	e124      	b.n	8008142 <Stspin220_StepClockHandler+0x406>
        }
        break;
      }
      default: 
      {
        break;
 8007ef8:	e233      	b.n	8008362 <Stspin220_StepClockHandler+0x626>
          uint32_t relPos = devicePrm.relativePos;
 8007efa:	4b59      	ldr	r3, [pc, #356]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	613b      	str	r3, [r7, #16]
          uint32_t endAccPos = devicePrm.endAccPos;
 8007f00:	4b57      	ldr	r3, [pc, #348]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	60fb      	str	r3, [r7, #12]
          uint16_t speed = devicePrm.speed;
 8007f06:	232e      	movs	r3, #46	; 0x2e
 8007f08:	18fb      	adds	r3, r7, r3
 8007f0a:	4a55      	ldr	r2, [pc, #340]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007f0c:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8007f0e:	801a      	strh	r2, [r3, #0]
          uint32_t acc = ((uint32_t)devicePrm.acceleration << 16)>>stepModeShift;
 8007f10:	4b53      	ldr	r3, [pc, #332]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007f12:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	041a      	lsls	r2, r3, #16
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	40da      	lsrs	r2, r3
 8007f1c:	0013      	movs	r3, r2
 8007f1e:	60bb      	str	r3, [r7, #8]
          if (((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)||\
 8007f20:	4b4f      	ldr	r3, [pc, #316]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007f22:	223a      	movs	r2, #58	; 0x3a
 8007f24:	5c9b      	ldrb	r3, [r3, r2]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	001a      	movs	r2, r3
 8007f2a:	230c      	movs	r3, #12
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	d10a      	bne.n	8007f46 <Stspin220_StepClockHandler+0x20a>
              ((devicePrm.commandExecuted==MOVE_CMD)&&(relPos>=devicePrm.startDecPos)))
 8007f30:	4b4b      	ldr	r3, [pc, #300]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007f32:	223a      	movs	r2, #58	; 0x3a
 8007f34:	5c9b      	ldrb	r3, [r3, r2]
 8007f36:	b2db      	uxtb	r3, r3
          if (((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)||\
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d112      	bne.n	8007f62 <Stspin220_StepClockHandler+0x226>
              ((devicePrm.commandExecuted==MOVE_CMD)&&(relPos>=devicePrm.startDecPos)))
 8007f3c:	4b48      	ldr	r3, [pc, #288]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d30d      	bcc.n	8007f62 <Stspin220_StepClockHandler+0x226>
            devicePrm.motionState = DECELERATING;
 8007f46:	4b46      	ldr	r3, [pc, #280]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007f48:	223c      	movs	r2, #60	; 0x3c
 8007f4a:	2102      	movs	r1, #2
 8007f4c:	5499      	strb	r1, [r3, r2]
            devicePrm.accu = 0;
 8007f4e:	4b44      	ldr	r3, [pc, #272]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]
            Stspin220_ApplyTorque(deviceId, DEC_TORQUE);
 8007f54:	1dfb      	adds	r3, r7, #7
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2101      	movs	r1, #1
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f7ff fbf2 	bl	8007744 <Stspin220_ApplyTorque>
 8007f60:	e07c      	b.n	800805c <Stspin220_StepClockHandler+0x320>
          else if ((speed>=(devicePrm.maxSpeed>>stepModeShift))||\
 8007f62:	232e      	movs	r3, #46	; 0x2e
 8007f64:	18fb      	adds	r3, r7, r3
 8007f66:	881a      	ldrh	r2, [r3, #0]
 8007f68:	4b3d      	ldr	r3, [pc, #244]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007f6a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	0019      	movs	r1, r3
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	4119      	asrs	r1, r3
 8007f74:	000b      	movs	r3, r1
 8007f76:	429a      	cmp	r2, r3
 8007f78:	da09      	bge.n	8007f8e <Stspin220_StepClockHandler+0x252>
                   ((devicePrm.commandExecuted==MOVE_CMD)&&(relPos >= endAccPos)))
 8007f7a:	4b39      	ldr	r3, [pc, #228]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007f7c:	223a      	movs	r2, #58	; 0x3a
 8007f7e:	5c9b      	ldrb	r3, [r3, r2]
 8007f80:	b2db      	uxtb	r3, r3
          else if ((speed>=(devicePrm.maxSpeed>>stepModeShift))||\
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d10e      	bne.n	8007fa4 <Stspin220_StepClockHandler+0x268>
                   ((devicePrm.commandExecuted==MOVE_CMD)&&(relPos >= endAccPos)))
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d30a      	bcc.n	8007fa4 <Stspin220_StepClockHandler+0x268>
            devicePrm.motionState = STEADY;
 8007f8e:	4b34      	ldr	r3, [pc, #208]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007f90:	223c      	movs	r2, #60	; 0x3c
 8007f92:	2103      	movs	r1, #3
 8007f94:	5499      	strb	r1, [r3, r2]
            Stspin220_ApplyTorque(deviceId, RUN_TORQUE);
 8007f96:	1dfb      	adds	r3, r7, #7
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	2102      	movs	r1, #2
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f7ff fbd1 	bl	8007744 <Stspin220_ApplyTorque>
 8007fa2:	e05b      	b.n	800805c <Stspin220_StepClockHandler+0x320>
            bool speedUpdated = FALSE;
 8007fa4:	232d      	movs	r3, #45	; 0x2d
 8007fa6:	18fb      	adds	r3, r7, r3
 8007fa8:	2200      	movs	r2, #0
 8007faa:	701a      	strb	r2, [r3, #0]
            if (speed==0) speed =1;
 8007fac:	222e      	movs	r2, #46	; 0x2e
 8007fae:	18bb      	adds	r3, r7, r2
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d102      	bne.n	8007fbc <Stspin220_StepClockHandler+0x280>
 8007fb6:	18bb      	adds	r3, r7, r2
 8007fb8:	2201      	movs	r2, #1
 8007fba:	801a      	strh	r2, [r3, #0]
            devicePrm.accu += acc / speed;
 8007fbc:	4b28      	ldr	r3, [pc, #160]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007fbe:	681c      	ldr	r4, [r3, #0]
 8007fc0:	232e      	movs	r3, #46	; 0x2e
 8007fc2:	18fb      	adds	r3, r7, r3
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	0019      	movs	r1, r3
 8007fc8:	68b8      	ldr	r0, [r7, #8]
 8007fca:	f7f8 f8b9 	bl	8000140 <__udivsi3>
 8007fce:	0003      	movs	r3, r0
 8007fd0:	18e2      	adds	r2, r4, r3
 8007fd2:	4b23      	ldr	r3, [pc, #140]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007fd4:	601a      	str	r2, [r3, #0]
            while (devicePrm.accu>=(0X10000L))
 8007fd6:	e00f      	b.n	8007ff8 <Stspin220_StepClockHandler+0x2bc>
              devicePrm.accu -= (0X10000L);
 8007fd8:	4b21      	ldr	r3, [pc, #132]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a25      	ldr	r2, [pc, #148]	; (8008074 <Stspin220_StepClockHandler+0x338>)
 8007fde:	189a      	adds	r2, r3, r2
 8007fe0:	4b1f      	ldr	r3, [pc, #124]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007fe2:	601a      	str	r2, [r3, #0]
              speed +=1;
 8007fe4:	222e      	movs	r2, #46	; 0x2e
 8007fe6:	18bb      	adds	r3, r7, r2
 8007fe8:	18ba      	adds	r2, r7, r2
 8007fea:	8812      	ldrh	r2, [r2, #0]
 8007fec:	3201      	adds	r2, #1
 8007fee:	801a      	strh	r2, [r3, #0]
              speedUpdated = TRUE;
 8007ff0:	232d      	movs	r3, #45	; 0x2d
 8007ff2:	18fb      	adds	r3, r7, r3
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	701a      	strb	r2, [r3, #0]
            while (devicePrm.accu>=(0X10000L))
 8007ff8:	4b19      	ldr	r3, [pc, #100]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	2380      	movs	r3, #128	; 0x80
 8007ffe:	025b      	lsls	r3, r3, #9
 8008000:	429a      	cmp	r2, r3
 8008002:	d2e9      	bcs.n	8007fd8 <Stspin220_StepClockHandler+0x29c>
            if (speedUpdated)
 8008004:	232d      	movs	r3, #45	; 0x2d
 8008006:	18fb      	adds	r3, r7, r3
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d018      	beq.n	8008040 <Stspin220_StepClockHandler+0x304>
              if (speed>(devicePrm.maxSpeed>>stepModeShift))
 800800e:	202e      	movs	r0, #46	; 0x2e
 8008010:	183b      	adds	r3, r7, r0
 8008012:	881a      	ldrh	r2, [r3, #0]
 8008014:	4b12      	ldr	r3, [pc, #72]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8008016:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008018:	b29b      	uxth	r3, r3
 800801a:	0019      	movs	r1, r3
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	4119      	asrs	r1, r3
 8008020:	000b      	movs	r3, r1
 8008022:	429a      	cmp	r2, r3
 8008024:	dd07      	ble.n	8008036 <Stspin220_StepClockHandler+0x2fa>
                speed = devicePrm.maxSpeed>>stepModeShift;
 8008026:	4b0e      	ldr	r3, [pc, #56]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8008028:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800802a:	b29b      	uxth	r3, r3
 800802c:	001a      	movs	r2, r3
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	411a      	asrs	r2, r3
 8008032:	183b      	adds	r3, r7, r0
 8008034:	801a      	strh	r2, [r3, #0]
              devicePrm.speed = speed;
 8008036:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8008038:	222e      	movs	r2, #46	; 0x2e
 800803a:	18ba      	adds	r2, r7, r2
 800803c:	8812      	ldrh	r2, [r2, #0]
 800803e:	871a      	strh	r2, [r3, #56]	; 0x38
            if (devicePrm.updateTorque!=FALSE)
 8008040:	4b07      	ldr	r3, [pc, #28]	; (8008060 <Stspin220_StepClockHandler+0x324>)
 8008042:	2225      	movs	r2, #37	; 0x25
 8008044:	5c9b      	ldrb	r3, [r3, r2]
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	d100      	bne.n	800804e <Stspin220_StepClockHandler+0x312>
 800804c:	e18b      	b.n	8008366 <Stspin220_StepClockHandler+0x62a>
              Stspin220_ApplyTorque(deviceId, ACC_TORQUE);              
 800804e:	1dfb      	adds	r3, r7, #7
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2100      	movs	r1, #0
 8008054:	0018      	movs	r0, r3
 8008056:	f7ff fb75 	bl	8007744 <Stspin220_ApplyTorque>
          break;
 800805a:	e184      	b.n	8008366 <Stspin220_StepClockHandler+0x62a>
 800805c:	e183      	b.n	8008366 <Stspin220_StepClockHandler+0x62a>
 800805e:	46c0      	nop			; (mov r8, r8)
 8008060:	20003664 	.word	0x20003664
 8008064:	2000045f 	.word	0x2000045f
 8008068:	0000a00e 	.word	0x0000a00e
 800806c:	00002710 	.word	0x00002710
 8008070:	fffffc00 	.word	0xfffffc00
 8008074:	ffff0000 	.word	0xffff0000
        uint16_t maxSpeed = devicePrm.maxSpeed>>stepModeShift;
 8008078:	4bcc      	ldr	r3, [pc, #816]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 800807a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800807c:	b29b      	uxth	r3, r3
 800807e:	001a      	movs	r2, r3
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	411a      	asrs	r2, r3
 8008084:	2320      	movs	r3, #32
 8008086:	18fb      	adds	r3, r7, r3
 8008088:	801a      	strh	r2, [r3, #0]
        uint32_t relativePos = devicePrm.relativePos;
 800808a:	4bc8      	ldr	r3, [pc, #800]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	61fb      	str	r3, [r7, #28]
        if (devicePrm.updateTorque!=FALSE)
 8008090:	4bc6      	ldr	r3, [pc, #792]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008092:	2225      	movs	r2, #37	; 0x25
 8008094:	5c9b      	ldrb	r3, [r3, r2]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d005      	beq.n	80080a8 <Stspin220_StepClockHandler+0x36c>
          Stspin220_ApplyTorque(deviceId, RUN_TORQUE);
 800809c:	1dfb      	adds	r3, r7, #7
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2102      	movs	r1, #2
 80080a2:	0018      	movs	r0, r3
 80080a4:	f7ff fb4e 	bl	8007744 <Stspin220_ApplyTorque>
        if  (((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)||\
 80080a8:	4bc0      	ldr	r3, [pc, #768]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80080aa:	223a      	movs	r2, #58	; 0x3a
 80080ac:	5c9b      	ldrb	r3, [r3, r2]
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	001a      	movs	r2, r3
 80080b2:	230c      	movs	r3, #12
 80080b4:	4013      	ands	r3, r2
 80080b6:	d118      	bne.n	80080ea <Stspin220_StepClockHandler+0x3ae>
             ((devicePrm.commandExecuted==MOVE_CMD)&&\
 80080b8:	4bbc      	ldr	r3, [pc, #752]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80080ba:	223a      	movs	r2, #58	; 0x3a
 80080bc:	5c9b      	ldrb	r3, [r3, r2]
 80080be:	b2db      	uxtb	r3, r3
        if  (((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)||\
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d104      	bne.n	80080ce <Stspin220_StepClockHandler+0x392>
              (relativePos>=(devicePrm.startDecPos)))||\
 80080c4:	4bb9      	ldr	r3, [pc, #740]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80080c6:	699b      	ldr	r3, [r3, #24]
             ((devicePrm.commandExecuted==MOVE_CMD)&&\
 80080c8:	69fa      	ldr	r2, [r7, #28]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d20d      	bcs.n	80080ea <Stspin220_StepClockHandler+0x3ae>
             ((devicePrm.commandExecuted==RUN_CMD)&&\
 80080ce:	4bb7      	ldr	r3, [pc, #732]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80080d0:	223a      	movs	r2, #58	; 0x3a
 80080d2:	5c9b      	ldrb	r3, [r3, r2]
 80080d4:	b2db      	uxtb	r3, r3
              (relativePos>=(devicePrm.startDecPos)))||\
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d115      	bne.n	8008106 <Stspin220_StepClockHandler+0x3ca>
              (devicePrm.speed>maxSpeed)))
 80080da:	4bb4      	ldr	r3, [pc, #720]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80080dc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80080de:	b29b      	uxth	r3, r3
             ((devicePrm.commandExecuted==RUN_CMD)&&\
 80080e0:	2220      	movs	r2, #32
 80080e2:	18ba      	adds	r2, r7, r2
 80080e4:	8812      	ldrh	r2, [r2, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d20d      	bcs.n	8008106 <Stspin220_StepClockHandler+0x3ca>
          devicePrm.motionState = DECELERATING;
 80080ea:	4bb0      	ldr	r3, [pc, #704]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80080ec:	223c      	movs	r2, #60	; 0x3c
 80080ee:	2102      	movs	r1, #2
 80080f0:	5499      	strb	r1, [r3, r2]
          devicePrm.accu = 0;
 80080f2:	4bae      	ldr	r3, [pc, #696]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
          Stspin220_ApplyTorque(deviceId, DEC_TORQUE);
 80080f8:	1dfb      	adds	r3, r7, #7
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2101      	movs	r1, #1
 80080fe:	0018      	movs	r0, r3
 8008100:	f7ff fb20 	bl	8007744 <Stspin220_ApplyTorque>
        break;
 8008104:	e131      	b.n	800836a <Stspin220_StepClockHandler+0x62e>
        else if ((devicePrm.commandExecuted==RUN_CMD)&&(devicePrm.speed<maxSpeed))
 8008106:	4ba9      	ldr	r3, [pc, #676]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008108:	223a      	movs	r2, #58	; 0x3a
 800810a:	5c9b      	ldrb	r3, [r3, r2]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b01      	cmp	r3, #1
 8008110:	d000      	beq.n	8008114 <Stspin220_StepClockHandler+0x3d8>
 8008112:	e12a      	b.n	800836a <Stspin220_StepClockHandler+0x62e>
 8008114:	4ba5      	ldr	r3, [pc, #660]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008116:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008118:	b29b      	uxth	r3, r3
 800811a:	2220      	movs	r2, #32
 800811c:	18ba      	adds	r2, r7, r2
 800811e:	8812      	ldrh	r2, [r2, #0]
 8008120:	429a      	cmp	r2, r3
 8008122:	d800      	bhi.n	8008126 <Stspin220_StepClockHandler+0x3ea>
 8008124:	e121      	b.n	800836a <Stspin220_StepClockHandler+0x62e>
          devicePrm.motionState = ACCELERATING;
 8008126:	4ba1      	ldr	r3, [pc, #644]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008128:	223c      	movs	r2, #60	; 0x3c
 800812a:	2100      	movs	r1, #0
 800812c:	5499      	strb	r1, [r3, r2]
          devicePrm.accu = 0;
 800812e:	4b9f      	ldr	r3, [pc, #636]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008130:	2200      	movs	r2, #0
 8008132:	601a      	str	r2, [r3, #0]
          Stspin220_ApplyTorque(deviceId, ACC_TORQUE);
 8008134:	1dfb      	adds	r3, r7, #7
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2100      	movs	r1, #0
 800813a:	0018      	movs	r0, r3
 800813c:	f7ff fb02 	bl	8007744 <Stspin220_ApplyTorque>
        break;
 8008140:	e113      	b.n	800836a <Stspin220_StepClockHandler+0x62e>
        uint32_t relativePos = devicePrm.relativePos;
 8008142:	4b9a      	ldr	r3, [pc, #616]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	61bb      	str	r3, [r7, #24]
        uint16_t speed = devicePrm.speed;
 8008148:	212a      	movs	r1, #42	; 0x2a
 800814a:	187b      	adds	r3, r7, r1
 800814c:	4a97      	ldr	r2, [pc, #604]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 800814e:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8008150:	801a      	strh	r2, [r3, #0]
        uint32_t dec = ((uint32_t)devicePrm.deceleration << 16)>>stepModeShift;
 8008152:	4b96      	ldr	r3, [pc, #600]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008154:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008156:	b29b      	uxth	r3, r3
 8008158:	041a      	lsls	r2, r3, #16
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	40da      	lsrs	r2, r3
 800815e:	0013      	movs	r3, r2
 8008160:	617b      	str	r3, [r7, #20]
        if ((((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)&&\
 8008162:	4b92      	ldr	r3, [pc, #584]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008164:	223a      	movs	r2, #58	; 0x3a
 8008166:	5c9b      	ldrb	r3, [r3, r2]
 8008168:	b2db      	uxtb	r3, r3
 800816a:	001a      	movs	r2, r3
 800816c:	230c      	movs	r3, #12
 800816e:	4013      	ands	r3, r2
 8008170:	d00a      	beq.n	8008188 <Stspin220_StepClockHandler+0x44c>
             (speed<=(devicePrm.minSpeed>>stepModeShift)))||\
 8008172:	187b      	adds	r3, r7, r1
 8008174:	881a      	ldrh	r2, [r3, #0]
 8008176:	4b8d      	ldr	r3, [pc, #564]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800817a:	b29b      	uxth	r3, r3
 800817c:	0019      	movs	r1, r3
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	4119      	asrs	r1, r3
 8008182:	000b      	movs	r3, r1
        if ((((devicePrm.commandExecuted&(STSPIN220_SOFT_STOP_BIT_MASK|STSPIN220_DIR_CHANGE_BIT_MASK))!=0)&&\
 8008184:	429a      	cmp	r2, r3
 8008186:	dd0a      	ble.n	800819e <Stspin220_StepClockHandler+0x462>
            ((devicePrm.commandExecuted==MOVE_CMD)&&(relativePos>=devicePrm.stepsToTake)))
 8008188:	4b88      	ldr	r3, [pc, #544]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 800818a:	223a      	movs	r2, #58	; 0x3a
 800818c:	5c9b      	ldrb	r3, [r3, r2]
 800818e:	b2db      	uxtb	r3, r3
             (speed<=(devicePrm.minSpeed>>stepModeShift)))||\
 8008190:	2b02      	cmp	r3, #2
 8008192:	d15e      	bne.n	8008252 <Stspin220_StepClockHandler+0x516>
            ((devicePrm.commandExecuted==MOVE_CMD)&&(relativePos>=devicePrm.stepsToTake)))
 8008194:	4b85      	ldr	r3, [pc, #532]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	429a      	cmp	r2, r3
 800819c:	d359      	bcc.n	8008252 <Stspin220_StepClockHandler+0x516>
          if ((devicePrm.commandExecuted&STSPIN220_DIR_CHANGE_BIT_MASK)!=0)
 800819e:	4b83      	ldr	r3, [pc, #524]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80081a0:	223a      	movs	r2, #58	; 0x3a
 80081a2:	5c9b      	ldrb	r3, [r3, r2]
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	001a      	movs	r2, r3
 80081a8:	2308      	movs	r3, #8
 80081aa:	4013      	ands	r3, r2
 80081ac:	d035      	beq.n	800821a <Stspin220_StepClockHandler+0x4de>
            devicePrm.commandExecuted&=~STSPIN220_DIR_CHANGE_BIT_MASK;
 80081ae:	4b7f      	ldr	r3, [pc, #508]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80081b0:	223a      	movs	r2, #58	; 0x3a
 80081b2:	5c9b      	ldrb	r3, [r3, r2]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2208      	movs	r2, #8
 80081b8:	4393      	bics	r3, r2
 80081ba:	b2d9      	uxtb	r1, r3
 80081bc:	4b7b      	ldr	r3, [pc, #492]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80081be:	223a      	movs	r2, #58	; 0x3a
 80081c0:	5499      	strb	r1, [r3, r2]
            if (devicePrm.direction==BACKWARD) devicePrm.direction=FORWARD;
 80081c2:	4b7a      	ldr	r3, [pc, #488]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80081c4:	223b      	movs	r2, #59	; 0x3b
 80081c6:	5c9b      	ldrb	r3, [r3, r2]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d104      	bne.n	80081d8 <Stspin220_StepClockHandler+0x49c>
 80081ce:	4b77      	ldr	r3, [pc, #476]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80081d0:	223b      	movs	r2, #59	; 0x3b
 80081d2:	2101      	movs	r1, #1
 80081d4:	5499      	strb	r1, [r3, r2]
 80081d6:	e003      	b.n	80081e0 <Stspin220_StepClockHandler+0x4a4>
            else devicePrm.direction=BACKWARD;
 80081d8:	4b74      	ldr	r3, [pc, #464]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80081da:	223b      	movs	r2, #59	; 0x3b
 80081dc:	2100      	movs	r1, #0
 80081de:	5499      	strb	r1, [r3, r2]
            Stspin220_Board_SetDirectionGpio(devicePrm.direction);
 80081e0:	4b72      	ldr	r3, [pc, #456]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80081e2:	223b      	movs	r2, #59	; 0x3b
 80081e4:	5c9b      	ldrb	r3, [r3, r2]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	0018      	movs	r0, r3
 80081ea:	f006 fe0b 	bl	800ee04 <Stspin220_Board_SetDirectionGpio>
            if ((devicePrm.commandExecuted&STSPIN220_SOFT_STOP_BIT_MASK)==0)
 80081ee:	4b6f      	ldr	r3, [pc, #444]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80081f0:	223a      	movs	r2, #58	; 0x3a
 80081f2:	5c9b      	ldrb	r3, [r3, r2]
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	001a      	movs	r2, r3
 80081f8:	2304      	movs	r3, #4
 80081fa:	4013      	ands	r3, r2
 80081fc:	d10d      	bne.n	800821a <Stspin220_StepClockHandler+0x4de>
              devicePrm.motionState = ACCELERATING;
 80081fe:	4b6b      	ldr	r3, [pc, #428]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008200:	223c      	movs	r2, #60	; 0x3c
 8008202:	2100      	movs	r1, #0
 8008204:	5499      	strb	r1, [r3, r2]
              devicePrm.accu = 0;
 8008206:	4b69      	ldr	r3, [pc, #420]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]
              Stspin220_ApplyTorque(deviceId, ACC_TORQUE);
 800820c:	1dfb      	adds	r3, r7, #7
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2100      	movs	r1, #0
 8008212:	0018      	movs	r0, r3
 8008214:	f7ff fa96 	bl	8007744 <Stspin220_ApplyTorque>
              break;
 8008218:	e0aa      	b.n	8008370 <Stspin220_StepClockHandler+0x634>
          if (devicePrm.stopMode==HOLD_MODE)
 800821a:	4b64      	ldr	r3, [pc, #400]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 800821c:	223f      	movs	r2, #63	; 0x3f
 800821e:	5c9b      	ldrb	r3, [r3, r2]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d105      	bne.n	8008230 <Stspin220_StepClockHandler+0x4f4>
            Stspin220_HardStop(deviceId);
 8008224:	1dfb      	adds	r3, r7, #7
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	0018      	movs	r0, r3
 800822a:	f7fe fdfb 	bl	8006e24 <Stspin220_HardStop>
          if (devicePrm.stopMode==HOLD_MODE)
 800822e:	e097      	b.n	8008360 <Stspin220_StepClockHandler+0x624>
          else if (devicePrm.stopMode==STANDBY_MODE)
 8008230:	4b5e      	ldr	r3, [pc, #376]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008232:	223f      	movs	r2, #63	; 0x3f
 8008234:	5c9b      	ldrb	r3, [r3, r2]
 8008236:	2b02      	cmp	r3, #2
 8008238:	d105      	bne.n	8008246 <Stspin220_StepClockHandler+0x50a>
            Stspin220_PutDeviceInStandby(deviceId);
 800823a:	1dfb      	adds	r3, r7, #7
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	0018      	movs	r0, r3
 8008240:	f7fe fe96 	bl	8006f70 <Stspin220_PutDeviceInStandby>
          if (devicePrm.stopMode==HOLD_MODE)
 8008244:	e08c      	b.n	8008360 <Stspin220_StepClockHandler+0x624>
            Stspin220_HardHiZ(deviceId);
 8008246:	1dfb      	adds	r3, r7, #7
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	0018      	movs	r0, r3
 800824c:	f7fe fda6 	bl	8006d9c <Stspin220_HardHiZ>
          if (devicePrm.stopMode==HOLD_MODE)
 8008250:	e086      	b.n	8008360 <Stspin220_StepClockHandler+0x624>
        else if ((devicePrm.commandExecuted==RUN_CMD)&&
 8008252:	4b56      	ldr	r3, [pc, #344]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008254:	223a      	movs	r2, #58	; 0x3a
 8008256:	5c9b      	ldrb	r3, [r3, r2]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b01      	cmp	r3, #1
 800825c:	d116      	bne.n	800828c <Stspin220_StepClockHandler+0x550>
                 (speed<=(devicePrm.maxSpeed>>stepModeShift)))
 800825e:	232a      	movs	r3, #42	; 0x2a
 8008260:	18fb      	adds	r3, r7, r3
 8008262:	881a      	ldrh	r2, [r3, #0]
 8008264:	4b51      	ldr	r3, [pc, #324]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008266:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008268:	b29b      	uxth	r3, r3
 800826a:	0019      	movs	r1, r3
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	4119      	asrs	r1, r3
 8008270:	000b      	movs	r3, r1
        else if ((devicePrm.commandExecuted==RUN_CMD)&&
 8008272:	429a      	cmp	r2, r3
 8008274:	dc0a      	bgt.n	800828c <Stspin220_StepClockHandler+0x550>
          devicePrm.motionState = STEADY;
 8008276:	4b4d      	ldr	r3, [pc, #308]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008278:	223c      	movs	r2, #60	; 0x3c
 800827a:	2103      	movs	r1, #3
 800827c:	5499      	strb	r1, [r3, r2]
          Stspin220_ApplyTorque(deviceId, RUN_TORQUE);
 800827e:	1dfb      	adds	r3, r7, #7
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2102      	movs	r1, #2
 8008284:	0018      	movs	r0, r3
 8008286:	f7ff fa5d 	bl	8007744 <Stspin220_ApplyTorque>
 800828a:	e069      	b.n	8008360 <Stspin220_StepClockHandler+0x624>
          if (speed>(devicePrm.minSpeed>>stepModeShift))
 800828c:	202a      	movs	r0, #42	; 0x2a
 800828e:	183b      	adds	r3, r7, r0
 8008290:	881a      	ldrh	r2, [r3, #0]
 8008292:	4b46      	ldr	r3, [pc, #280]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008296:	b29b      	uxth	r3, r3
 8008298:	0019      	movs	r1, r3
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	4119      	asrs	r1, r3
 800829e:	000b      	movs	r3, r1
 80082a0:	429a      	cmp	r2, r3
 80082a2:	dd64      	ble.n	800836e <Stspin220_StepClockHandler+0x632>
            bool speedUpdated = FALSE;
 80082a4:	2329      	movs	r3, #41	; 0x29
 80082a6:	18fb      	adds	r3, r7, r3
 80082a8:	2200      	movs	r2, #0
 80082aa:	701a      	strb	r2, [r3, #0]
            if (speed==0) speed =1;
 80082ac:	183b      	adds	r3, r7, r0
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d102      	bne.n	80082ba <Stspin220_StepClockHandler+0x57e>
 80082b4:	183b      	adds	r3, r7, r0
 80082b6:	2201      	movs	r2, #1
 80082b8:	801a      	strh	r2, [r3, #0]
            devicePrm.accu += dec / speed;
 80082ba:	4b3c      	ldr	r3, [pc, #240]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80082bc:	681c      	ldr	r4, [r3, #0]
 80082be:	232a      	movs	r3, #42	; 0x2a
 80082c0:	18fb      	adds	r3, r7, r3
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	0019      	movs	r1, r3
 80082c6:	6978      	ldr	r0, [r7, #20]
 80082c8:	f7f7 ff3a 	bl	8000140 <__udivsi3>
 80082cc:	0003      	movs	r3, r0
 80082ce:	18e2      	adds	r2, r4, r3
 80082d0:	4b36      	ldr	r3, [pc, #216]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80082d2:	601a      	str	r2, [r3, #0]
            while (devicePrm.accu>=(0X10000L))
 80082d4:	e013      	b.n	80082fe <Stspin220_StepClockHandler+0x5c2>
              devicePrm.accu -= (0X10000L);
 80082d6:	4b35      	ldr	r3, [pc, #212]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a35      	ldr	r2, [pc, #212]	; (80083b0 <Stspin220_StepClockHandler+0x674>)
 80082dc:	189a      	adds	r2, r3, r2
 80082de:	4b33      	ldr	r3, [pc, #204]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 80082e0:	601a      	str	r2, [r3, #0]
              if (speed>1)
 80082e2:	222a      	movs	r2, #42	; 0x2a
 80082e4:	18bb      	adds	r3, r7, r2
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d904      	bls.n	80082f6 <Stspin220_StepClockHandler+0x5ba>
                speed -=1;
 80082ec:	18bb      	adds	r3, r7, r2
 80082ee:	18ba      	adds	r2, r7, r2
 80082f0:	8812      	ldrh	r2, [r2, #0]
 80082f2:	3a01      	subs	r2, #1
 80082f4:	801a      	strh	r2, [r3, #0]
              speedUpdated = TRUE;
 80082f6:	2329      	movs	r3, #41	; 0x29
 80082f8:	18fb      	adds	r3, r7, r3
 80082fa:	2201      	movs	r2, #1
 80082fc:	701a      	strb	r2, [r3, #0]
            while (devicePrm.accu>=(0X10000L))
 80082fe:	4b2b      	ldr	r3, [pc, #172]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	2380      	movs	r3, #128	; 0x80
 8008304:	025b      	lsls	r3, r3, #9
 8008306:	429a      	cmp	r2, r3
 8008308:	d2e5      	bcs.n	80082d6 <Stspin220_StepClockHandler+0x59a>
            if (speedUpdated)
 800830a:	2329      	movs	r3, #41	; 0x29
 800830c:	18fb      	adds	r3, r7, r3
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d018      	beq.n	8008346 <Stspin220_StepClockHandler+0x60a>
              if (speed<(devicePrm.minSpeed>>stepModeShift))
 8008314:	202a      	movs	r0, #42	; 0x2a
 8008316:	183b      	adds	r3, r7, r0
 8008318:	881a      	ldrh	r2, [r3, #0]
 800831a:	4b24      	ldr	r3, [pc, #144]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 800831c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800831e:	b29b      	uxth	r3, r3
 8008320:	0019      	movs	r1, r3
 8008322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008324:	4119      	asrs	r1, r3
 8008326:	000b      	movs	r3, r1
 8008328:	429a      	cmp	r2, r3
 800832a:	da07      	bge.n	800833c <Stspin220_StepClockHandler+0x600>
                speed = devicePrm.minSpeed>>stepModeShift;
 800832c:	4b1f      	ldr	r3, [pc, #124]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 800832e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008330:	b29b      	uxth	r3, r3
 8008332:	001a      	movs	r2, r3
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	411a      	asrs	r2, r3
 8008338:	183b      	adds	r3, r7, r0
 800833a:	801a      	strh	r2, [r3, #0]
              devicePrm.speed = speed;
 800833c:	4b1b      	ldr	r3, [pc, #108]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 800833e:	222a      	movs	r2, #42	; 0x2a
 8008340:	18ba      	adds	r2, r7, r2
 8008342:	8812      	ldrh	r2, [r2, #0]
 8008344:	871a      	strh	r2, [r3, #56]	; 0x38
            if (devicePrm.updateTorque!=FALSE)
 8008346:	4b19      	ldr	r3, [pc, #100]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008348:	2225      	movs	r2, #37	; 0x25
 800834a:	5c9b      	ldrb	r3, [r3, r2]
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00d      	beq.n	800836e <Stspin220_StepClockHandler+0x632>
              Stspin220_ApplyTorque(deviceId, DEC_TORQUE);
 8008352:	1dfb      	adds	r3, r7, #7
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	2101      	movs	r1, #1
 8008358:	0018      	movs	r0, r3
 800835a:	f7ff f9f3 	bl	8007744 <Stspin220_ApplyTorque>
        break;
 800835e:	e006      	b.n	800836e <Stspin220_StepClockHandler+0x632>
 8008360:	e005      	b.n	800836e <Stspin220_StepClockHandler+0x632>
        break;
 8008362:	46c0      	nop			; (mov r8, r8)
 8008364:	e004      	b.n	8008370 <Stspin220_StepClockHandler+0x634>
          break;
 8008366:	46c0      	nop			; (mov r8, r8)
 8008368:	e002      	b.n	8008370 <Stspin220_StepClockHandler+0x634>
        break;
 800836a:	46c0      	nop			; (mov r8, r8)
 800836c:	e000      	b.n	8008370 <Stspin220_StepClockHandler+0x634>
        break;
 800836e:	46c0      	nop			; (mov r8, r8)
      }
    }
  }
  if ((devicePrm.motionState & INACTIVE) != INACTIVE)
 8008370:	4b0e      	ldr	r3, [pc, #56]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008372:	223c      	movs	r2, #60	; 0x3c
 8008374:	5c9b      	ldrb	r3, [r3, r2]
 8008376:	b2db      	uxtb	r3, r3
 8008378:	001a      	movs	r2, r3
 800837a:	2308      	movs	r3, #8
 800837c:	4013      	ands	r3, r2
 800837e:	2b08      	cmp	r3, #8
 8008380:	d009      	beq.n	8008396 <Stspin220_StepClockHandler+0x65a>
  {
    Stspin220_ApplySpeed(deviceId, devicePrm.speed);
 8008382:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <Stspin220_StepClockHandler+0x670>)
 8008384:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008386:	b29a      	uxth	r2, r3
 8008388:	1dfb      	adds	r3, r7, #7
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	0011      	movs	r1, r2
 800838e:	0018      	movs	r0, r3
 8008390:	f7ff f8f2 	bl	8007578 <Stspin220_ApplySpeed>
 8008394:	e013      	b.n	80083be <Stspin220_StepClockHandler+0x682>
  }
  else
  {
    if (Stspin220_Board_TimStckStop(&toggleOdd) == 0)
 8008396:	4b07      	ldr	r3, [pc, #28]	; (80083b4 <Stspin220_StepClockHandler+0x678>)
 8008398:	0018      	movs	r0, r3
 800839a:	f006 fceb 	bl	800ed74 <Stspin220_Board_TimStckStop>
 800839e:	1e03      	subs	r3, r0, #0
 80083a0:	d10d      	bne.n	80083be <Stspin220_StepClockHandler+0x682>
    {
      Stspin220_ErrorHandler(STSPIN220_ERROR_STEP_CLOCK);
 80083a2:	4b05      	ldr	r3, [pc, #20]	; (80083b8 <Stspin220_StepClockHandler+0x67c>)
 80083a4:	0018      	movs	r0, r3
 80083a6:	f7fe fa51 	bl	800684c <Stspin220_ErrorHandler>
 80083aa:	e008      	b.n	80083be <Stspin220_StepClockHandler+0x682>
 80083ac:	20003664 	.word	0x20003664
 80083b0:	ffff0000 	.word	0xffff0000
 80083b4:	2000045f 	.word	0x2000045f
 80083b8:	0000a00e 	.word	0x0000a00e
        return;
 80083bc:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80083be:	46bd      	mov	sp, r7
 80083c0:	b00d      	add	sp, #52	; 0x34
 80083c2:	bd90      	pop	{r4, r7, pc}

080083c4 <CheckValidRectRoi>:
 *   0------------------------- >15
 *   check Rectangle definition conforms to the (0,15,15) coordinate system
 *   with a minimum of 4x4 size
 */
static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	1d3b      	adds	r3, r7, #4
 80083cc:	6018      	str	r0, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80083ce:	230f      	movs	r3, #15
 80083d0:	18fb      	adds	r3, r7, r3
 80083d2:	2200      	movs	r2, #0
 80083d4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Negative check are not necessary because value is unsigned */
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80083d6:	1d3b      	adds	r3, r7, #4
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b0f      	cmp	r3, #15
 80083dc:	d80b      	bhi.n	80083f6 <CheckValidRectRoi+0x32>
 80083de:	1d3b      	adds	r3, r7, #4
 80083e0:	785b      	ldrb	r3, [r3, #1]
 80083e2:	2b0f      	cmp	r3, #15
 80083e4:	d807      	bhi.n	80083f6 <CheckValidRectRoi+0x32>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 80083e6:	1d3b      	adds	r3, r7, #4
 80083e8:	789b      	ldrb	r3, [r3, #2]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80083ea:	2b0f      	cmp	r3, #15
 80083ec:	d803      	bhi.n	80083f6 <CheckValidRectRoi+0x32>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 80083ee:	1d3b      	adds	r3, r7, #4
 80083f0:	78db      	ldrb	r3, [r3, #3]
 80083f2:	2b0f      	cmp	r3, #15
 80083f4:	d903      	bls.n	80083fe <CheckValidRectRoi+0x3a>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80083f6:	230f      	movs	r3, #15
 80083f8:	18fb      	adds	r3, r7, r3
 80083fa:	22fc      	movs	r2, #252	; 0xfc
 80083fc:	701a      	strb	r2, [r3, #0]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 80083fe:	1d3b      	adds	r3, r7, #4
 8008400:	781a      	ldrb	r2, [r3, #0]
 8008402:	1d3b      	adds	r3, r7, #4
 8008404:	789b      	ldrb	r3, [r3, #2]
 8008406:	429a      	cmp	r2, r3
 8008408:	d805      	bhi.n	8008416 <CheckValidRectRoi+0x52>
 800840a:	1d3b      	adds	r3, r7, #4
 800840c:	785a      	ldrb	r2, [r3, #1]
 800840e:	1d3b      	adds	r3, r7, #4
 8008410:	78db      	ldrb	r3, [r3, #3]
 8008412:	429a      	cmp	r2, r3
 8008414:	d203      	bcs.n	800841e <CheckValidRectRoi+0x5a>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008416:	230f      	movs	r3, #15
 8008418:	18fb      	adds	r3, r7, r3
 800841a:	22fc      	movs	r2, #252	; 0xfc
 800841c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800841e:	230f      	movs	r3, #15
 8008420:	18fb      	adds	r3, r7, r3
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	b25b      	sxtb	r3, r3
}
 8008426:	0018      	movs	r0, r3
 8008428:	46bd      	mov	sp, r7
 800842a:	b004      	add	sp, #16
 800842c:	bd80      	pop	{r7, pc}

0800842e <VL53L1_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 800842e:	b5b0      	push	{r4, r5, r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	000a      	movs	r2, r1
 8008438:	1cfb      	adds	r3, r7, #3
 800843a:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800843c:	210f      	movs	r1, #15
 800843e:	187b      	adds	r3, r7, r1
 8008440:	2200      	movs	r2, #0
 8008442:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8008444:	1cfb      	adds	r3, r7, #3
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	085b      	lsrs	r3, r3, #1
 800844a:	b2da      	uxtb	r2, r3
 800844c:	000d      	movs	r5, r1
 800844e:	187c      	adds	r4, r7, r1
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2101      	movs	r1, #1
 8008454:	0018      	movs	r0, r3
 8008456:	f006 f8df 	bl	800e618 <VL53L1_WrByte>
 800845a:	0003      	movs	r3, r0
 800845c:	7023      	strb	r3, [r4, #0]
			DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 800845e:	197b      	adds	r3, r7, r5
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	b25b      	sxtb	r3, r3
}
 8008464:	0018      	movs	r0, r3
 8008466:	46bd      	mov	sp, r7
 8008468:	b004      	add	sp, #16
 800846a:	bdb0      	pop	{r4, r5, r7, pc}

0800846c <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800846c:	b5b0      	push	{r4, r5, r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008474:	210f      	movs	r1, #15
 8008476:	187b      	adds	r3, r7, r1
 8008478:	2200      	movs	r2, #0
 800847a:	701a      	strb	r2, [r3, #0]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800847c:	000a      	movs	r2, r1
 800847e:	18bb      	adds	r3, r7, r2
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	b25b      	sxtb	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d107      	bne.n	8008498 <VL53L1_DataInit+0x2c>
		Status = VL53L1_data_init(Dev, 1);
 8008488:	18bc      	adds	r4, r7, r2
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2101      	movs	r1, #1
 800848e:	0018      	movs	r0, r3
 8008490:	f001 fac4 	bl	8009a1c <VL53L1_data_init>
 8008494:	0003      	movs	r3, r0
 8008496:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L1_ERROR_NONE) {
 8008498:	230f      	movs	r3, #15
 800849a:	18fb      	adds	r3, r7, r3
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b25b      	sxtb	r3, r3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d109      	bne.n	80084b8 <VL53L1_DataInit+0x4c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	23de      	movs	r3, #222	; 0xde
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	2101      	movs	r1, #1
 80084ac:	54d1      	strb	r1, [r2, r3]
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	23df      	movs	r3, #223	; 0xdf
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	2108      	movs	r1, #8
 80084b6:	54d1      	strb	r1, [r2, r3]
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80084b8:	230e      	movs	r3, #14
 80084ba:	18fb      	adds	r3, r7, r3
 80084bc:	2200      	movs	r2, #0
 80084be:	701a      	strb	r2, [r3, #0]
 80084c0:	e01a      	b.n	80084f8 <VL53L1_DataInit+0x8c>
		if (Status == VL53L1_ERROR_NONE)
 80084c2:	250f      	movs	r5, #15
 80084c4:	197b      	adds	r3, r7, r5
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	b25b      	sxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d11a      	bne.n	8008504 <VL53L1_DataInit+0x98>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80084ce:	240e      	movs	r4, #14
 80084d0:	193b      	adds	r3, r7, r4
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	b299      	uxth	r1, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	0018      	movs	r0, r3
 80084dc:	f000 fd0c 	bl	8008ef8 <VL53L1_SetLimitCheckEnable>
 80084e0:	0003      	movs	r3, r0
 80084e2:	0019      	movs	r1, r3
 80084e4:	197b      	adds	r3, r7, r5
 80084e6:	197a      	adds	r2, r7, r5
 80084e8:	7812      	ldrb	r2, [r2, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80084ee:	193b      	adds	r3, r7, r4
 80084f0:	781a      	ldrb	r2, [r3, #0]
 80084f2:	193b      	adds	r3, r7, r4
 80084f4:	3201      	adds	r2, #1
 80084f6:	701a      	strb	r2, [r3, #0]
 80084f8:	230e      	movs	r3, #14
 80084fa:	18fb      	adds	r3, r7, r3
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d9df      	bls.n	80084c2 <VL53L1_DataInit+0x56>
 8008502:	e000      	b.n	8008506 <VL53L1_DataInit+0x9a>
		else
			break;
 8008504:	46c0      	nop			; (mov r8, r8)

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 8008506:	220f      	movs	r2, #15
 8008508:	18bb      	adds	r3, r7, r2
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b25b      	sxtb	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d109      	bne.n	8008526 <VL53L1_DataInit+0xba>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8008512:	18bc      	adds	r4, r7, r2
 8008514:	2390      	movs	r3, #144	; 0x90
 8008516:	035a      	lsls	r2, r3, #13
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2100      	movs	r1, #0
 800851c:	0018      	movs	r0, r3
 800851e:	f000 fd6d 	bl	8008ffc <VL53L1_SetLimitCheckValue>
 8008522:	0003      	movs	r3, r0
 8008524:	7023      	strb	r3, [r4, #0]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 8008526:	220f      	movs	r2, #15
 8008528:	18bb      	adds	r3, r7, r2
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	b25b      	sxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d109      	bne.n	8008546 <VL53L1_DataInit+0xda>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8008532:	18bc      	adds	r4, r7, r2
 8008534:	2380      	movs	r3, #128	; 0x80
 8008536:	01da      	lsls	r2, r3, #7
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2101      	movs	r1, #1
 800853c:	0018      	movs	r0, r3
 800853e:	f000 fd5d 	bl	8008ffc <VL53L1_SetLimitCheckValue>
 8008542:	0003      	movs	r3, r0
 8008544:	7023      	strb	r3, [r4, #0]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008546:	230f      	movs	r3, #15
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	b25b      	sxtb	r3, r3
}
 800854e:	0018      	movs	r0, r3
 8008550:	46bd      	mov	sp, r7
 8008552:	b004      	add	sp, #16
 8008554:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008558 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8008558:	b5b0      	push	{r4, r5, r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008560:	200f      	movs	r0, #15
 8008562:	183b      	adds	r3, r7, r0
 8008564:	2200      	movs	r2, #0
 8008566:	701a      	strb	r2, [r3, #0]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	23de      	movs	r3, #222	; 0xde
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	2103      	movs	r1, #3
 8008570:	54d1      	strb	r1, [r2, r3]

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8008572:	210e      	movs	r1, #14
 8008574:	187b      	adds	r3, r7, r1
 8008576:	2220      	movs	r2, #32
 8008578:	701a      	strb	r2, [r3, #0]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	187a      	adds	r2, r7, r1
 800857e:	7812      	ldrb	r2, [r2, #0]
 8008580:	709a      	strb	r2, [r3, #2]

	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a0d      	ldr	r2, [pc, #52]	; (80085bc <VL53L1_StaticInit+0x64>)
 8008586:	2103      	movs	r1, #3
 8008588:	5499      	strb	r1, [r3, r2]
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a0c      	ldr	r2, [pc, #48]	; (80085c0 <VL53L1_StaticInit+0x68>)
 800858e:	2103      	movs	r1, #3
 8008590:	5499      	strb	r1, [r3, r2]
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a0b      	ldr	r2, [pc, #44]	; (80085c4 <VL53L1_StaticInit+0x6c>)
 8008596:	2103      	movs	r1, #3
 8008598:	5499      	strb	r1, [r3, r2]
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800859a:	0005      	movs	r5, r0
 800859c:	183c      	adds	r4, r7, r0
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2108      	movs	r1, #8
 80085a2:	0018      	movs	r0, r3
 80085a4:	f000 f924 	bl	80087f0 <VL53L1_SetPresetMode>
 80085a8:	0003      	movs	r3, r0
 80085aa:	7023      	strb	r3, [r4, #0]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 80085ac:	197b      	adds	r3, r7, r5
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b25b      	sxtb	r3, r3
}
 80085b2:	0018      	movs	r0, r3
 80085b4:	46bd      	mov	sp, r7
 80085b6:	b004      	add	sp, #16
 80085b8:	bdb0      	pop	{r4, r5, r7, pc}
 80085ba:	46c0      	nop			; (mov r8, r8)
 80085bc:	0000037f 	.word	0x0000037f
 80085c0:	0000037e 	.word	0x0000037e
 80085c4:	0000037d 	.word	0x0000037d

080085c8 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 80085c8:	b5b0      	push	{r4, r5, r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80085d0:	250f      	movs	r5, #15
 80085d2:	197b      	adds	r3, r7, r5
 80085d4:	2200      	movs	r2, #0
 80085d6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 80085d8:	197c      	adds	r4, r7, r5
 80085da:	23fa      	movs	r3, #250	; 0xfa
 80085dc:	005a      	lsls	r2, r3, #1
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	0011      	movs	r1, r2
 80085e2:	0018      	movs	r0, r3
 80085e4:	f005 fed1 	bl	800e38a <VL53L1_poll_for_boot_completion>
 80085e8:	0003      	movs	r3, r0
 80085ea:	7023      	strb	r3, [r4, #0]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80085ec:	197b      	adds	r3, r7, r5
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	b25b      	sxtb	r3, r3
}
 80085f2:	0018      	movs	r0, r3
 80085f4:	46bd      	mov	sp, r7
 80085f6:	b004      	add	sp, #16
 80085f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080085fc <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	603a      	str	r2, [r7, #0]
 8008604:	1dfb      	adds	r3, r7, #7
 8008606:	1c02      	adds	r2, r0, #0
 8008608:	701a      	strb	r2, [r3, #0]
 800860a:	1dbb      	adds	r3, r7, #6
 800860c:	1c0a      	adds	r2, r1, #0
 800860e:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008610:	2317      	movs	r3, #23
 8008612:	18fb      	adds	r3, r7, r3
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8008618:	2310      	movs	r3, #16
 800861a:	18fb      	adds	r3, r7, r3
 800861c:	4a2d      	ldr	r2, [pc, #180]	; (80086d4 <ComputeDevicePresetMode+0xd8>)
 800861e:	8811      	ldrh	r1, [r2, #0]
 8008620:	8019      	strh	r1, [r3, #0]
 8008622:	7892      	ldrb	r2, [r2, #2]
 8008624:	709a      	strb	r2, [r3, #2]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8008626:	230c      	movs	r3, #12
 8008628:	18fb      	adds	r3, r7, r3
 800862a:	4a2b      	ldr	r2, [pc, #172]	; (80086d8 <ComputeDevicePresetMode+0xdc>)
 800862c:	8811      	ldrh	r1, [r2, #0]
 800862e:	8019      	strh	r1, [r3, #0]
 8008630:	7892      	ldrb	r2, [r2, #2]
 8008632:	709a      	strb	r2, [r3, #2]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008634:	2308      	movs	r3, #8
 8008636:	18fb      	adds	r3, r7, r3
 8008638:	4a28      	ldr	r2, [pc, #160]	; (80086dc <ComputeDevicePresetMode+0xe0>)
 800863a:	8811      	ldrh	r1, [r2, #0]
 800863c:	8019      	strh	r1, [r3, #0]
 800863e:	7892      	ldrb	r2, [r2, #2]
 8008640:	709a      	strb	r2, [r3, #2]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2201      	movs	r2, #1
 8008646:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8008648:	1dbb      	adds	r3, r7, #6
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d002      	beq.n	8008656 <ComputeDevicePresetMode+0x5a>
 8008650:	2b02      	cmp	r3, #2
 8008652:	d005      	beq.n	8008660 <ComputeDevicePresetMode+0x64>
 8008654:	e009      	b.n	800866a <ComputeDevicePresetMode+0x6e>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8008656:	2316      	movs	r3, #22
 8008658:	18fb      	adds	r3, r7, r3
 800865a:	2200      	movs	r2, #0
 800865c:	701a      	strb	r2, [r3, #0]
		break;
 800865e:	e008      	b.n	8008672 <ComputeDevicePresetMode+0x76>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8008660:	2316      	movs	r3, #22
 8008662:	18fb      	adds	r3, r7, r3
 8008664:	2201      	movs	r2, #1
 8008666:	701a      	strb	r2, [r3, #0]
		break;
 8008668:	e003      	b.n	8008672 <ComputeDevicePresetMode+0x76>
	default:
		DistIdx = 2;
 800866a:	2316      	movs	r3, #22
 800866c:	18fb      	adds	r3, r7, r3
 800866e:	2202      	movs	r2, #2
 8008670:	701a      	strb	r2, [r3, #0]
	}

	switch (PresetMode) {
 8008672:	1dfb      	adds	r3, r7, #7
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b08      	cmp	r3, #8
 8008678:	d016      	beq.n	80086a8 <ComputeDevicePresetMode+0xac>
 800867a:	dc1e      	bgt.n	80086ba <ComputeDevicePresetMode+0xbe>
 800867c:	2b03      	cmp	r3, #3
 800867e:	d00a      	beq.n	8008696 <ComputeDevicePresetMode+0x9a>
 8008680:	2b04      	cmp	r3, #4
 8008682:	d11a      	bne.n	80086ba <ComputeDevicePresetMode+0xbe>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8008684:	2316      	movs	r3, #22
 8008686:	18fb      	adds	r3, r7, r3
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2210      	movs	r2, #16
 800868c:	18ba      	adds	r2, r7, r2
 800868e:	5cd2      	ldrb	r2, [r2, r3]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	701a      	strb	r2, [r3, #0]
		break;
 8008694:	e015      	b.n	80086c2 <ComputeDevicePresetMode+0xc6>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8008696:	2316      	movs	r3, #22
 8008698:	18fb      	adds	r3, r7, r3
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	220c      	movs	r2, #12
 800869e:	18ba      	adds	r2, r7, r2
 80086a0:	5cd2      	ldrb	r2, [r2, r3]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	701a      	strb	r2, [r3, #0]
		break;
 80086a6:	e00c      	b.n	80086c2 <ComputeDevicePresetMode+0xc6>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 80086a8:	2316      	movs	r3, #22
 80086aa:	18fb      	adds	r3, r7, r3
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	2208      	movs	r2, #8
 80086b0:	18ba      	adds	r2, r7, r2
 80086b2:	5cd2      	ldrb	r2, [r2, r3]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	701a      	strb	r2, [r3, #0]
		break;
 80086b8:	e003      	b.n	80086c2 <ComputeDevicePresetMode+0xc6>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80086ba:	2317      	movs	r3, #23
 80086bc:	18fb      	adds	r3, r7, r3
 80086be:	22f8      	movs	r2, #248	; 0xf8
 80086c0:	701a      	strb	r2, [r3, #0]
	}

	return Status;
 80086c2:	2317      	movs	r3, #23
 80086c4:	18fb      	adds	r3, r7, r3
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	b25b      	sxtb	r3, r3
}
 80086ca:	0018      	movs	r0, r3
 80086cc:	46bd      	mov	sp, r7
 80086ce:	b006      	add	sp, #24
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	46c0      	nop			; (mov r8, r8)
 80086d4:	08016174 	.word	0x08016174
 80086d8:	08016178 	.word	0x08016178
 80086dc:	0801617c 	.word	0x0801617c

080086e0 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80086e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e2:	b08f      	sub	sp, #60	; 0x3c
 80086e4:	af04      	add	r7, sp, #16
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	0008      	movs	r0, r1
 80086ea:	0011      	movs	r1, r2
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	240b      	movs	r4, #11
 80086f0:	193b      	adds	r3, r7, r4
 80086f2:	1c02      	adds	r2, r0, #0
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	230a      	movs	r3, #10
 80086f8:	18fb      	adds	r3, r7, r3
 80086fa:	1c0a      	adds	r2, r1, #0
 80086fc:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80086fe:	2327      	movs	r3, #39	; 0x27
 8008700:	18fb      	adds	r3, r7, r3
 8008702:	2200      	movs	r2, #0
 8008704:	701a      	strb	r2, [r3, #0]
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8008706:	193b      	adds	r3, r7, r4
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b03      	cmp	r3, #3
 800870c:	d003      	beq.n	8008716 <SetPresetMode+0x36>
 800870e:	193b      	adds	r3, r7, r4
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	2b08      	cmp	r3, #8
 8008714:	d104      	bne.n	8008720 <SetPresetMode+0x40>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8008716:	2326      	movs	r3, #38	; 0x26
 8008718:	18fb      	adds	r3, r7, r3
 800871a:	2240      	movs	r2, #64	; 0x40
 800871c:	701a      	strb	r2, [r3, #0]
 800871e:	e003      	b.n	8008728 <SetPresetMode+0x48>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8008720:	2326      	movs	r3, #38	; 0x26
 8008722:	18fb      	adds	r3, r7, r3
 8008724:	2220      	movs	r2, #32
 8008726:	701a      	strb	r2, [r3, #0]


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8008728:	2527      	movs	r5, #39	; 0x27
 800872a:	197c      	adds	r4, r7, r5
 800872c:	2625      	movs	r6, #37	; 0x25
 800872e:	19ba      	adds	r2, r7, r6
 8008730:	230a      	movs	r3, #10
 8008732:	18fb      	adds	r3, r7, r3
 8008734:	7819      	ldrb	r1, [r3, #0]
 8008736:	230b      	movs	r3, #11
 8008738:	18fb      	adds	r3, r7, r3
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	0018      	movs	r0, r3
 800873e:	f7ff ff5d 	bl	80085fc <ComputeDevicePresetMode>
 8008742:	0003      	movs	r3, r0
 8008744:	7023      	strb	r3, [r4, #0]
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8008746:	197b      	adds	r3, r7, r5
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	b25b      	sxtb	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d112      	bne.n	8008776 <SetPresetMode+0x96>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8008750:	19bb      	adds	r3, r7, r6
 8008752:	7819      	ldrb	r1, [r3, #0]
 8008754:	197c      	adds	r4, r7, r5
 8008756:	231c      	movs	r3, #28
 8008758:	18fd      	adds	r5, r7, r3
 800875a:	2322      	movs	r3, #34	; 0x22
 800875c:	18fa      	adds	r2, r7, r3
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	2314      	movs	r3, #20
 8008762:	18fb      	adds	r3, r7, r3
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	2318      	movs	r3, #24
 8008768:	18fb      	adds	r3, r7, r3
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	002b      	movs	r3, r5
 800876e:	f001 fcbd 	bl	800a0ec <VL53L1_get_preset_mode_timing_cfg>
 8008772:	0003      	movs	r3, r0
 8008774:	7023      	strb	r3, [r4, #0]
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8008776:	2127      	movs	r1, #39	; 0x27
 8008778:	187b      	adds	r3, r7, r1
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	b25b      	sxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d116      	bne.n	80087b0 <SetPresetMode+0xd0>
		Status = VL53L1_set_preset_mode(
 8008782:	2325      	movs	r3, #37	; 0x25
 8008784:	18fb      	adds	r3, r7, r3
 8008786:	781d      	ldrb	r5, [r3, #0]
 8008788:	2322      	movs	r3, #34	; 0x22
 800878a:	18fb      	adds	r3, r7, r3
 800878c:	881e      	ldrh	r6, [r3, #0]
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	469c      	mov	ip, r3
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	187c      	adds	r4, r7, r1
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	9102      	str	r1, [sp, #8]
 800879e:	9201      	str	r2, [sp, #4]
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	4663      	mov	r3, ip
 80087a4:	0032      	movs	r2, r6
 80087a6:	0029      	movs	r1, r5
 80087a8:	f001 fd08 	bl	800a1bc <VL53L1_set_preset_mode>
 80087ac:	0003      	movs	r3, r0
 80087ae:	7023      	strb	r3, [r4, #0]
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80087b0:	2327      	movs	r3, #39	; 0x27
 80087b2:	18fb      	adds	r3, r7, r3
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	b25b      	sxtb	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <SetPresetMode+0xe6>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2226      	movs	r2, #38	; 0x26
 80087c0:	18ba      	adds	r2, r7, r2
 80087c2:	7812      	ldrb	r2, [r2, #0]
 80087c4:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 80087c6:	2327      	movs	r3, #39	; 0x27
 80087c8:	18fb      	adds	r3, r7, r3
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	b25b      	sxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d106      	bne.n	80087e0 <SetPresetMode+0x100>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	230b      	movs	r3, #11
 80087d6:	18f9      	adds	r1, r7, r3
 80087d8:	23df      	movs	r3, #223	; 0xdf
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	7809      	ldrb	r1, [r1, #0]
 80087de:	54d1      	strb	r1, [r2, r3]

	LOG_FUNCTION_END(Status);
	return Status;
 80087e0:	2327      	movs	r3, #39	; 0x27
 80087e2:	18fb      	adds	r3, r7, r3
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	b25b      	sxtb	r3, r3
}
 80087e8:	0018      	movs	r0, r3
 80087ea:	46bd      	mov	sp, r7
 80087ec:	b00b      	add	sp, #44	; 0x2c
 80087ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087f0 <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 80087f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	000a      	movs	r2, r1
 80087fa:	1cfb      	adds	r3, r7, #3
 80087fc:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80087fe:	210f      	movs	r1, #15
 8008800:	187b      	adds	r3, r7, r1
 8008802:	2200      	movs	r2, #0
 8008804:	701a      	strb	r2, [r3, #0]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8008806:	260e      	movs	r6, #14
 8008808:	19bb      	adds	r3, r7, r6
 800880a:	2203      	movs	r2, #3
 800880c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 800880e:	187c      	adds	r4, r7, r1
 8008810:	23fa      	movs	r3, #250	; 0xfa
 8008812:	009d      	lsls	r5, r3, #2
 8008814:	19bb      	adds	r3, r7, r6
 8008816:	781a      	ldrb	r2, [r3, #0]
 8008818:	1cfb      	adds	r3, r7, #3
 800881a:	7819      	ldrb	r1, [r3, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	002b      	movs	r3, r5
 8008820:	f7ff ff5e 	bl	80086e0 <SetPresetMode>
 8008824:	0003      	movs	r3, r0
 8008826:	7023      	strb	r3, [r4, #0]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8008828:	210f      	movs	r1, #15
 800882a:	187b      	adds	r3, r7, r1
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	b25b      	sxtb	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	d12a      	bne.n	800888a <VL53L1_SetPresetMode+0x9a>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	19ba      	adds	r2, r7, r6
 8008838:	4920      	ldr	r1, [pc, #128]	; (80088bc <VL53L1_SetPresetMode+0xcc>)
 800883a:	7812      	ldrb	r2, [r2, #0]
 800883c:	545a      	strb	r2, [r3, r1]
				DistanceMode);

		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	19ba      	adds	r2, r7, r6
 8008842:	491f      	ldr	r1, [pc, #124]	; (80088c0 <VL53L1_SetPresetMode+0xd0>)
 8008844:	7812      	ldrb	r2, [r2, #0]
 8008846:	545a      	strb	r2, [r3, r1]
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8008848:	1cfb      	adds	r3, r7, #3
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b04      	cmp	r3, #4
 800884e:	d007      	beq.n	8008860 <VL53L1_SetPresetMode+0x70>
 8008850:	1cfb      	adds	r3, r7, #3
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b03      	cmp	r3, #3
 8008856:	d003      	beq.n	8008860 <VL53L1_SetPresetMode+0x70>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8008858:	1cfb      	adds	r3, r7, #3
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b08      	cmp	r3, #8
 800885e:	d10a      	bne.n	8008876 <VL53L1_SetPresetMode+0x86>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8008860:	230f      	movs	r3, #15
 8008862:	18fc      	adds	r4, r7, r3
 8008864:	4a17      	ldr	r2, [pc, #92]	; (80088c4 <VL53L1_SetPresetMode+0xd4>)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	0011      	movs	r1, r2
 800886a:	0018      	movs	r0, r3
 800886c:	f000 f8ec 	bl	8008a48 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8008870:	0003      	movs	r3, r0
 8008872:	7023      	strb	r3, [r4, #0]
 8008874:	e009      	b.n	800888a <VL53L1_SetPresetMode+0x9a>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8008876:	230f      	movs	r3, #15
 8008878:	18fc      	adds	r4, r7, r3
 800887a:	4a13      	ldr	r2, [pc, #76]	; (80088c8 <VL53L1_SetPresetMode+0xd8>)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	0011      	movs	r1, r2
 8008880:	0018      	movs	r0, r3
 8008882:	f000 f8e1 	bl	8008a48 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8008886:	0003      	movs	r3, r0
 8008888:	7023      	strb	r3, [r4, #0]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800888a:	220f      	movs	r2, #15
 800888c:	18bb      	adds	r3, r7, r2
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	b25b      	sxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d109      	bne.n	80088aa <VL53L1_SetPresetMode+0xba>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8008896:	18bc      	adds	r4, r7, r2
 8008898:	23fa      	movs	r3, #250	; 0xfa
 800889a:	009a      	lsls	r2, r3, #2
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	0011      	movs	r1, r2
 80088a0:	0018      	movs	r0, r3
 80088a2:	f000 fa9f 	bl	8008de4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80088a6:	0003      	movs	r3, r0
 80088a8:	7023      	strb	r3, [r4, #0]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80088aa:	230f      	movs	r3, #15
 80088ac:	18fb      	adds	r3, r7, r3
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	b25b      	sxtb	r3, r3
}
 80088b2:	0018      	movs	r0, r3
 80088b4:	46bd      	mov	sp, r7
 80088b6:	b005      	add	sp, #20
 80088b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ba:	46c0      	nop			; (mov r8, r8)
 80088bc:	0000037e 	.word	0x0000037e
 80088c0:	0000037f 	.word	0x0000037f
 80088c4:	0000a028 	.word	0x0000a028
 80088c8:	00008235 	.word	0x00008235

080088cc <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 80088cc:	b5b0      	push	{r4, r5, r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	000a      	movs	r2, r1
 80088d6:	1cfb      	adds	r3, r7, #3
 80088d8:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80088da:	231f      	movs	r3, #31
 80088dc:	18fb      	adds	r3, r7, r3
 80088de:	2200      	movs	r2, #0
 80088e0:	701a      	strb	r2, [r3, #0]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80088e2:	231d      	movs	r3, #29
 80088e4:	18fb      	adds	r3, r7, r3
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	22df      	movs	r2, #223	; 0xdf
 80088ea:	0092      	lsls	r2, r2, #2
 80088ec:	5c8a      	ldrb	r2, [r1, r2]
 80088ee:	701a      	strb	r2, [r3, #0]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80088f0:	1cfb      	adds	r3, r7, #3
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d00a      	beq.n	800890e <VL53L1_SetDistanceMode+0x42>
 80088f8:	1cfb      	adds	r3, r7, #3
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d006      	beq.n	800890e <VL53L1_SetDistanceMode+0x42>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8008900:	1cfb      	adds	r3, r7, #3
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b03      	cmp	r3, #3
 8008906:	d002      	beq.n	800890e <VL53L1_SetDistanceMode+0x42>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8008908:	2304      	movs	r3, #4
 800890a:	425b      	negs	r3, r3
 800890c:	e091      	b.n	8008a32 <VL53L1_SetDistanceMode+0x166>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 800890e:	231f      	movs	r3, #31
 8008910:	18fb      	adds	r3, r7, r3
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	b25b      	sxtb	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d111      	bne.n	800893e <VL53L1_SetDistanceMode+0x72>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 800891a:	1cfb      	adds	r3, r7, #3
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d003      	beq.n	800892a <VL53L1_SetDistanceMode+0x5e>
 8008922:	1cfb      	adds	r3, r7, #3
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	2b02      	cmp	r3, #2
 8008928:	d105      	bne.n	8008936 <VL53L1_SetDistanceMode+0x6a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 800892a:	231e      	movs	r3, #30
 800892c:	18fb      	adds	r3, r7, r3
 800892e:	1cfa      	adds	r2, r7, #3
 8008930:	7812      	ldrb	r2, [r2, #0]
 8008932:	701a      	strb	r2, [r3, #0]
 8008934:	e003      	b.n	800893e <VL53L1_SetDistanceMode+0x72>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8008936:	231e      	movs	r3, #30
 8008938:	18fb      	adds	r3, r7, r3
 800893a:	2203      	movs	r2, #3
 800893c:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L1_ERROR_NONE)
 800893e:	221f      	movs	r2, #31
 8008940:	18bb      	adds	r3, r7, r2
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	b25b      	sxtb	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <VL53L1_SetDistanceMode+0x92>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800894a:	18bc      	adds	r4, r7, r2
 800894c:	2308      	movs	r3, #8
 800894e:	18fa      	adds	r2, r7, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	0011      	movs	r1, r2
 8008954:	0018      	movs	r0, r3
 8008956:	f001 fb59 	bl	800a00c <VL53L1_get_user_zone>
 800895a:	0003      	movs	r3, r0
 800895c:	7023      	strb	r3, [r4, #0]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8008964:	221f      	movs	r2, #31
 8008966:	18bb      	adds	r3, r7, r2
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	b25b      	sxtb	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <VL53L1_SetDistanceMode+0xbc>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8008970:	18bc      	adds	r4, r7, r2
 8008972:	2314      	movs	r3, #20
 8008974:	18fb      	adds	r3, r7, r3
 8008976:	2210      	movs	r2, #16
 8008978:	18ba      	adds	r2, r7, r2
 800897a:	210c      	movs	r1, #12
 800897c:	1879      	adds	r1, r7, r1
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 fa4b 	bl	8009e1a <VL53L1_get_timeouts_us>
 8008984:	0003      	movs	r3, r0
 8008986:	7023      	strb	r3, [r4, #0]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8008988:	221f      	movs	r2, #31
 800898a:	18bb      	adds	r3, r7, r2
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	b25b      	sxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10d      	bne.n	80089b0 <VL53L1_SetDistanceMode+0xe4>
		Status = SetPresetMode(Dev,
 8008994:	18bc      	adds	r4, r7, r2
 8008996:	69bd      	ldr	r5, [r7, #24]
 8008998:	231e      	movs	r3, #30
 800899a:	18fb      	adds	r3, r7, r3
 800899c:	781a      	ldrb	r2, [r3, #0]
 800899e:	231d      	movs	r3, #29
 80089a0:	18fb      	adds	r3, r7, r3
 80089a2:	7819      	ldrb	r1, [r3, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	002b      	movs	r3, r5
 80089a8:	f7ff fe9a 	bl	80086e0 <SetPresetMode>
 80089ac:	0003      	movs	r3, r0
 80089ae:	7023      	strb	r3, [r4, #0]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 80089b0:	231f      	movs	r3, #31
 80089b2:	18fb      	adds	r3, r7, r3
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	b25b      	sxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10f      	bne.n	80089dc <VL53L1_SetDistanceMode+0x110>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	201e      	movs	r0, #30
 80089c0:	183a      	adds	r2, r7, r0
 80089c2:	491e      	ldr	r1, [pc, #120]	; (8008a3c <VL53L1_SetDistanceMode+0x170>)
 80089c4:	7812      	ldrb	r2, [r2, #0]
 80089c6:	545a      	strb	r2, [r3, r1]
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	183a      	adds	r2, r7, r0
 80089cc:	491c      	ldr	r1, [pc, #112]	; (8008a40 <VL53L1_SetDistanceMode+0x174>)
 80089ce:	7812      	ldrb	r2, [r2, #0]
 80089d0:	545a      	strb	r2, [r3, r1]
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	1cfa      	adds	r2, r7, #3
 80089d6:	491b      	ldr	r1, [pc, #108]	; (8008a44 <VL53L1_SetDistanceMode+0x178>)
 80089d8:	7812      	ldrb	r2, [r2, #0]
 80089da:	545a      	strb	r2, [r3, r1]
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80089dc:	251f      	movs	r5, #31
 80089de:	197b      	adds	r3, r7, r5
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	b25b      	sxtb	r3, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d110      	bne.n	8008a0a <VL53L1_SetDistanceMode+0x13e>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80089e8:	68f9      	ldr	r1, [r7, #12]
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	197c      	adds	r4, r7, r5
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 f9cf 	bl	8009d94 <VL53L1_set_timeouts_us>
 80089f6:	0003      	movs	r3, r0
 80089f8:	7023      	strb	r3, [r4, #0]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 80089fa:	197b      	adds	r3, r7, r5
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	b25b      	sxtb	r3, r3
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d102      	bne.n	8008a0a <VL53L1_SetDistanceMode+0x13e>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8008a0a:	221f      	movs	r2, #31
 8008a0c:	18bb      	adds	r3, r7, r2
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	b25b      	sxtb	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d109      	bne.n	8008a2a <VL53L1_SetDistanceMode+0x15e>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8008a16:	18bc      	adds	r4, r7, r2
 8008a18:	2308      	movs	r3, #8
 8008a1a:	18fa      	adds	r2, r7, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	0011      	movs	r1, r2
 8008a20:	0018      	movs	r0, r3
 8008a22:	f001 facd 	bl	8009fc0 <VL53L1_set_user_zone>
 8008a26:	0003      	movs	r3, r0
 8008a28:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008a2a:	231f      	movs	r3, #31
 8008a2c:	18fb      	adds	r3, r7, r3
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	b25b      	sxtb	r3, r3
}
 8008a32:	0018      	movs	r0, r3
 8008a34:	46bd      	mov	sp, r7
 8008a36:	b008      	add	sp, #32
 8008a38:	bdb0      	pop	{r4, r5, r7, pc}
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	0000037e 	.word	0x0000037e
 8008a40:	0000037f 	.word	0x0000037f
 8008a44:	0000037d 	.word	0x0000037d

08008a48 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008a48:	b590      	push	{r4, r7, lr}
 8008a4a:	b08d      	sub	sp, #52	; 0x34
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008a52:	212f      	movs	r1, #47	; 0x2f
 8008a54:	187b      	adds	r3, r7, r1
 8008a56:	2200      	movs	r2, #0
 8008a58:	701a      	strb	r2, [r3, #0]
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8008a5a:	4b73      	ldr	r3, [pc, #460]	; (8008c28 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1e0>)
 8008a5c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	4a72      	ldr	r2, [pc, #456]	; (8008c2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1e4>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d902      	bls.n	8008a6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008a66:	187b      	adds	r3, r7, r1
 8008a68:	22fc      	movs	r2, #252	; 0xfc
 8008a6a:	701a      	strb	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE) {
 8008a6c:	222f      	movs	r2, #47	; 0x2f
 8008a6e:	18bb      	adds	r3, r7, r2
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	b25b      	sxtb	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d109      	bne.n	8008a8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x44>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008a78:	18bc      	adds	r4, r7, r2
 8008a7a:	231a      	movs	r3, #26
 8008a7c:	18fa      	adds	r2, r7, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2105      	movs	r1, #5
 8008a82:	0018      	movs	r0, r3
 8008a84:	f000 fbf3 	bl	800926e <VL53L1_GetSequenceStepEnable>
 8008a88:	0003      	movs	r3, r0
 8008a8a:	7023      	strb	r3, [r4, #0]
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8008a8c:	222f      	movs	r2, #47	; 0x2f
 8008a8e:	18bb      	adds	r3, r7, r2
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	b25b      	sxtb	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d109      	bne.n	8008aac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x64>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008a98:	18bc      	adds	r4, r7, r2
 8008a9a:	2319      	movs	r3, #25
 8008a9c:	18fa      	adds	r2, r7, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2106      	movs	r1, #6
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	f000 fbe3 	bl	800926e <VL53L1_GetSequenceStepEnable>
 8008aa8:	0003      	movs	r3, r0
 8008aaa:	7023      	strb	r3, [r4, #0]
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8008aac:	222f      	movs	r2, #47	; 0x2f
 8008aae:	18bb      	adds	r3, r7, r2
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	b25b      	sxtb	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10b      	bne.n	8008ad0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x88>
		Status = VL53L1_get_timeouts_us(Dev,
 8008ab8:	18bc      	adds	r4, r7, r2
 8008aba:	2314      	movs	r3, #20
 8008abc:	18fb      	adds	r3, r7, r3
 8008abe:	2210      	movs	r2, #16
 8008ac0:	18ba      	adds	r2, r7, r2
 8008ac2:	210c      	movs	r1, #12
 8008ac4:	1879      	adds	r1, r7, r1
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 f9a7 	bl	8009e1a <VL53L1_get_timeouts_us>
 8008acc:	0003      	movs	r3, r0
 8008ace:	7023      	strb	r3, [r4, #0]
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8008ad0:	232f      	movs	r3, #47	; 0x2f
 8008ad2:	18fb      	adds	r3, r7, r3
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	b25b      	sxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d000      	beq.n	8008ade <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x96>
 8008adc:	e090      	b.n	8008c00 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8008ade:	201b      	movs	r0, #27
 8008ae0:	183b      	adds	r3, r7, r0
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	22df      	movs	r2, #223	; 0xdf
 8008ae6:	0092      	lsls	r2, r2, #2
 8008ae8:	5c8a      	ldrb	r2, [r1, r2]
 8008aea:	701a      	strb	r2, [r3, #0]

		TimingGuard = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8008af0:	2301      	movs	r3, #1
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8008af4:	183b      	adds	r3, r7, r0
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d02a      	beq.n	8008b52 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10a>
 8008afc:	dc47      	bgt.n	8008b8e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x146>
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d012      	beq.n	8008b28 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe0>
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d143      	bne.n	8008b8e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x146>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008b06:	231a      	movs	r3, #26
 8008b08:	18fb      	adds	r3, r7, r3
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d004      	beq.n	8008b1a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd2>
 8008b10:	2319      	movs	r3, #25
 8008b12:	18fb      	adds	r3, r7, r3
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d102      	bne.n	8008b20 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd8>
				TimingGuard = 5000;
 8008b1a:	4b45      	ldr	r3, [pc, #276]	; (8008c30 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1e8>)
 8008b1c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8008b1e:	e03a      	b.n	8008b96 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x14e>
				TimingGuard = 1000;
 8008b20:	23fa      	movs	r3, #250	; 0xfa
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008b26:	e036      	b.n	8008b96 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x14e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008b2e:	231a      	movs	r3, #26
 8008b30:	18fb      	adds	r3, r7, r3
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d004      	beq.n	8008b42 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfa>
 8008b38:	2319      	movs	r3, #25
 8008b3a:	18fb      	adds	r3, r7, r3
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d102      	bne.n	8008b48 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>
				TimingGuard = 26600;
 8008b42:	4b3c      	ldr	r3, [pc, #240]	; (8008c34 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ec>)
 8008b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b46:	e001      	b.n	8008b4c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>
			else
				TimingGuard = 21600;
 8008b48:	4b3b      	ldr	r3, [pc, #236]	; (8008c38 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1f0>)
 8008b4a:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8008b50:	e021      	b.n	8008b96 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x14e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8008b58:	23f5      	movs	r3, #245	; 0xf5
 8008b5a:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8008b5c:	2308      	movs	r3, #8
 8008b5e:	18fa      	adds	r2, r7, r3
 8008b60:	4936      	ldr	r1, [pc, #216]	; (8008c3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1f4>)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	0018      	movs	r0, r3
 8008b66:	f002 fb59 	bl	800b21c <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dd06      	ble.n	8008b7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x136>
				vhv += vhv_loops *
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	22f5      	movs	r2, #245	; 0xf5
 8008b74:	4353      	muls	r3, r2
 8008b76:	001a      	movs	r2, r3
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	189b      	adds	r3, r3, r2
 8008b7c:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	4a2f      	ldr	r2, [pc, #188]	; (8008c40 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1f8>)
 8008b82:	4694      	mov	ip, r2
 8008b84:	4463      	add	r3, ip
 8008b86:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8008b8c:	e003      	b.n	8008b96 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x14e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008b8e:	232f      	movs	r3, #47	; 0x2f
 8008b90:	18fb      	adds	r3, r7, r3
 8008b92:	22f8      	movs	r2, #248	; 0xf8
 8008b94:	701a      	strb	r2, [r3, #0]
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d804      	bhi.n	8008ba8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x160>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8008b9e:	232f      	movs	r3, #47	; 0x2f
 8008ba0:	18fb      	adds	r3, r7, r3
 8008ba2:	22fc      	movs	r2, #252	; 0xfc
 8008ba4:	701a      	strb	r2, [r3, #0]
 8008ba6:	e003      	b.n	8008bb0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x168>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8008bae:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8008bb0:	212f      	movs	r1, #47	; 0x2f
 8008bb2:	187b      	adds	r3, r7, r1
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	b25b      	sxtb	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d121      	bne.n	8008c00 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	69fa      	ldr	r2, [r7, #28]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d203      	bcs.n	8008bcc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x184>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8008bc4:	187b      	adds	r3, r7, r1
 8008bc6:	22fc      	movs	r2, #252	; 0xfc
 8008bc8:	701a      	strb	r2, [r3, #0]
 8008bca:	e010      	b.n	8008bee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a6>
			else {
				TimingBudget /= divisor;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	f7f7 fab5 	bl	8000140 <__udivsi3>
 8008bd6:	0003      	movs	r3, r0
 8008bd8:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8008bda:	68f9      	ldr	r1, [r7, #12]
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	202f      	movs	r0, #47	; 0x2f
 8008be2:	183c      	adds	r4, r7, r0
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 f8d5 	bl	8009d94 <VL53L1_set_timeouts_us>
 8008bea:	0003      	movs	r3, r0
 8008bec:	7023      	strb	r3, [r4, #0]
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8008bee:	232f      	movs	r3, #47	; 0x2f
 8008bf0:	18fb      	adds	r3, r7, r3
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	b25b      	sxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d102      	bne.n	8008c00 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>
				VL53L1DevDataSet(Dev,
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8008c00:	232f      	movs	r3, #47	; 0x2f
 8008c02:	18fb      	adds	r3, r7, r3
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	b25b      	sxtb	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d104      	bne.n	8008c16 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ce>
		VL53L1DevDataSet(Dev,
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	23e0      	movs	r3, #224	; 0xe0
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	50d1      	str	r1, [r2, r3]
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008c16:	232f      	movs	r3, #47	; 0x2f
 8008c18:	18fb      	adds	r3, r7, r3
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	b25b      	sxtb	r3, r3
}
 8008c1e:	0018      	movs	r0, r3
 8008c20:	46bd      	mov	sp, r7
 8008c22:	b00d      	add	sp, #52	; 0x34
 8008c24:	bd90      	pop	{r4, r7, pc}
 8008c26:	46c0      	nop			; (mov r8, r8)
 8008c28:	00086470 	.word	0x00086470
 8008c2c:	00989680 	.word	0x00989680
 8008c30:	00001388 	.word	0x00001388
 8008c34:	000067e8 	.word	0x000067e8
 8008c38:	00005460 	.word	0x00005460
 8008c3c:	00008036 	.word	0x00008036
 8008c40:	00000ddc 	.word	0x00000ddc

08008c44 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008c44:	b590      	push	{r4, r7, lr}
 8008c46:	b08d      	sub	sp, #52	; 0x34
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008c4e:	212f      	movs	r1, #47	; 0x2f
 8008c50:	187b      	adds	r3, r7, r1
 8008c52:	2200      	movs	r2, #0
 8008c54:	701a      	strb	r2, [r3, #0]
	uint8_t Mm1Enabled = 0;
 8008c56:	201b      	movs	r0, #27
 8008c58:	183b      	adds	r3, r7, r0
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	701a      	strb	r2, [r3, #0]
	uint8_t Mm2Enabled = 0;
 8008c5e:	231a      	movs	r3, #26
 8008c60:	18fb      	adds	r3, r7, r3
 8008c62:	2200      	movs	r2, #0
 8008c64:	701a      	strb	r2, [r3, #0]
	uint32_t  MmTimeoutUs = 0;
 8008c66:	2300      	movs	r3, #0
 8008c68:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8008c7c:	187b      	adds	r3, r7, r1
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	b25b      	sxtb	r3, r3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d108      	bne.n	8008c98 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x54>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008c86:	187c      	adds	r4, r7, r1
 8008c88:	183a      	adds	r2, r7, r0
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2105      	movs	r1, #5
 8008c8e:	0018      	movs	r0, r3
 8008c90:	f000 faed 	bl	800926e <VL53L1_GetSequenceStepEnable>
 8008c94:	0003      	movs	r3, r0
 8008c96:	7023      	strb	r3, [r4, #0]
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8008c98:	222f      	movs	r2, #47	; 0x2f
 8008c9a:	18bb      	adds	r3, r7, r2
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	b25b      	sxtb	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d109      	bne.n	8008cb8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x74>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008ca4:	18bc      	adds	r4, r7, r2
 8008ca6:	231a      	movs	r3, #26
 8008ca8:	18fa      	adds	r2, r7, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2106      	movs	r1, #6
 8008cae:	0018      	movs	r0, r3
 8008cb0:	f000 fadd 	bl	800926e <VL53L1_GetSequenceStepEnable>
 8008cb4:	0003      	movs	r3, r0
 8008cb6:	7023      	strb	r3, [r4, #0]
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8008cb8:	222f      	movs	r2, #47	; 0x2f
 8008cba:	18bb      	adds	r3, r7, r2
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	b25b      	sxtb	r3, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10b      	bne.n	8008cdc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x98>
		Status = VL53L1_get_timeouts_us(Dev,
 8008cc4:	18bc      	adds	r4, r7, r2
 8008cc6:	2310      	movs	r3, #16
 8008cc8:	18fb      	adds	r3, r7, r3
 8008cca:	2214      	movs	r2, #20
 8008ccc:	18ba      	adds	r2, r7, r2
 8008cce:	210c      	movs	r1, #12
 8008cd0:	1879      	adds	r1, r7, r1
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f001 f8a1 	bl	8009e1a <VL53L1_get_timeouts_us>
 8008cd8:	0003      	movs	r3, r0
 8008cda:	7023      	strb	r3, [r4, #0]
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8008cdc:	232f      	movs	r3, #47	; 0x2f
 8008cde:	18fb      	adds	r3, r7, r3
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	b25b      	sxtb	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d161      	bne.n	8008dac <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x168>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8008ce8:	2023      	movs	r0, #35	; 0x23
 8008cea:	183b      	adds	r3, r7, r0
 8008cec:	6879      	ldr	r1, [r7, #4]
 8008cee:	22df      	movs	r2, #223	; 0xdf
 8008cf0:	0092      	lsls	r2, r2, #2
 8008cf2:	5c8a      	ldrb	r2, [r1, r2]
 8008cf4:	701a      	strb	r2, [r3, #0]

		switch (PresetMode) {
 8008cf6:	183b      	adds	r3, r7, r0
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b08      	cmp	r3, #8
 8008cfc:	d033      	beq.n	8008d66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x122>
 8008cfe:	dc50      	bgt.n	8008da2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x15e>
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d018      	beq.n	8008d36 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf2>
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d14c      	bne.n	8008da2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x15e>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008d08:	231b      	movs	r3, #27
 8008d0a:	18fb      	adds	r3, r7, r3
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d004      	beq.n	8008d1c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
 8008d12:	231a      	movs	r3, #26
 8008d14:	18fb      	adds	r3, r7, r3
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d105      	bne.n	8008d28 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	4a2c      	ldr	r2, [pc, #176]	; (8008dd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x18c>)
 8008d20:	4694      	mov	ip, r2
 8008d22:	4463      	add	r3, ip
 8008d24:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8008d26:	e042      	b.n	8008dae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x16a>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	22fa      	movs	r2, #250	; 0xfa
 8008d2c:	0092      	lsls	r2, r2, #2
 8008d2e:	4694      	mov	ip, r2
 8008d30:	4463      	add	r3, ip
 8008d32:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008d34:	e03b      	b.n	8008dae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x16a>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008d36:	231b      	movs	r3, #27
 8008d38:	18fb      	adds	r3, r7, r3
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d004      	beq.n	8008d4a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x106>
 8008d40:	231a      	movs	r3, #26
 8008d42:	18fb      	adds	r3, r7, r3
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d106      	bne.n	8008d58 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x114>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	4a21      	ldr	r2, [pc, #132]	; (8008dd4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x190>)
 8008d4e:	4694      	mov	ip, r2
 8008d50:	4463      	add	r3, ip
 8008d52:	005b      	lsls	r3, r3, #1
 8008d54:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8008d56:	e02a      	b.n	8008dae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x16a>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	4a1f      	ldr	r2, [pc, #124]	; (8008dd8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x194>)
 8008d5c:	4694      	mov	ip, r2
 8008d5e:	4463      	add	r3, ip
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008d64:	e023      	b.n	8008dae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x16a>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8008d66:	23f5      	movs	r3, #245	; 0xf5
 8008d68:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8008d6a:	2308      	movs	r3, #8
 8008d6c:	18fa      	adds	r2, r7, r3
 8008d6e:	491b      	ldr	r1, [pc, #108]	; (8008ddc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x198>)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	0018      	movs	r0, r3
 8008d74:	f002 fa52 	bl	800b21c <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	dd06      	ble.n	8008d8c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x148>
				vhv += vhv_loops *
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	22f5      	movs	r2, #245	; 0xf5
 8008d82:	4353      	muls	r3, r2
 8008d84:	001a      	movs	r2, r3
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	189b      	adds	r3, r3, r2
 8008d8a:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	4a14      	ldr	r2, [pc, #80]	; (8008de0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x19c>)
 8008d90:	4694      	mov	ip, r2
 8008d92:	4463      	add	r3, ip
 8008d94:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	69fa      	ldr	r2, [r7, #28]
 8008d9c:	18d3      	adds	r3, r2, r3
 8008d9e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008da0:	e005      	b.n	8008dae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x16a>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008da2:	232f      	movs	r3, #47	; 0x2f
 8008da4:	18fb      	adds	r3, r7, r3
 8008da6:	22f8      	movs	r2, #248	; 0xf8
 8008da8:	701a      	strb	r2, [r3, #0]
 8008daa:	e000      	b.n	8008dae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x16a>
		}
	}
 8008dac:	46c0      	nop			; (mov r8, r8)
	if (Status == VL53L1_ERROR_NONE)
 8008dae:	232f      	movs	r3, #47	; 0x2f
 8008db0:	18fb      	adds	r3, r7, r3
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	b25b      	sxtb	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d102      	bne.n	8008dc0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dbe:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008dc0:	232f      	movs	r3, #47	; 0x2f
 8008dc2:	18fb      	adds	r3, r7, r3
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	b25b      	sxtb	r3, r3
}
 8008dc8:	0018      	movs	r0, r3
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	b00d      	add	sp, #52	; 0x34
 8008dce:	bd90      	pop	{r4, r7, pc}
 8008dd0:	00001388 	.word	0x00001388
 8008dd4:	000033f4 	.word	0x000033f4
 8008dd8:	00002a30 	.word	0x00002a30
 8008ddc:	00008036 	.word	0x00008036
 8008de0:	00000ddc 	.word	0x00000ddc

08008de4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8008de4:	b5b0      	push	{r4, r5, r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008dee:	240f      	movs	r4, #15
 8008df0:	193b      	adds	r3, r7, r4
 8008df2:	2200      	movs	r2, #0
 8008df4:	701a      	strb	r2, [r3, #0]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	019b      	lsls	r3, r3, #6
 8008dfe:	22fa      	movs	r2, #250	; 0xfa
 8008e00:	0091      	lsls	r1, r2, #2
 8008e02:	0018      	movs	r0, r3
 8008e04:	f7f7 f99c 	bl	8000140 <__udivsi3>
 8008e08:	0003      	movs	r3, r0
 8008e0a:	001a      	movs	r2, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	189b      	adds	r3, r3, r2
 8008e10:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8008e12:	0025      	movs	r5, r4
 8008e14:	193c      	adds	r4, r7, r4
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	0011      	movs	r1, r2
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	f000 ff57 	bl	8009cd0 <VL53L1_set_inter_measurement_period_ms>
 8008e22:	0003      	movs	r3, r0
 8008e24:	7023      	strb	r3, [r4, #0]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8008e26:	197b      	adds	r3, r7, r5
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	b25b      	sxtb	r3, r3
}
 8008e2c:	0018      	movs	r0, r3
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	b004      	add	sp, #16
 8008e32:	bdb0      	pop	{r4, r5, r7, pc}

08008e34 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8008e34:	b5b0      	push	{r4, r5, r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008e3e:	250f      	movs	r5, #15
 8008e40:	197b      	adds	r3, r7, r5
 8008e42:	2200      	movs	r2, #0
 8008e44:	701a      	strb	r2, [r3, #0]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8008e46:	197c      	adds	r4, r7, r5
 8008e48:	2308      	movs	r3, #8
 8008e4a:	18fa      	adds	r2, r7, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	0011      	movs	r1, r2
 8008e50:	0018      	movs	r0, r3
 8008e52:	f000 ff6e 	bl	8009d32 <VL53L1_get_inter_measurement_period_ms>
 8008e56:	0003      	movs	r3, r0
 8008e58:	7023      	strb	r3, [r4, #0]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8008e5a:	68bc      	ldr	r4, [r7, #8]
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	019b      	lsls	r3, r3, #6
 8008e60:	22fa      	movs	r2, #250	; 0xfa
 8008e62:	0091      	lsls	r1, r2, #2
 8008e64:	0018      	movs	r0, r3
 8008e66:	f7f7 f96b 	bl	8000140 <__udivsi3>
 8008e6a:	0003      	movs	r3, r0
 8008e6c:	1ae3      	subs	r3, r4, r3
 8008e6e:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8008e76:	197b      	adds	r3, r7, r5
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	b25b      	sxtb	r3, r3
}
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	b004      	add	sp, #16
 8008e82:	bdb0      	pop	{r4, r5, r7, pc}

08008e84 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	607a      	str	r2, [r7, #4]
 8008e8e:	200a      	movs	r0, #10
 8008e90:	183b      	adds	r3, r7, r0
 8008e92:	1c0a      	adds	r2, r1, #0
 8008e94:	801a      	strh	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008e96:	2317      	movs	r3, #23
 8008e98:	18fb      	adds	r3, r7, r3
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	701a      	strb	r2, [r3, #0]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008e9e:	183b      	adds	r3, r7, r0
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d002      	beq.n	8008eac <SetLimitValue+0x28>
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d00d      	beq.n	8008ec6 <SetLimitValue+0x42>
 8008eaa:	e019      	b.n	8008ee0 <SetLimitValue+0x5c>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	0b9a      	lsrs	r2, r3, #14
 8008eb0:	2114      	movs	r1, #20
 8008eb2:	187b      	adds	r3, r7, r1
 8008eb4:	801a      	strh	r2, [r3, #0]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8008eb6:	187b      	adds	r3, r7, r1
 8008eb8:	881a      	ldrh	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	0011      	movs	r1, r2
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	f001 faf4 	bl	800a4ac <VL53L1_set_lite_sigma_threshold>
		break;
 8008ec4:	e010      	b.n	8008ee8 <SetLimitValue+0x64>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	0a5a      	lsrs	r2, r3, #9
 8008eca:	2114      	movs	r1, #20
 8008ecc:	187b      	adds	r3, r7, r1
 8008ece:	801a      	strh	r2, [r3, #0]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8008ed0:	187b      	adds	r3, r7, r1
 8008ed2:	881a      	ldrh	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	0011      	movs	r1, r2
 8008ed8:	0018      	movs	r0, r3
 8008eda:	f001 fb19 	bl	800a510 <VL53L1_set_lite_min_count_rate>
		break;
 8008ede:	e003      	b.n	8008ee8 <SetLimitValue+0x64>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008ee0:	2317      	movs	r3, #23
 8008ee2:	18fb      	adds	r3, r7, r3
 8008ee4:	22fc      	movs	r2, #252	; 0xfc
 8008ee6:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ee8:	2317      	movs	r3, #23
 8008eea:	18fb      	adds	r3, r7, r3
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	b25b      	sxtb	r3, r3
}
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	b006      	add	sp, #24
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8008ef8:	b590      	push	{r4, r7, lr}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	0008      	movs	r0, r1
 8008f02:	0011      	movs	r1, r2
 8008f04:	1cbb      	adds	r3, r7, #2
 8008f06:	1c02      	adds	r2, r0, #0
 8008f08:	801a      	strh	r2, [r3, #0]
 8008f0a:	1c7b      	adds	r3, r7, #1
 8008f0c:	1c0a      	adds	r2, r1, #0
 8008f0e:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008f10:	210f      	movs	r1, #15
 8008f12:	187b      	adds	r3, r7, r1
 8008f14:	2200      	movs	r2, #0
 8008f16:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t TempFix1616 = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008f1c:	1cbb      	adds	r3, r7, #2
 8008f1e:	881b      	ldrh	r3, [r3, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d903      	bls.n	8008f2c <VL53L1_SetLimitCheckEnable+0x34>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008f24:	187b      	adds	r3, r7, r1
 8008f26:	22fc      	movs	r2, #252	; 0xfc
 8008f28:	701a      	strb	r2, [r3, #0]
 8008f2a:	e01a      	b.n	8008f62 <VL53L1_SetLimitCheckEnable+0x6a>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8008f2c:	1c7b      	adds	r3, r7, #1
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <VL53L1_SetLimitCheckEnable+0x42>
			TempFix1616 = 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	60bb      	str	r3, [r7, #8]
 8008f38:	e008      	b.n	8008f4c <VL53L1_SetLimitCheckEnable+0x54>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008f3a:	1cbb      	adds	r3, r7, #2
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	33e0      	adds	r3, #224	; 0xe0
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	18d3      	adds	r3, r2, r3
 8008f46:	3308      	adds	r3, #8
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8008f4c:	230f      	movs	r3, #15
 8008f4e:	18fc      	adds	r4, r7, r3
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	1cbb      	adds	r3, r7, #2
 8008f54:	8819      	ldrh	r1, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f7ff ff93 	bl	8008e84 <SetLimitValue>
 8008f5e:	0003      	movs	r3, r0
 8008f60:	7023      	strb	r3, [r4, #0]
	}

	if (Status == VL53L1_ERROR_NONE)
 8008f62:	230f      	movs	r3, #15
 8008f64:	18fb      	adds	r3, r7, r3
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	b25b      	sxtb	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10e      	bne.n	8008f8c <VL53L1_SetLimitCheckEnable+0x94>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008f6e:	1c7b      	adds	r3, r7, #1
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	1e5a      	subs	r2, r3, #1
 8008f74:	4193      	sbcs	r3, r2
 8008f76:	b2d9      	uxtb	r1, r3
 8008f78:	1cbb      	adds	r3, r7, #2
 8008f7a:	881a      	ldrh	r2, [r3, #0]
 8008f7c:	0008      	movs	r0, r1
 8008f7e:	6879      	ldr	r1, [r7, #4]
 8008f80:	23e1      	movs	r3, #225	; 0xe1
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	188a      	adds	r2, r1, r2
 8008f86:	18d3      	adds	r3, r2, r3
 8008f88:	1c02      	adds	r2, r0, #0
 8008f8a:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8008f8c:	230f      	movs	r3, #15
 8008f8e:	18fb      	adds	r3, r7, r3
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	b25b      	sxtb	r3, r3
}
 8008f94:	0018      	movs	r0, r3
 8008f96:	46bd      	mov	sp, r7
 8008f98:	b005      	add	sp, #20
 8008f9a:	bd90      	pop	{r4, r7, pc}

08008f9c <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8008f9c:	b590      	push	{r4, r7, lr}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	607a      	str	r2, [r7, #4]
 8008fa6:	200a      	movs	r0, #10
 8008fa8:	183b      	adds	r3, r7, r0
 8008faa:	1c0a      	adds	r2, r1, #0
 8008fac:	801a      	strh	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008fae:	2117      	movs	r1, #23
 8008fb0:	187b      	adds	r3, r7, r1
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008fb6:	183b      	adds	r3, r7, r0
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d906      	bls.n	8008fcc <VL53L1_GetLimitCheckEnable+0x30>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008fbe:	187b      	adds	r3, r7, r1
 8008fc0:	22fc      	movs	r2, #252	; 0xfc
 8008fc2:	701a      	strb	r2, [r3, #0]
		*pLimitCheckEnable = 0;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]
 8008fca:	e00f      	b.n	8008fec <VL53L1_GetLimitCheckEnable+0x50>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008fcc:	230a      	movs	r3, #10
 8008fce:	18fb      	adds	r3, r7, r3
 8008fd0:	8819      	ldrh	r1, [r3, #0]
 8008fd2:	2416      	movs	r4, #22
 8008fd4:	193b      	adds	r3, r7, r4
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	22e1      	movs	r2, #225	; 0xe1
 8008fda:	0092      	lsls	r2, r2, #2
 8008fdc:	1841      	adds	r1, r0, r1
 8008fde:	188a      	adds	r2, r1, r2
 8008fe0:	7812      	ldrb	r2, [r2, #0]
 8008fe2:	701a      	strb	r2, [r3, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	193a      	adds	r2, r7, r4
 8008fe8:	7812      	ldrb	r2, [r2, #0]
 8008fea:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008fec:	2317      	movs	r3, #23
 8008fee:	18fb      	adds	r3, r7, r3
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	b25b      	sxtb	r3, r3
}
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	b007      	add	sp, #28
 8008ffa:	bd90      	pop	{r4, r7, pc}

08008ffc <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8008ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	607a      	str	r2, [r7, #4]
 8009006:	200a      	movs	r0, #10
 8009008:	183b      	adds	r3, r7, r0
 800900a:	1c0a      	adds	r2, r1, #0
 800900c:	801a      	strh	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800900e:	2117      	movs	r1, #23
 8009010:	187b      	adds	r3, r7, r1
 8009012:	2200      	movs	r2, #0
 8009014:	701a      	strb	r2, [r3, #0]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009016:	183b      	adds	r3, r7, r0
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d903      	bls.n	8009026 <VL53L1_SetLimitCheckValue+0x2a>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800901e:	187b      	adds	r3, r7, r1
 8009020:	22fc      	movs	r2, #252	; 0xfc
 8009022:	701a      	strb	r2, [r3, #0]
 8009024:	e033      	b.n	800908e <VL53L1_SetLimitCheckValue+0x92>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009026:	240a      	movs	r4, #10
 8009028:	193b      	adds	r3, r7, r4
 800902a:	8819      	ldrh	r1, [r3, #0]
 800902c:	2516      	movs	r5, #22
 800902e:	197b      	adds	r3, r7, r5
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	22e1      	movs	r2, #225	; 0xe1
 8009034:	0092      	lsls	r2, r2, #2
 8009036:	1841      	adds	r1, r0, r1
 8009038:	188a      	adds	r2, r1, r2
 800903a:	7812      	ldrb	r2, [r2, #0]
 800903c:	701a      	strb	r2, [r3, #0]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 800903e:	197b      	adds	r3, r7, r5
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d109      	bne.n	800905a <VL53L1_SetLimitCheckValue+0x5e>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009046:	193b      	adds	r3, r7, r4
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	33e0      	adds	r3, #224	; 0xe0
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	18d3      	adds	r3, r2, r3
 8009052:	3308      	adds	r3, #8
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	e019      	b.n	800908e <VL53L1_SetLimitCheckValue+0x92>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 800905a:	2517      	movs	r5, #23
 800905c:	197c      	adds	r4, r7, r5
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	260a      	movs	r6, #10
 8009062:	19bb      	adds	r3, r7, r6
 8009064:	8819      	ldrh	r1, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	0018      	movs	r0, r3
 800906a:	f7ff ff0b 	bl	8008e84 <SetLimitValue>
 800906e:	0003      	movs	r3, r0
 8009070:	7023      	strb	r3, [r4, #0]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 8009072:	197b      	adds	r3, r7, r5
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	b25b      	sxtb	r3, r3
 8009078:	2b00      	cmp	r3, #0
 800907a:	d108      	bne.n	800908e <VL53L1_SetLimitCheckValue+0x92>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800907c:	19bb      	adds	r3, r7, r6
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	33e0      	adds	r3, #224	; 0xe0
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	18d3      	adds	r3, r2, r3
 8009088:	3308      	adds	r3, #8
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	601a      	str	r2, [r3, #0]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800908e:	2317      	movs	r3, #23
 8009090:	18fb      	adds	r3, r7, r3
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	b25b      	sxtb	r3, r3
}
 8009096:	0018      	movs	r0, r3
 8009098:	46bd      	mov	sp, r7
 800909a:	b007      	add	sp, #28
 800909c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800909e <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800909e:	b5b0      	push	{r4, r5, r7, lr}
 80090a0:	b088      	sub	sp, #32
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	200a      	movs	r0, #10
 80090aa:	183b      	adds	r3, r7, r0
 80090ac:	1c0a      	adds	r2, r1, #0
 80090ae:	801a      	strh	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80090b0:	231f      	movs	r3, #31
 80090b2:	18fb      	adds	r3, r7, r3
 80090b4:	2200      	movs	r2, #0
 80090b6:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80090b8:	183b      	adds	r3, r7, r0
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <VL53L1_GetLimitCheckValue+0x28>
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d010      	beq.n	80090e6 <VL53L1_GetLimitCheckValue+0x48>
 80090c4:	e01f      	b.n	8009106 <VL53L1_GetLimitCheckValue+0x68>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80090c6:	231f      	movs	r3, #31
 80090c8:	18fc      	adds	r4, r7, r3
 80090ca:	2514      	movs	r5, #20
 80090cc:	197a      	adds	r2, r7, r5
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	0011      	movs	r1, r2
 80090d2:	0018      	movs	r0, r3
 80090d4:	f001 f9d2 	bl	800a47c <VL53L1_get_lite_sigma_threshold>
 80090d8:	0003      	movs	r3, r0
 80090da:	7023      	strb	r3, [r4, #0]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80090dc:	197b      	adds	r3, r7, r5
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	039b      	lsls	r3, r3, #14
 80090e2:	61bb      	str	r3, [r7, #24]
		break;
 80090e4:	e013      	b.n	800910e <VL53L1_GetLimitCheckValue+0x70>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80090e6:	231f      	movs	r3, #31
 80090e8:	18fc      	adds	r4, r7, r3
 80090ea:	2516      	movs	r5, #22
 80090ec:	197a      	adds	r2, r7, r5
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	0011      	movs	r1, r2
 80090f2:	0018      	movs	r0, r3
 80090f4:	f001 f9f4 	bl	800a4e0 <VL53L1_get_lite_min_count_rate>
 80090f8:	0003      	movs	r3, r0
 80090fa:	7023      	strb	r3, [r4, #0]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80090fc:	197b      	adds	r3, r7, r5
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	025b      	lsls	r3, r3, #9
 8009102:	61bb      	str	r3, [r7, #24]
		break;
 8009104:	e003      	b.n	800910e <VL53L1_GetLimitCheckValue+0x70>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8009106:	231f      	movs	r3, #31
 8009108:	18fb      	adds	r3, r7, r3
 800910a:	22fc      	movs	r2, #252	; 0xfc
 800910c:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800910e:	231f      	movs	r3, #31
 8009110:	18fb      	adds	r3, r7, r3
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	b25b      	sxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d12f      	bne.n	800917a <VL53L1_GetLimitCheckValue+0xdc>

		if (TempFix1616 == 0) {
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d116      	bne.n	800914e <VL53L1_GetLimitCheckValue+0xb0>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8009120:	210a      	movs	r1, #10
 8009122:	187b      	adds	r3, r7, r1
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	33e0      	adds	r3, #224	; 0xe0
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	18d3      	adds	r3, r2, r3
 800912e:	3308      	adds	r3, #8
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800913a:	187b      	adds	r3, r7, r1
 800913c:	881a      	ldrh	r2, [r3, #0]
 800913e:	68f9      	ldr	r1, [r7, #12]
 8009140:	23e1      	movs	r3, #225	; 0xe1
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	188a      	adds	r2, r1, r2
 8009146:	18d3      	adds	r3, r2, r3
 8009148:	2200      	movs	r2, #0
 800914a:	701a      	strb	r2, [r3, #0]
 800914c:	e015      	b.n	800917a <VL53L1_GetLimitCheckValue+0xdc>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	69ba      	ldr	r2, [r7, #24]
 8009152:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8009154:	210a      	movs	r1, #10
 8009156:	187b      	adds	r3, r7, r1
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	33e0      	adds	r3, #224	; 0xe0
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	18d3      	adds	r3, r2, r3
 8009162:	3308      	adds	r3, #8
 8009164:	69ba      	ldr	r2, [r7, #24]
 8009166:	601a      	str	r2, [r3, #0]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8009168:	187b      	adds	r3, r7, r1
 800916a:	881a      	ldrh	r2, [r3, #0]
 800916c:	68f9      	ldr	r1, [r7, #12]
 800916e:	23e1      	movs	r3, #225	; 0xe1
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	188a      	adds	r2, r1, r2
 8009174:	18d3      	adds	r3, r2, r3
 8009176:	2201      	movs	r2, #1
 8009178:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800917a:	231f      	movs	r3, #31
 800917c:	18fb      	adds	r3, r7, r3
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	b25b      	sxtb	r3, r3

}
 8009182:	0018      	movs	r0, r3
 8009184:	46bd      	mov	sp, r7
 8009186:	b008      	add	sp, #32
 8009188:	bdb0      	pop	{r4, r5, r7, pc}

0800918a <VL53L1_SetUserROI>:

/* Group ROI Functions */

VL53L1_Error VL53L1_SetUserROI(VL53L1_DEV Dev,
		VL53L1_UserRoi_t *pRoi)
{
 800918a:	b5b0      	push	{r4, r5, r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009194:	250f      	movs	r5, #15
 8009196:	197b      	adds	r3, r7, r5
 8009198:	2200      	movs	r2, #0
 800919a:	701a      	strb	r2, [r3, #0]
	VL53L1_user_zone_t user_zone;

	Status = CheckValidRectRoi(*pRoi);
 800919c:	197c      	adds	r4, r7, r5
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781a      	ldrb	r2, [r3, #0]
 80091a2:	7859      	ldrb	r1, [r3, #1]
 80091a4:	0209      	lsls	r1, r1, #8
 80091a6:	430a      	orrs	r2, r1
 80091a8:	7899      	ldrb	r1, [r3, #2]
 80091aa:	0409      	lsls	r1, r1, #16
 80091ac:	430a      	orrs	r2, r1
 80091ae:	78db      	ldrb	r3, [r3, #3]
 80091b0:	061b      	lsls	r3, r3, #24
 80091b2:	431a      	orrs	r2, r3
 80091b4:	2300      	movs	r3, #0
 80091b6:	0013      	movs	r3, r2
 80091b8:	0018      	movs	r0, r3
 80091ba:	f7ff f903 	bl	80083c4 <CheckValidRectRoi>
 80091be:	0003      	movs	r3, r0
 80091c0:	7023      	strb	r3, [r4, #0]
	if (Status != VL53L1_ERROR_NONE)
 80091c2:	197b      	adds	r3, r7, r5
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	b25b      	sxtb	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <VL53L1_SetUserROI+0x48>
		return VL53L1_ERROR_INVALID_PARAMS;
 80091cc:	2304      	movs	r3, #4
 80091ce:	425b      	negs	r3, r3
 80091d0:	e049      	b.n	8009266 <VL53L1_SetUserROI+0xdc>

	user_zone.x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	789b      	ldrb	r3, [r3, #2]
 80091d6:	001a      	movs	r2, r3
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	18d3      	adds	r3, r2, r3
 80091de:	3301      	adds	r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	da00      	bge.n	80091e6 <VL53L1_SetUserROI+0x5c>
 80091e4:	3301      	adds	r3, #1
 80091e6:	105b      	asrs	r3, r3, #1
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	2308      	movs	r3, #8
 80091ec:	18fb      	adds	r3, r7, r3
 80091ee:	701a      	strb	r2, [r3, #0]
	user_zone.y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	785b      	ldrb	r3, [r3, #1]
 80091f4:	001a      	movs	r2, r3
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	78db      	ldrb	r3, [r3, #3]
 80091fa:	18d3      	adds	r3, r2, r3
 80091fc:	3301      	adds	r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	da00      	bge.n	8009204 <VL53L1_SetUserROI+0x7a>
 8009202:	3301      	adds	r3, #1
 8009204:	105b      	asrs	r3, r3, #1
 8009206:	b2da      	uxtb	r2, r3
 8009208:	2108      	movs	r1, #8
 800920a:	187b      	adds	r3, r7, r1
 800920c:	705a      	strb	r2, [r3, #1]
	user_zone.width =    (pRoi->BotRightX - pRoi->TopLeftX);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	789a      	ldrb	r2, [r3, #2]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	b2da      	uxtb	r2, r3
 800921a:	187b      	adds	r3, r7, r1
 800921c:	709a      	strb	r2, [r3, #2]
	user_zone.height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	785a      	ldrb	r2, [r3, #1]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	78db      	ldrb	r3, [r3, #3]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	b2da      	uxtb	r2, r3
 800922a:	187b      	adds	r3, r7, r1
 800922c:	70da      	strb	r2, [r3, #3]
	if ((user_zone.width < 3) || (user_zone.height < 3))
 800922e:	187b      	adds	r3, r7, r1
 8009230:	789b      	ldrb	r3, [r3, #2]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d903      	bls.n	800923e <VL53L1_SetUserROI+0xb4>
 8009236:	187b      	adds	r3, r7, r1
 8009238:	78db      	ldrb	r3, [r3, #3]
 800923a:	2b02      	cmp	r3, #2
 800923c:	d804      	bhi.n	8009248 <VL53L1_SetUserROI+0xbe>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800923e:	230f      	movs	r3, #15
 8009240:	18fb      	adds	r3, r7, r3
 8009242:	22fc      	movs	r2, #252	; 0xfc
 8009244:	701a      	strb	r2, [r3, #0]
 8009246:	e00a      	b.n	800925e <VL53L1_SetUserROI+0xd4>
	else
		Status =  VL53L1_set_user_zone(Dev, &user_zone);
 8009248:	230f      	movs	r3, #15
 800924a:	18fc      	adds	r4, r7, r3
 800924c:	2308      	movs	r3, #8
 800924e:	18fa      	adds	r2, r7, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	0011      	movs	r1, r2
 8009254:	0018      	movs	r0, r3
 8009256:	f000 feb3 	bl	8009fc0 <VL53L1_set_user_zone>
 800925a:	0003      	movs	r3, r0
 800925c:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800925e:	230f      	movs	r3, #15
 8009260:	18fb      	adds	r3, r7, r3
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	b25b      	sxtb	r3, r3
}
 8009266:	0018      	movs	r0, r3
 8009268:	46bd      	mov	sp, r7
 800926a:	b004      	add	sp, #16
 800926c:	bdb0      	pop	{r4, r5, r7, pc}

0800926e <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800926e:	b5b0      	push	{r4, r5, r7, lr}
 8009270:	b086      	sub	sp, #24
 8009272:	af00      	add	r7, sp, #0
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	200b      	movs	r0, #11
 800927a:	183b      	adds	r3, r7, r0
 800927c:	1c0a      	adds	r2, r1, #0
 800927e:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009280:	2517      	movs	r5, #23
 8009282:	197b      	adds	r3, r7, r5
 8009284:	2200      	movs	r2, #0
 8009286:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8009288:	197c      	adds	r4, r7, r5
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	183b      	adds	r3, r7, r0
 800928e:	7819      	ldrb	r1, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	0018      	movs	r0, r3
 8009294:	f000 fe4c 	bl	8009f30 <VL53L1_get_sequence_config_bit>
 8009298:	0003      	movs	r3, r0
 800929a:	7023      	strb	r3, [r4, #0]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800929c:	197b      	adds	r3, r7, r5
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	b25b      	sxtb	r3, r3
}
 80092a2:	0018      	movs	r0, r3
 80092a4:	46bd      	mov	sp, r7
 80092a6:	b006      	add	sp, #24
 80092a8:	bdb0      	pop	{r4, r5, r7, pc}

080092aa <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 80092aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ac:	b087      	sub	sp, #28
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80092b2:	2317      	movs	r3, #23
 80092b4:	18fb      	adds	r3, r7, r3
 80092b6:	2200      	movs	r2, #0
 80092b8:	701a      	strb	r2, [r3, #0]
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 80092ba:	2016      	movs	r0, #22
 80092bc:	183b      	adds	r3, r7, r0
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	22de      	movs	r2, #222	; 0xde
 80092c2:	0092      	lsls	r2, r2, #2
 80092c4:	5c8a      	ldrb	r2, [r1, r2]
 80092c6:	701a      	strb	r2, [r3, #0]
	switch (CurrPalState) {
 80092c8:	183b      	adds	r3, r7, r0
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	2b63      	cmp	r3, #99	; 0x63
 80092ce:	dc16      	bgt.n	80092fe <VL53L1_StartMeasurement+0x54>
 80092d0:	2b62      	cmp	r3, #98	; 0x62
 80092d2:	da0f      	bge.n	80092f4 <VL53L1_StartMeasurement+0x4a>
 80092d4:	2b05      	cmp	r3, #5
 80092d6:	dc12      	bgt.n	80092fe <VL53L1_StartMeasurement+0x54>
 80092d8:	2b04      	cmp	r3, #4
 80092da:	da0b      	bge.n	80092f4 <VL53L1_StartMeasurement+0x4a>
 80092dc:	2b02      	cmp	r3, #2
 80092de:	dc02      	bgt.n	80092e6 <VL53L1_StartMeasurement+0x3c>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	da07      	bge.n	80092f4 <VL53L1_StartMeasurement+0x4a>
 80092e4:	e00b      	b.n	80092fe <VL53L1_StartMeasurement+0x54>
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d109      	bne.n	80092fe <VL53L1_StartMeasurement+0x54>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80092ea:	2317      	movs	r3, #23
 80092ec:	18fb      	adds	r3, r7, r3
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
		break;
 80092f2:	e008      	b.n	8009306 <VL53L1_StartMeasurement+0x5c>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80092f4:	2317      	movs	r3, #23
 80092f6:	18fb      	adds	r3, r7, r3
 80092f8:	22f2      	movs	r2, #242	; 0xf2
 80092fa:	701a      	strb	r2, [r3, #0]
		break;
 80092fc:	e003      	b.n	8009306 <VL53L1_StartMeasurement+0x5c>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80092fe:	2317      	movs	r3, #23
 8009300:	18fb      	adds	r3, r7, r3
 8009302:	22fd      	movs	r2, #253	; 0xfd
 8009304:	701a      	strb	r2, [r3, #0]
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8009306:	2115      	movs	r1, #21
 8009308:	187b      	adds	r3, r7, r1
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	7892      	ldrb	r2, [r2, #2]
 800930e:	701a      	strb	r2, [r3, #0]

	/* Check timing configuration between timing budget and
	* inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 8009310:	2517      	movs	r5, #23
 8009312:	197b      	adds	r3, r7, r5
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	b25b      	sxtb	r3, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d128      	bne.n	800936e <VL53L1_StartMeasurement+0xc4>
 800931c:	187b      	adds	r3, r7, r1
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b40      	cmp	r3, #64	; 0x40
 8009322:	d124      	bne.n	800936e <VL53L1_StartMeasurement+0xc4>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8009324:	2614      	movs	r6, #20
 8009326:	19bc      	adds	r4, r7, r6
 8009328:	2310      	movs	r3, #16
 800932a:	18fa      	adds	r2, r7, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	0011      	movs	r1, r2
 8009330:	0018      	movs	r0, r3
 8009332:	f7ff fc87 	bl	8008c44 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8009336:	0003      	movs	r3, r0
 8009338:	7023      	strb	r3, [r4, #0]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	22fa      	movs	r2, #250	; 0xfa
 800933e:	0091      	lsls	r1, r2, #2
 8009340:	0018      	movs	r0, r3
 8009342:	f7f6 fefd 	bl	8000140 <__udivsi3>
 8009346:	0003      	movs	r3, r0
 8009348:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 800934a:	19bc      	adds	r4, r7, r6
 800934c:	230c      	movs	r3, #12
 800934e:	18fa      	adds	r2, r7, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	0011      	movs	r1, r2
 8009354:	0018      	movs	r0, r3
 8009356:	f7ff fd6d 	bl	8008e34 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 800935a:	0003      	movs	r3, r0
 800935c:	7023      	strb	r3, [r4, #0]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	1d1a      	adds	r2, r3, #4
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	429a      	cmp	r2, r3
 8009366:	d902      	bls.n	800936e <VL53L1_StartMeasurement+0xc4>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8009368:	197b      	adds	r3, r7, r5
 800936a:	22fc      	movs	r2, #252	; 0xfc
 800936c:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L1_ERROR_NONE)
 800936e:	2217      	movs	r2, #23
 8009370:	18bb      	adds	r3, r7, r2
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	b25b      	sxtb	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10a      	bne.n	8009390 <VL53L1_StartMeasurement+0xe6>
		Status = VL53L1_init_and_start_range(
 800937a:	18bc      	adds	r4, r7, r2
 800937c:	2315      	movs	r3, #21
 800937e:	18fb      	adds	r3, r7, r3
 8009380:	7819      	ldrb	r1, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2206      	movs	r2, #6
 8009386:	0018      	movs	r0, r3
 8009388:	f001 f902 	bl	800a590 <VL53L1_init_and_start_range>
 800938c:	0003      	movs	r3, r0
 800938e:	7023      	strb	r3, [r4, #0]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8009390:	2317      	movs	r3, #23
 8009392:	18fb      	adds	r3, r7, r3
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	b25b      	sxtb	r3, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <VL53L1_StartMeasurement+0xfc>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	23de      	movs	r3, #222	; 0xde
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	2104      	movs	r1, #4
 80093a4:	54d1      	strb	r1, [r2, r3]


	LOG_FUNCTION_END(Status);
	return Status;
 80093a6:	2317      	movs	r3, #23
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	b25b      	sxtb	r3, r3
}
 80093ae:	0018      	movs	r0, r3
 80093b0:	46bd      	mov	sp, r7
 80093b2:	b007      	add	sp, #28
 80093b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080093b8 <ChangePresetMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static VL53L1_Error ChangePresetMode(VL53L1_DEV Dev)
{
 80093b8:	b5b0      	push	{r4, r5, r7, lr}
 80093ba:	b08a      	sub	sp, #40	; 0x28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80093c0:	2527      	movs	r5, #39	; 0x27
 80093c2:	197b      	adds	r3, r7, r5
 80093c4:	2200      	movs	r2, #0
 80093c6:	701a      	strb	r2, [r3, #0]
	uint8_t DeviceMeasurementMode;
	uint32_t inter_measurement_period_ms;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_user_zone(Dev, &user_zone);
 80093c8:	197c      	adds	r4, r7, r5
 80093ca:	2318      	movs	r3, #24
 80093cc:	18fa      	adds	r2, r7, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	0011      	movs	r1, r2
 80093d2:	0018      	movs	r0, r3
 80093d4:	f000 fe1a 	bl	800a00c <VL53L1_get_user_zone>
 80093d8:	0003      	movs	r3, r0
 80093da:	7023      	strb	r3, [r4, #0]
	/*  Initialize variables fix ticket EwokP #475395 */
	PresetMode = VL53L1DevDataGet(Dev,
 80093dc:	2326      	movs	r3, #38	; 0x26
 80093de:	18fb      	adds	r3, r7, r3
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	22df      	movs	r2, #223	; 0xdf
 80093e4:	0092      	lsls	r2, r2, #2
 80093e6:	5c8a      	ldrb	r2, [r1, r2]
 80093e8:	701a      	strb	r2, [r3, #0]
			CurrentParameters.PresetMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 80093ea:	2325      	movs	r3, #37	; 0x25
 80093ec:	18fb      	adds	r3, r7, r3
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	494b      	ldr	r1, [pc, #300]	; (8009520 <ChangePresetMode+0x168>)
 80093f2:	5c52      	ldrb	r2, [r2, r1]
 80093f4:	701a      	strb	r2, [r3, #0]
			CurrentParameters.NewDistanceMode);
	/*  End of Initialize variables fix ticket EwokP #475395 */
	if (Status == VL53L1_ERROR_NONE)
 80093f6:	197b      	adds	r3, r7, r5
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	b25b      	sxtb	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10b      	bne.n	8009418 <ChangePresetMode+0x60>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8009400:	197c      	adds	r4, r7, r5
 8009402:	2314      	movs	r3, #20
 8009404:	18fb      	adds	r3, r7, r3
 8009406:	2210      	movs	r2, #16
 8009408:	18ba      	adds	r2, r7, r2
 800940a:	210c      	movs	r1, #12
 800940c:	1879      	adds	r1, r7, r1
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fd03 	bl	8009e1a <VL53L1_get_timeouts_us>
 8009414:	0003      	movs	r3, r0
 8009416:	7023      	strb	r3, [r4, #0]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8009418:	2227      	movs	r2, #39	; 0x27
 800941a:	18bb      	adds	r3, r7, r2
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	b25b      	sxtb	r3, r3
 8009420:	2b00      	cmp	r3, #0
 8009422:	d106      	bne.n	8009432 <ChangePresetMode+0x7a>
		Status = VL53L1_stop_range(Dev);
 8009424:	18bc      	adds	r4, r7, r2
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	0018      	movs	r0, r3
 800942a:	f001 fbc3 	bl	800abb4 <VL53L1_stop_range>
 800942e:	0003      	movs	r3, r0
 8009430:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L1_ERROR_NONE)
 8009432:	2227      	movs	r2, #39	; 0x27
 8009434:	18bb      	adds	r3, r7, r2
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	b25b      	sxtb	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d109      	bne.n	8009452 <ChangePresetMode+0x9a>
		Status = VL53L1_WaitUs(Dev, 500);
 800943e:	18bc      	adds	r4, r7, r2
 8009440:	23fa      	movs	r3, #250	; 0xfa
 8009442:	005a      	lsls	r2, r3, #1
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	0011      	movs	r1, r2
 8009448:	0018      	movs	r0, r3
 800944a:	f005 f9d1 	bl	800e7f0 <VL53L1_WaitUs>
 800944e:	0003      	movs	r3, r0
 8009450:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L1_ERROR_NONE) {
 8009452:	2227      	movs	r2, #39	; 0x27
 8009454:	18bb      	adds	r3, r7, r2
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	b25b      	sxtb	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d110      	bne.n	8009480 <ChangePresetMode+0xc8>
		inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	623b      	str	r3, [r7, #32]
					LLData.inter_measurement_period_ms);

		Status = SetPresetMode(Dev,
 8009464:	18bc      	adds	r4, r7, r2
 8009466:	6a3d      	ldr	r5, [r7, #32]
 8009468:	2325      	movs	r3, #37	; 0x25
 800946a:	18fb      	adds	r3, r7, r3
 800946c:	781a      	ldrb	r2, [r3, #0]
 800946e:	2326      	movs	r3, #38	; 0x26
 8009470:	18fb      	adds	r3, r7, r3
 8009472:	7819      	ldrb	r1, [r3, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	002b      	movs	r3, r5
 8009478:	f7ff f932 	bl	80086e0 <SetPresetMode>
 800947c:	0003      	movs	r3, r0
 800947e:	7023      	strb	r3, [r4, #0]
				PresetMode,
				NewDistanceMode,
				inter_measurement_period_ms);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8009480:	2527      	movs	r5, #39	; 0x27
 8009482:	197b      	adds	r3, r7, r5
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	b25b      	sxtb	r3, r3
 8009488:	2b00      	cmp	r3, #0
 800948a:	d110      	bne.n	80094ae <ChangePresetMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800948c:	68f9      	ldr	r1, [r7, #12]
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	197c      	adds	r4, r7, r5
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fc7d 	bl	8009d94 <VL53L1_set_timeouts_us>
 800949a:	0003      	movs	r3, r0
 800949c:	7023      	strb	r3, [r4, #0]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800949e:	197b      	adds	r3, r7, r5
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	b25b      	sxtb	r3, r3
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d102      	bne.n	80094ae <ChangePresetMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 80094ae:	2227      	movs	r2, #39	; 0x27
 80094b0:	18bb      	adds	r3, r7, r2
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	b25b      	sxtb	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d109      	bne.n	80094ce <ChangePresetMode+0x116>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 80094ba:	18bc      	adds	r4, r7, r2
 80094bc:	2318      	movs	r3, #24
 80094be:	18fa      	adds	r2, r7, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	0011      	movs	r1, r2
 80094c4:	0018      	movs	r0, r3
 80094c6:	f000 fd7b 	bl	8009fc0 <VL53L1_set_user_zone>
 80094ca:	0003      	movs	r3, r0
 80094cc:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L1_ERROR_NONE) {
 80094ce:	2127      	movs	r1, #39	; 0x27
 80094d0:	187b      	adds	r3, r7, r1
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	b25b      	sxtb	r3, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10e      	bne.n	80094f8 <ChangePresetMode+0x140>
		DeviceMeasurementMode = VL53L1DevDataGet(Dev,
 80094da:	201f      	movs	r0, #31
 80094dc:	183b      	adds	r3, r7, r0
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	7892      	ldrb	r2, [r2, #2]
 80094e2:	701a      	strb	r2, [r3, #0]
				LLData.measurement_mode);

		Status = VL53L1_init_and_start_range(
 80094e4:	187c      	adds	r4, r7, r1
 80094e6:	183b      	adds	r3, r7, r0
 80094e8:	7819      	ldrb	r1, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2206      	movs	r2, #6
 80094ee:	0018      	movs	r0, r3
 80094f0:	f001 f84e 	bl	800a590 <VL53L1_init_and_start_range>
 80094f4:	0003      	movs	r3, r0
 80094f6:	7023      	strb	r3, [r4, #0]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);
	}

	if (Status == VL53L1_ERROR_NONE)
 80094f8:	2327      	movs	r3, #39	; 0x27
 80094fa:	18fb      	adds	r3, r7, r3
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	b25b      	sxtb	r3, r3
 8009500:	2b00      	cmp	r3, #0
 8009502:	d105      	bne.n	8009510 <ChangePresetMode+0x158>
		VL53L1DevDataSet(Dev,
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2225      	movs	r2, #37	; 0x25
 8009508:	18ba      	adds	r2, r7, r2
 800950a:	4906      	ldr	r1, [pc, #24]	; (8009524 <ChangePresetMode+0x16c>)
 800950c:	7812      	ldrb	r2, [r2, #0]
 800950e:	545a      	strb	r2, [r3, r1]
			CurrentParameters.InternalDistanceMode,
			NewDistanceMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8009510:	2327      	movs	r3, #39	; 0x27
 8009512:	18fb      	adds	r3, r7, r3
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	b25b      	sxtb	r3, r3
}
 8009518:	0018      	movs	r0, r3
 800951a:	46bd      	mov	sp, r7
 800951c:	b00a      	add	sp, #40	; 0x28
 800951e:	bdb0      	pop	{r4, r5, r7, pc}
 8009520:	0000037f 	.word	0x0000037f
 8009524:	0000037e 	.word	0x0000037e

08009528 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8009528:	b5b0      	push	{r4, r5, r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009530:	200f      	movs	r0, #15
 8009532:	183b      	adds	r3, r7, r0
 8009534:	2200      	movs	r2, #0
 8009536:	701a      	strb	r2, [r3, #0]
	VL53L1_DistanceModes InternalDistanceMode;
	VL53L1_DistanceModes NewDistanceMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8009538:	230e      	movs	r3, #14
 800953a:	18fb      	adds	r3, r7, r3
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	7892      	ldrb	r2, [r2, #2]
 8009540:	701a      	strb	r2, [r3, #0]
	InternalDistanceMode = VL53L1DevDataGet(Dev,
 8009542:	240d      	movs	r4, #13
 8009544:	193b      	adds	r3, r7, r4
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	4915      	ldr	r1, [pc, #84]	; (80095a0 <VL53L1_ClearInterruptAndStartMeasurement+0x78>)
 800954a:	5c52      	ldrb	r2, [r2, r1]
 800954c:	701a      	strb	r2, [r3, #0]
			CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 800954e:	250c      	movs	r5, #12
 8009550:	197b      	adds	r3, r7, r5
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	4913      	ldr	r1, [pc, #76]	; (80095a4 <VL53L1_ClearInterruptAndStartMeasurement+0x7c>)
 8009556:	5c52      	ldrb	r2, [r2, r1]
 8009558:	701a      	strb	r2, [r3, #0]
			CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 800955a:	197a      	adds	r2, r7, r5
 800955c:	193b      	adds	r3, r7, r4
 800955e:	7812      	ldrb	r2, [r2, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	429a      	cmp	r2, r3
 8009564:	d007      	beq.n	8009576 <VL53L1_ClearInterruptAndStartMeasurement+0x4e>
		Status = ChangePresetMode(Dev);
 8009566:	183c      	adds	r4, r7, r0
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	0018      	movs	r0, r3
 800956c:	f7ff ff24 	bl	80093b8 <ChangePresetMode>
 8009570:	0003      	movs	r3, r0
 8009572:	7023      	strb	r3, [r4, #0]
 8009574:	e00b      	b.n	800958e <VL53L1_ClearInterruptAndStartMeasurement+0x66>
	else
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 8009576:	230f      	movs	r3, #15
 8009578:	18fc      	adds	r4, r7, r3
 800957a:	230e      	movs	r3, #14
 800957c:	18fb      	adds	r3, r7, r3
 800957e:	781a      	ldrb	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	0011      	movs	r1, r2
 8009584:	0018      	movs	r0, r3
 8009586:	f001 fcf9 	bl	800af7c <VL53L1_clear_interrupt_and_enable_next_range>
 800958a:	0003      	movs	r3, r0
 800958c:	7023      	strb	r3, [r4, #0]
						Dev,
						DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800958e:	230f      	movs	r3, #15
 8009590:	18fb      	adds	r3, r7, r3
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	b25b      	sxtb	r3, r3
}
 8009596:	0018      	movs	r0, r3
 8009598:	46bd      	mov	sp, r7
 800959a:	b004      	add	sp, #16
 800959c:	bdb0      	pop	{r4, r5, r7, pc}
 800959e:	46c0      	nop			; (mov r8, r8)
 80095a0:	0000037e 	.word	0x0000037e
 80095a4:	0000037f 	.word	0x0000037f

080095a8 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 80095a8:	b5b0      	push	{r4, r5, r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80095b0:	250f      	movs	r5, #15
 80095b2:	197b      	adds	r3, r7, r5
 80095b4:	2200      	movs	r2, #0
 80095b6:	701a      	strb	r2, [r3, #0]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 80095b8:	197c      	adds	r4, r7, r5
 80095ba:	23fa      	movs	r3, #250	; 0xfa
 80095bc:	00da      	lsls	r2, r3, #3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	0011      	movs	r1, r2
 80095c2:	0018      	movs	r0, r3
 80095c4:	f004 ff19 	bl	800e3fa <VL53L1_poll_for_range_completion>
 80095c8:	0003      	movs	r3, r0
 80095ca:	7023      	strb	r3, [r4, #0]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80095cc:	197b      	adds	r3, r7, r5
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	b25b      	sxtb	r3, r3
}
 80095d2:	0018      	movs	r0, r3
 80095d4:	46bd      	mov	sp, r7
 80095d6:	b004      	add	sp, #16
 80095d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080095dc <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08c      	sub	sp, #48	; 0x30
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	603a      	str	r2, [r7, #0]
 80095e4:	1dfb      	adds	r3, r7, #7
 80095e6:	1c02      	adds	r2, r0, #0
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	1dbb      	adds	r3, r7, #6
 80095ec:	1c0a      	adds	r2, r1, #0
 80095ee:	701a      	strb	r2, [r3, #0]
	int16_t SRL = 300;
 80095f0:	2324      	movs	r3, #36	; 0x24
 80095f2:	18fb      	adds	r3, r7, r3
 80095f4:	2296      	movs	r2, #150	; 0x96
 80095f6:	0052      	lsls	r2, r2, #1
 80095f8:	801a      	strh	r2, [r3, #0]
	uint16_t SRAS = 30;
 80095fa:	2322      	movs	r3, #34	; 0x22
 80095fc:	18fb      	adds	r3, r7, r3
 80095fe:	221e      	movs	r2, #30
 8009600:	801a      	strh	r2, [r3, #0]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8009602:	4b39      	ldr	r3, [pc, #228]	; (80096e8 <ComputeRQL+0x10c>)
 8009604:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 8009606:	4b39      	ldr	r3, [pc, #228]	; (80096ec <ComputeRQL+0x110>)
 8009608:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800960a:	4b39      	ldr	r3, [pc, #228]	; (80096f0 <ComputeRQL+0x114>)
 800960c:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800960e:	1dfb      	adds	r3, r7, #7
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d104      	bne.n	8009620 <ComputeRQL+0x44>
		returnvalue = 0;
 8009616:	2327      	movs	r3, #39	; 0x27
 8009618:	18fb      	adds	r3, r7, r3
 800961a:	2200      	movs	r2, #0
 800961c:	701a      	strb	r2, [r3, #0]
 800961e:	e05b      	b.n	80096d8 <ComputeRQL+0xfc>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8009620:	1dbb      	adds	r3, r7, #6
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2b07      	cmp	r3, #7
 8009626:	d104      	bne.n	8009632 <ComputeRQL+0x56>
		returnvalue = 50;
 8009628:	2327      	movs	r3, #39	; 0x27
 800962a:	18fb      	adds	r3, r7, r3
 800962c:	2232      	movs	r2, #50	; 0x32
 800962e:	701a      	strb	r2, [r3, #0]
 8009630:	e052      	b.n	80096d8 <ComputeRQL+0xfc>
	else {
		if (presults_data->median_range_mm < SRL)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	223c      	movs	r2, #60	; 0x3c
 8009636:	5e9b      	ldrsh	r3, [r3, r2]
 8009638:	2224      	movs	r2, #36	; 0x24
 800963a:	18ba      	adds	r2, r7, r2
 800963c:	2100      	movs	r1, #0
 800963e:	5e52      	ldrsh	r2, [r2, r1]
 8009640:	429a      	cmp	r2, r3
 8009642:	dd05      	ble.n	8009650 <ComputeRQL+0x74>
			RAS = SRAS * 65536;
 8009644:	2322      	movs	r3, #34	; 0x22
 8009646:	18fb      	adds	r3, r7, r3
 8009648:	881b      	ldrh	r3, [r3, #0]
 800964a:	041b      	lsls	r3, r3, #16
 800964c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800964e:	e006      	b.n	800965e <ComputeRQL+0x82>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	223c      	movs	r2, #60	; 0x3c
 8009654:	5e9b      	ldrsh	r3, [r3, r2]
 8009656:	001a      	movs	r2, r3
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	4353      	muls	r3, r2
 800965c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800965e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009660:	2b00      	cmp	r3, #0
 8009662:	d020      	beq.n	80096a6 <ComputeRQL+0xca>
			partial = (GGm * presults_data->sigma_mm);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8009668:	001a      	movs	r2, r3
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	4353      	muls	r3, r2
 800966e:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8009670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009672:	085b      	lsrs	r3, r3, #1
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	18d3      	adds	r3, r2, r3
 8009678:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800967a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800967c:	6938      	ldr	r0, [r7, #16]
 800967e:	f7f6 fd5f 	bl	8000140 <__udivsi3>
 8009682:	0003      	movs	r3, r0
 8009684:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	041b      	lsls	r3, r3, #16
 800968a:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	429a      	cmp	r2, r3
 8009692:	d804      	bhi.n	800969e <ComputeRQL+0xc2>
				SRQL = GI - partial;
 8009694:	69fa      	ldr	r2, [r7, #28]
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	62bb      	str	r3, [r7, #40]	; 0x28
 800969c:	e006      	b.n	80096ac <ComputeRQL+0xd0>
			else
				SRQL = 50 * 65536;
 800969e:	23c8      	movs	r3, #200	; 0xc8
 80096a0:	039b      	lsls	r3, r3, #14
 80096a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80096a4:	e002      	b.n	80096ac <ComputeRQL+0xd0>
		} else
			SRQL = 100 * 65536;
 80096a6:	23c8      	movs	r3, #200	; 0xc8
 80096a8:	03db      	lsls	r3, r3, #15
 80096aa:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 80096ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ae:	0c1a      	lsrs	r2, r3, #16
 80096b0:	210f      	movs	r1, #15
 80096b2:	187b      	adds	r3, r7, r1
 80096b4:	701a      	strb	r2, [r3, #0]
		returnvalue = MAX(50, MIN(100, finalvalue));
 80096b6:	000a      	movs	r2, r1
 80096b8:	18bb      	adds	r3, r7, r2
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	2b32      	cmp	r3, #50	; 0x32
 80096be:	d907      	bls.n	80096d0 <ComputeRQL+0xf4>
 80096c0:	18bb      	adds	r3, r7, r2
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	2a64      	cmp	r2, #100	; 0x64
 80096c8:	d900      	bls.n	80096cc <ComputeRQL+0xf0>
 80096ca:	2364      	movs	r3, #100	; 0x64
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	e000      	b.n	80096d2 <ComputeRQL+0xf6>
 80096d0:	2232      	movs	r2, #50	; 0x32
 80096d2:	2327      	movs	r3, #39	; 0x27
 80096d4:	18fb      	adds	r3, r7, r3
 80096d6:	701a      	strb	r2, [r3, #0]
	}

	return returnvalue;
 80096d8:	2327      	movs	r3, #39	; 0x27
 80096da:	18fb      	adds	r3, r7, r3
 80096dc:	781b      	ldrb	r3, [r3, #0]
}
 80096de:	0018      	movs	r0, r3
 80096e0:	46bd      	mov	sp, r7
 80096e2:	b00c      	add	sp, #48	; 0x30
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	46c0      	nop			; (mov r8, r8)
 80096e8:	0075b333 	.word	0x0075b333
 80096ec:	0030cccd 	.word	0x0030cccd
 80096f0:	0000199a 	.word	0x0000199a

080096f4 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	0002      	movs	r2, r0
 80096fc:	1dfb      	adds	r3, r7, #7
 80096fe:	701a      	strb	r2, [r3, #0]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8009700:	1dfb      	adds	r3, r7, #7
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	3b04      	subs	r3, #4
 8009706:	2b0f      	cmp	r3, #15
 8009708:	d831      	bhi.n	800976e <ConvertStatusLite+0x7a>
 800970a:	009a      	lsls	r2, r3, #2
 800970c:	4b1d      	ldr	r3, [pc, #116]	; (8009784 <ConvertStatusLite+0x90>)
 800970e:	18d3      	adds	r3, r2, r3
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	469f      	mov	pc, r3
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8009714:	230f      	movs	r3, #15
 8009716:	18fb      	adds	r3, r7, r3
 8009718:	220a      	movs	r2, #10
 800971a:	701a      	strb	r2, [r3, #0]
		break;
 800971c:	e02b      	b.n	8009776 <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800971e:	230f      	movs	r3, #15
 8009720:	18fb      	adds	r3, r7, r3
 8009722:	2206      	movs	r2, #6
 8009724:	701a      	strb	r2, [r3, #0]
		break;
 8009726:	e026      	b.n	8009776 <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8009728:	230f      	movs	r3, #15
 800972a:	18fb      	adds	r3, r7, r3
 800972c:	2204      	movs	r2, #4
 800972e:	701a      	strb	r2, [r3, #0]
		break;
 8009730:	e021      	b.n	8009776 <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8009732:	230f      	movs	r3, #15
 8009734:	18fb      	adds	r3, r7, r3
 8009736:	2202      	movs	r2, #2
 8009738:	701a      	strb	r2, [r3, #0]
		break;
 800973a:	e01c      	b.n	8009776 <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 800973c:	230f      	movs	r3, #15
 800973e:	18fb      	adds	r3, r7, r3
 8009740:	2201      	movs	r2, #1
 8009742:	701a      	strb	r2, [r3, #0]
		break;
 8009744:	e017      	b.n	8009776 <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8009746:	230f      	movs	r3, #15
 8009748:	18fb      	adds	r3, r7, r3
 800974a:	2207      	movs	r2, #7
 800974c:	701a      	strb	r2, [r3, #0]
		break;
 800974e:	e012      	b.n	8009776 <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8009750:	230f      	movs	r3, #15
 8009752:	18fb      	adds	r3, r7, r3
 8009754:	2209      	movs	r2, #9
 8009756:	701a      	strb	r2, [r3, #0]
		break;
 8009758:	e00d      	b.n	8009776 <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800975a:	230f      	movs	r3, #15
 800975c:	18fb      	adds	r3, r7, r3
 800975e:	2203      	movs	r2, #3
 8009760:	701a      	strb	r2, [r3, #0]
		break;
 8009762:	e008      	b.n	8009776 <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8009764:	230f      	movs	r3, #15
 8009766:	18fb      	adds	r3, r7, r3
 8009768:	2200      	movs	r2, #0
 800976a:	701a      	strb	r2, [r3, #0]
		break;
 800976c:	e003      	b.n	8009776 <ConvertStatusLite+0x82>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800976e:	230f      	movs	r3, #15
 8009770:	18fb      	adds	r3, r7, r3
 8009772:	22ff      	movs	r2, #255	; 0xff
 8009774:	701a      	strb	r2, [r3, #0]
	}

	return RangeStatus;
 8009776:	230f      	movs	r3, #15
 8009778:	18fb      	adds	r3, r7, r3
 800977a:	781b      	ldrb	r3, [r3, #0]
}
 800977c:	0018      	movs	r0, r3
 800977e:	46bd      	mov	sp, r7
 8009780:	b004      	add	sp, #16
 8009782:	bd80      	pop	{r7, pc}
 8009784:	0801637c 	.word	0x0801637c

08009788 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8009788:	b5b0      	push	{r4, r5, r7, lr}
 800978a:	b08c      	sub	sp, #48	; 0x30
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	0008      	movs	r0, r1
 8009792:	0011      	movs	r1, r2
 8009794:	607b      	str	r3, [r7, #4]
 8009796:	240b      	movs	r4, #11
 8009798:	193b      	adds	r3, r7, r4
 800979a:	1c02      	adds	r2, r0, #0
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	250a      	movs	r5, #10
 80097a0:	197b      	adds	r3, r7, r5
 80097a2:	1c0a      	adds	r2, r1, #0
 80097a4:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80097a6:	232f      	movs	r3, #47	; 0x2f
 80097a8:	18fb      	adds	r3, r7, r3
 80097aa:	2200      	movs	r2, #0
 80097ac:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097b4:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	223e      	movs	r2, #62	; 0x3e
 80097ba:	5c9a      	ldrb	r2, [r3, r2]
 80097bc:	202e      	movs	r0, #46	; 0x2e
 80097be:	183b      	adds	r3, r7, r0
 80097c0:	211f      	movs	r1, #31
 80097c2:	400a      	ands	r2, r1
 80097c4:	701a      	strb	r2, [r3, #0]

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	183b      	adds	r3, r7, r0
 80097ca:	7819      	ldrb	r1, [r3, #0]
 80097cc:	193b      	adds	r3, r7, r4
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	0018      	movs	r0, r3
 80097d2:	f7ff ff03 	bl	80095dc <ComputeRQL>
 80097d6:	0003      	movs	r3, r0
 80097d8:	001a      	movs	r2, r3
 80097da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097dc:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097e2:	025b      	lsls	r3, r3, #9
 80097e4:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80097e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ea:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80097f0:	025b      	lsls	r3, r3, #9
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80097f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f8:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 80097fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009800:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8009806:	025b      	lsls	r3, r3, #9
 8009808:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800980a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800980c:	6a3a      	ldr	r2, [r7, #32]
 800980e:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	223c      	movs	r2, #60	; 0x3c
 8009814:	5e9a      	ldrsh	r2, [r3, r2]
 8009816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009818:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800981a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800981c:	2200      	movs	r2, #0
 800981e:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8009820:	197b      	adds	r3, r7, r5
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	2b11      	cmp	r3, #17
 8009826:	d008      	beq.n	800983a <SetSimpleData+0xb2>
 8009828:	dc0f      	bgt.n	800984a <SetSimpleData+0xc2>
 800982a:	2b03      	cmp	r3, #3
 800982c:	dc02      	bgt.n	8009834 <SetSimpleData+0xac>
 800982e:	2b00      	cmp	r3, #0
 8009830:	dc03      	bgt.n	800983a <SetSimpleData+0xb2>
 8009832:	e00a      	b.n	800984a <SetSimpleData+0xc2>
 8009834:	2b0d      	cmp	r3, #13
 8009836:	d004      	beq.n	8009842 <SetSimpleData+0xba>
 8009838:	e007      	b.n	800984a <SetSimpleData+0xc2>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800983a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800983c:	2205      	movs	r2, #5
 800983e:	76da      	strb	r2, [r3, #27]
		break;
 8009840:	e006      	b.n	8009850 <SetSimpleData+0xc8>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8009842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009844:	220d      	movs	r2, #13
 8009846:	76da      	strb	r2, [r3, #27]
		break;
 8009848:	e002      	b.n	8009850 <SetSimpleData+0xc8>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800984a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800984c:	2200      	movs	r2, #0
 800984e:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8009850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009852:	7edb      	ldrb	r3, [r3, #27]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d109      	bne.n	800986c <SetSimpleData+0xe4>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8009858:	232e      	movs	r3, #46	; 0x2e
 800985a:	18fb      	adds	r3, r7, r3
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	0018      	movs	r0, r3
 8009860:	f7ff ff48 	bl	80096f4 <ConvertStatusLite>
 8009864:	0003      	movs	r3, r0
 8009866:	001a      	movs	r2, r3
			pRangeData->RangeStatus =
 8009868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800986a:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8009870:	025b      	lsls	r3, r3, #9
 8009872:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	23e4      	movs	r3, #228	; 0xe4
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	6a39      	ldr	r1, [r7, #32]
 800987c:	50d1      	str	r1, [r2, r3]
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009882:	025b      	lsls	r3, r3, #9
 8009884:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	23e5      	movs	r3, #229	; 0xe5
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	6a39      	ldr	r1, [r7, #32]
 800988e:	50d1      	str	r1, [r2, r3]
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8009890:	2314      	movs	r3, #20
 8009892:	18fa      	adds	r2, r7, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2100      	movs	r1, #0
 8009898:	0018      	movs	r0, r3
 800989a:	f7ff fc00 	bl	800909e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800989e:	232e      	movs	r3, #46	; 0x2e
 80098a0:	18fb      	adds	r3, r7, r3
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	3b06      	subs	r3, #6
 80098a6:	425a      	negs	r2, r3
 80098a8:	4153      	adcs	r3, r2
 80098aa:	b2da      	uxtb	r2, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 80098ac:	241f      	movs	r4, #31
 80098ae:	193b      	adds	r3, r7, r4
 80098b0:	701a      	strb	r2, [r3, #0]

	VL53L1_GetLimitCheckEnable(Dev,
 80098b2:	2519      	movs	r5, #25
 80098b4:	197a      	adds	r2, r7, r5
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2100      	movs	r1, #0
 80098ba:	0018      	movs	r0, r3
 80098bc:	f7ff fb6e 	bl	8008f9c <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80098c0:	197b      	adds	r3, r7, r5
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d105      	bne.n	80098d4 <SetSimpleData+0x14c>
 80098c8:	193b      	adds	r3, r7, r4
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d101      	bne.n	80098d4 <SetSimpleData+0x14c>
 80098d0:	2201      	movs	r2, #1
 80098d2:	e000      	b.n	80098d6 <SetSimpleData+0x14e>
 80098d4:	2200      	movs	r2, #0
 80098d6:	211e      	movs	r1, #30
 80098d8:	187b      	adds	r3, r7, r1
 80098da:	701a      	strb	r2, [r3, #0]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	187a      	adds	r2, r7, r1
 80098e0:	4928      	ldr	r1, [pc, #160]	; (8009984 <SetSimpleData+0x1fc>)
 80098e2:	7812      	ldrb	r2, [r2, #0]
 80098e4:	545a      	strb	r2, [r3, r1]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 80098e6:	2314      	movs	r3, #20
 80098e8:	18fa      	adds	r2, r7, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2101      	movs	r1, #1
 80098ee:	0018      	movs	r0, r3
 80098f0:	f7ff fbd5 	bl	800909e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 80098f4:	232e      	movs	r3, #46	; 0x2e
 80098f6:	18fb      	adds	r3, r7, r3
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	3b04      	subs	r3, #4
 80098fc:	425a      	negs	r2, r3
 80098fe:	4153      	adcs	r3, r2
 8009900:	b2da      	uxtb	r2, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8009902:	241d      	movs	r4, #29
 8009904:	193b      	adds	r3, r7, r4
 8009906:	701a      	strb	r2, [r3, #0]

	VL53L1_GetLimitCheckEnable(Dev,
 8009908:	2519      	movs	r5, #25
 800990a:	197a      	adds	r2, r7, r5
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2101      	movs	r1, #1
 8009910:	0018      	movs	r0, r3
 8009912:	f7ff fb43 	bl	8008f9c <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8009916:	197b      	adds	r3, r7, r5
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d105      	bne.n	800992a <SetSimpleData+0x1a2>
 800991e:	193b      	adds	r3, r7, r4
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <SetSimpleData+0x1a2>
 8009926:	2201      	movs	r2, #1
 8009928:	e000      	b.n	800992c <SetSimpleData+0x1a4>
 800992a:	2200      	movs	r2, #0
 800992c:	211e      	movs	r1, #30
 800992e:	187b      	adds	r3, r7, r1
 8009930:	701a      	strb	r2, [r3, #0]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	187a      	adds	r2, r7, r1
 8009936:	4914      	ldr	r1, [pc, #80]	; (8009988 <SetSimpleData+0x200>)
 8009938:	7812      	ldrb	r2, [r2, #0]
 800993a:	545a      	strb	r2, [r3, r1]
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800993c:	211a      	movs	r1, #26
 800993e:	187b      	adds	r3, r7, r1
 8009940:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009942:	8b12      	ldrh	r2, [r2, #24]
 8009944:	801a      	strh	r2, [r3, #0]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8009946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009948:	7edb      	ldrb	r3, [r3, #27]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d112      	bne.n	8009974 <SetSimpleData+0x1ec>
 800994e:	187b      	adds	r3, r7, r1
 8009950:	2200      	movs	r2, #0
 8009952:	5e9b      	ldrsh	r3, [r3, r2]
 8009954:	2b00      	cmp	r3, #0
 8009956:	da0d      	bge.n	8009974 <SetSimpleData+0x1ec>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8009958:	187b      	adds	r3, r7, r1
 800995a:	2200      	movs	r2, #0
 800995c:	5e9a      	ldrsh	r2, [r3, r2]
 800995e:	4b0b      	ldr	r3, [pc, #44]	; (800998c <SetSimpleData+0x204>)
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	429a      	cmp	r2, r3
 8009964:	da03      	bge.n	800996e <SetSimpleData+0x1e6>
			pRangeData->RangeStatus =
 8009966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009968:	220e      	movs	r2, #14
 800996a:	76da      	strb	r2, [r3, #27]
 800996c:	e002      	b.n	8009974 <SetSimpleData+0x1ec>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800996e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009970:	2200      	movs	r2, #0
 8009972:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8009974:	232f      	movs	r3, #47	; 0x2f
 8009976:	18fb      	adds	r3, r7, r3
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	b25b      	sxtb	r3, r3
}
 800997c:	0018      	movs	r0, r3
 800997e:	46bd      	mov	sp, r7
 8009980:	b00c      	add	sp, #48	; 0x30
 8009982:	bdb0      	pop	{r4, r5, r7, pc}
 8009984:	00000386 	.word	0x00000386
 8009988:	00000387 	.word	0x00000387
 800998c:	20000240 	.word	0x20000240

08009990 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009992:	b0a9      	sub	sp, #164	; 0xa4
 8009994:	af02      	add	r7, sp, #8
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800999a:	2697      	movs	r6, #151	; 0x97
 800999c:	19bb      	adds	r3, r7, r6
 800999e:	2200      	movs	r2, #0
 80099a0:	701a      	strb	r2, [r3, #0]
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 80099a2:	2308      	movs	r3, #8
 80099a4:	18fb      	adds	r3, r7, r3
 80099a6:	2590      	movs	r5, #144	; 0x90
 80099a8:	197a      	adds	r2, r7, r5
 80099aa:	6013      	str	r3, [r2, #0]

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	221c      	movs	r2, #28
 80099b0:	21ff      	movs	r1, #255	; 0xff
 80099b2:	0018      	movs	r0, r3
 80099b4:	f009 fe0b 	bl	80135ce <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 80099b8:	19bc      	adds	r4, r7, r6
 80099ba:	197b      	adds	r3, r7, r5
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2102      	movs	r1, #2
 80099c2:	0018      	movs	r0, r3
 80099c4:	f001 fa38 	bl	800ae38 <VL53L1_get_device_results>
 80099c8:	0003      	movs	r3, r0
 80099ca:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 80099cc:	0031      	movs	r1, r6
 80099ce:	187b      	adds	r3, r7, r1
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	b25b      	sxtb	r3, r3
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d119      	bne.n	8009a0c <VL53L1_GetRangingMeasurementData+0x7c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 80099d8:	197b      	adds	r3, r7, r5
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	789a      	ldrb	r2, [r3, #2]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 80099e2:	197b      	adds	r3, r7, r5
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3304      	adds	r3, #4
 80099e8:	208c      	movs	r0, #140	; 0x8c
 80099ea:	183a      	adds	r2, r7, r0
 80099ec:	6013      	str	r3, [r2, #0]
		Status = SetSimpleData(Dev, 1,
 80099ee:	197b      	adds	r3, r7, r5
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	78da      	ldrb	r2, [r3, #3]
 80099f4:	187c      	adds	r4, r7, r1
 80099f6:	183b      	adds	r3, r7, r0
 80099f8:	6819      	ldr	r1, [r3, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	000b      	movs	r3, r1
 8009a02:	2101      	movs	r1, #1
 8009a04:	f7ff fec0 	bl	8009788 <SetSimpleData>
 8009a08:	0003      	movs	r3, r0
 8009a0a:	7023      	strb	r3, [r4, #0]
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a0c:	2397      	movs	r3, #151	; 0x97
 8009a0e:	18fb      	adds	r3, r7, r3
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	b25b      	sxtb	r3, r3
}
 8009a14:	0018      	movs	r0, r3
 8009a16:	46bd      	mov	sp, r7
 8009a18:	b027      	add	sp, #156	; 0x9c
 8009a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a1c <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8009a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a1e:	b089      	sub	sp, #36	; 0x24
 8009a20:	af04      	add	r7, sp, #16
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	000a      	movs	r2, r1
 8009a26:	1cfb      	adds	r3, r7, #3
 8009a28:	701a      	strb	r2, [r3, #0]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8009a2a:	240f      	movs	r4, #15
 8009a2c:	193b      	adds	r3, r7, r4
 8009a2e:	2200      	movs	r2, #0
 8009a30:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t    *pdev =
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2162      	movs	r1, #98	; 0x62
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	f002 fb0c 	bl	800c058 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	2200      	movs	r2, #0
 8009a44:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2201      	movs	r2, #1
 8009a56:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	22fa      	movs	r2, #250	; 0xfa
 8009a62:	0092      	lsls	r2, r2, #2
 8009a64:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	22fa      	movs	r2, #250	; 0xfa
 8009a6a:	00d2      	lsls	r2, r2, #3
 8009a6c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	4a44      	ldr	r2, [pc, #272]	; (8009b84 <VL53L1_data_init+0x168>)
 8009a72:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2264      	movs	r2, #100	; 0x64
 8009a78:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	22a0      	movs	r2, #160	; 0xa0
 8009a7e:	0112      	lsls	r2, r2, #4
 8009a80:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2221      	movs	r2, #33	; 0x21
 8009a86:	2100      	movs	r1, #0
 8009a88:	5499      	strb	r1, [r3, r2]

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	229c      	movs	r2, #156	; 0x9c
 8009a8e:	493e      	ldr	r1, [pc, #248]	; (8009b88 <VL53L1_data_init+0x16c>)
 8009a90:	5299      	strh	r1, [r3, r2]
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	0018      	movs	r0, r3
 8009a96:	f002 fac5 	bl	800c024 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009a9a:	1cfb      	adds	r3, r7, #3
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00b      	beq.n	8009aba <VL53L1_data_init+0x9e>
 8009aa2:	193b      	adds	r3, r7, r4
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	b25b      	sxtb	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d106      	bne.n	8009aba <VL53L1_data_init+0x9e>
			status = VL53L1_read_p2p_data(Dev);
 8009aac:	193c      	adds	r4, r7, r4
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	0018      	movs	r0, r3
 8009ab2:	f000 f86b 	bl	8009b8c <VL53L1_read_p2p_data>
 8009ab6:	0003      	movs	r3, r0
 8009ab8:	7023      	strb	r3, [r4, #0]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	3311      	adds	r3, #17
 8009abe:	33ff      	adds	r3, #255	; 0xff
 8009ac0:	250f      	movs	r5, #15
 8009ac2:	197c      	adds	r4, r7, r5
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f001 fd7f 	bl	800b5c8 <VL53L1_init_refspadchar_config_struct>
 8009aca:	0003      	movs	r3, r0
 8009acc:	7023      	strb	r3, [r4, #0]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	3321      	adds	r3, #33	; 0x21
 8009ad2:	33ff      	adds	r3, #255	; 0xff
 8009ad4:	197c      	adds	r4, r7, r5
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	f001 fd9c 	bl	800b614 <VL53L1_init_ssc_config_struct>
 8009adc:	0003      	movs	r3, r0
 8009ade:	7023      	strb	r3, [r4, #0]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	3342      	adds	r3, #66	; 0x42
 8009ae4:	001a      	movs	r2, r3
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	332d      	adds	r3, #45	; 0x2d
 8009aea:	33ff      	adds	r3, #255	; 0xff
 8009aec:	197c      	adds	r4, r7, r5
 8009aee:	0019      	movs	r1, r3
 8009af0:	0010      	movs	r0, r2
 8009af2:	f001 fdb3 	bl	800b65c <VL53L1_init_xtalk_config_struct>
 8009af6:	0003      	movs	r3, r0
 8009af8:	7023      	strb	r3, [r4, #0]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	3345      	adds	r3, #69	; 0x45
 8009afe:	33ff      	adds	r3, #255	; 0xff
 8009b00:	197c      	adds	r4, r7, r5
 8009b02:	0018      	movs	r0, r3
 8009b04:	f001 fe12 	bl	800b72c <VL53L1_init_offset_cal_config_struct>
 8009b08:	0003      	movs	r3, r0
 8009b0a:	7023      	strb	r3, [r4, #0]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	33a4      	adds	r3, #164	; 0xa4
 8009b10:	197c      	adds	r4, r7, r5
 8009b12:	0018      	movs	r0, r3
 8009b14:	f001 fe32 	bl	800b77c <VL53L1_init_tuning_parm_storage_struct>
 8009b18:	0003      	movs	r3, r0
 8009b1a:	7023      	strb	r3, [r4, #0]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8009b1c:	197c      	adds	r4, r7, r5
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2120      	movs	r1, #32
 8009b22:	0018      	movs	r0, r3
 8009b24:	f000 fd0e 	bl	800a544 <VL53L1_set_vhv_loopbound>
 8009b28:	0003      	movs	r3, r0
 8009b2a:	7023      	strb	r3, [r4, #0]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8009b2c:	0028      	movs	r0, r5
 8009b2e:	197b      	adds	r3, r7, r5
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	b25b      	sxtb	r3, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d118      	bne.n	8009b6a <VL53L1_data_init+0x14e>
		status = VL53L1_set_preset_mode(
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	785d      	ldrb	r5, [r3, #1]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	8b1e      	ldrh	r6, [r3, #24]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	469c      	mov	ip, r3
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	6919      	ldr	r1, [r3, #16]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	183c      	adds	r4, r7, r0
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	9302      	str	r3, [sp, #8]
 8009b58:	9101      	str	r1, [sp, #4]
 8009b5a:	9200      	str	r2, [sp, #0]
 8009b5c:	4663      	mov	r3, ip
 8009b5e:	0032      	movs	r2, r6
 8009b60:	0029      	movs	r1, r5
 8009b62:	f000 fb2b 	bl	800a1bc <VL53L1_set_preset_mode>
 8009b66:	0003      	movs	r3, r0
 8009b68:	7023      	strb	r3, [r4, #0]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	0018      	movs	r0, r3
 8009b6e:	f003 f889 	bl	800cc84 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8009b72:	230f      	movs	r3, #15
 8009b74:	18fb      	adds	r3, r7, r3
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	b25b      	sxtb	r3, r3
}
 8009b7a:	0018      	movs	r0, r3
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	b005      	add	sp, #20
 8009b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b82:	46c0      	nop			; (mov r8, r8)
 8009b84:	000032c8 	.word	0x000032c8
 8009b88:	000007db 	.word	0x000007db

08009b8c <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8009b8c:	b5b0      	push	{r4, r5, r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8009b94:	210f      	movs	r1, #15
 8009b96:	187b      	adds	r3, r7, r1
 8009b98:	2200      	movs	r2, #0
 8009b9a:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8009ba0:	187b      	adds	r3, r7, r1
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	b25b      	sxtb	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10b      	bne.n	8009bc2 <VL53L1_read_p2p_data+0x36>
		status = VL53L1_get_static_nvm_managed(
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	3359      	adds	r3, #89	; 0x59
 8009bae:	33ff      	adds	r3, #255	; 0xff
 8009bb0:	001a      	movs	r2, r3
 8009bb2:	187c      	adds	r4, r7, r1
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	0011      	movs	r1, r2
 8009bb8:	0018      	movs	r0, r3
 8009bba:	f003 fb24 	bl	800d206 <VL53L1_get_static_nvm_managed>
 8009bbe:	0003      	movs	r3, r0
 8009bc0:	7023      	strb	r3, [r4, #0]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8009bc2:	210f      	movs	r1, #15
 8009bc4:	187b      	adds	r3, r7, r1
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	b25b      	sxtb	r3, r3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10a      	bne.n	8009be4 <VL53L1_read_p2p_data+0x58>
		status = VL53L1_get_customer_nvm_managed(
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	3342      	adds	r3, #66	; 0x42
 8009bd2:	001a      	movs	r2, r3
 8009bd4:	187c      	adds	r4, r7, r1
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	0011      	movs	r1, r2
 8009bda:	0018      	movs	r0, r3
 8009bdc:	f003 fc69 	bl	800d4b2 <VL53L1_get_customer_nvm_managed>
 8009be0:	0003      	movs	r3, r0
 8009be2:	7023      	strb	r3, [r4, #0]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8009be4:	210f      	movs	r1, #15
 8009be6:	187b      	adds	r3, r7, r1
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	b25b      	sxtb	r3, r3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d11b      	bne.n	8009c28 <VL53L1_read_p2p_data+0x9c>

		status = VL53L1_get_nvm_copy_data(
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	33fb      	adds	r3, #251	; 0xfb
 8009bf4:	33ff      	adds	r3, #255	; 0xff
 8009bf6:	001a      	movs	r2, r3
 8009bf8:	000d      	movs	r5, r1
 8009bfa:	187c      	adds	r4, r7, r1
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	0011      	movs	r1, r2
 8009c00:	0018      	movs	r0, r3
 8009c02:	f004 fb8f 	bl	800e324 <VL53L1_get_nvm_copy_data>
 8009c06:	0003      	movs	r3, r0
 8009c08:	7023      	strb	r3, [r4, #0]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8009c0a:	197b      	adds	r3, r7, r5
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	b25b      	sxtb	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d109      	bne.n	8009c28 <VL53L1_read_p2p_data+0x9c>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	33fb      	adds	r3, #251	; 0xfb
 8009c18:	33ff      	adds	r3, #255	; 0xff
 8009c1a:	001a      	movs	r2, r3
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	33f0      	adds	r3, #240	; 0xf0
 8009c20:	0019      	movs	r1, r3
 8009c22:	0010      	movs	r0, r2
 8009c24:	f002 fb92 	bl	800c34c <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8009c28:	210f      	movs	r1, #15
 8009c2a:	187b      	adds	r3, r7, r1
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	b25b      	sxtb	r3, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10b      	bne.n	8009c4c <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_RdWord(
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	22ad      	movs	r2, #173	; 0xad
 8009c38:	0092      	lsls	r2, r2, #2
 8009c3a:	189a      	adds	r2, r3, r2
 8009c3c:	187c      	adds	r4, r7, r1
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	21de      	movs	r1, #222	; 0xde
 8009c42:	0018      	movs	r0, r3
 8009c44:	f004 fd64 	bl	800e710 <VL53L1_RdWord>
 8009c48:	0003      	movs	r3, r0
 8009c4a:	7023      	strb	r3, [r4, #0]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	23af      	movs	r3, #175	; 0xaf
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	5ad2      	ldrh	r2, [r2, r3]
 8009c54:	2380      	movs	r3, #128	; 0x80
 8009c56:	015b      	lsls	r3, r3, #5
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d204      	bcs.n	8009c66 <VL53L1_read_p2p_data+0xda>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	23af      	movs	r3, #175	; 0xaf
 8009c60:	005b      	lsls	r3, r3, #1
 8009c62:	491a      	ldr	r1, [pc, #104]	; (8009ccc <VL53L1_read_p2p_data+0x140>)
 8009c64:	52d1      	strh	r1, [r2, r3]

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8009c66:	210f      	movs	r1, #15
 8009c68:	187b      	adds	r3, r7, r1
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	b25b      	sxtb	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10a      	bne.n	8009c88 <VL53L1_read_p2p_data+0xfc>
		status =
			VL53L1_get_mode_mitigation_roi(
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	339e      	adds	r3, #158	; 0x9e
 8009c76:	001a      	movs	r2, r3
 8009c78:	187c      	adds	r4, r7, r1
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	0011      	movs	r1, r2
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f000 f9ec 	bl	800a05c <VL53L1_get_mode_mitigation_roi>
 8009c84:	0003      	movs	r3, r0
 8009c86:	7023      	strb	r3, [r4, #0]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	22a2      	movs	r2, #162	; 0xa2
 8009c8c:	5c9b      	ldrb	r3, [r3, r2]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d114      	bne.n	8009cbc <VL53L1_read_p2p_data+0x130>
		pdev->optical_centre.y_centre == 0) {
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	22a3      	movs	r2, #163	; 0xa3
 8009c96:	5c9b      	ldrb	r3, [r3, r2]
	if (pdev->optical_centre.x_centre == 0 &&
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d10f      	bne.n	8009cbc <VL53L1_read_p2p_data+0x130>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	229e      	movs	r2, #158	; 0x9e
 8009ca0:	5c9b      	ldrb	r3, [r3, r2]
 8009ca2:	011b      	lsls	r3, r3, #4
 8009ca4:	b2d9      	uxtb	r1, r3
		pdev->optical_centre.x_centre =
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	22a2      	movs	r2, #162	; 0xa2
 8009caa:	5499      	strb	r1, [r3, r2]
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	229f      	movs	r2, #159	; 0x9f
 8009cb0:	5c9b      	ldrb	r3, [r3, r2]
 8009cb2:	011b      	lsls	r3, r3, #4
 8009cb4:	b2d9      	uxtb	r1, r3
		pdev->optical_centre.y_centre =
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	22a3      	movs	r2, #163	; 0xa3
 8009cba:	5499      	strb	r1, [r3, r2]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009cbc:	230f      	movs	r3, #15
 8009cbe:	18fb      	adds	r3, r7, r3
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	b25b      	sxtb	r3, r3
}
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	b004      	add	sp, #16
 8009cca:	bdb0      	pop	{r4, r5, r7, pc}
 8009ccc:	ffffbccc 	.word	0xffffbccc

08009cd0 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009cda:	210f      	movs	r1, #15
 8009cdc:	187b      	adds	r3, r7, r1
 8009cde:	2200      	movs	r2, #0
 8009ce0:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	23ad      	movs	r3, #173	; 0xad
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	5ad3      	ldrh	r3, [r2, r3]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d102      	bne.n	8009cf8 <VL53L1_set_inter_measurement_period_ms+0x28>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009cf2:	187b      	adds	r3, r7, r1
 8009cf4:	22f1      	movs	r2, #241	; 0xf1
 8009cf6:	701a      	strb	r2, [r3, #0]

	if (status == VL53L1_ERROR_NONE) {
 8009cf8:	230f      	movs	r3, #15
 8009cfa:	18fb      	adds	r3, r7, r3
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	b25b      	sxtb	r3, r3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10e      	bne.n	8009d22 <VL53L1_set_inter_measurement_period_ms+0x52>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	23ad      	movs	r3, #173	; 0xad
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	5ad3      	ldrh	r3, [r2, r3]
 8009d12:	001a      	movs	r2, r3
			inter_measurement_period_ms *
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	4353      	muls	r3, r2
 8009d18:	0019      	movs	r1, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	23d6      	movs	r3, #214	; 0xd6
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	50d1      	str	r1, [r2, r3]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009d22:	230f      	movs	r3, #15
 8009d24:	18fb      	adds	r3, r7, r3
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	b25b      	sxtb	r3, r3
}
 8009d2a:	0018      	movs	r0, r3
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	b004      	add	sp, #16
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d3c:	210f      	movs	r1, #15
 8009d3e:	187b      	adds	r3, r7, r1
 8009d40:	2200      	movs	r2, #0
 8009d42:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	23ad      	movs	r3, #173	; 0xad
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	5ad3      	ldrh	r3, [r2, r3]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <VL53L1_get_inter_measurement_period_ms+0x28>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009d54:	187b      	adds	r3, r7, r1
 8009d56:	22f1      	movs	r2, #241	; 0xf1
 8009d58:	701a      	strb	r2, [r3, #0]

	if (status == VL53L1_ERROR_NONE)
 8009d5a:	230f      	movs	r3, #15
 8009d5c:	18fb      	adds	r3, r7, r3
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	b25b      	sxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10e      	bne.n	8009d84 <VL53L1_get_inter_measurement_period_ms+0x52>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	23d6      	movs	r3, #214	; 0xd6
 8009d6a:	005b      	lsls	r3, r3, #1
 8009d6c:	58d0      	ldr	r0, [r2, r3]
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	23ad      	movs	r3, #173	; 0xad
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	5ad3      	ldrh	r3, [r2, r3]
			pdev->tim_cfg.system__intermeasurement_period /
 8009d76:	0019      	movs	r1, r3
 8009d78:	f7f6 f9e2 	bl	8000140 <__udivsi3>
 8009d7c:	0003      	movs	r3, r0
 8009d7e:	001a      	movs	r2, r3
		*pinter_measurement_period_ms = \
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8009d84:	230f      	movs	r3, #15
 8009d86:	18fb      	adds	r3, r7, r3
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	b25b      	sxtb	r3, r3
}
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	b004      	add	sp, #16
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8009d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d96:	b089      	sub	sp, #36	; 0x24
 8009d98:	af02      	add	r7, sp, #8
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009da2:	2117      	movs	r1, #23
 8009da4:	187b      	adds	r3, r7, r1
 8009da6:	2200      	movs	r2, #0
 8009da8:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev =
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	23af      	movs	r3, #175	; 0xaf
 8009db2:	005b      	lsls	r3, r3, #1
 8009db4:	5ad3      	ldrh	r3, [r2, r3]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d102      	bne.n	8009dc0 <VL53L1_set_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009dba:	187b      	adds	r3, r7, r1
 8009dbc:	22f1      	movs	r2, #241	; 0xf1
 8009dbe:	701a      	strb	r2, [r3, #0]

	if (status == VL53L1_ERROR_NONE) {
 8009dc0:	2117      	movs	r1, #23
 8009dc2:	187b      	adds	r3, r7, r1
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	b25b      	sxtb	r3, r3
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d11e      	bne.n	8009e0a <VL53L1_set_timeouts_us+0x76>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8009dde:	693a      	ldr	r2, [r7, #16]
 8009de0:	23af      	movs	r3, #175	; 0xaf
 8009de2:	005b      	lsls	r3, r3, #1
 8009de4:	5ad6      	ldrh	r6, [r2, r3]
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	3385      	adds	r3, #133	; 0x85
 8009dea:	33ff      	adds	r3, #255	; 0xff
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	329d      	adds	r2, #157	; 0x9d
 8009df0:	32ff      	adds	r2, #255	; 0xff
 8009df2:	187c      	adds	r4, r7, r1
 8009df4:	683d      	ldr	r5, [r7, #0]
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	68b8      	ldr	r0, [r7, #8]
 8009dfa:	9201      	str	r2, [sp, #4]
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	0033      	movs	r3, r6
 8009e00:	002a      	movs	r2, r5
 8009e02:	f002 fe3a 	bl	800ca7a <VL53L1_calc_timeout_register_values>
 8009e06:	0003      	movs	r3, r0
 8009e08:	7023      	strb	r3, [r4, #0]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8009e0a:	2317      	movs	r3, #23
 8009e0c:	18fb      	adds	r3, r7, r3
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	b25b      	sxtb	r3, r3
}
 8009e12:	0018      	movs	r0, r3
 8009e14:	46bd      	mov	sp, r7
 8009e16:	b007      	add	sp, #28
 8009e18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e1a <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8009e1a:	b590      	push	{r4, r7, lr}
 8009e1c:	b089      	sub	sp, #36	; 0x24
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	607a      	str	r2, [r7, #4]
 8009e26:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e28:	211f      	movs	r1, #31
 8009e2a:	187b      	adds	r3, r7, r1
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev =
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8009e38:	2312      	movs	r3, #18
 8009e3a:	18fb      	adds	r3, r7, r3
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	23af      	movs	r3, #175	; 0xaf
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	5ad3      	ldrh	r3, [r2, r3]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d102      	bne.n	8009e52 <VL53L1_get_timeouts_us+0x38>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009e4c:	187b      	adds	r3, r7, r1
 8009e4e:	22f1      	movs	r2, #241	; 0xf1
 8009e50:	701a      	strb	r2, [r3, #0]

	if (status == VL53L1_ERROR_NONE) {
 8009e52:	231f      	movs	r3, #31
 8009e54:	18fb      	adds	r3, r7, r3
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	b25b      	sxtb	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d160      	bne.n	8009f20 <VL53L1_get_timeouts_us+0x106>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8009e5e:	69ba      	ldr	r2, [r7, #24]
 8009e60:	23af      	movs	r3, #175	; 0xaf
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	5ad0      	ldrh	r0, [r2, r3]
 8009e66:	69ba      	ldr	r2, [r7, #24]
 8009e68:	23d1      	movs	r3, #209	; 0xd1
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	5cd3      	ldrb	r3, [r2, r3]
 8009e6e:	0019      	movs	r1, r3
 8009e70:	f002 fc76 	bl	800c760 <VL53L1_calc_macro_period_us>
 8009e74:	0003      	movs	r3, r0
 8009e76:	617b      	str	r3, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8009e78:	69ba      	ldr	r2, [r7, #24]
 8009e7a:	238c      	movs	r3, #140	; 0x8c
 8009e7c:	33ff      	adds	r3, #255	; 0xff
 8009e7e:	5cd3      	ldrb	r3, [r2, r3]
			VL53L1_calc_timeout_us(
 8009e80:	001a      	movs	r2, r3
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	0019      	movs	r1, r3
 8009e86:	0010      	movs	r0, r2
 8009e88:	f002 fd53 	bl	800c932 <VL53L1_calc_timeout_us>
 8009e8c:	0002      	movs	r2, r0
		*pphasecal_config_timeout_us =
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	23ce      	movs	r3, #206	; 0xce
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	5cd2      	ldrb	r2, [r2, r3]
		timeout_encoded =
 8009e9a:	2012      	movs	r0, #18
 8009e9c:	183b      	adds	r3, r7, r0
 8009e9e:	801a      	strh	r2, [r3, #0]
		timeout_encoded = (timeout_encoded << 8) +
 8009ea0:	183b      	adds	r3, r7, r0
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	021b      	lsls	r3, r3, #8
 8009ea6:	b299      	uxth	r1, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8009ea8:	69ba      	ldr	r2, [r7, #24]
 8009eaa:	239e      	movs	r3, #158	; 0x9e
 8009eac:	33ff      	adds	r3, #255	; 0xff
 8009eae:	5cd3      	ldrb	r3, [r2, r3]
 8009eb0:	b29a      	uxth	r2, r3
		timeout_encoded = (timeout_encoded << 8) +
 8009eb2:	183b      	adds	r3, r7, r0
 8009eb4:	188a      	adds	r2, r1, r2
 8009eb6:	801a      	strh	r2, [r3, #0]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	0004      	movs	r4, r0
 8009ebc:	183b      	adds	r3, r7, r0
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	0011      	movs	r1, r2
 8009ec2:	0018      	movs	r0, r3
 8009ec4:	f002 fd6b 	bl	800c99e <VL53L1_calc_decoded_timeout_us>
 8009ec8:	0002      	movs	r2, r0
		*pmm_config_timeout_us =
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8009ece:	69ba      	ldr	r2, [r7, #24]
 8009ed0:	23d0      	movs	r3, #208	; 0xd0
 8009ed2:	005b      	lsls	r3, r3, #1
 8009ed4:	5cd2      	ldrb	r2, [r2, r3]
		timeout_encoded =
 8009ed6:	0020      	movs	r0, r4
 8009ed8:	183b      	adds	r3, r7, r0
 8009eda:	801a      	strh	r2, [r3, #0]
		timeout_encoded = (timeout_encoded << 8) +
 8009edc:	183b      	adds	r3, r7, r0
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	021b      	lsls	r3, r3, #8
 8009ee2:	b299      	uxth	r1, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	23a2      	movs	r3, #162	; 0xa2
 8009ee8:	33ff      	adds	r3, #255	; 0xff
 8009eea:	5cd3      	ldrb	r3, [r2, r3]
 8009eec:	b29a      	uxth	r2, r3
		timeout_encoded = (timeout_encoded << 8) +
 8009eee:	183b      	adds	r3, r7, r0
 8009ef0:	188a      	adds	r2, r1, r2
 8009ef2:	801a      	strh	r2, [r3, #0]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	183b      	adds	r3, r7, r0
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	0011      	movs	r1, r2
 8009efc:	0018      	movs	r0, r3
 8009efe:	f002 fd4e 	bl	800c99e <VL53L1_calc_decoded_timeout_us>
 8009f02:	0002      	movs	r2, r0
		*prange_config_timeout_us =
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009f20:	231f      	movs	r3, #31
 8009f22:	18fb      	adds	r3, r7, r3
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	b25b      	sxtb	r3, r3
}
 8009f28:	0018      	movs	r0, r3
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	b009      	add	sp, #36	; 0x24
 8009f2e:	bd90      	pop	{r4, r7, pc}

08009f30 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	607a      	str	r2, [r7, #4]
 8009f3a:	200b      	movs	r0, #11
 8009f3c:	183b      	adds	r3, r7, r0
 8009f3e:	1c0a      	adds	r2, r1, #0
 8009f40:	701a      	strb	r2, [r3, #0]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009f42:	2317      	movs	r3, #23
 8009f44:	18fb      	adds	r3, r7, r3
 8009f46:	2200      	movs	r2, #0
 8009f48:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev =
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8009f4e:	2116      	movs	r1, #22
 8009f50:	187b      	adds	r3, r7, r1
 8009f52:	2201      	movs	r2, #1
 8009f54:	701a      	strb	r2, [r3, #0]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8009f56:	183b      	adds	r3, r7, r0
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	2b07      	cmp	r3, #7
 8009f5c:	d824      	bhi.n	8009fa8 <VL53L1_get_sequence_config_bit+0x78>

		if (bit_id > 0) {
 8009f5e:	183b      	adds	r3, r7, r0
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d005      	beq.n	8009f72 <VL53L1_get_sequence_config_bit+0x42>
			bit_mask  = 0x01 << bit_id;
 8009f66:	183b      	adds	r3, r7, r0
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	409a      	lsls	r2, r3
 8009f6e:	187b      	adds	r3, r7, r1
 8009f70:	701a      	strb	r2, [r3, #0]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	23c6      	movs	r3, #198	; 0xc6
 8009f76:	33ff      	adds	r3, #255	; 0xff
 8009f78:	5cd3      	ldrb	r3, [r2, r3]
		*pvalue =
 8009f7a:	2216      	movs	r2, #22
 8009f7c:	18ba      	adds	r2, r7, r2
 8009f7e:	7812      	ldrb	r2, [r2, #0]
 8009f80:	4013      	ands	r3, r2
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8009f88:	210b      	movs	r1, #11
 8009f8a:	187b      	adds	r3, r7, r1
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00e      	beq.n	8009fb0 <VL53L1_get_sequence_config_bit+0x80>
			*pvalue  = *pvalue >> bit_id;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	001a      	movs	r2, r3
 8009f98:	187b      	adds	r3, r7, r1
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	411a      	asrs	r2, r3
 8009f9e:	0013      	movs	r3, r2
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	701a      	strb	r2, [r3, #0]
 8009fa6:	e003      	b.n	8009fb0 <VL53L1_get_sequence_config_bit+0x80>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009fa8:	2317      	movs	r3, #23
 8009faa:	18fb      	adds	r3, r7, r3
 8009fac:	22fc      	movs	r2, #252	; 0xfc
 8009fae:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8009fb0:	2317      	movs	r3, #23
 8009fb2:	18fb      	adds	r3, r7, r3
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	b25b      	sxtb	r3, r3
}
 8009fb8:	0018      	movs	r0, r3
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	b006      	add	sp, #24
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8009fc0:	b590      	push	{r4, r7, lr}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009fca:	240f      	movs	r4, #15
 8009fcc:	193b      	adds	r3, r7, r4
 8009fce:	2200      	movs	r2, #0
 8009fd0:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	7858      	ldrb	r0, [r3, #1]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	7819      	ldrb	r1, [r3, #0]
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	33c4      	adds	r3, #196	; 0xc4
 8009fe2:	33ff      	adds	r3, #255	; 0xff
 8009fe4:	001a      	movs	r2, r3
 8009fe6:	f002 fdee 	bl	800cbc6 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	7898      	ldrb	r0, [r3, #2]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	78d9      	ldrb	r1, [r3, #3]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	33c5      	adds	r3, #197	; 0xc5
 8009ff6:	33ff      	adds	r3, #255	; 0xff
 8009ff8:	001a      	movs	r2, r3
 8009ffa:	f002 fe2a 	bl	800cc52 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8009ffe:	193b      	adds	r3, r7, r4
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	b25b      	sxtb	r3, r3
}
 800a004:	0018      	movs	r0, r3
 800a006:	46bd      	mov	sp, r7
 800a008:	b005      	add	sp, #20
 800a00a:	bd90      	pop	{r4, r7, pc}

0800a00c <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800a00c:	b590      	push	{r4, r7, lr}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a016:	240f      	movs	r4, #15
 800a018:	193b      	adds	r3, r7, r4
 800a01a:	2200      	movs	r2, #0
 800a01c:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	23c4      	movs	r3, #196	; 0xc4
 800a026:	33ff      	adds	r3, #255	; 0xff
 800a028:	5cd0      	ldrb	r0, [r2, r3]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	3301      	adds	r3, #1
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	0019      	movs	r1, r3
 800a032:	f002 fff0 	bl	800d016 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	23e2      	movs	r3, #226	; 0xe2
 800a03a:	005b      	lsls	r3, r3, #1
 800a03c:	5cd0      	ldrb	r0, [r2, r3]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	1c99      	adds	r1, r3, #2
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	3303      	adds	r3, #3
 800a046:	001a      	movs	r2, r3
 800a048:	f002 fde9 	bl	800cc1e <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800a04c:	193b      	adds	r3, r7, r4
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	b25b      	sxtb	r3, r3
}
 800a052:	0018      	movs	r0, r3
 800a054:	46bd      	mov	sp, r7
 800a056:	b005      	add	sp, #20
 800a058:	bd90      	pop	{r4, r7, pc}
	...

0800a05c <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800a05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a05e:	b087      	sub	sp, #28
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a066:	2317      	movs	r3, #23
 800a068:	18fb      	adds	r3, r7, r3
 800a06a:	2200      	movs	r2, #0
 800a06c:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800a072:	210e      	movs	r1, #14
 800a074:	187b      	adds	r3, r7, r1
 800a076:	2200      	movs	r2, #0
 800a078:	701a      	strb	r2, [r3, #0]
	uint8_t  y       = 0;
 800a07a:	200d      	movs	r0, #13
 800a07c:	183b      	adds	r3, r7, r0
 800a07e:	2200      	movs	r2, #0
 800a080:	701a      	strb	r2, [r3, #0]
	uint8_t  xy_size = 0;
 800a082:	240f      	movs	r4, #15
 800a084:	193b      	adds	r3, r7, r4
 800a086:	2200      	movs	r2, #0
 800a088:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	4a15      	ldr	r2, [pc, #84]	; (800a0e4 <VL53L1_get_mode_mitigation_roi+0x88>)
 800a08e:	5c9b      	ldrb	r3, [r3, r2]
 800a090:	000d      	movs	r5, r1
 800a092:	187a      	adds	r2, r7, r1
 800a094:	0006      	movs	r6, r0
 800a096:	1839      	adds	r1, r7, r0
 800a098:	0018      	movs	r0, r3
 800a09a:	f002 ffbc 	bl	800d016 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800a09e:	197b      	adds	r3, r7, r5
 800a0a0:	781a      	ldrb	r2, [r3, #0]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800a0a6:	19bb      	adds	r3, r7, r6
 800a0a8:	781a      	ldrb	r2, [r3, #0]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800a0ae:	193b      	adds	r3, r7, r4
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	490d      	ldr	r1, [pc, #52]	; (800a0e8 <VL53L1_get_mode_mitigation_roi+0x8c>)
 800a0b4:	5c52      	ldrb	r2, [r2, r1]
 800a0b6:	701a      	strb	r2, [r3, #0]

	pmm_roi->height = xy_size >> 4;
 800a0b8:	193b      	adds	r3, r7, r4
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	091b      	lsrs	r3, r3, #4
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800a0c4:	193b      	adds	r3, r7, r4
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	220f      	movs	r2, #15
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800a0d2:	2317      	movs	r3, #23
 800a0d4:	18fb      	adds	r3, r7, r3
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	b25b      	sxtb	r3, r3
}
 800a0da:	0018      	movs	r0, r3
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	b007      	add	sp, #28
 800a0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e2:	46c0      	nop			; (mov r8, r8)
 800a0e4:	0000022a 	.word	0x0000022a
 800a0e8:	0000022b 	.word	0x0000022b

0800a0ec <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	607a      	str	r2, [r7, #4]
 800a0f6:	603b      	str	r3, [r7, #0]
 800a0f8:	200b      	movs	r0, #11
 800a0fa:	183b      	adds	r3, r7, r0
 800a0fc:	1c0a      	adds	r2, r1, #0
 800a0fe:	701a      	strb	r2, [r3, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a100:	2317      	movs	r3, #23
 800a102:	18fb      	adds	r3, r7, r3
 800a104:	2200      	movs	r2, #0
 800a106:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800a10c:	183b      	adds	r3, r7, r0
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b26      	cmp	r3, #38	; 0x26
 800a112:	d843      	bhi.n	800a19c <VL53L1_get_preset_mode_timing_cfg+0xb0>
 800a114:	009a      	lsls	r2, r3, #2
 800a116:	4b28      	ldr	r3, [pc, #160]	; (800a1b8 <VL53L1_get_preset_mode_timing_cfg+0xcc>)
 800a118:	18d3      	adds	r3, r2, r3
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	469f      	mov	pc, r3
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	22ca      	movs	r2, #202	; 0xca
 800a122:	5a9a      	ldrh	r2, [r3, r2]
		*pdss_config__target_total_rate_mcps =
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	22d0      	movs	r2, #208	; 0xd0
 800a12c:	589a      	ldr	r2, [r3, r2]
		*pphasecal_config_timeout_us =
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	22d8      	movs	r2, #216	; 0xd8
 800a136:	589a      	ldr	r2, [r3, r2]
		*pmm_config_timeout_us =
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	22e4      	movs	r2, #228	; 0xe4
 800a140:	589a      	ldr	r2, [r3, r2]
		*prange_config_timeout_us =
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	601a      	str	r2, [r3, #0]
	break;
 800a146:	e02e      	b.n	800a1a6 <VL53L1_get_preset_mode_timing_cfg+0xba>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	22cc      	movs	r2, #204	; 0xcc
 800a14c:	5a9a      	ldrh	r2, [r3, r2]
		*pdss_config__target_total_rate_mcps =
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	22d4      	movs	r2, #212	; 0xd4
 800a156:	589a      	ldr	r2, [r3, r2]
		*pphasecal_config_timeout_us =
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	22dc      	movs	r2, #220	; 0xdc
 800a160:	589a      	ldr	r2, [r3, r2]
		*pmm_config_timeout_us =
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	22e8      	movs	r2, #232	; 0xe8
 800a16a:	589a      	ldr	r2, [r3, r2]
		*prange_config_timeout_us =
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	601a      	str	r2, [r3, #0]
	break;
 800a170:	e019      	b.n	800a1a6 <VL53L1_get_preset_mode_timing_cfg+0xba>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	22cc      	movs	r2, #204	; 0xcc
 800a176:	5a9a      	ldrh	r2, [r3, r2]
		*pdss_config__target_total_rate_mcps =
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	22d4      	movs	r2, #212	; 0xd4
 800a180:	589a      	ldr	r2, [r3, r2]
		*pphasecal_config_timeout_us =
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	22e0      	movs	r2, #224	; 0xe0
 800a18a:	589a      	ldr	r2, [r3, r2]
		*pmm_config_timeout_us =
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	22ec      	movs	r2, #236	; 0xec
 800a194:	589a      	ldr	r2, [r3, r2]
		*prange_config_timeout_us =
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	601a      	str	r2, [r3, #0]
	break;
 800a19a:	e004      	b.n	800a1a6 <VL53L1_get_preset_mode_timing_cfg+0xba>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a19c:	2317      	movs	r3, #23
 800a19e:	18fb      	adds	r3, r7, r3
 800a1a0:	22fc      	movs	r2, #252	; 0xfc
 800a1a2:	701a      	strb	r2, [r3, #0]
		break;
 800a1a4:	46c0      	nop			; (mov r8, r8)

	}

	LOG_FUNCTION_END(status);

	return status;
 800a1a6:	2317      	movs	r3, #23
 800a1a8:	18fb      	adds	r3, r7, r3
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	b25b      	sxtb	r3, r3
}
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	b006      	add	sp, #24
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	46c0      	nop			; (mov r8, r8)
 800a1b8:	080163bc 	.word	0x080163bc

0800a1bc <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800a1bc:	b5b0      	push	{r4, r5, r7, lr}
 800a1be:	b092      	sub	sp, #72	; 0x48
 800a1c0:	af04      	add	r7, sp, #16
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	0008      	movs	r0, r1
 800a1c6:	0011      	movs	r1, r2
 800a1c8:	607b      	str	r3, [r7, #4]
 800a1ca:	240b      	movs	r4, #11
 800a1cc:	193b      	adds	r3, r7, r4
 800a1ce:	1c02      	adds	r2, r0, #0
 800a1d0:	701a      	strb	r2, [r3, #0]
 800a1d2:	2308      	movs	r3, #8
 800a1d4:	18fb      	adds	r3, r7, r3
 800a1d6:	1c0a      	adds	r2, r1, #0
 800a1d8:	801a      	strh	r2, [r3, #0]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a1da:	2337      	movs	r3, #55	; 0x37
 800a1dc:	18fb      	adds	r3, r7, r3
 800a1de:	2200      	movs	r2, #0
 800a1e0:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev =
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	3365      	adds	r3, #101	; 0x65
 800a1ea:	33ff      	adds	r3, #255	; 0xff
 800a1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f0:	3385      	adds	r3, #133	; 0x85
 800a1f2:	33ff      	adds	r3, #255	; 0xff
 800a1f4:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f8:	339d      	adds	r3, #157	; 0x9d
 800a1fa:	33ff      	adds	r3, #255	; 0xff
 800a1fc:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	33b5      	adds	r3, #181	; 0xb5
 800a202:	33ff      	adds	r3, #255	; 0xff
 800a204:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	33c9      	adds	r3, #201	; 0xc9
 800a20a:	33ff      	adds	r3, #255	; 0xff
 800a20c:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a210:	33a4      	adds	r3, #164	; 0xa4
 800a212:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800a214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a216:	22b9      	movs	r2, #185	; 0xb9
 800a218:	0092      	lsls	r2, r2, #2
 800a21a:	4694      	mov	ip, r2
 800a21c:	4463      	add	r3, ip
 800a21e:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800a220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a222:	193a      	adds	r2, r7, r4
 800a224:	7812      	ldrb	r2, [r2, #0]
 800a226:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a22c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a232:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800a234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a236:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a238:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2103      	movs	r1, #3
 800a23e:	0018      	movs	r0, r3
 800a240:	f001 ff0a 	bl	800c058 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800a244:	193b      	adds	r3, r7, r4
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	2b26      	cmp	r3, #38	; 0x26
 800a24a:	d900      	bls.n	800a24e <VL53L1_set_preset_mode+0x92>
 800a24c:	e0da      	b.n	800a404 <VL53L1_set_preset_mode+0x248>
 800a24e:	009a      	lsls	r2, r3, #2
 800a250:	4b89      	ldr	r3, [pc, #548]	; (800a478 <VL53L1_set_preset_mode+0x2bc>)
 800a252:	18d3      	adds	r3, r2, r3
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	469f      	mov	pc, r3

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800a258:	2337      	movs	r3, #55	; 0x37
 800a25a:	18fc      	adds	r4, r7, r3
 800a25c:	6a3d      	ldr	r5, [r7, #32]
 800a25e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	002b      	movs	r3, r5
 800a26e:	f001 fb1b 	bl	800b8a8 <VL53L1_preset_mode_standard_ranging>
 800a272:	0003      	movs	r3, r0
 800a274:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a276:	e0ca      	b.n	800a40e <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800a278:	2337      	movs	r3, #55	; 0x37
 800a27a:	18fc      	adds	r4, r7, r3
 800a27c:	6a3d      	ldr	r5, [r7, #32]
 800a27e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	002b      	movs	r3, r5
 800a28e:	f001 fc2b 	bl	800bae8 <VL53L1_preset_mode_standard_ranging_short_range>
 800a292:	0003      	movs	r3, r0
 800a294:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a296:	e0ba      	b.n	800a40e <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800a298:	2337      	movs	r3, #55	; 0x37
 800a29a:	18fc      	adds	r4, r7, r3
 800a29c:	6a3d      	ldr	r5, [r7, #32]
 800a29e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	002b      	movs	r3, r5
 800a2ae:	f001 fc63 	bl	800bb78 <VL53L1_preset_mode_standard_ranging_long_range>
 800a2b2:	0003      	movs	r3, r0
 800a2b4:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a2b6:	e0aa      	b.n	800a40e <VL53L1_set_preset_mode+0x252>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800a2b8:	2337      	movs	r3, #55	; 0x37
 800a2ba:	18fc      	adds	r4, r7, r3
 800a2bc:	6a3d      	ldr	r5, [r7, #32]
 800a2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	002b      	movs	r3, r5
 800a2ce:	f001 fc9b 	bl	800bc08 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800a2d2:	0003      	movs	r3, r0
 800a2d4:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a2d6:	e09a      	b.n	800a40e <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800a2d8:	2337      	movs	r3, #55	; 0x37
 800a2da:	18fc      	adds	r4, r7, r3
 800a2dc:	6a3d      	ldr	r5, [r7, #32]
 800a2de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	002b      	movs	r3, r5
 800a2ee:	f001 fcb7 	bl	800bc60 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800a2f2:	0003      	movs	r3, r0
 800a2f4:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a2f6:	e08a      	b.n	800a40e <VL53L1_set_preset_mode+0x252>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800a2f8:	2337      	movs	r3, #55	; 0x37
 800a2fa:	18fc      	adds	r4, r7, r3
 800a2fc:	6a3d      	ldr	r5, [r7, #32]
 800a2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	002b      	movs	r3, r5
 800a30e:	f001 fcd3 	bl	800bcb8 <VL53L1_preset_mode_timed_ranging>
 800a312:	0003      	movs	r3, r0
 800a314:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a316:	e07a      	b.n	800a40e <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800a318:	2337      	movs	r3, #55	; 0x37
 800a31a:	18fc      	adds	r4, r7, r3
 800a31c:	6a3d      	ldr	r5, [r7, #32]
 800a31e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	9301      	str	r3, [sp, #4]
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	002b      	movs	r3, r5
 800a32e:	f001 fd04 	bl	800bd3a <VL53L1_preset_mode_timed_ranging_short_range>
 800a332:	0003      	movs	r3, r0
 800a334:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a336:	e06a      	b.n	800a40e <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800a338:	2337      	movs	r3, #55	; 0x37
 800a33a:	18fc      	adds	r4, r7, r3
 800a33c:	6a3d      	ldr	r5, [r7, #32]
 800a33e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	002b      	movs	r3, r5
 800a34e:	f001 fd35 	bl	800bdbc <VL53L1_preset_mode_timed_ranging_long_range>
 800a352:	0003      	movs	r3, r0
 800a354:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a356:	e05a      	b.n	800a40e <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800a358:	2337      	movs	r3, #55	; 0x37
 800a35a:	18fc      	adds	r4, r7, r3
 800a35c:	6a3d      	ldr	r5, [r7, #32]
 800a35e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	002b      	movs	r3, r5
 800a36e:	f001 fe30 	bl	800bfd2 <VL53L1_preset_mode_olt>
 800a372:	0003      	movs	r3, r0
 800a374:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a376:	e04a      	b.n	800a40e <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800a378:	2337      	movs	r3, #55	; 0x37
 800a37a:	18fc      	adds	r4, r7, r3
 800a37c:	6a3d      	ldr	r5, [r7, #32]
 800a37e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	9301      	str	r3, [sp, #4]
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	002b      	movs	r3, r5
 800a38e:	f001 fde3 	bl	800bf58 <VL53L1_preset_mode_singleshot_ranging>
 800a392:	0003      	movs	r3, r0
 800a394:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a396:	e03a      	b.n	800a40e <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800a398:	2337      	movs	r3, #55	; 0x37
 800a39a:	18fc      	adds	r4, r7, r3
 800a39c:	6a3d      	ldr	r5, [r7, #32]
 800a39e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	9302      	str	r3, [sp, #8]
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	9301      	str	r3, [sp, #4]
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	002b      	movs	r3, r5
 800a3b2:	f001 fd73 	bl	800be9c <VL53L1_preset_mode_low_power_auto_short_ranging>
 800a3b6:	0003      	movs	r3, r0
 800a3b8:	7023      	strb	r3, [r4, #0]
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a3ba:	e028      	b.n	800a40e <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800a3bc:	2337      	movs	r3, #55	; 0x37
 800a3be:	18fc      	adds	r4, r7, r3
 800a3c0:	6a3d      	ldr	r5, [r7, #32]
 800a3c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	9302      	str	r3, [sp, #8]
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	9301      	str	r3, [sp, #4]
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	002b      	movs	r3, r5
 800a3d6:	f001 fd32 	bl	800be3e <VL53L1_preset_mode_low_power_auto_ranging>
 800a3da:	0003      	movs	r3, r0
 800a3dc:	7023      	strb	r3, [r4, #0]
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a3de:	e016      	b.n	800a40e <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800a3e0:	2337      	movs	r3, #55	; 0x37
 800a3e2:	18fc      	adds	r4, r7, r3
 800a3e4:	6a3d      	ldr	r5, [r7, #32]
 800a3e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	9302      	str	r3, [sp, #8]
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	9301      	str	r3, [sp, #4]
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	002b      	movs	r3, r5
 800a3fa:	f001 fd7e 	bl	800befa <VL53L1_preset_mode_low_power_auto_long_ranging>
 800a3fe:	0003      	movs	r3, r0
 800a400:	7023      	strb	r3, [r4, #0]
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a402:	e004      	b.n	800a40e <VL53L1_set_preset_mode+0x252>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a404:	2337      	movs	r3, #55	; 0x37
 800a406:	18fb      	adds	r3, r7, r3
 800a408:	22fc      	movs	r2, #252	; 0xfc
 800a40a:	701a      	strb	r2, [r3, #0]
		break;
 800a40c:	46c0      	nop			; (mov r8, r8)

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800a40e:	2337      	movs	r3, #55	; 0x37
 800a410:	18fb      	adds	r3, r7, r3
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	b25b      	sxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d108      	bne.n	800a42c <VL53L1_set_preset_mode+0x270>

		pstatic->dss_config__target_total_rate_mcps =
 800a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41c:	2108      	movs	r1, #8
 800a41e:	187a      	adds	r2, r7, r1
 800a420:	8812      	ldrh	r2, [r2, #0]
 800a422:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800a424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a426:	187a      	adds	r2, r7, r1
 800a428:	8812      	ldrh	r2, [r2, #0]
 800a42a:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800a42c:	2237      	movs	r2, #55	; 0x37
 800a42e:	18bb      	adds	r3, r7, r2
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	b25b      	sxtb	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d108      	bne.n	800a44a <VL53L1_set_preset_mode+0x28e>
		status =
			VL53L1_set_timeouts_us(
 800a438:	18bc      	adds	r4, r7, r2
 800a43a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a43c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a43e:	6879      	ldr	r1, [r7, #4]
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f7ff fca7 	bl	8009d94 <VL53L1_set_timeouts_us>
 800a446:	0003      	movs	r3, r0
 800a448:	7023      	strb	r3, [r4, #0]
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800a44a:	2237      	movs	r2, #55	; 0x37
 800a44c:	18bb      	adds	r3, r7, r2
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	b25b      	sxtb	r3, r3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d108      	bne.n	800a468 <VL53L1_set_preset_mode+0x2ac>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800a456:	18bc      	adds	r4, r7, r2
 800a458:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	0011      	movs	r1, r2
 800a45e:	0018      	movs	r0, r3
 800a460:	f7ff fc36 	bl	8009cd0 <VL53L1_set_inter_measurement_period_ms>
 800a464:	0003      	movs	r3, r0
 800a466:	7023      	strb	r3, [r4, #0]
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800a468:	2337      	movs	r3, #55	; 0x37
 800a46a:	18fb      	adds	r3, r7, r3
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	b25b      	sxtb	r3, r3
}
 800a470:	0018      	movs	r0, r3
 800a472:	46bd      	mov	sp, r7
 800a474:	b00e      	add	sp, #56	; 0x38
 800a476:	bdb0      	pop	{r4, r5, r7, pc}
 800a478:	08016458 	.word	0x08016458

0800a47c <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a486:	210f      	movs	r1, #15
 800a488:	187b      	adds	r3, r7, r1
 800a48a:	2200      	movs	r2, #0
 800a48c:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	23d3      	movs	r3, #211	; 0xd3
 800a496:	005b      	lsls	r3, r3, #1
 800a498:	5ad2      	ldrh	r2, [r2, r3]
	*plite_sigma =
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a49e:	187b      	adds	r3, r7, r1
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	b25b      	sxtb	r3, r3

}
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	b004      	add	sp, #16
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	000a      	movs	r2, r1
 800a4b6:	1cbb      	adds	r3, r7, #2
 800a4b8:	801a      	strh	r2, [r3, #0]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a4ba:	200f      	movs	r0, #15
 800a4bc:	183b      	adds	r3, r7, r0
 800a4be:	2200      	movs	r2, #0
 800a4c0:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	1cb9      	adds	r1, r7, #2
 800a4ca:	23d3      	movs	r3, #211	; 0xd3
 800a4cc:	005b      	lsls	r3, r3, #1
 800a4ce:	8809      	ldrh	r1, [r1, #0]
 800a4d0:	52d1      	strh	r1, [r2, r3]

	LOG_FUNCTION_END(status);

	return status;
 800a4d2:	183b      	adds	r3, r7, r0
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	b25b      	sxtb	r3, r3

}
 800a4d8:	0018      	movs	r0, r3
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	b004      	add	sp, #16
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a4ea:	210f      	movs	r1, #15
 800a4ec:	187b      	adds	r3, r7, r1
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	23d4      	movs	r3, #212	; 0xd4
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	5ad2      	ldrh	r2, [r2, r3]
	*plite_mincountrate =
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a502:	187b      	adds	r3, r7, r1
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	b25b      	sxtb	r3, r3

}
 800a508:	0018      	movs	r0, r3
 800a50a:	46bd      	mov	sp, r7
 800a50c:	b004      	add	sp, #16
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	000a      	movs	r2, r1
 800a51a:	1cbb      	adds	r3, r7, #2
 800a51c:	801a      	strh	r2, [r3, #0]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a51e:	200f      	movs	r0, #15
 800a520:	183b      	adds	r3, r7, r0
 800a522:	2200      	movs	r2, #0
 800a524:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	1cb9      	adds	r1, r7, #2
 800a52e:	23d4      	movs	r3, #212	; 0xd4
 800a530:	005b      	lsls	r3, r3, #1
 800a532:	8809      	ldrh	r1, [r1, #0]
 800a534:	52d1      	strh	r1, [r2, r3]
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800a536:	183b      	adds	r3, r7, r0
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	b25b      	sxtb	r3, r3

}
 800a53c:	0018      	movs	r0, r3
 800a53e:	46bd      	mov	sp, r7
 800a540:	b004      	add	sp, #16
 800a542:	bd80      	pop	{r7, pc}

0800a544 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	000a      	movs	r2, r1
 800a54e:	1cfb      	adds	r3, r7, #3
 800a550:	701a      	strb	r2, [r3, #0]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a552:	200f      	movs	r0, #15
 800a554:	183b      	adds	r3, r7, r0
 800a556:	2200      	movs	r2, #0
 800a558:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	23b0      	movs	r3, #176	; 0xb0
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	5cd3      	ldrb	r3, [r2, r3]
 800a566:	2203      	movs	r2, #3
 800a568:	4013      	ands	r3, r2
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	1cfb      	adds	r3, r7, #3
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	b2db      	uxtb	r3, r3
 800a574:	18d3      	adds	r3, r2, r3
 800a576:	b2d9      	uxtb	r1, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	23b0      	movs	r3, #176	; 0xb0
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	54d1      	strb	r1, [r2, r3]
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800a580:	183b      	adds	r3, r7, r0
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	b25b      	sxtb	r3, r3

}
 800a586:	0018      	movs	r0, r3
 800a588:	46bd      	mov	sp, r7
 800a58a:	b004      	add	sp, #16
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800a590:	b5b0      	push	{r4, r5, r7, lr}
 800a592:	b0d0      	sub	sp, #320	; 0x140
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	0008      	movs	r0, r1
 800a59a:	0011      	movs	r1, r2
 800a59c:	4baf      	ldr	r3, [pc, #700]	; (800a85c <VL53L1_init_and_start_range+0x2cc>)
 800a59e:	22a0      	movs	r2, #160	; 0xa0
 800a5a0:	0052      	lsls	r2, r2, #1
 800a5a2:	4694      	mov	ip, r2
 800a5a4:	44bc      	add	ip, r7
 800a5a6:	4463      	add	r3, ip
 800a5a8:	1c02      	adds	r2, r0, #0
 800a5aa:	701a      	strb	r2, [r3, #0]
 800a5ac:	4bac      	ldr	r3, [pc, #688]	; (800a860 <VL53L1_init_and_start_range+0x2d0>)
 800a5ae:	22a0      	movs	r2, #160	; 0xa0
 800a5b0:	0052      	lsls	r2, r2, #1
 800a5b2:	4694      	mov	ip, r2
 800a5b4:	44bc      	add	ip, r7
 800a5b6:	4463      	add	r3, ip
 800a5b8:	1c0a      	adds	r2, r1, #0
 800a5ba:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a5bc:	2340      	movs	r3, #64	; 0x40
 800a5be:	33ff      	adds	r3, #255	; 0xff
 800a5c0:	18fb      	adds	r3, r7, r3
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2198      	movs	r1, #152	; 0x98
 800a5ca:	0049      	lsls	r1, r1, #1
 800a5cc:	187a      	adds	r2, r7, r1
 800a5ce:	6013      	str	r3, [r2, #0]

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800a5d0:	187b      	adds	r3, r7, r1
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3359      	adds	r3, #89	; 0x59
 800a5d6:	33ff      	adds	r3, #255	; 0xff
 800a5d8:	2296      	movs	r2, #150	; 0x96
 800a5da:	0052      	lsls	r2, r2, #1
 800a5dc:	18ba      	adds	r2, r7, r2
 800a5de:	6013      	str	r3, [r2, #0]
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800a5e0:	187b      	adds	r3, r7, r1
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3342      	adds	r3, #66	; 0x42
 800a5e6:	2294      	movs	r2, #148	; 0x94
 800a5e8:	0052      	lsls	r2, r2, #1
 800a5ea:	18ba      	adds	r2, r7, r2
 800a5ec:	6013      	str	r3, [r2, #0]
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800a5ee:	187b      	adds	r3, r7, r1
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3365      	adds	r3, #101	; 0x65
 800a5f4:	33ff      	adds	r3, #255	; 0xff
 800a5f6:	2292      	movs	r2, #146	; 0x92
 800a5f8:	0052      	lsls	r2, r2, #1
 800a5fa:	18ba      	adds	r2, r7, r2
 800a5fc:	6013      	str	r3, [r2, #0]
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800a5fe:	187b      	adds	r3, r7, r1
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3385      	adds	r3, #133	; 0x85
 800a604:	33ff      	adds	r3, #255	; 0xff
 800a606:	2290      	movs	r2, #144	; 0x90
 800a608:	0052      	lsls	r2, r2, #1
 800a60a:	18ba      	adds	r2, r7, r2
 800a60c:	6013      	str	r3, [r2, #0]
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800a60e:	187b      	adds	r3, r7, r1
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	339d      	adds	r3, #157	; 0x9d
 800a614:	33ff      	adds	r3, #255	; 0xff
 800a616:	228e      	movs	r2, #142	; 0x8e
 800a618:	0052      	lsls	r2, r2, #1
 800a61a:	18ba      	adds	r2, r7, r2
 800a61c:	6013      	str	r3, [r2, #0]
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800a61e:	187b      	adds	r3, r7, r1
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	33b5      	adds	r3, #181	; 0xb5
 800a624:	33ff      	adds	r3, #255	; 0xff
 800a626:	228c      	movs	r2, #140	; 0x8c
 800a628:	0052      	lsls	r2, r2, #1
 800a62a:	18ba      	adds	r2, r7, r2
 800a62c:	6013      	str	r3, [r2, #0]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800a62e:	187b      	adds	r3, r7, r1
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	33c9      	adds	r3, #201	; 0xc9
 800a634:	33ff      	adds	r3, #255	; 0xff
 800a636:	208a      	movs	r0, #138	; 0x8a
 800a638:	0040      	lsls	r0, r0, #1
 800a63a:	183a      	adds	r2, r7, r0
 800a63c:	6013      	str	r3, [r2, #0]

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800a63e:	187b      	adds	r3, r7, r1
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	332c      	adds	r3, #44	; 0x2c
 800a644:	2288      	movs	r2, #136	; 0x88
 800a646:	0052      	lsls	r2, r2, #1
 800a648:	18ba      	adds	r2, r7, r2
 800a64a:	6013      	str	r3, [r2, #0]

	uint8_t  *pbuffer                   = &buffer[0];
 800a64c:	230c      	movs	r3, #12
 800a64e:	18fb      	adds	r3, r7, r3
 800a650:	229c      	movs	r2, #156	; 0x9c
 800a652:	0052      	lsls	r2, r2, #1
 800a654:	18ba      	adds	r2, r7, r2
 800a656:	6013      	str	r3, [r2, #0]
	uint16_t i                          = 0;
 800a658:	239b      	movs	r3, #155	; 0x9b
 800a65a:	005b      	lsls	r3, r3, #1
 800a65c:	18fb      	adds	r3, r7, r3
 800a65e:	2200      	movs	r2, #0
 800a660:	801a      	strh	r2, [r3, #0]
	uint16_t i2c_index                  = 0;
 800a662:	239a      	movs	r3, #154	; 0x9a
 800a664:	005b      	lsls	r3, r3, #1
 800a666:	18fb      	adds	r3, r7, r3
 800a668:	2200      	movs	r2, #0
 800a66a:	801a      	strh	r2, [r3, #0]
	uint16_t i2c_buffer_offset_bytes    = 0;
 800a66c:	2387      	movs	r3, #135	; 0x87
 800a66e:	005b      	lsls	r3, r3, #1
 800a670:	18fb      	adds	r3, r7, r3
 800a672:	2200      	movs	r2, #0
 800a674:	801a      	strh	r2, [r3, #0]
	uint16_t i2c_buffer_size_bytes      = 0;
 800a676:	2386      	movs	r3, #134	; 0x86
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	18fb      	adds	r3, r7, r3
 800a67c:	2200      	movs	r2, #0
 800a67e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800a680:	187b      	adds	r3, r7, r1
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a75      	ldr	r2, [pc, #468]	; (800a85c <VL53L1_init_and_start_range+0x2cc>)
 800a686:	24a0      	movs	r4, #160	; 0xa0
 800a688:	0064      	lsls	r4, r4, #1
 800a68a:	46a4      	mov	ip, r4
 800a68c:	44bc      	add	ip, r7
 800a68e:	4462      	add	r2, ip
 800a690:	7812      	ldrb	r2, [r2, #0]
 800a692:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800a694:	183b      	adds	r3, r7, r0
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	791b      	ldrb	r3, [r3, #4]
 800a69a:	b25b      	sxtb	r3, r3
 800a69c:	220f      	movs	r2, #15
 800a69e:	4013      	ands	r3, r2
 800a6a0:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800a6a2:	4b6e      	ldr	r3, [pc, #440]	; (800a85c <VL53L1_init_and_start_range+0x2cc>)
 800a6a4:	24a0      	movs	r4, #160	; 0xa0
 800a6a6:	0064      	lsls	r4, r4, #1
 800a6a8:	46a4      	mov	ip, r4
 800a6aa:	44bc      	add	ip, r7
 800a6ac:	4463      	add	r3, ip
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	b25b      	sxtb	r3, r3
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	b25b      	sxtb	r3, r3
 800a6b6:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800a6b8:	183b      	adds	r3, r7, r0
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800a6be:	0008      	movs	r0, r1
 800a6c0:	183b      	adds	r3, r7, r0
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	23a1      	movs	r3, #161	; 0xa1
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	5ad1      	ldrh	r1, [r2, r3]
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800a6ca:	183b      	adds	r3, r7, r0
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	23be      	movs	r3, #190	; 0xbe
 800a6d0:	005b      	lsls	r3, r3, #1
 800a6d2:	52d1      	strh	r1, [r2, r3]
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800a6d4:	183b      	adds	r3, r7, r0
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a62      	ldr	r2, [pc, #392]	; (800a864 <VL53L1_init_and_start_range+0x2d4>)
 800a6da:	5c9b      	ldrb	r3, [r3, r2]
 800a6dc:	2bff      	cmp	r3, #255	; 0xff
 800a6de:	d104      	bne.n	800a6ea <VL53L1_init_and_start_range+0x15a>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800a6e0:	183b      	adds	r3, r7, r0
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a5f      	ldr	r2, [pc, #380]	; (800a864 <VL53L1_init_and_start_range+0x2d4>)
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	5499      	strb	r1, [r3, r2]
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a6ea:	2098      	movs	r0, #152	; 0x98
 800a6ec:	0040      	lsls	r0, r0, #1
 800a6ee:	183b      	adds	r3, r7, r0
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a5d      	ldr	r2, [pc, #372]	; (800a868 <VL53L1_init_and_start_range+0x2d8>)
 800a6f4:	5c9b      	ldrb	r3, [r3, r2]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d142      	bne.n	800a780 <VL53L1_init_and_start_range+0x1f0>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800a6fa:	183b      	adds	r3, r7, r0
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a59      	ldr	r2, [pc, #356]	; (800a864 <VL53L1_init_and_start_range+0x2d4>)
 800a700:	5c9b      	ldrb	r3, [r3, r2]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a702:	2b00      	cmp	r3, #0
 800a704:	d13c      	bne.n	800a780 <VL53L1_init_and_start_range+0x1f0>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800a706:	183b      	adds	r3, r7, r0
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	23c3      	movs	r3, #195	; 0xc3
 800a70c:	005b      	lsls	r3, r3, #1
 800a70e:	5cd1      	ldrb	r1, [r2, r3]
		pdev->low_power_auto_data.saved_interrupt_config =
 800a710:	183b      	adds	r3, r7, r0
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a55      	ldr	r2, [pc, #340]	; (800a86c <VL53L1_init_and_start_range+0x2dc>)
 800a716:	5499      	strb	r1, [r3, r2]
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800a718:	183b      	adds	r3, r7, r0
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	23c3      	movs	r3, #195	; 0xc3
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	2120      	movs	r1, #32
 800a722:	54d1      	strb	r1, [r2, r3]
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800a724:	183b      	adds	r3, r7, r0
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	23c6      	movs	r3, #198	; 0xc6
 800a72a:	33ff      	adds	r3, #255	; 0xff
 800a72c:	5cd3      	ldrb	r3, [r2, r3]
 800a72e:	001a      	movs	r2, r3
 800a730:	2360      	movs	r3, #96	; 0x60
 800a732:	4013      	ands	r3, r2
 800a734:	d10c      	bne.n	800a750 <VL53L1_init_and_start_range+0x1c0>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800a736:	183b      	adds	r3, r7, r0
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2258      	movs	r2, #88	; 0x58
 800a73c:	5e9b      	ldrsh	r3, [r3, r2]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	b29b      	uxth	r3, r3
 800a744:	b219      	sxth	r1, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800a746:	183b      	adds	r3, r7, r0
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2254      	movs	r2, #84	; 0x54
 800a74c:	5299      	strh	r1, [r3, r2]
 800a74e:	e006      	b.n	800a75e <VL53L1_init_and_start_range+0x1ce>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800a750:	2398      	movs	r3, #152	; 0x98
 800a752:	005b      	lsls	r3, r3, #1
 800a754:	18fb      	adds	r3, r7, r3
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2254      	movs	r2, #84	; 0x54
 800a75a:	2100      	movs	r1, #0
 800a75c:	5299      	strh	r1, [r3, r2]
		}

		/* make sure config gets written out */
		if (device_config_level <
 800a75e:	4b40      	ldr	r3, [pc, #256]	; (800a860 <VL53L1_init_and_start_range+0x2d0>)
 800a760:	22a0      	movs	r2, #160	; 0xa0
 800a762:	0052      	lsls	r2, r2, #1
 800a764:	4694      	mov	ip, r2
 800a766:	44bc      	add	ip, r7
 800a768:	4463      	add	r3, ip
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d807      	bhi.n	800a780 <VL53L1_init_and_start_range+0x1f0>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800a770:	4b3b      	ldr	r3, [pc, #236]	; (800a860 <VL53L1_init_and_start_range+0x2d0>)
 800a772:	22a0      	movs	r2, #160	; 0xa0
 800a774:	0052      	lsls	r2, r2, #1
 800a776:	4694      	mov	ip, r2
 800a778:	44bc      	add	ip, r7
 800a77a:	4463      	add	r3, ip
 800a77c:	2205      	movs	r2, #5
 800a77e:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a780:	2098      	movs	r0, #152	; 0x98
 800a782:	0040      	lsls	r0, r0, #1
 800a784:	183b      	adds	r3, r7, r0
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a37      	ldr	r2, [pc, #220]	; (800a868 <VL53L1_init_and_start_range+0x2d8>)
 800a78a:	5c9b      	ldrb	r3, [r3, r2]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d116      	bne.n	800a7be <VL53L1_init_and_start_range+0x22e>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800a790:	183b      	adds	r3, r7, r0
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a33      	ldr	r2, [pc, #204]	; (800a864 <VL53L1_init_and_start_range+0x2d4>)
 800a796:	5c9b      	ldrb	r3, [r3, r2]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d110      	bne.n	800a7be <VL53L1_init_and_start_range+0x22e>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800a79c:	183b      	adds	r3, r7, r0
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a32      	ldr	r2, [pc, #200]	; (800a86c <VL53L1_init_and_start_range+0x2dc>)
 800a7a2:	5c99      	ldrb	r1, [r3, r2]
		pdev->gen_cfg.system__interrupt_config_gpio =
 800a7a4:	183b      	adds	r3, r7, r0
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	23c3      	movs	r3, #195	; 0xc3
 800a7aa:	005b      	lsls	r3, r3, #1
 800a7ac:	54d1      	strb	r1, [r2, r3]

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800a7ae:	4b2c      	ldr	r3, [pc, #176]	; (800a860 <VL53L1_init_and_start_range+0x2d0>)
 800a7b0:	22a0      	movs	r2, #160	; 0xa0
 800a7b2:	0052      	lsls	r2, r2, #1
 800a7b4:	4694      	mov	ip, r2
 800a7b6:	44bc      	add	ip, r7
 800a7b8:	4463      	add	r3, ip
 800a7ba:	2206      	movs	r2, #6
 800a7bc:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800a7be:	4b28      	ldr	r3, [pc, #160]	; (800a860 <VL53L1_init_and_start_range+0x2d0>)
 800a7c0:	22a0      	movs	r2, #160	; 0xa0
 800a7c2:	0052      	lsls	r2, r2, #1
 800a7c4:	4694      	mov	ip, r2
 800a7c6:	44bc      	add	ip, r7
 800a7c8:	4463      	add	r3, ip
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	2b06      	cmp	r3, #6
 800a7ce:	d828      	bhi.n	800a822 <VL53L1_init_and_start_range+0x292>
 800a7d0:	009a      	lsls	r2, r3, #2
 800a7d2:	4b27      	ldr	r3, [pc, #156]	; (800a870 <VL53L1_init_and_start_range+0x2e0>)
 800a7d4:	18d3      	adds	r3, r2, r3
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	469f      	mov	pc, r3
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800a7da:	239a      	movs	r3, #154	; 0x9a
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	18fb      	adds	r3, r7, r3
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	801a      	strh	r2, [r3, #0]
		break;
 800a7e4:	e023      	b.n	800a82e <VL53L1_init_and_start_range+0x29e>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800a7e6:	239a      	movs	r3, #154	; 0x9a
 800a7e8:	005b      	lsls	r3, r3, #1
 800a7ea:	18fb      	adds	r3, r7, r3
 800a7ec:	220d      	movs	r2, #13
 800a7ee:	801a      	strh	r2, [r3, #0]
		break;
 800a7f0:	e01d      	b.n	800a82e <VL53L1_init_and_start_range+0x29e>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800a7f2:	239a      	movs	r3, #154	; 0x9a
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	18fb      	adds	r3, r7, r3
 800a7f8:	2224      	movs	r2, #36	; 0x24
 800a7fa:	801a      	strh	r2, [r3, #0]
		break;
 800a7fc:	e017      	b.n	800a82e <VL53L1_init_and_start_range+0x29e>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800a7fe:	239a      	movs	r3, #154	; 0x9a
 800a800:	005b      	lsls	r3, r3, #1
 800a802:	18fb      	adds	r3, r7, r3
 800a804:	2244      	movs	r2, #68	; 0x44
 800a806:	801a      	strh	r2, [r3, #0]
		break;
 800a808:	e011      	b.n	800a82e <VL53L1_init_and_start_range+0x29e>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800a80a:	239a      	movs	r3, #154	; 0x9a
 800a80c:	005b      	lsls	r3, r3, #1
 800a80e:	18fb      	adds	r3, r7, r3
 800a810:	225a      	movs	r2, #90	; 0x5a
 800a812:	801a      	strh	r2, [r3, #0]
		break;
 800a814:	e00b      	b.n	800a82e <VL53L1_init_and_start_range+0x29e>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800a816:	239a      	movs	r3, #154	; 0x9a
 800a818:	005b      	lsls	r3, r3, #1
 800a81a:	18fb      	adds	r3, r7, r3
 800a81c:	2271      	movs	r2, #113	; 0x71
 800a81e:	801a      	strh	r2, [r3, #0]
		break;
 800a820:	e005      	b.n	800a82e <VL53L1_init_and_start_range+0x29e>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800a822:	239a      	movs	r3, #154	; 0x9a
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	18fb      	adds	r3, r7, r3
 800a828:	2283      	movs	r2, #131	; 0x83
 800a82a:	801a      	strh	r2, [r3, #0]
		break;
 800a82c:	46c0      	nop			; (mov r8, r8)
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800a82e:	2386      	movs	r3, #134	; 0x86
 800a830:	005b      	lsls	r3, r3, #1
 800a832:	18fb      	adds	r3, r7, r3
 800a834:	229a      	movs	r2, #154	; 0x9a
 800a836:	0052      	lsls	r2, r2, #1
 800a838:	18ba      	adds	r2, r7, r2
 800a83a:	8812      	ldrh	r2, [r2, #0]
 800a83c:	2188      	movs	r1, #136	; 0x88
 800a83e:	1a8a      	subs	r2, r1, r2
 800a840:	801a      	strh	r2, [r3, #0]
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800a842:	230c      	movs	r3, #12
 800a844:	18fb      	adds	r3, r7, r3
 800a846:	229c      	movs	r2, #156	; 0x9c
 800a848:	0052      	lsls	r2, r2, #1
 800a84a:	18ba      	adds	r2, r7, r2
 800a84c:	6013      	str	r3, [r2, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800a84e:	239b      	movs	r3, #155	; 0x9b
 800a850:	005b      	lsls	r3, r3, #1
 800a852:	18fb      	adds	r3, r7, r3
 800a854:	2200      	movs	r2, #0
 800a856:	801a      	strh	r2, [r3, #0]
 800a858:	e01c      	b.n	800a894 <VL53L1_init_and_start_range+0x304>
 800a85a:	46c0      	nop			; (mov r8, r8)
 800a85c:	fffffec3 	.word	0xfffffec3
 800a860:	fffffec2 	.word	0xfffffec2
 800a864:	000002e6 	.word	0x000002e6
 800a868:	000002e5 	.word	0x000002e5
 800a86c:	000002e7 	.word	0x000002e7
 800a870:	080164f4 	.word	0x080164f4
		*pbuffer++ = 0;
 800a874:	219c      	movs	r1, #156	; 0x9c
 800a876:	0049      	lsls	r1, r1, #1
 800a878:	187b      	adds	r3, r7, r1
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	1c5a      	adds	r2, r3, #1
 800a87e:	1879      	adds	r1, r7, r1
 800a880:	600a      	str	r2, [r1, #0]
 800a882:	2200      	movs	r2, #0
 800a884:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800a886:	219b      	movs	r1, #155	; 0x9b
 800a888:	0049      	lsls	r1, r1, #1
 800a88a:	187b      	adds	r3, r7, r1
 800a88c:	881a      	ldrh	r2, [r3, #0]
 800a88e:	187b      	adds	r3, r7, r1
 800a890:	3201      	adds	r2, #1
 800a892:	801a      	strh	r2, [r3, #0]
 800a894:	239b      	movs	r3, #155	; 0x9b
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	18fa      	adds	r2, r7, r3
 800a89a:	2386      	movs	r3, #134	; 0x86
 800a89c:	005b      	lsls	r3, r3, #1
 800a89e:	18fb      	adds	r3, r7, r3
 800a8a0:	8812      	ldrh	r2, [r2, #0]
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d3e5      	bcc.n	800a874 <VL53L1_init_and_start_range+0x2e4>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800a8a8:	4bc1      	ldr	r3, [pc, #772]	; (800abb0 <VL53L1_init_and_start_range+0x620>)
 800a8aa:	22a0      	movs	r2, #160	; 0xa0
 800a8ac:	0052      	lsls	r2, r2, #1
 800a8ae:	4694      	mov	ip, r2
 800a8b0:	44bc      	add	ip, r7
 800a8b2:	4463      	add	r3, ip
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2b05      	cmp	r3, #5
 800a8b8:	d920      	bls.n	800a8fc <VL53L1_init_and_start_range+0x36c>
 800a8ba:	2040      	movs	r0, #64	; 0x40
 800a8bc:	30ff      	adds	r0, #255	; 0xff
 800a8be:	183b      	adds	r3, r7, r0
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	b25b      	sxtb	r3, r3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d119      	bne.n	800a8fc <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a8c8:	2487      	movs	r4, #135	; 0x87
 800a8ca:	0064      	lsls	r4, r4, #1
 800a8cc:	193b      	adds	r3, r7, r4
 800a8ce:	229a      	movs	r2, #154	; 0x9a
 800a8d0:	0052      	lsls	r2, r2, #1
 800a8d2:	18ba      	adds	r2, r7, r2
 800a8d4:	8812      	ldrh	r2, [r2, #0]
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	1a8a      	subs	r2, r1, r2
 800a8da:	801a      	strh	r2, [r3, #0]

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a8dc:	193b      	adds	r3, r7, r4
 800a8de:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_static_nvm_managed(
 800a8e0:	220c      	movs	r2, #12
 800a8e2:	18ba      	adds	r2, r7, r2
 800a8e4:	18d2      	adds	r2, r2, r3
 800a8e6:	183c      	adds	r4, r7, r0
 800a8e8:	2396      	movs	r3, #150	; 0x96
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	18fb      	adds	r3, r7, r3
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	210b      	movs	r1, #11
 800a8f2:	0018      	movs	r0, r3
 800a8f4:	f002 fbc4 	bl	800d080 <VL53L1_i2c_encode_static_nvm_managed>
 800a8f8:	0003      	movs	r3, r0
 800a8fa:	7023      	strb	r3, [r4, #0]
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800a8fc:	4bac      	ldr	r3, [pc, #688]	; (800abb0 <VL53L1_init_and_start_range+0x620>)
 800a8fe:	22a0      	movs	r2, #160	; 0xa0
 800a900:	0052      	lsls	r2, r2, #1
 800a902:	4694      	mov	ip, r2
 800a904:	44bc      	add	ip, r7
 800a906:	4463      	add	r3, ip
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	2b04      	cmp	r3, #4
 800a90c:	d920      	bls.n	800a950 <VL53L1_init_and_start_range+0x3c0>
 800a90e:	2040      	movs	r0, #64	; 0x40
 800a910:	30ff      	adds	r0, #255	; 0xff
 800a912:	183b      	adds	r3, r7, r0
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	b25b      	sxtb	r3, r3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d119      	bne.n	800a950 <VL53L1_init_and_start_range+0x3c0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a91c:	2487      	movs	r4, #135	; 0x87
 800a91e:	0064      	lsls	r4, r4, #1
 800a920:	193b      	adds	r3, r7, r4
 800a922:	229a      	movs	r2, #154	; 0x9a
 800a924:	0052      	lsls	r2, r2, #1
 800a926:	18ba      	adds	r2, r7, r2
 800a928:	8812      	ldrh	r2, [r2, #0]
 800a92a:	210d      	movs	r1, #13
 800a92c:	1a8a      	subs	r2, r1, r2
 800a92e:	801a      	strh	r2, [r3, #0]

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a930:	193b      	adds	r3, r7, r4
 800a932:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_customer_nvm_managed(
 800a934:	220c      	movs	r2, #12
 800a936:	18ba      	adds	r2, r7, r2
 800a938:	18d2      	adds	r2, r2, r3
 800a93a:	183c      	adds	r4, r7, r0
 800a93c:	2394      	movs	r3, #148	; 0x94
 800a93e:	005b      	lsls	r3, r3, #1
 800a940:	18fb      	adds	r3, r7, r3
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2117      	movs	r1, #23
 800a946:	0018      	movs	r0, r3
 800a948:	f002 fc8e 	bl	800d268 <VL53L1_i2c_encode_customer_nvm_managed>
 800a94c:	0003      	movs	r3, r0
 800a94e:	7023      	strb	r3, [r4, #0]
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800a950:	4b97      	ldr	r3, [pc, #604]	; (800abb0 <VL53L1_init_and_start_range+0x620>)
 800a952:	22a0      	movs	r2, #160	; 0xa0
 800a954:	0052      	lsls	r2, r2, #1
 800a956:	4694      	mov	ip, r2
 800a958:	44bc      	add	ip, r7
 800a95a:	4463      	add	r3, ip
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	2b03      	cmp	r3, #3
 800a960:	d920      	bls.n	800a9a4 <VL53L1_init_and_start_range+0x414>
 800a962:	2040      	movs	r0, #64	; 0x40
 800a964:	30ff      	adds	r0, #255	; 0xff
 800a966:	183b      	adds	r3, r7, r0
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	b25b      	sxtb	r3, r3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d119      	bne.n	800a9a4 <VL53L1_init_and_start_range+0x414>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a970:	2487      	movs	r4, #135	; 0x87
 800a972:	0064      	lsls	r4, r4, #1
 800a974:	193b      	adds	r3, r7, r4
 800a976:	229a      	movs	r2, #154	; 0x9a
 800a978:	0052      	lsls	r2, r2, #1
 800a97a:	18ba      	adds	r2, r7, r2
 800a97c:	8812      	ldrh	r2, [r2, #0]
 800a97e:	2124      	movs	r1, #36	; 0x24
 800a980:	1a8a      	subs	r2, r1, r2
 800a982:	801a      	strh	r2, [r3, #0]

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a984:	193b      	adds	r3, r7, r4
 800a986:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_static_config(
 800a988:	220c      	movs	r2, #12
 800a98a:	18ba      	adds	r2, r7, r2
 800a98c:	18d2      	adds	r2, r2, r3
 800a98e:	183c      	adds	r4, r7, r0
 800a990:	2392      	movs	r3, #146	; 0x92
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	18fb      	adds	r3, r7, r3
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2120      	movs	r1, #32
 800a99a:	0018      	movs	r0, r3
 800a99c:	f002 fdba 	bl	800d514 <VL53L1_i2c_encode_static_config>
 800a9a0:	0003      	movs	r3, r0
 800a9a2:	7023      	strb	r3, [r4, #0]
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800a9a4:	4b82      	ldr	r3, [pc, #520]	; (800abb0 <VL53L1_init_and_start_range+0x620>)
 800a9a6:	22a0      	movs	r2, #160	; 0xa0
 800a9a8:	0052      	lsls	r2, r2, #1
 800a9aa:	4694      	mov	ip, r2
 800a9ac:	44bc      	add	ip, r7
 800a9ae:	4463      	add	r3, ip
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d920      	bls.n	800a9f8 <VL53L1_init_and_start_range+0x468>
 800a9b6:	2040      	movs	r0, #64	; 0x40
 800a9b8:	30ff      	adds	r0, #255	; 0xff
 800a9ba:	183b      	adds	r3, r7, r0
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	b25b      	sxtb	r3, r3
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d119      	bne.n	800a9f8 <VL53L1_init_and_start_range+0x468>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800a9c4:	2487      	movs	r4, #135	; 0x87
 800a9c6:	0064      	lsls	r4, r4, #1
 800a9c8:	193b      	adds	r3, r7, r4
 800a9ca:	229a      	movs	r2, #154	; 0x9a
 800a9cc:	0052      	lsls	r2, r2, #1
 800a9ce:	18ba      	adds	r2, r7, r2
 800a9d0:	8812      	ldrh	r2, [r2, #0]
 800a9d2:	2144      	movs	r1, #68	; 0x44
 800a9d4:	1a8a      	subs	r2, r1, r2
 800a9d6:	801a      	strh	r2, [r3, #0]

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a9d8:	193b      	adds	r3, r7, r4
 800a9da:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_general_config(
 800a9dc:	220c      	movs	r2, #12
 800a9de:	18ba      	adds	r2, r7, r2
 800a9e0:	18d2      	adds	r2, r2, r3
 800a9e2:	183c      	adds	r4, r7, r0
 800a9e4:	2390      	movs	r3, #144	; 0x90
 800a9e6:	005b      	lsls	r3, r3, #1
 800a9e8:	18fb      	adds	r3, r7, r3
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2116      	movs	r1, #22
 800a9ee:	0018      	movs	r0, r3
 800a9f0:	f002 fe7a 	bl	800d6e8 <VL53L1_i2c_encode_general_config>
 800a9f4:	0003      	movs	r3, r0
 800a9f6:	7023      	strb	r3, [r4, #0]
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800a9f8:	4b6d      	ldr	r3, [pc, #436]	; (800abb0 <VL53L1_init_and_start_range+0x620>)
 800a9fa:	22a0      	movs	r2, #160	; 0xa0
 800a9fc:	0052      	lsls	r2, r2, #1
 800a9fe:	4694      	mov	ip, r2
 800aa00:	44bc      	add	ip, r7
 800aa02:	4463      	add	r3, ip
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d920      	bls.n	800aa4c <VL53L1_init_and_start_range+0x4bc>
 800aa0a:	2040      	movs	r0, #64	; 0x40
 800aa0c:	30ff      	adds	r0, #255	; 0xff
 800aa0e:	183b      	adds	r3, r7, r0
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	b25b      	sxtb	r3, r3
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d119      	bne.n	800aa4c <VL53L1_init_and_start_range+0x4bc>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800aa18:	2487      	movs	r4, #135	; 0x87
 800aa1a:	0064      	lsls	r4, r4, #1
 800aa1c:	193b      	adds	r3, r7, r4
 800aa1e:	229a      	movs	r2, #154	; 0x9a
 800aa20:	0052      	lsls	r2, r2, #1
 800aa22:	18ba      	adds	r2, r7, r2
 800aa24:	8812      	ldrh	r2, [r2, #0]
 800aa26:	215a      	movs	r1, #90	; 0x5a
 800aa28:	1a8a      	subs	r2, r1, r2
 800aa2a:	801a      	strh	r2, [r3, #0]

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800aa2c:	193b      	adds	r3, r7, r4
 800aa2e:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_timing_config(
 800aa30:	220c      	movs	r2, #12
 800aa32:	18ba      	adds	r2, r7, r2
 800aa34:	18d2      	adds	r2, r2, r3
 800aa36:	183c      	adds	r4, r7, r0
 800aa38:	238e      	movs	r3, #142	; 0x8e
 800aa3a:	005b      	lsls	r3, r3, #1
 800aa3c:	18fb      	adds	r3, r7, r3
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2117      	movs	r1, #23
 800aa42:	0018      	movs	r0, r3
 800aa44:	f002 fedb 	bl	800d7fe <VL53L1_i2c_encode_timing_config>
 800aa48:	0003      	movs	r3, r0
 800aa4a:	7023      	strb	r3, [r4, #0]
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800aa4c:	4b58      	ldr	r3, [pc, #352]	; (800abb0 <VL53L1_init_and_start_range+0x620>)
 800aa4e:	22a0      	movs	r2, #160	; 0xa0
 800aa50:	0052      	lsls	r2, r2, #1
 800aa52:	4694      	mov	ip, r2
 800aa54:	44bc      	add	ip, r7
 800aa56:	4463      	add	r3, ip
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d049      	beq.n	800aaf2 <VL53L1_init_and_start_range+0x562>
 800aa5e:	2340      	movs	r3, #64	; 0x40
 800aa60:	33ff      	adds	r3, #255	; 0xff
 800aa62:	18fb      	adds	r3, r7, r3
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	b25b      	sxtb	r3, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d142      	bne.n	800aaf2 <VL53L1_init_and_start_range+0x562>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800aa6c:	2387      	movs	r3, #135	; 0x87
 800aa6e:	005b      	lsls	r3, r3, #1
 800aa70:	18fb      	adds	r3, r7, r3
 800aa72:	229a      	movs	r2, #154	; 0x9a
 800aa74:	0052      	lsls	r2, r2, #1
 800aa76:	18ba      	adds	r2, r7, r2
 800aa78:	8812      	ldrh	r2, [r2, #0]
 800aa7a:	2171      	movs	r1, #113	; 0x71
 800aa7c:	1a8a      	subs	r2, r1, r2
 800aa7e:	801a      	strh	r2, [r3, #0]
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800aa80:	238a      	movs	r3, #138	; 0x8a
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	18fb      	adds	r3, r7, r3
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	791b      	ldrb	r3, [r3, #4]
 800aa8a:	001a      	movs	r2, r3
 800aa8c:	2320      	movs	r3, #32
 800aa8e:	4013      	ands	r3, r2
 800aa90:	d01b      	beq.n	800aaca <VL53L1_init_and_start_range+0x53a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800aa92:	2188      	movs	r1, #136	; 0x88
 800aa94:	0049      	lsls	r1, r1, #1
 800aa96:	187b      	adds	r3, r7, r1
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	789b      	ldrb	r3, [r3, #2]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	208c      	movs	r0, #140	; 0x8c
 800aaa4:	0040      	lsls	r0, r0, #1
 800aaa6:	183b      	adds	r3, r7, r0
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800aaac:	187b      	adds	r3, r7, r1
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	789b      	ldrb	r3, [r3, #2]
 800aab2:	2201      	movs	r2, #1
 800aab4:	4313      	orrs	r3, r2
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	183b      	adds	r3, r7, r0
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800aabe:	187b      	adds	r3, r7, r1
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	789a      	ldrb	r2, [r3, #2]
 800aac4:	183b      	adds	r3, r7, r0
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800aaca:	2387      	movs	r3, #135	; 0x87
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	18fb      	adds	r3, r7, r3
 800aad0:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_dynamic_config(
 800aad2:	220c      	movs	r2, #12
 800aad4:	18ba      	adds	r2, r7, r2
 800aad6:	18d2      	adds	r2, r2, r3
 800aad8:	2340      	movs	r3, #64	; 0x40
 800aada:	33ff      	adds	r3, #255	; 0xff
 800aadc:	18fc      	adds	r4, r7, r3
 800aade:	238c      	movs	r3, #140	; 0x8c
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	18fb      	adds	r3, r7, r3
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2112      	movs	r1, #18
 800aae8:	0018      	movs	r0, r3
 800aaea:	f002 ff11 	bl	800d910 <VL53L1_i2c_encode_dynamic_config>
 800aaee:	0003      	movs	r3, r0
 800aaf0:	7023      	strb	r3, [r4, #0]
	}

	if (status == VL53L1_ERROR_NONE) {
 800aaf2:	2040      	movs	r0, #64	; 0x40
 800aaf4:	30ff      	adds	r0, #255	; 0xff
 800aaf6:	183b      	adds	r3, r7, r0
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	b25b      	sxtb	r3, r3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d119      	bne.n	800ab34 <VL53L1_init_and_start_range+0x5a4>

		i2c_buffer_offset_bytes = \
 800ab00:	2487      	movs	r4, #135	; 0x87
 800ab02:	0064      	lsls	r4, r4, #1
 800ab04:	193b      	adds	r3, r7, r4
 800ab06:	229a      	movs	r2, #154	; 0x9a
 800ab08:	0052      	lsls	r2, r2, #1
 800ab0a:	18ba      	adds	r2, r7, r2
 800ab0c:	8812      	ldrh	r2, [r2, #0]
 800ab0e:	2183      	movs	r1, #131	; 0x83
 800ab10:	1a8a      	subs	r2, r1, r2
 800ab12:	801a      	strh	r2, [r3, #0]

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ab14:	193b      	adds	r3, r7, r4
 800ab16:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_system_control(
 800ab18:	220c      	movs	r2, #12
 800ab1a:	18ba      	adds	r2, r7, r2
 800ab1c:	18d2      	adds	r2, r2, r3
 800ab1e:	183c      	adds	r4, r7, r0
 800ab20:	238a      	movs	r3, #138	; 0x8a
 800ab22:	005b      	lsls	r3, r3, #1
 800ab24:	18fb      	adds	r3, r7, r3
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2105      	movs	r1, #5
 800ab2a:	0018      	movs	r0, r3
 800ab2c:	f002 ff7c 	bl	800da28 <VL53L1_i2c_encode_system_control>
 800ab30:	0003      	movs	r3, r0
 800ab32:	7023      	strb	r3, [r4, #0]
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800ab34:	2240      	movs	r2, #64	; 0x40
 800ab36:	32ff      	adds	r2, #255	; 0xff
 800ab38:	18bb      	adds	r3, r7, r2
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	b25b      	sxtb	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d110      	bne.n	800ab64 <VL53L1_init_and_start_range+0x5d4>
		status =
			VL53L1_WriteMulti(
 800ab42:	2386      	movs	r3, #134	; 0x86
 800ab44:	005b      	lsls	r3, r3, #1
 800ab46:	18fb      	adds	r3, r7, r3
 800ab48:	881d      	ldrh	r5, [r3, #0]
 800ab4a:	18bc      	adds	r4, r7, r2
 800ab4c:	230c      	movs	r3, #12
 800ab4e:	18fa      	adds	r2, r7, r3
 800ab50:	239a      	movs	r3, #154	; 0x9a
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	18fb      	adds	r3, r7, r3
 800ab56:	8819      	ldrh	r1, [r3, #0]
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	002b      	movs	r3, r5
 800ab5c:	f003 fcd2 	bl	800e504 <VL53L1_WriteMulti>
 800ab60:	0003      	movs	r3, r0
 800ab62:	7023      	strb	r3, [r4, #0]
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800ab64:	2240      	movs	r2, #64	; 0x40
 800ab66:	32ff      	adds	r2, #255	; 0xff
 800ab68:	18bb      	adds	r3, r7, r2
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	b25b      	sxtb	r3, r3
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d106      	bne.n	800ab80 <VL53L1_init_and_start_range+0x5f0>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800ab72:	18bc      	adds	r4, r7, r2
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	0018      	movs	r0, r3
 800ab78:	f001 fa98 	bl	800c0ac <VL53L1_update_ll_driver_rd_state>
 800ab7c:	0003      	movs	r3, r0
 800ab7e:	7023      	strb	r3, [r4, #0]

	if (status == VL53L1_ERROR_NONE)
 800ab80:	2240      	movs	r2, #64	; 0x40
 800ab82:	32ff      	adds	r2, #255	; 0xff
 800ab84:	18bb      	adds	r3, r7, r2
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	b25b      	sxtb	r3, r3
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d106      	bne.n	800ab9c <VL53L1_init_and_start_range+0x60c>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800ab8e:	18bc      	adds	r4, r7, r2
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	0018      	movs	r0, r3
 800ab94:	f001 fb71 	bl	800c27a <VL53L1_update_ll_driver_cfg_state>
 800ab98:	0003      	movs	r3, r0
 800ab9a:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(status);

	return status;
 800ab9c:	2340      	movs	r3, #64	; 0x40
 800ab9e:	33ff      	adds	r3, #255	; 0xff
 800aba0:	18fb      	adds	r3, r7, r3
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	b25b      	sxtb	r3, r3
}
 800aba6:	0018      	movs	r0, r3
 800aba8:	46bd      	mov	sp, r7
 800abaa:	b050      	add	sp, #320	; 0x140
 800abac:	bdb0      	pop	{r4, r5, r7, pc}
 800abae:	46c0      	nop			; (mov r8, r8)
 800abb0:	fffffec2 	.word	0xfffffec2

0800abb4 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 800abb4:	b590      	push	{r4, r7, lr}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800abbc:	200f      	movs	r0, #15
 800abbe:	183b      	adds	r3, r7, r0
 800abc0:	2200      	movs	r2, #0
 800abc2:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev =
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	23e6      	movs	r3, #230	; 0xe6
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	5cd3      	ldrb	r3, [r2, r3]
 800abd0:	b25b      	sxtb	r3, r3
 800abd2:	220f      	movs	r2, #15
 800abd4:	4013      	ands	r3, r2
 800abd6:	b25b      	sxtb	r3, r3
 800abd8:	2280      	movs	r2, #128	; 0x80
 800abda:	4252      	negs	r2, r2
 800abdc:	4313      	orrs	r3, r2
 800abde:	b25b      	sxtb	r3, r3
 800abe0:	b2d9      	uxtb	r1, r3
	pdev->sys_ctrl.system__mode_start =
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	23e6      	movs	r3, #230	; 0xe6
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	54d1      	strb	r1, [r2, r3]
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	33c9      	adds	r3, #201	; 0xc9
 800abee:	33ff      	adds	r3, #255	; 0xff
 800abf0:	001a      	movs	r2, r3
 800abf2:	183c      	adds	r4, r7, r0
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	0011      	movs	r1, r2
 800abf8:	0018      	movs	r0, r3
 800abfa:	f002 ff55 	bl	800daa8 <VL53L1_set_system_control>
 800abfe:	0003      	movs	r3, r0
 800ac00:	7023      	strb	r3, [r4, #0]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	23e6      	movs	r3, #230	; 0xe6
 800ac06:	005b      	lsls	r3, r3, #1
 800ac08:	5cd3      	ldrb	r3, [r2, r3]
 800ac0a:	220f      	movs	r2, #15
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	b2d9      	uxtb	r1, r3
	pdev->sys_ctrl.system__mode_start =
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	23e6      	movs	r3, #230	; 0xe6
 800ac14:	005b      	lsls	r3, r3, #1
 800ac16:	54d1      	strb	r1, [r2, r3]

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2103      	movs	r1, #3
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	f001 fa1b 	bl	800c058 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	4a07      	ldr	r2, [pc, #28]	; (800ac44 <VL53L1_stop_range+0x90>)
 800ac26:	5c9b      	ldrb	r3, [r3, r2]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d103      	bne.n	800ac34 <VL53L1_stop_range+0x80>
		VL53L1_low_power_auto_data_stop_range(Dev);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	0018      	movs	r0, r3
 800ac30:	f002 f86c 	bl	800cd0c <VL53L1_low_power_auto_data_stop_range>

	return status;
 800ac34:	230f      	movs	r3, #15
 800ac36:	18fb      	adds	r3, r7, r3
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	b25b      	sxtb	r3, r3
}
 800ac3c:	0018      	movs	r0, r3
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	b005      	add	sp, #20
 800ac42:	bd90      	pop	{r4, r7, pc}
 800ac44:	000002e5 	.word	0x000002e5

0800ac48 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800ac48:	b5b0      	push	{r4, r5, r7, lr}
 800ac4a:	b0c8      	sub	sp, #288	; 0x120
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	000a      	movs	r2, r1
 800ac52:	4b78      	ldr	r3, [pc, #480]	; (800ae34 <VL53L1_get_measurement_results+0x1ec>)
 800ac54:	2190      	movs	r1, #144	; 0x90
 800ac56:	0049      	lsls	r1, r1, #1
 800ac58:	468c      	mov	ip, r1
 800ac5a:	44bc      	add	ip, r7
 800ac5c:	4463      	add	r3, ip
 800ac5e:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ac60:	2320      	movs	r3, #32
 800ac62:	33ff      	adds	r3, #255	; 0xff
 800ac64:	18fb      	adds	r3, r7, r3
 800ac66:	2200      	movs	r2, #0
 800ac68:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	228c      	movs	r2, #140	; 0x8c
 800ac6e:	0052      	lsls	r2, r2, #1
 800ac70:	18b9      	adds	r1, r7, r2
 800ac72:	600b      	str	r3, [r1, #0]

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800ac74:	18bb      	adds	r3, r7, r2
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	33cf      	adds	r3, #207	; 0xcf
 800ac7a:	33ff      	adds	r3, #255	; 0xff
 800ac7c:	218a      	movs	r1, #138	; 0x8a
 800ac7e:	0049      	lsls	r1, r1, #1
 800ac80:	1879      	adds	r1, r7, r1
 800ac82:	600b      	str	r3, [r1, #0]
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800ac84:	18bb      	adds	r3, r7, r2
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	21a2      	movs	r1, #162	; 0xa2
 800ac8a:	0089      	lsls	r1, r1, #2
 800ac8c:	468c      	mov	ip, r1
 800ac8e:	4463      	add	r3, ip
 800ac90:	2188      	movs	r1, #136	; 0x88
 800ac92:	0049      	lsls	r1, r1, #1
 800ac94:	1879      	adds	r1, r7, r1
 800ac96:	600b      	str	r3, [r1, #0]
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800ac98:	18bb      	adds	r3, r7, r2
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	22ab      	movs	r2, #171	; 0xab
 800ac9e:	0092      	lsls	r2, r2, #2
 800aca0:	4694      	mov	ip, r2
 800aca2:	4463      	add	r3, ip
 800aca4:	2286      	movs	r2, #134	; 0x86
 800aca6:	0052      	lsls	r2, r2, #1
 800aca8:	18ba      	adds	r2, r7, r2
 800acaa:	6013      	str	r3, [r2, #0]

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800acac:	2185      	movs	r1, #133	; 0x85
 800acae:	0049      	lsls	r1, r1, #1
 800acb0:	187b      	adds	r3, r7, r1
 800acb2:	2288      	movs	r2, #136	; 0x88
 800acb4:	801a      	strh	r2, [r3, #0]
	uint16_t i2c_buffer_offset_bytes = 0;
 800acb6:	2384      	movs	r3, #132	; 0x84
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	18fb      	adds	r3, r7, r3
 800acbc:	2200      	movs	r2, #0
 800acbe:	801a      	strh	r2, [r3, #0]
	uint16_t i2c_buffer_size_bytes   = 0;
 800acc0:	208e      	movs	r0, #142	; 0x8e
 800acc2:	0040      	lsls	r0, r0, #1
 800acc4:	183b      	adds	r3, r7, r0
 800acc6:	2200      	movs	r2, #0
 800acc8:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800acca:	4b5a      	ldr	r3, [pc, #360]	; (800ae34 <VL53L1_get_measurement_results+0x1ec>)
 800accc:	2290      	movs	r2, #144	; 0x90
 800acce:	0052      	lsls	r2, r2, #1
 800acd0:	4694      	mov	ip, r2
 800acd2:	44bc      	add	ip, r7
 800acd4:	4463      	add	r3, ip
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d009      	beq.n	800acf0 <VL53L1_get_measurement_results+0xa8>
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d112      	bne.n	800ad06 <VL53L1_get_measurement_results+0xbe>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800ace0:	183b      	adds	r3, r7, r0
 800ace2:	187a      	adds	r2, r7, r1
 800ace4:	8812      	ldrh	r2, [r2, #0]
 800ace6:	2187      	movs	r1, #135	; 0x87
 800ace8:	0049      	lsls	r1, r1, #1
 800acea:	1a8a      	subs	r2, r1, r2
 800acec:	801a      	strh	r2, [r3, #0]
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800acee:	e010      	b.n	800ad12 <VL53L1_get_measurement_results+0xca>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800acf0:	238e      	movs	r3, #142	; 0x8e
 800acf2:	005b      	lsls	r3, r3, #1
 800acf4:	18fb      	adds	r3, r7, r3
 800acf6:	2285      	movs	r2, #133	; 0x85
 800acf8:	0052      	lsls	r2, r2, #1
 800acfa:	18ba      	adds	r2, r7, r2
 800acfc:	8812      	ldrh	r2, [r2, #0]
 800acfe:	21d5      	movs	r1, #213	; 0xd5
 800ad00:	1a8a      	subs	r2, r1, r2
 800ad02:	801a      	strh	r2, [r3, #0]
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800ad04:	e005      	b.n	800ad12 <VL53L1_get_measurement_results+0xca>
	default:
		i2c_buffer_size_bytes =
 800ad06:	238e      	movs	r3, #142	; 0x8e
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	18fb      	adds	r3, r7, r3
 800ad0c:	222c      	movs	r2, #44	; 0x2c
 800ad0e:	801a      	strh	r2, [r3, #0]
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800ad10:	46c0      	nop			; (mov r8, r8)
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ad12:	2220      	movs	r2, #32
 800ad14:	32ff      	adds	r2, #255	; 0xff
 800ad16:	18bb      	adds	r3, r7, r2
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	b25b      	sxtb	r3, r3
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d110      	bne.n	800ad42 <VL53L1_get_measurement_results+0xfa>
		status =
			VL53L1_ReadMulti(
 800ad20:	238e      	movs	r3, #142	; 0x8e
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	18fb      	adds	r3, r7, r3
 800ad26:	881d      	ldrh	r5, [r3, #0]
 800ad28:	18bc      	adds	r4, r7, r2
 800ad2a:	2308      	movs	r3, #8
 800ad2c:	18fa      	adds	r2, r7, r3
 800ad2e:	2385      	movs	r3, #133	; 0x85
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	18fb      	adds	r3, r7, r3
 800ad34:	8819      	ldrh	r1, [r3, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	002b      	movs	r3, r5
 800ad3a:	f003 fc27 	bl	800e58c <VL53L1_ReadMulti>
 800ad3e:	0003      	movs	r3, r0
 800ad40:	7023      	strb	r3, [r4, #0]
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800ad42:	4b3c      	ldr	r3, [pc, #240]	; (800ae34 <VL53L1_get_measurement_results+0x1ec>)
 800ad44:	2290      	movs	r2, #144	; 0x90
 800ad46:	0052      	lsls	r2, r2, #1
 800ad48:	4694      	mov	ip, r2
 800ad4a:	44bc      	add	ip, r7
 800ad4c:	4463      	add	r3, ip
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d920      	bls.n	800ad96 <VL53L1_get_measurement_results+0x14e>
 800ad54:	2020      	movs	r0, #32
 800ad56:	30ff      	adds	r0, #255	; 0xff
 800ad58:	183b      	adds	r3, r7, r0
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	b25b      	sxtb	r3, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d119      	bne.n	800ad96 <VL53L1_get_measurement_results+0x14e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800ad62:	2484      	movs	r4, #132	; 0x84
 800ad64:	0064      	lsls	r4, r4, #1
 800ad66:	193b      	adds	r3, r7, r4
 800ad68:	2285      	movs	r2, #133	; 0x85
 800ad6a:	0052      	lsls	r2, r2, #1
 800ad6c:	18ba      	adds	r2, r7, r2
 800ad6e:	8812      	ldrh	r2, [r2, #0]
 800ad70:	21d6      	movs	r1, #214	; 0xd6
 800ad72:	1a8a      	subs	r2, r1, r2
 800ad74:	801a      	strh	r2, [r3, #0]
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800ad76:	193b      	adds	r3, r7, r4
 800ad78:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_decode_debug_results(
 800ad7a:	2208      	movs	r2, #8
 800ad7c:	18ba      	adds	r2, r7, r2
 800ad7e:	18d3      	adds	r3, r2, r3
 800ad80:	183c      	adds	r4, r7, r0
 800ad82:	2286      	movs	r2, #134	; 0x86
 800ad84:	0052      	lsls	r2, r2, #1
 800ad86:	18ba      	adds	r2, r7, r2
 800ad88:	6812      	ldr	r2, [r2, #0]
 800ad8a:	0019      	movs	r1, r3
 800ad8c:	2038      	movs	r0, #56	; 0x38
 800ad8e:	f003 f822 	bl	800ddd6 <VL53L1_i2c_decode_debug_results>
 800ad92:	0003      	movs	r3, r0
 800ad94:	7023      	strb	r3, [r4, #0]
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800ad96:	4b27      	ldr	r3, [pc, #156]	; (800ae34 <VL53L1_get_measurement_results+0x1ec>)
 800ad98:	2290      	movs	r2, #144	; 0x90
 800ad9a:	0052      	lsls	r2, r2, #1
 800ad9c:	4694      	mov	ip, r2
 800ad9e:	44bc      	add	ip, r7
 800ada0:	4463      	add	r3, ip
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d020      	beq.n	800adea <VL53L1_get_measurement_results+0x1a2>
 800ada8:	2020      	movs	r0, #32
 800adaa:	30ff      	adds	r0, #255	; 0xff
 800adac:	183b      	adds	r3, r7, r0
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	b25b      	sxtb	r3, r3
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d119      	bne.n	800adea <VL53L1_get_measurement_results+0x1a2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800adb6:	2484      	movs	r4, #132	; 0x84
 800adb8:	0064      	lsls	r4, r4, #1
 800adba:	193b      	adds	r3, r7, r4
 800adbc:	2285      	movs	r2, #133	; 0x85
 800adbe:	0052      	lsls	r2, r2, #1
 800adc0:	18ba      	adds	r2, r7, r2
 800adc2:	8812      	ldrh	r2, [r2, #0]
 800adc4:	21b4      	movs	r1, #180	; 0xb4
 800adc6:	1a8a      	subs	r2, r1, r2
 800adc8:	801a      	strh	r2, [r3, #0]
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800adca:	193b      	adds	r3, r7, r4
 800adcc:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_decode_core_results(
 800adce:	2208      	movs	r2, #8
 800add0:	18ba      	adds	r2, r7, r2
 800add2:	18d3      	adds	r3, r2, r3
 800add4:	183c      	adds	r4, r7, r0
 800add6:	2288      	movs	r2, #136	; 0x88
 800add8:	0052      	lsls	r2, r2, #1
 800adda:	18ba      	adds	r2, r7, r2
 800addc:	6812      	ldr	r2, [r2, #0]
 800adde:	0019      	movs	r1, r3
 800ade0:	2021      	movs	r0, #33	; 0x21
 800ade2:	f002 ff8f 	bl	800dd04 <VL53L1_i2c_decode_core_results>
 800ade6:	0003      	movs	r3, r0
 800ade8:	7023      	strb	r3, [r4, #0]
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800adea:	2120      	movs	r1, #32
 800adec:	31ff      	adds	r1, #255	; 0xff
 800adee:	187b      	adds	r3, r7, r1
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	b25b      	sxtb	r3, r3
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d114      	bne.n	800ae22 <VL53L1_get_measurement_results+0x1da>

		i2c_buffer_offset_bytes = 0;
 800adf8:	2084      	movs	r0, #132	; 0x84
 800adfa:	0040      	lsls	r0, r0, #1
 800adfc:	183b      	adds	r3, r7, r0
 800adfe:	2200      	movs	r2, #0
 800ae00:	801a      	strh	r2, [r3, #0]
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800ae02:	183b      	adds	r3, r7, r0
 800ae04:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_decode_system_results(
 800ae06:	2208      	movs	r2, #8
 800ae08:	18ba      	adds	r2, r7, r2
 800ae0a:	18d3      	adds	r3, r2, r3
 800ae0c:	187c      	adds	r4, r7, r1
 800ae0e:	228a      	movs	r2, #138	; 0x8a
 800ae10:	0052      	lsls	r2, r2, #1
 800ae12:	18ba      	adds	r2, r7, r2
 800ae14:	6812      	ldr	r2, [r2, #0]
 800ae16:	0019      	movs	r1, r3
 800ae18:	202c      	movs	r0, #44	; 0x2c
 800ae1a:	f002 fe76 	bl	800db0a <VL53L1_i2c_decode_system_results>
 800ae1e:	0003      	movs	r3, r0
 800ae20:	7023      	strb	r3, [r4, #0]
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ae22:	2320      	movs	r3, #32
 800ae24:	33ff      	adds	r3, #255	; 0xff
 800ae26:	18fb      	adds	r3, r7, r3
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	b25b      	sxtb	r3, r3
}
 800ae2c:	0018      	movs	r0, r3
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	b048      	add	sp, #288	; 0x120
 800ae32:	bdb0      	pop	{r4, r5, r7, pc}
 800ae34:	fffffee3 	.word	0xfffffee3

0800ae38 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800ae38:	b590      	push	{r4, r7, lr}
 800ae3a:	b089      	sub	sp, #36	; 0x24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	607a      	str	r2, [r7, #4]
 800ae42:	200b      	movs	r0, #11
 800ae44:	183b      	adds	r3, r7, r0
 800ae46:	1c0a      	adds	r2, r1, #0
 800ae48:	701a      	strb	r2, [r3, #0]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ae4a:	211f      	movs	r1, #31
 800ae4c:	187b      	adds	r3, r7, r1
 800ae4e:	2200      	movs	r2, #0
 800ae50:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev =
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	22bd      	movs	r2, #189	; 0xbd
 800ae5a:	0092      	lsls	r2, r2, #2
 800ae5c:	4694      	mov	ip, r2
 800ae5e:	4463      	add	r3, ip
 800ae60:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ae66:	187b      	adds	r3, r7, r1
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	b25b      	sxtb	r3, r3
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d109      	bne.n	800ae84 <VL53L1_get_device_results+0x4c>
		status = VL53L1_get_measurement_results(
 800ae70:	187c      	adds	r4, r7, r1
 800ae72:	183b      	adds	r3, r7, r0
 800ae74:	781a      	ldrb	r2, [r3, #0]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	0011      	movs	r1, r2
 800ae7a:	0018      	movs	r0, r3
 800ae7c:	f7ff fee4 	bl	800ac48 <VL53L1_get_measurement_results>
 800ae80:	0003      	movs	r3, r0
 800ae82:	7023      	strb	r3, [r4, #0]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800ae84:	231f      	movs	r3, #31
 800ae86:	18fb      	adds	r3, r7, r3
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	b25b      	sxtb	r3, r3
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10e      	bne.n	800aeae <VL53L1_get_device_results+0x76>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	229c      	movs	r2, #156	; 0x9c
 800ae94:	5a9b      	ldrh	r3, [r3, r2]
		VL53L1_copy_sys_and_core_results_to_range_results(
 800ae96:	0018      	movs	r0, r3
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	33cf      	adds	r3, #207	; 0xcf
 800ae9c:	33ff      	adds	r3, #255	; 0xff
 800ae9e:	0019      	movs	r1, r3
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	22a2      	movs	r2, #162	; 0xa2
 800aea4:	0092      	lsls	r2, r2, #2
 800aea6:	189a      	adds	r2, r3, r2
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f000 f88b 	bl	800afc4 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	4a30      	ldr	r2, [pc, #192]	; (800af74 <VL53L1_get_device_results+0x13c>)
 800aeb2:	5c9b      	ldrb	r3, [r3, r2]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d137      	bne.n	800af28 <VL53L1_get_device_results+0xf0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800aeb8:	211f      	movs	r1, #31
 800aeba:	187b      	adds	r3, r7, r1
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	b25b      	sxtb	r3, r3
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d110      	bne.n	800aee6 <VL53L1_get_device_results+0xae>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	4a2c      	ldr	r2, [pc, #176]	; (800af78 <VL53L1_get_device_results+0x140>)
 800aec8:	5c9b      	ldrb	r3, [r3, r2]
		if ((status == VL53L1_ERROR_NONE) &&
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10b      	bne.n	800aee6 <VL53L1_get_device_results+0xae>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800aece:	187c      	adds	r4, r7, r1
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	0018      	movs	r0, r3
 800aed4:	f001 ff86 	bl	800cde4 <VL53L1_low_power_auto_setup_manual_calibration>
 800aed8:	0003      	movs	r3, r0
 800aeda:	7023      	strb	r3, [r4, #0]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	4a26      	ldr	r2, [pc, #152]	; (800af78 <VL53L1_get_device_results+0x140>)
 800aee0:	2101      	movs	r1, #1
 800aee2:	5499      	strb	r1, [r3, r2]
 800aee4:	e00e      	b.n	800af04 <VL53L1_get_device_results+0xcc>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800aee6:	231f      	movs	r3, #31
 800aee8:	18fb      	adds	r3, r7, r3
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	b25b      	sxtb	r3, r3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d108      	bne.n	800af04 <VL53L1_get_device_results+0xcc>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	4a20      	ldr	r2, [pc, #128]	; (800af78 <VL53L1_get_device_results+0x140>)
 800aef6:	5c9b      	ldrb	r3, [r3, r2]
		} else if ((status == VL53L1_ERROR_NONE) &&
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d103      	bne.n	800af04 <VL53L1_get_device_results+0xcc>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	4a1e      	ldr	r2, [pc, #120]	; (800af78 <VL53L1_get_device_results+0x140>)
 800af00:	2102      	movs	r1, #2
 800af02:	5499      	strb	r1, [r3, r2]
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	4a1c      	ldr	r2, [pc, #112]	; (800af78 <VL53L1_get_device_results+0x140>)
 800af08:	5c9b      	ldrb	r3, [r3, r2]
 800af0a:	2bff      	cmp	r3, #255	; 0xff
 800af0c:	d00c      	beq.n	800af28 <VL53L1_get_device_results+0xf0>
 800af0e:	221f      	movs	r2, #31
 800af10:	18bb      	adds	r3, r7, r2
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	b25b      	sxtb	r3, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	d106      	bne.n	800af28 <VL53L1_get_device_results+0xf0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 800af1a:	18bc      	adds	r4, r7, r2
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	0018      	movs	r0, r3
 800af20:	f001 ffb6 	bl	800ce90 <VL53L1_low_power_auto_update_DSS>
 800af24:	0003      	movs	r3, r0
 800af26:	7023      	strb	r3, [r4, #0]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	222c      	movs	r2, #44	; 0x2c
 800af2c:	5c9a      	ldrb	r2, [r3, r2]
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	2230      	movs	r2, #48	; 0x30
 800af36:	5c9a      	ldrb	r2, [r3, r2]
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800af3c:	6939      	ldr	r1, [r7, #16]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2284      	movs	r2, #132	; 0x84
 800af42:	0018      	movs	r0, r3
 800af44:	f008 fb3a 	bl	80135bc <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800af48:	221f      	movs	r2, #31
 800af4a:	18bb      	adds	r3, r7, r2
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	b25b      	sxtb	r3, r3
 800af50:	2b00      	cmp	r3, #0
 800af52:	d106      	bne.n	800af62 <VL53L1_get_device_results+0x12a>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800af54:	18bc      	adds	r4, r7, r2
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	0018      	movs	r0, r3
 800af5a:	f001 f92d 	bl	800c1b8 <VL53L1_check_ll_driver_rd_state>
 800af5e:	0003      	movs	r3, r0
 800af60:	7023      	strb	r3, [r4, #0]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800af62:	231f      	movs	r3, #31
 800af64:	18fb      	adds	r3, r7, r3
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	b25b      	sxtb	r3, r3
}
 800af6a:	0018      	movs	r0, r3
 800af6c:	46bd      	mov	sp, r7
 800af6e:	b009      	add	sp, #36	; 0x24
 800af70:	bd90      	pop	{r4, r7, pc}
 800af72:	46c0      	nop			; (mov r8, r8)
 800af74:	000002e5 	.word	0x000002e5
 800af78:	000002e6 	.word	0x000002e6

0800af7c <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800af7c:	b590      	push	{r4, r7, lr}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	000a      	movs	r2, r1
 800af86:	1cfb      	adds	r3, r7, #3
 800af88:	701a      	strb	r2, [r3, #0]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800af8a:	210f      	movs	r1, #15
 800af8c:	187b      	adds	r3, r7, r1
 800af8e:	2200      	movs	r2, #0
 800af90:	701a      	strb	r2, [r3, #0]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800af92:	000a      	movs	r2, r1
 800af94:	18bb      	adds	r3, r7, r2
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	b25b      	sxtb	r3, r3
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d109      	bne.n	800afb2 <VL53L1_clear_interrupt_and_enable_next_range+0x36>
		status = VL53L1_init_and_start_range(
 800af9e:	18bc      	adds	r4, r7, r2
 800afa0:	1cfb      	adds	r3, r7, #3
 800afa2:	7819      	ldrb	r1, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2203      	movs	r2, #3
 800afa8:	0018      	movs	r0, r3
 800afaa:	f7ff faf1 	bl	800a590 <VL53L1_init_and_start_range>
 800afae:	0003      	movs	r3, r0
 800afb0:	7023      	strb	r3, [r4, #0]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800afb2:	230f      	movs	r3, #15
 800afb4:	18fb      	adds	r3, r7, r3
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	b25b      	sxtb	r3, r3
}
 800afba:	0018      	movs	r0, r3
 800afbc:	46bd      	mov	sp, r7
 800afbe:	b005      	add	sp, #20
 800afc0:	bd90      	pop	{r4, r7, pc}
	...

0800afc4 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b088      	sub	sp, #32
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800afd2:	211f      	movs	r1, #31
 800afd4:	187b      	adds	r3, r7, r1
 800afd6:	2200      	movs	r2, #0
 800afd8:	701a      	strb	r2, [r3, #0]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	78da      	ldrb	r2, [r3, #3]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	3304      	adds	r3, #4
 800afee:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800aff0:	187b      	adds	r3, r7, r1
 800aff2:	2200      	movs	r2, #0
 800aff4:	701a      	strb	r2, [r3, #0]
 800aff6:	e0dc      	b.n	800b1b2 <VL53L1_copy_sys_and_core_results_to_range_results+0x1ee>

		pdata->range_id     = i;
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	221f      	movs	r2, #31
 800affc:	18ba      	adds	r2, r7, r2
 800affe:	7812      	ldrb	r2, [r2, #0]
 800b000:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	2200      	movs	r2, #0
 800b006:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	78db      	ldrb	r3, [r3, #3]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10b      	bne.n	800b028 <VL53L1_copy_sys_and_core_results_to_range_results+0x64>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	785b      	ldrb	r3, [r3, #1]
 800b014:	001a      	movs	r2, r3
 800b016:	231f      	movs	r3, #31
 800b018:	4013      	ands	r3, r2
		if ((psys->result__stream_count == 0) &&
 800b01a:	2b09      	cmp	r3, #9
 800b01c:	d104      	bne.n	800b028 <VL53L1_copy_sys_and_core_results_to_range_results+0x64>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	223e      	movs	r2, #62	; 0x3e
 800b022:	2113      	movs	r1, #19
 800b024:	5499      	strb	r1, [r3, r2]
 800b026:	e007      	b.n	800b038 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	785b      	ldrb	r3, [r3, #1]
 800b02c:	221f      	movs	r2, #31
 800b02e:	4013      	ands	r3, r2
 800b030:	b2d9      	uxtb	r1, r3
			pdata->range_status =
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	223e      	movs	r2, #62	; 0x3e
 800b036:	5499      	strb	r1, [r3, r2]
		}

		switch (i) {
 800b038:	231f      	movs	r3, #31
 800b03a:	18fb      	adds	r3, r7, r3
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d002      	beq.n	800b048 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
 800b042:	2b01      	cmp	r3, #1
 800b044:	d05f      	beq.n	800b106 <VL53L1_copy_sys_and_core_results_to_range_results+0x142>
 800b046:	e0ab      	b.n	800b1a0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1dc>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	789b      	ldrb	r3, [r3, #2]
 800b04c:	2b07      	cmp	r3, #7
 800b04e:	d104      	bne.n	800b05a <VL53L1_copy_sys_and_core_results_to_range_results+0x96>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	821a      	strh	r2, [r3, #16]
 800b058:	e00c      	b.n	800b074 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	789b      	ldrb	r3, [r3, #2]
 800b05e:	2b08      	cmp	r3, #8
 800b060:	d104      	bne.n	800b06c <VL53L1_copy_sys_and_core_results_to_range_results+0xa8>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	821a      	strh	r2, [r3, #16]
 800b06a:	e003      	b.n	800b074 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	895b      	ldrh	r3, [r3, #10]
 800b090:	015b      	lsls	r3, r3, #5
 800b092:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800b094:	697a      	ldr	r2, [r7, #20]
 800b096:	2380      	movs	r3, #128	; 0x80
 800b098:	025b      	lsls	r3, r3, #9
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d301      	bcc.n	800b0a2 <VL53L1_copy_sys_and_core_results_to_range_results+0xde>
				tmpu32 = 0xFFFF;
 800b09e:	4b5c      	ldr	r3, [pc, #368]	; (800b210 <VL53L1_copy_sys_and_core_results_to_range_results+0x24c>)
 800b0a0:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800b0b6:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	4353      	muls	r3, r2
 800b0be:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	2280      	movs	r2, #128	; 0x80
 800b0c4:	00d2      	lsls	r2, r2, #3
 800b0c6:	4694      	mov	ip, r2
 800b0c8:	4463      	add	r3, ip
 800b0ca:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	da02      	bge.n	800b0d8 <VL53L1_copy_sys_and_core_results_to_range_results+0x114>
 800b0d2:	4a50      	ldr	r2, [pc, #320]	; (800b214 <VL53L1_copy_sys_and_core_results_to_range_results+0x250>)
 800b0d4:	4694      	mov	ip, r2
 800b0d6:	4463      	add	r3, ip
 800b0d8:	12db      	asrs	r3, r3, #11
 800b0da:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	b21a      	sxth	r2, r3
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	621a      	str	r2, [r3, #32]

			break;
 800b104:	e04c      	b.n	800b1a0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1dc>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	2201      	movs	r2, #1
 800b11a:	4252      	negs	r2, r2
 800b11c:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	8bdb      	ldrh	r3, [r3, #30]
 800b12a:	015b      	lsls	r3, r3, #5
 800b12c:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	2380      	movs	r3, #128	; 0x80
 800b132:	025b      	lsls	r3, r3, #9
 800b134:	429a      	cmp	r2, r3
 800b136:	d301      	bcc.n	800b13c <VL53L1_copy_sys_and_core_results_to_range_results+0x178>
				tmpu32 = 0xFFFF;
 800b138:	4b35      	ldr	r3, [pc, #212]	; (800b210 <VL53L1_copy_sys_and_core_results_to_range_results+0x24c>)
 800b13a:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	b29a      	uxth	r2, r3
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800b150:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	4353      	muls	r3, r2
 800b158:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	2280      	movs	r2, #128	; 0x80
 800b15e:	00d2      	lsls	r2, r2, #3
 800b160:	4694      	mov	ip, r2
 800b162:	4463      	add	r3, ip
 800b164:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	da02      	bge.n	800b172 <VL53L1_copy_sys_and_core_results_to_range_results+0x1ae>
 800b16c:	4a29      	ldr	r2, [pc, #164]	; (800b214 <VL53L1_copy_sys_and_core_results_to_range_results+0x250>)
 800b16e:	4694      	mov	ip, r2
 800b170:	4463      	add	r3, ip
 800b172:	12db      	asrs	r3, r3, #11
 800b174:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	b21a      	sxth	r2, r3
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	621a      	str	r2, [r3, #32]

			break;
 800b19e:	46c0      	nop			; (mov r8, r8)
		}

		pdata++;
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	3340      	adds	r3, #64	; 0x40
 800b1a4:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800b1a6:	211f      	movs	r1, #31
 800b1a8:	187b      	adds	r3, r7, r1
 800b1aa:	781a      	ldrb	r2, [r3, #0]
 800b1ac:	187b      	adds	r3, r7, r1
 800b1ae:	3201      	adds	r2, #1
 800b1b0:	701a      	strb	r2, [r3, #0]
 800b1b2:	231f      	movs	r3, #31
 800b1b4:	18fb      	adds	r3, r7, r3
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d800      	bhi.n	800b1be <VL53L1_copy_sys_and_core_results_to_range_results+0x1fa>
 800b1bc:	e71c      	b.n	800aff8 <VL53L1_copy_sys_and_core_results_to_range_results+0x34>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	785b      	ldrb	r3, [r3, #1]
 800b1c8:	001a      	movs	r2, r3
 800b1ca:	231f      	movs	r3, #31
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	2211      	movs	r2, #17
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	4192      	sbcs	r2, r2
 800b1d4:	4252      	negs	r2, r2
 800b1d6:	b2d2      	uxtb	r2, r2
 800b1d8:	2a00      	cmp	r2, #0
 800b1da:	d115      	bne.n	800b208 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
 800b1dc:	2201      	movs	r2, #1
 800b1de:	409a      	lsls	r2, r3
 800b1e0:	0013      	movs	r3, r2
 800b1e2:	4a0d      	ldr	r2, [pc, #52]	; (800b218 <VL53L1_copy_sys_and_core_results_to_range_results+0x254>)
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	1e5a      	subs	r2, r3, #1
 800b1e8:	4193      	sbcs	r3, r2
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	785b      	ldrb	r3, [r3, #1]
 800b1f4:	221f      	movs	r2, #31
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	2242      	movs	r2, #66	; 0x42
 800b202:	2100      	movs	r1, #0
 800b204:	5499      	strb	r1, [r3, r2]
	break;
 800b206:	46c0      	nop			; (mov r8, r8)

	}

	LOG_FUNCTION_END(0);
}
 800b208:	46c0      	nop			; (mov r8, r8)
 800b20a:	46bd      	mov	sp, r7
 800b20c:	b008      	add	sp, #32
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	0000ffff 	.word	0x0000ffff
 800b214:	000007ff 	.word	0x000007ff
 800b218:	0002200e 	.word	0x0002200e

0800b21c <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	607a      	str	r2, [r7, #4]
 800b226:	200a      	movs	r0, #10
 800b228:	183b      	adds	r3, r7, r0
 800b22a:	1c0a      	adds	r2, r1, #0
 800b22c:	801a      	strh	r2, [r3, #0]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b22e:	2317      	movs	r3, #23
 800b230:	18fb      	adds	r3, r7, r3
 800b232:	2200      	movs	r2, #0
 800b234:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800b23a:	183b      	adds	r3, r7, r0
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	4ad7      	ldr	r2, [pc, #860]	; (800b59c <VL53L1_get_tuning_parm+0x380>)
 800b240:	4694      	mov	ip, r2
 800b242:	4463      	add	r3, ip
 800b244:	2b38      	cmp	r3, #56	; 0x38
 800b246:	d900      	bls.n	800b24a <VL53L1_get_tuning_parm+0x2e>
 800b248:	e1ac      	b.n	800b5a4 <VL53L1_get_tuning_parm+0x388>
 800b24a:	009a      	lsls	r2, r3, #2
 800b24c:	4bd4      	ldr	r3, [pc, #848]	; (800b5a0 <VL53L1_get_tuning_parm+0x384>)
 800b24e:	18d3      	adds	r3, r2, r3
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	469f      	mov	pc, r3

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	22a4      	movs	r2, #164	; 0xa4
 800b258:	5a9b      	ldrh	r3, [r3, r2]
 800b25a:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	601a      	str	r2, [r3, #0]
	break;
 800b260:	e1a8      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	22a6      	movs	r2, #166	; 0xa6
 800b266:	5a9b      	ldrh	r3, [r3, r2]
 800b268:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	601a      	str	r2, [r3, #0]
	break;
 800b26e:	e1a1      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	22a8      	movs	r2, #168	; 0xa8
 800b274:	5a9b      	ldrh	r3, [r3, r2]
 800b276:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	601a      	str	r2, [r3, #0]
	break;
 800b27c:	e19a      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	22b0      	movs	r2, #176	; 0xb0
 800b282:	5c9b      	ldrb	r3, [r3, r2]
 800b284:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	601a      	str	r2, [r3, #0]
	break;
 800b28a:	e193      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	22b1      	movs	r2, #177	; 0xb1
 800b290:	5c9b      	ldrb	r3, [r3, r2]
 800b292:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	601a      	str	r2, [r3, #0]
	break;
 800b298:	e18c      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	22b2      	movs	r2, #178	; 0xb2
 800b29e:	5a9b      	ldrh	r3, [r3, r2]
 800b2a0:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	601a      	str	r2, [r3, #0]
	break;
 800b2a6:	e185      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	229c      	movs	r2, #156	; 0x9c
 800b2ac:	5a9b      	ldrh	r3, [r3, r2]
 800b2ae:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	601a      	str	r2, [r3, #0]
	break;
 800b2b4:	e17e      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	22b4      	movs	r2, #180	; 0xb4
 800b2ba:	5c9b      	ldrb	r3, [r3, r2]
 800b2bc:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	601a      	str	r2, [r3, #0]
	break;
 800b2c2:	e177      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	22b6      	movs	r2, #182	; 0xb6
 800b2c8:	5a9b      	ldrh	r3, [r3, r2]
 800b2ca:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	601a      	str	r2, [r3, #0]
	break;
 800b2d0:	e170      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	22b8      	movs	r2, #184	; 0xb8
 800b2d6:	5a9b      	ldrh	r3, [r3, r2]
 800b2d8:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	601a      	str	r2, [r3, #0]
	break;
 800b2de:	e169      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	22ba      	movs	r2, #186	; 0xba
 800b2e4:	5a9b      	ldrh	r3, [r3, r2]
 800b2e6:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	601a      	str	r2, [r3, #0]
	break;
 800b2ec:	e162      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	22bc      	movs	r2, #188	; 0xbc
 800b2f2:	5a9b      	ldrh	r3, [r3, r2]
 800b2f4:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	601a      	str	r2, [r3, #0]
	break;
 800b2fa:	e15b      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	22be      	movs	r2, #190	; 0xbe
 800b300:	5a9b      	ldrh	r3, [r3, r2]
 800b302:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	601a      	str	r2, [r3, #0]
	break;
 800b308:	e154      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	22c0      	movs	r2, #192	; 0xc0
 800b30e:	5a9b      	ldrh	r3, [r3, r2]
 800b310:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	601a      	str	r2, [r3, #0]
	break;
 800b316:	e14d      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	22c2      	movs	r2, #194	; 0xc2
 800b31c:	5c9b      	ldrb	r3, [r3, r2]
 800b31e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	601a      	str	r2, [r3, #0]
	break;
 800b324:	e146      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	22c3      	movs	r2, #195	; 0xc3
 800b32a:	5c9b      	ldrb	r3, [r3, r2]
 800b32c:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	601a      	str	r2, [r3, #0]
	break;
 800b332:	e13f      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	22c4      	movs	r2, #196	; 0xc4
 800b338:	5c9b      	ldrb	r3, [r3, r2]
 800b33a:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	601a      	str	r2, [r3, #0]
	break;
 800b340:	e138      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	23a0      	movs	r3, #160	; 0xa0
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	5cd3      	ldrb	r3, [r2, r3]
 800b34a:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	601a      	str	r2, [r3, #0]
	break;
 800b350:	e130      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	22c5      	movs	r2, #197	; 0xc5
 800b356:	5c9b      	ldrb	r3, [r3, r2]
 800b358:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	601a      	str	r2, [r3, #0]
	break;
 800b35e:	e129      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	22c7      	movs	r2, #199	; 0xc7
 800b364:	5c9b      	ldrb	r3, [r3, r2]
 800b366:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	601a      	str	r2, [r3, #0]
	break;
 800b36c:	e122      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	22c8      	movs	r2, #200	; 0xc8
 800b372:	5c9b      	ldrb	r3, [r3, r2]
 800b374:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	601a      	str	r2, [r3, #0]
	break;
 800b37a:	e11b      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	239f      	movs	r3, #159	; 0x9f
 800b380:	005b      	lsls	r3, r3, #1
 800b382:	5ed3      	ldrsh	r3, [r2, r3]
 800b384:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	601a      	str	r2, [r3, #0]
	break;
 800b38a:	e113      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	22aa      	movs	r2, #170	; 0xaa
 800b390:	5c9b      	ldrb	r3, [r3, r2]
 800b392:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	601a      	str	r2, [r3, #0]
	break;
 800b398:	e10c      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	22ab      	movs	r2, #171	; 0xab
 800b39e:	5c9b      	ldrb	r3, [r3, r2]
 800b3a0:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	601a      	str	r2, [r3, #0]
	break;
 800b3a6:	e105      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	22ac      	movs	r2, #172	; 0xac
 800b3ac:	5c9b      	ldrb	r3, [r3, r2]
 800b3ae:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	601a      	str	r2, [r3, #0]
	break;
 800b3b4:	e0fe      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	22ad      	movs	r2, #173	; 0xad
 800b3ba:	5c9b      	ldrb	r3, [r3, r2]
 800b3bc:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	601a      	str	r2, [r3, #0]
	break;
 800b3c2:	e0f7      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	22ae      	movs	r2, #174	; 0xae
 800b3c8:	5c9b      	ldrb	r3, [r3, r2]
 800b3ca:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	601a      	str	r2, [r3, #0]
	break;
 800b3d0:	e0f0      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	22af      	movs	r2, #175	; 0xaf
 800b3d6:	5c9b      	ldrb	r3, [r3, r2]
 800b3d8:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	601a      	str	r2, [r3, #0]
	break;
 800b3de:	e0e9      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	22c6      	movs	r2, #198	; 0xc6
 800b3e4:	5c9b      	ldrb	r3, [r3, r2]
 800b3e6:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	601a      	str	r2, [r3, #0]
	break;
 800b3ec:	e0e2      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b3ee:	693a      	ldr	r2, [r7, #16]
 800b3f0:	23b0      	movs	r3, #176	; 0xb0
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	5cd3      	ldrb	r3, [r2, r3]
 800b3f6:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	601a      	str	r2, [r3, #0]
	break;
 800b3fc:	e0da      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800b3fe:	693a      	ldr	r2, [r7, #16]
 800b400:	2388      	movs	r3, #136	; 0x88
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	5cd3      	ldrb	r3, [r2, r3]
 800b406:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	601a      	str	r2, [r3, #0]
	break;
 800b40c:	e0d2      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	2312      	movs	r3, #18
 800b412:	33ff      	adds	r3, #255	; 0xff
 800b414:	5cd3      	ldrb	r3, [r2, r3]
 800b416:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	601a      	str	r2, [r3, #0]
	break;
 800b41c:	e0ca      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	238a      	movs	r3, #138	; 0x8a
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	58d3      	ldr	r3, [r2, r3]
 800b426:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	601a      	str	r2, [r3, #0]
	break;
 800b42c:	e0c2      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	238c      	movs	r3, #140	; 0x8c
 800b432:	005b      	lsls	r3, r3, #1
 800b434:	5ad3      	ldrh	r3, [r2, r3]
 800b436:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	601a      	str	r2, [r3, #0]
	break;
 800b43c:	e0ba      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800b43e:	693a      	ldr	r2, [r7, #16]
 800b440:	238d      	movs	r3, #141	; 0x8d
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	5ad3      	ldrh	r3, [r2, r3]
 800b446:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	601a      	str	r2, [r3, #0]
	break;
 800b44c:	e0b2      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	238e      	movs	r3, #142	; 0x8e
 800b452:	005b      	lsls	r3, r3, #1
 800b454:	5ad3      	ldrh	r3, [r2, r3]
 800b456:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	601a      	str	r2, [r3, #0]
	break;
 800b45c:	e0aa      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	23a2      	movs	r3, #162	; 0xa2
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	5ad3      	ldrh	r3, [r2, r3]
 800b466:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	601a      	str	r2, [r3, #0]
	break;
 800b46c:	e0a2      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800b46e:	693a      	ldr	r2, [r7, #16]
 800b470:	23a4      	movs	r3, #164	; 0xa4
 800b472:	005b      	lsls	r3, r3, #1
 800b474:	58d3      	ldr	r3, [r2, r3]
 800b476:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	601a      	str	r2, [r3, #0]
	break;
 800b47c:	e09a      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	23a8      	movs	r3, #168	; 0xa8
 800b482:	005b      	lsls	r3, r3, #1
 800b484:	58d3      	ldr	r3, [r2, r3]
 800b486:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	601a      	str	r2, [r3, #0]
	break;
 800b48c:	e092      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	23a6      	movs	r3, #166	; 0xa6
 800b492:	005b      	lsls	r3, r3, #1
 800b494:	58d3      	ldr	r3, [r2, r3]
 800b496:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	601a      	str	r2, [r3, #0]
	break;
 800b49c:	e08a      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	23aa      	movs	r3, #170	; 0xaa
 800b4a2:	005b      	lsls	r3, r3, #1
 800b4a4:	5cd3      	ldrb	r3, [r2, r3]
 800b4a6:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	601a      	str	r2, [r3, #0]
	break;
 800b4ac:	e082      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	2356      	movs	r3, #86	; 0x56
 800b4b2:	33ff      	adds	r3, #255	; 0xff
 800b4b4:	5cd3      	ldrb	r3, [r2, r3]
 800b4b6:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	601a      	str	r2, [r3, #0]
	break;
 800b4bc:	e07a      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	23ab      	movs	r3, #171	; 0xab
 800b4c2:	005b      	lsls	r3, r3, #1
 800b4c4:	5cd3      	ldrb	r3, [r2, r3]
 800b4c6:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	601a      	str	r2, [r3, #0]
	break;
 800b4cc:	e072      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	2322      	movs	r3, #34	; 0x22
 800b4d2:	33ff      	adds	r3, #255	; 0xff
 800b4d4:	5cd3      	ldrb	r3, [r2, r3]
 800b4d6:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	601a      	str	r2, [r3, #0]
	break;
 800b4dc:	e06a      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	2391      	movs	r3, #145	; 0x91
 800b4e2:	005b      	lsls	r3, r3, #1
 800b4e4:	5cd3      	ldrb	r3, [r2, r3]
 800b4e6:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	601a      	str	r2, [r3, #0]
	break;
 800b4ec:	e062      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	2394      	movs	r3, #148	; 0x94
 800b4f2:	005b      	lsls	r3, r3, #1
 800b4f4:	5ad3      	ldrh	r3, [r2, r3]
 800b4f6:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	601a      	str	r2, [r3, #0]
	break;
 800b4fc:	e05a      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	22ca      	movs	r2, #202	; 0xca
 800b502:	5a9b      	ldrh	r3, [r3, r2]
 800b504:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	601a      	str	r2, [r3, #0]
	break;
 800b50a:	e053      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	22cc      	movs	r2, #204	; 0xcc
 800b510:	5a9b      	ldrh	r3, [r3, r2]
 800b512:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	601a      	str	r2, [r3, #0]
	break;
 800b518:	e04c      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	22d0      	movs	r2, #208	; 0xd0
 800b51e:	589b      	ldr	r3, [r3, r2]
 800b520:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	601a      	str	r2, [r3, #0]
	break;
 800b526:	e045      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	22d4      	movs	r2, #212	; 0xd4
 800b52c:	589b      	ldr	r3, [r3, r2]
 800b52e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	601a      	str	r2, [r3, #0]
	break;
 800b534:	e03e      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	22d8      	movs	r2, #216	; 0xd8
 800b53a:	589b      	ldr	r3, [r3, r2]
 800b53c:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	601a      	str	r2, [r3, #0]
	break;
 800b542:	e037      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	22dc      	movs	r2, #220	; 0xdc
 800b548:	589b      	ldr	r3, [r3, r2]
 800b54a:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	601a      	str	r2, [r3, #0]
	break;
 800b550:	e030      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	22e4      	movs	r2, #228	; 0xe4
 800b556:	589b      	ldr	r3, [r3, r2]
 800b558:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	601a      	str	r2, [r3, #0]
	break;
 800b55e:	e029      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	22e8      	movs	r2, #232	; 0xe8
 800b564:	589b      	ldr	r3, [r3, r2]
 800b566:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	601a      	str	r2, [r3, #0]
	break;
 800b56c:	e022      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	23b9      	movs	r3, #185	; 0xb9
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	5cd3      	ldrb	r3, [r2, r3]
 800b576:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	601a      	str	r2, [r3, #0]
	break;
 800b57c:	e01a      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	22e0      	movs	r2, #224	; 0xe0
 800b582:	589b      	ldr	r3, [r3, r2]
 800b584:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	601a      	str	r2, [r3, #0]
	break;
 800b58a:	e013      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	22ec      	movs	r2, #236	; 0xec
 800b590:	589b      	ldr	r3, [r3, r2]
 800b592:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	601a      	str	r2, [r3, #0]
	break;
 800b598:	e00c      	b.n	800b5b4 <VL53L1_get_tuning_parm+0x398>
 800b59a:	46c0      	nop			; (mov r8, r8)
 800b59c:	ffff8000 	.word	0xffff8000
 800b5a0:	08016510 	.word	0x08016510


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a07      	ldr	r2, [pc, #28]	; (800b5c4 <VL53L1_get_tuning_parm+0x3a8>)
 800b5a8:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b5aa:	2317      	movs	r3, #23
 800b5ac:	18fb      	adds	r3, r7, r3
 800b5ae:	22fc      	movs	r2, #252	; 0xfc
 800b5b0:	701a      	strb	r2, [r3, #0]
	break;
 800b5b2:	46c0      	nop			; (mov r8, r8)

	}

	LOG_FUNCTION_END(status);

	return status;
 800b5b4:	2317      	movs	r3, #23
 800b5b6:	18fb      	adds	r3, r7, r3
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	b25b      	sxtb	r3, r3
}
 800b5bc:	0018      	movs	r0, r3
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	b006      	add	sp, #24
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	7fffffff 	.word	0x7fffffff

0800b5c8 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b5d0:	210f      	movs	r1, #15
 800b5d2:	187b      	adds	r3, r7, r1
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	701a      	strb	r2, [r3, #0]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2208      	movs	r2, #8
 800b5dc:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	220b      	movs	r2, #11
 800b5e2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	22fa      	movs	r2, #250	; 0xfa
 800b5e8:	0092      	lsls	r2, r2, #2
 800b5ea:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	22a0      	movs	r2, #160	; 0xa0
 800b5f0:	0112      	lsls	r2, r2, #4
 800b5f2:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	22a0      	movs	r2, #160	; 0xa0
 800b5f8:	00d2      	lsls	r2, r2, #3
 800b5fa:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	22a0      	movs	r2, #160	; 0xa0
 800b600:	0152      	lsls	r2, r2, #5
 800b602:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b604:	187b      	adds	r3, r7, r1
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	b25b      	sxtb	r3, r3
}
 800b60a:	0018      	movs	r0, r3
 800b60c:	46bd      	mov	sp, r7
 800b60e:	b004      	add	sp, #16
 800b610:	bd80      	pop	{r7, pc}
	...

0800b614 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b61c:	210f      	movs	r1, #15
 800b61e:	187b      	adds	r3, r7, r1
 800b620:	2200      	movs	r2, #0
 800b622:	701a      	strb	r2, [r3, #0]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2212      	movs	r2, #18
 800b62e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	220f      	movs	r2, #15
 800b634:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2202      	movs	r2, #2
 800b63a:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a06      	ldr	r2, [pc, #24]	; (800b658 <VL53L1_init_ssc_config_struct+0x44>)
 800b640:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	220c      	movs	r2, #12
 800b646:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b648:	187b      	adds	r3, r7, r1
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	b25b      	sxtb	r3, r3
}
 800b64e:	0018      	movs	r0, r3
 800b650:	46bd      	mov	sp, r7
 800b652:	b004      	add	sp, #16
 800b654:	bd80      	pop	{r7, pc}
 800b656:	46c0      	nop			; (mov r8, r8)
 800b658:	00008ca0 	.word	0x00008ca0

0800b65c <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b666:	230f      	movs	r3, #15
 800b668:	18fb      	adds	r3, r7, r3
 800b66a:	2200      	movs	r2, #0
 800b66c:	701a      	strb	r2, [r3, #0]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	895b      	ldrh	r3, [r3, #10]
 800b672:	001a      	movs	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	220c      	movs	r2, #12
 800b67c:	5e9a      	ldrsh	r2, [r3, r2]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	220e      	movs	r2, #14
 800b686:	5e9a      	ldrsh	r2, [r3, r2]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	895b      	ldrh	r3, [r3, #10]
 800b690:	001a      	movs	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	220c      	movs	r2, #12
 800b69a:	5e9a      	ldrsh	r2, [r3, r2]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	220e      	movs	r2, #14
 800b6a4:	5e9a      	ldrsh	r2, [r3, r2]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	2240      	movs	r2, #64	; 0x40
 800b6b4:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10d      	bne.n	800b6da <VL53L1_init_xtalk_config_struct+0x7e>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	2204      	movs	r2, #4
 800b6c2:	5e9b      	ldrsh	r3, [r3, r2]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d108      	bne.n	800b6da <VL53L1_init_xtalk_config_struct+0x7e>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2206      	movs	r2, #6
 800b6cc:	5e9b      	ldrsh	r3, [r3, r2]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d103      	bne.n	800b6da <VL53L1_init_xtalk_config_struct+0x7e>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	741a      	strb	r2, [r3, #16]
 800b6d8:	e002      	b.n	800b6e0 <VL53L1_init_xtalk_config_struct+0x84>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800b6e0:	230f      	movs	r3, #15
 800b6e2:	18fb      	adds	r3, r7, r3
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	b25b      	sxtb	r3, r3
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d114      	bne.n	800b716 <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d110      	bne.n	800b716 <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	6818      	ldr	r0, [r3, #0]
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	2104      	movs	r1, #4
 800b6fc:	5e59      	ldrsh	r1, [r3, r1]
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2206      	movs	r2, #6
 800b702:	5e9a      	ldrsh	r2, [r3, r2]
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	7d1b      	ldrb	r3, [r3, #20]
 800b708:	f001 f860 	bl	800c7cc <VL53L1_calc_range_ignore_threshold>
 800b70c:	0003      	movs	r3, r0
 800b70e:	001a      	movs	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	82da      	strh	r2, [r3, #22]
 800b714:	e002      	b.n	800b71c <VL53L1_init_xtalk_config_struct+0xc0>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2200      	movs	r2, #0
 800b71a:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b71c:	230f      	movs	r3, #15
 800b71e:	18fb      	adds	r3, r7, r3
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	b25b      	sxtb	r3, r3
}
 800b724:	0018      	movs	r0, r3
 800b726:	46bd      	mov	sp, r7
 800b728:	b004      	add	sp, #16
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b734:	210f      	movs	r1, #15
 800b736:	187b      	adds	r3, r7, r1
 800b738:	2200      	movs	r2, #0
 800b73a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	22a0      	movs	r2, #160	; 0xa0
 800b740:	0112      	lsls	r2, r2, #4
 800b742:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	22fa      	movs	r2, #250	; 0xfa
 800b748:	0092      	lsls	r2, r2, #2
 800b74a:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a0a      	ldr	r2, [pc, #40]	; (800b778 <VL53L1_init_offset_cal_config_struct+0x4c>)
 800b750:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a08      	ldr	r2, [pc, #32]	; (800b778 <VL53L1_init_offset_cal_config_struct+0x4c>)
 800b756:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2208      	movs	r2, #8
 800b75c:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2228      	movs	r2, #40	; 0x28
 800b762:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2209      	movs	r2, #9
 800b768:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b76a:	187b      	adds	r3, r7, r1
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	b25b      	sxtb	r3, r3
}
 800b770:	0018      	movs	r0, r3
 800b772:	46bd      	mov	sp, r7
 800b774:	b004      	add	sp, #16
 800b776:	bd80      	pop	{r7, pc}
 800b778:	000032c8 	.word	0x000032c8

0800b77c <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b784:	200f      	movs	r0, #15
 800b786:	183b      	adds	r3, r7, r0
 800b788:	2200      	movs	r2, #0
 800b78a:	701a      	strb	r2, [r3, #0]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a40      	ldr	r2, [pc, #256]	; (800b890 <VL53L1_init_tuning_parm_storage_struct+0x114>)
 800b790:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4a3f      	ldr	r2, [pc, #252]	; (800b894 <VL53L1_init_tuning_parm_storage_struct+0x118>)
 800b796:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a3f      	ldr	r2, [pc, #252]	; (800b898 <VL53L1_init_tuning_parm_storage_struct+0x11c>)
 800b79c:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	220e      	movs	r2, #14
 800b7a2:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	220a      	movs	r2, #10
 800b7a8:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2206      	movs	r2, #6
 800b7ae:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	220e      	movs	r2, #14
 800b7b4:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	220a      	movs	r2, #10
 800b7ba:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2206      	movs	r2, #6
 800b7c0:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2221      	movs	r2, #33	; 0x21
 800b7cc:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	22b4      	movs	r2, #180	; 0xb4
 800b7de:	0052      	lsls	r2, r2, #1
 800b7e0:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	22b4      	movs	r2, #180	; 0xb4
 800b7e6:	0052      	lsls	r2, r2, #1
 800b7e8:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	22b4      	movs	r2, #180	; 0xb4
 800b7ee:	0052      	lsls	r2, r2, #1
 800b7f0:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	22c0      	movs	r2, #192	; 0xc0
 800b7f6:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	22c0      	movs	r2, #192	; 0xc0
 800b7fc:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	22c0      	movs	r2, #192	; 0xc0
 800b802:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2208      	movs	r2, #8
 800b808:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2210      	movs	r2, #16
 800b80e:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2220      	movs	r2, #32
 800b814:	2101      	movs	r1, #1
 800b816:	5499      	strb	r1, [r3, r2]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2221      	movs	r2, #33	; 0x21
 800b81c:	2102      	movs	r1, #2
 800b81e:	5499      	strb	r1, [r3, r2]
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2222      	movs	r2, #34	; 0x22
 800b824:	2101      	movs	r1, #1
 800b826:	5499      	strb	r1, [r3, r2]
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2223      	movs	r2, #35	; 0x23
 800b82c:	2102      	movs	r1, #2
 800b82e:	5499      	strb	r1, [r3, r2]
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2224      	movs	r2, #36	; 0x24
 800b834:	2100      	movs	r1, #0
 800b836:	5499      	strb	r1, [r3, r2]
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	22a0      	movs	r2, #160	; 0xa0
 800b83c:	0112      	lsls	r2, r2, #4
 800b83e:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	22a0      	movs	r2, #160	; 0xa0
 800b844:	0112      	lsls	r2, r2, #4
 800b846:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a14      	ldr	r2, [pc, #80]	; (800b89c <VL53L1_init_tuning_parm_storage_struct+0x120>)
 800b84c:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	22fa      	movs	r2, #250	; 0xfa
 800b852:	0092      	lsls	r2, r2, #2
 800b854:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	22fa      	movs	r2, #250	; 0xfa
 800b85a:	00d2      	lsls	r2, r2, #3
 800b85c:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	22fa      	movs	r2, #250	; 0xfa
 800b862:	00d2      	lsls	r2, r2, #3
 800b864:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a0d      	ldr	r2, [pc, #52]	; (800b8a0 <VL53L1_init_tuning_parm_storage_struct+0x124>)
 800b86a:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a0d      	ldr	r2, [pc, #52]	; (800b8a4 <VL53L1_init_tuning_parm_storage_struct+0x128>)
 800b870:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	22fa      	movs	r2, #250	; 0xfa
 800b87c:	0152      	lsls	r2, r2, #5
 800b87e:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800b880:	183b      	adds	r3, r7, r0
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	b25b      	sxtb	r3, r3
}
 800b886:	0018      	movs	r0, r3
 800b888:	46bd      	mov	sp, r7
 800b88a:	b004      	add	sp, #16
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	46c0      	nop			; (mov r8, r8)
 800b890:	ffff8003 	.word	0xffff8003
 800b894:	ffff8001 	.word	0xffff8001
 800b898:	ffff8041 	.word	0xffff8041
 800b89c:	00008030 	.word	0x00008030
 800b8a0:	0000f618 	.word	0x0000f618
 800b8a4:	000032c8 	.word	0x000032c8

0800b8a8 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
 800b8b4:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b8b6:	2117      	movs	r1, #23
 800b8b8:	187b      	adds	r3, r7, r1
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	22a0      	movs	r2, #160	; 0xa0
 800b8c2:	0112      	lsls	r2, r2, #4
 800b8c4:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2200      	movs	r2, #0
 800b900:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2211      	movs	r2, #17
 800b906:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2202      	movs	r2, #2
 800b90c:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2202      	movs	r2, #2
 800b918:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2208      	movs	r2, #8
 800b91e:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800b926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b928:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	2220      	movs	r2, #32
 800b93a:	5c9a      	ldrb	r2, [r3, r2]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2201      	movs	r2, #1
 800b944:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	22ff      	movs	r2, #255	; 0xff
 800b95c:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b960:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800b966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b968:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2200      	movs	r2, #0
 800b972:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	2200      	movs	r2, #0
 800b984:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	2200      	movs	r2, #0
 800b98a:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2220      	movs	r2, #32
 800b990:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	220b      	movs	r2, #11
 800b996:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99a:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	220d      	movs	r2, #13
 800b9aa:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ae:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	4a45      	ldr	r2, [pc, #276]	; (800bae4 <VL53L1_preset_mode_standard_ranging+0x23c>)
 800b9d0:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	2238      	movs	r2, #56	; 0x38
 800b9dc:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	22ff      	movs	r2, #255	; 0xff
 800b9e2:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	221a      	movs	r2, #26
 800b9f4:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2220      	movs	r2, #32
 800ba00:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	22cc      	movs	r2, #204	; 0xcc
 800ba0c:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	220b      	movs	r2, #11
 800ba12:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	22f5      	movs	r2, #245	; 0xf5
 800ba1e:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2209      	movs	r2, #9
 800ba24:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba28:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2208      	movs	r2, #8
 800ba3a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2278      	movs	r2, #120	; 0x78
 800ba40:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	2201      	movs	r2, #1
 800ba52:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2200      	movs	r2, #0
 800ba58:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	2200      	movs	r2, #0
 800ba64:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba68:	2221      	movs	r2, #33	; 0x21
 800ba6a:	5c9a      	ldrb	r2, [r3, r2]
	pdynamic->system__seed_config =
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	220b      	movs	r2, #11
 800ba74:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2209      	movs	r2, #9
 800ba7a:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba86:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba94:	2224      	movs	r2, #36	; 0x24
 800ba96:	5c9a      	ldrb	r2, [r3, r2]
	pdynamic->sd_config__first_order_select =
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	2223      	movs	r2, #35	; 0x23
 800baa0:	5c9a      	ldrb	r2, [r3, r2]
	pdynamic->sd_config__quantifier         =
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	22c7      	movs	r2, #199	; 0xc7
 800baaa:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	22ff      	movs	r2, #255	; 0xff
 800bab0:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	22db      	movs	r2, #219	; 0xdb
 800bab6:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	2202      	movs	r2, #2
 800babc:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800babe:	6a3b      	ldr	r3, [r7, #32]
 800bac0:	2200      	movs	r2, #0
 800bac2:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800bac4:	6a3b      	ldr	r3, [r7, #32]
 800bac6:	2201      	movs	r2, #1
 800bac8:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800baca:	6a3b      	ldr	r3, [r7, #32]
 800bacc:	2201      	movs	r2, #1
 800bace:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800bad0:	6a3b      	ldr	r3, [r7, #32]
 800bad2:	2221      	movs	r2, #33	; 0x21
 800bad4:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800bad6:	187b      	adds	r3, r7, r1
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	b25b      	sxtb	r3, r3
}
 800badc:	0018      	movs	r0, r3
 800bade:	46bd      	mov	sp, r7
 800bae0:	b006      	add	sp, #24
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	ffff8c00 	.word	0xffff8c00

0800bae8 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baea:	b089      	sub	sp, #36	; 0x24
 800baec:	af02      	add	r7, sp, #8
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800baf6:	2617      	movs	r6, #23
 800baf8:	19bb      	adds	r3, r7, r6
 800bafa:	2200      	movs	r2, #0
 800bafc:	701a      	strb	r2, [r3, #0]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800bafe:	19bc      	adds	r4, r7, r6
 800bb00:	683d      	ldr	r5, [r7, #0]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	68b9      	ldr	r1, [r7, #8]
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0a:	9301      	str	r3, [sp, #4]
 800bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	002b      	movs	r3, r5
 800bb12:	f7ff fec9 	bl	800b8a8 <VL53L1_preset_mode_standard_ranging>
 800bb16:	0003      	movs	r3, r0
 800bb18:	7023      	strb	r3, [r4, #0]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bb1a:	19bb      	adds	r3, r7, r6
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	b25b      	sxtb	r3, r3
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d121      	bne.n	800bb68 <VL53L1_preset_mode_standard_ranging_short_range+0x80>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2207      	movs	r2, #7
 800bb28:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2205      	movs	r2, #5
 800bb2e:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800bb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb32:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800bb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb3a:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2208      	movs	r2, #8
 800bb44:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2238      	movs	r2, #56	; 0x38
 800bb4a:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	2207      	movs	r2, #7
 800bb50:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	2205      	movs	r2, #5
 800bb56:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800bb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb5a:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800bb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb62:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800bb68:	2317      	movs	r3, #23
 800bb6a:	18fb      	adds	r3, r7, r3
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	b25b      	sxtb	r3, r3
}
 800bb70:	0018      	movs	r0, r3
 800bb72:	46bd      	mov	sp, r7
 800bb74:	b007      	add	sp, #28
 800bb76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb78 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb7a:	b089      	sub	sp, #36	; 0x24
 800bb7c:	af02      	add	r7, sp, #8
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
 800bb84:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bb86:	2617      	movs	r6, #23
 800bb88:	19bb      	adds	r3, r7, r6
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	701a      	strb	r2, [r3, #0]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800bb8e:	19bc      	adds	r4, r7, r6
 800bb90:	683d      	ldr	r5, [r7, #0]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	68b9      	ldr	r1, [r7, #8]
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	002b      	movs	r3, r5
 800bba2:	f7ff fe81 	bl	800b8a8 <VL53L1_preset_mode_standard_ranging>
 800bba6:	0003      	movs	r3, r0
 800bba8:	7023      	strb	r3, [r4, #0]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bbaa:	19bb      	adds	r3, r7, r6
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	b25b      	sxtb	r3, r3
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d121      	bne.n	800bbf8 <VL53L1_preset_mode_standard_ranging_long_range+0x80>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	220f      	movs	r2, #15
 800bbb8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	220d      	movs	r2, #13
 800bbbe:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800bbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc2:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800bbc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbca:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2208      	movs	r2, #8
 800bbd4:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	22b8      	movs	r2, #184	; 0xb8
 800bbda:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	220f      	movs	r2, #15
 800bbe0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	220d      	movs	r2, #13
 800bbe6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800bbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbea:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800bbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf2:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800bbf8:	2317      	movs	r3, #23
 800bbfa:	18fb      	adds	r3, r7, r3
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	b25b      	sxtb	r3, r3
}
 800bc00:	0018      	movs	r0, r3
 800bc02:	46bd      	mov	sp, r7
 800bc04:	b007      	add	sp, #28
 800bc06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc08 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc0a:	b089      	sub	sp, #36	; 0x24
 800bc0c:	af02      	add	r7, sp, #8
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc16:	2617      	movs	r6, #23
 800bc18:	19bb      	adds	r3, r7, r6
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	701a      	strb	r2, [r3, #0]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800bc1e:	19bc      	adds	r4, r7, r6
 800bc20:	683d      	ldr	r5, [r7, #0]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	68b9      	ldr	r1, [r7, #8]
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc2a:	9301      	str	r3, [sp, #4]
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	002b      	movs	r3, r5
 800bc32:	f7ff fe39 	bl	800b8a8 <VL53L1_preset_mode_standard_ranging>
 800bc36:	0003      	movs	r3, r0
 800bc38:	7023      	strb	r3, [r4, #0]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bc3a:	19bb      	adds	r3, r7, r6
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	b25b      	sxtb	r3, r3
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d105      	bne.n	800bc50 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x48>

		pgeneral->dss_config__roi_mode_control =
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2202      	movs	r2, #2
 800bc48:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	223b      	movs	r2, #59	; 0x3b
 800bc4e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bc50:	2317      	movs	r3, #23
 800bc52:	18fb      	adds	r3, r7, r3
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	b25b      	sxtb	r3, r3
}
 800bc58:	0018      	movs	r0, r3
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	b007      	add	sp, #28
 800bc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc60 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bc60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc62:	b089      	sub	sp, #36	; 0x24
 800bc64:	af02      	add	r7, sp, #8
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
 800bc6c:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc6e:	2617      	movs	r6, #23
 800bc70:	19bb      	adds	r3, r7, r6
 800bc72:	2200      	movs	r2, #0
 800bc74:	701a      	strb	r2, [r3, #0]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800bc76:	19bc      	adds	r4, r7, r6
 800bc78:	683d      	ldr	r5, [r7, #0]
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	68b9      	ldr	r1, [r7, #8]
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc82:	9301      	str	r3, [sp, #4]
 800bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	002b      	movs	r3, r5
 800bc8a:	f7ff fe0d 	bl	800b8a8 <VL53L1_preset_mode_standard_ranging>
 800bc8e:	0003      	movs	r3, r0
 800bc90:	7023      	strb	r3, [r4, #0]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bc92:	19bb      	adds	r3, r7, r6
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	b25b      	sxtb	r3, r3
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d105      	bne.n	800bca8 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x48>

		pgeneral->dss_config__roi_mode_control =
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	2202      	movs	r2, #2
 800bca0:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	225b      	movs	r2, #91	; 0x5b
 800bca6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bca8:	2317      	movs	r3, #23
 800bcaa:	18fb      	adds	r3, r7, r3
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	b25b      	sxtb	r3, r3
}
 800bcb0:	0018      	movs	r0, r3
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	b007      	add	sp, #28
 800bcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bcb8 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcba:	b089      	sub	sp, #36	; 0x24
 800bcbc:	af02      	add	r7, sp, #8
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
 800bcc4:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bcc6:	2617      	movs	r6, #23
 800bcc8:	19bb      	adds	r3, r7, r6
 800bcca:	2200      	movs	r2, #0
 800bccc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800bcce:	19bc      	adds	r4, r7, r6
 800bcd0:	683d      	ldr	r5, [r7, #0]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	68b9      	ldr	r1, [r7, #8]
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcda:	9301      	str	r3, [sp, #4]
 800bcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	002b      	movs	r3, r5
 800bce2:	f7ff fde1 	bl	800b8a8 <VL53L1_preset_mode_standard_ranging>
 800bce6:	0003      	movs	r3, r0
 800bce8:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bcea:	19bb      	adds	r3, r7, r6
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	b25b      	sxtb	r3, r3
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d11a      	bne.n	800bd2a <VL53L1_preset_mode_timed_ranging+0x72>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	22b1      	movs	r2, #177	; 0xb1
 800bd04:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	22d4      	movs	r2, #212	; 0xd4
 800bd10:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	22c0      	movs	r2, #192	; 0xc0
 800bd16:	00d2      	lsls	r2, r2, #3
 800bd18:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800bd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd1c:	2222      	movs	r2, #34	; 0x22
 800bd1e:	5c9a      	ldrb	r2, [r3, r2]
		pdynamic->system__seed_config =
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800bd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd26:	2240      	movs	r2, #64	; 0x40
 800bd28:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bd2a:	2317      	movs	r3, #23
 800bd2c:	18fb      	adds	r3, r7, r3
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	b25b      	sxtb	r3, r3
}
 800bd32:	0018      	movs	r0, r3
 800bd34:	46bd      	mov	sp, r7
 800bd36:	b007      	add	sp, #28
 800bd38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd3a <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bd3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd3c:	b089      	sub	sp, #36	; 0x24
 800bd3e:	af02      	add	r7, sp, #8
 800bd40:	60f8      	str	r0, [r7, #12]
 800bd42:	60b9      	str	r1, [r7, #8]
 800bd44:	607a      	str	r2, [r7, #4]
 800bd46:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bd48:	2617      	movs	r6, #23
 800bd4a:	19bb      	adds	r3, r7, r6
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800bd50:	19bc      	adds	r4, r7, r6
 800bd52:	683d      	ldr	r5, [r7, #0]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	68b9      	ldr	r1, [r7, #8]
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd5c:	9301      	str	r3, [sp, #4]
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	002b      	movs	r3, r5
 800bd64:	f7ff fec0 	bl	800bae8 <VL53L1_preset_mode_standard_ranging_short_range>
 800bd68:	0003      	movs	r3, r0
 800bd6a:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bd6c:	19bb      	adds	r3, r7, r6
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	b25b      	sxtb	r3, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d11a      	bne.n	800bdac <VL53L1_preset_mode_timed_ranging_short_range+0x72>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2284      	movs	r2, #132	; 0x84
 800bd86:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	22b1      	movs	r2, #177	; 0xb1
 800bd92:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	22c0      	movs	r2, #192	; 0xc0
 800bd98:	00d2      	lsls	r2, r2, #3
 800bd9a:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800bd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9e:	2222      	movs	r2, #34	; 0x22
 800bda0:	5c9a      	ldrb	r2, [r3, r2]
		pdynamic->system__seed_config =
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800bda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda8:	2240      	movs	r2, #64	; 0x40
 800bdaa:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bdac:	2317      	movs	r3, #23
 800bdae:	18fb      	adds	r3, r7, r3
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	b25b      	sxtb	r3, r3
}
 800bdb4:	0018      	movs	r0, r3
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	b007      	add	sp, #28
 800bdba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bdbc <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdbe:	b089      	sub	sp, #36	; 0x24
 800bdc0:	af02      	add	r7, sp, #8
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	607a      	str	r2, [r7, #4]
 800bdc8:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bdca:	2617      	movs	r6, #23
 800bdcc:	19bb      	adds	r3, r7, r6
 800bdce:	2200      	movs	r2, #0
 800bdd0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800bdd2:	19bc      	adds	r4, r7, r6
 800bdd4:	683d      	ldr	r5, [r7, #0]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	68b9      	ldr	r1, [r7, #8]
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdde:	9301      	str	r3, [sp, #4]
 800bde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	002b      	movs	r3, r5
 800bde6:	f7ff fec7 	bl	800bb78 <VL53L1_preset_mode_standard_ranging_long_range>
 800bdea:	0003      	movs	r3, r0
 800bdec:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bdee:	19bb      	adds	r3, r7, r6
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	b25b      	sxtb	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d11a      	bne.n	800be2e <VL53L1_preset_mode_timed_ranging_long_range+0x72>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2297      	movs	r2, #151	; 0x97
 800be08:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	22b1      	movs	r2, #177	; 0xb1
 800be14:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	22c0      	movs	r2, #192	; 0xc0
 800be1a:	00d2      	lsls	r2, r2, #3
 800be1c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800be1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be20:	2222      	movs	r2, #34	; 0x22
 800be22:	5c9a      	ldrb	r2, [r3, r2]
		pdynamic->system__seed_config =
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	2240      	movs	r2, #64	; 0x40
 800be2c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800be2e:	2317      	movs	r3, #23
 800be30:	18fb      	adds	r3, r7, r3
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	b25b      	sxtb	r3, r3
}
 800be36:	0018      	movs	r0, r3
 800be38:	46bd      	mov	sp, r7
 800be3a:	b007      	add	sp, #28
 800be3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be3e <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800be3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be40:	b089      	sub	sp, #36	; 0x24
 800be42:	af02      	add	r7, sp, #8
 800be44:	60f8      	str	r0, [r7, #12]
 800be46:	60b9      	str	r1, [r7, #8]
 800be48:	607a      	str	r2, [r7, #4]
 800be4a:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be4c:	2617      	movs	r6, #23
 800be4e:	19bb      	adds	r3, r7, r6
 800be50:	2200      	movs	r2, #0
 800be52:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800be54:	19bc      	adds	r4, r7, r6
 800be56:	683d      	ldr	r5, [r7, #0]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	68b9      	ldr	r1, [r7, #8]
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be60:	9301      	str	r3, [sp, #4]
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	002b      	movs	r3, r5
 800be68:	f7ff ff26 	bl	800bcb8 <VL53L1_preset_mode_timed_ranging>
 800be6c:	0003      	movs	r3, r0
 800be6e:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800be70:	19bb      	adds	r3, r7, r6
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	b25b      	sxtb	r3, r3
 800be76:	2b00      	cmp	r3, #0
 800be78:	d108      	bne.n	800be8c <VL53L1_preset_mode_low_power_auto_ranging+0x4e>
		status = VL53L1_config_low_power_auto_mode(
 800be7a:	19bc      	adds	r4, r7, r6
 800be7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	0018      	movs	r0, r3
 800be84:	f000 ff8c 	bl	800cda0 <VL53L1_config_low_power_auto_mode>
 800be88:	0003      	movs	r3, r0
 800be8a:	7023      	strb	r3, [r4, #0]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800be8c:	2317      	movs	r3, #23
 800be8e:	18fb      	adds	r3, r7, r3
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	b25b      	sxtb	r3, r3
}
 800be94:	0018      	movs	r0, r3
 800be96:	46bd      	mov	sp, r7
 800be98:	b007      	add	sp, #28
 800be9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be9c <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800be9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be9e:	b089      	sub	sp, #36	; 0x24
 800bea0:	af02      	add	r7, sp, #8
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
 800bea8:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800beaa:	2617      	movs	r6, #23
 800beac:	19bb      	adds	r3, r7, r6
 800beae:	2200      	movs	r2, #0
 800beb0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800beb2:	19bc      	adds	r4, r7, r6
 800beb4:	683d      	ldr	r5, [r7, #0]
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	68b9      	ldr	r1, [r7, #8]
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bebe:	9301      	str	r3, [sp, #4]
 800bec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	002b      	movs	r3, r5
 800bec6:	f7ff ff38 	bl	800bd3a <VL53L1_preset_mode_timed_ranging_short_range>
 800beca:	0003      	movs	r3, r0
 800becc:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800bece:	19bb      	adds	r3, r7, r6
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	b25b      	sxtb	r3, r3
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d108      	bne.n	800beea <VL53L1_preset_mode_low_power_auto_short_ranging+0x4e>
		status = VL53L1_config_low_power_auto_mode(
 800bed8:	19bc      	adds	r4, r7, r6
 800beda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	0018      	movs	r0, r3
 800bee2:	f000 ff5d 	bl	800cda0 <VL53L1_config_low_power_auto_mode>
 800bee6:	0003      	movs	r3, r0
 800bee8:	7023      	strb	r3, [r4, #0]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800beea:	2317      	movs	r3, #23
 800beec:	18fb      	adds	r3, r7, r3
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	b25b      	sxtb	r3, r3
}
 800bef2:	0018      	movs	r0, r3
 800bef4:	46bd      	mov	sp, r7
 800bef6:	b007      	add	sp, #28
 800bef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800befa <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800befa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800befc:	b089      	sub	sp, #36	; 0x24
 800befe:	af02      	add	r7, sp, #8
 800bf00:	60f8      	str	r0, [r7, #12]
 800bf02:	60b9      	str	r1, [r7, #8]
 800bf04:	607a      	str	r2, [r7, #4]
 800bf06:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf08:	2617      	movs	r6, #23
 800bf0a:	19bb      	adds	r3, r7, r6
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800bf10:	19bc      	adds	r4, r7, r6
 800bf12:	683d      	ldr	r5, [r7, #0]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	68b9      	ldr	r1, [r7, #8]
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1c:	9301      	str	r3, [sp, #4]
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	002b      	movs	r3, r5
 800bf24:	f7ff ff4a 	bl	800bdbc <VL53L1_preset_mode_timed_ranging_long_range>
 800bf28:	0003      	movs	r3, r0
 800bf2a:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800bf2c:	19bb      	adds	r3, r7, r6
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	b25b      	sxtb	r3, r3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d108      	bne.n	800bf48 <VL53L1_preset_mode_low_power_auto_long_ranging+0x4e>
		status = VL53L1_config_low_power_auto_mode(
 800bf36:	19bc      	adds	r4, r7, r6
 800bf38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf3a:	6839      	ldr	r1, [r7, #0]
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	0018      	movs	r0, r3
 800bf40:	f000 ff2e 	bl	800cda0 <VL53L1_config_low_power_auto_mode>
 800bf44:	0003      	movs	r3, r0
 800bf46:	7023      	strb	r3, [r4, #0]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800bf48:	2317      	movs	r3, #23
 800bf4a:	18fb      	adds	r3, r7, r3
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	b25b      	sxtb	r3, r3
}
 800bf50:	0018      	movs	r0, r3
 800bf52:	46bd      	mov	sp, r7
 800bf54:	b007      	add	sp, #28
 800bf56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf58 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bf58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf5a:	b089      	sub	sp, #36	; 0x24
 800bf5c:	af02      	add	r7, sp, #8
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]
 800bf64:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf66:	2617      	movs	r6, #23
 800bf68:	19bb      	adds	r3, r7, r6
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800bf6e:	19bc      	adds	r4, r7, r6
 800bf70:	683d      	ldr	r5, [r7, #0]
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	68b9      	ldr	r1, [r7, #8]
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7a:	9301      	str	r3, [sp, #4]
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	002b      	movs	r3, r5
 800bf82:	f7ff fc91 	bl	800b8a8 <VL53L1_preset_mode_standard_ranging>
 800bf86:	0003      	movs	r3, r0
 800bf88:	7023      	strb	r3, [r4, #0]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bf8a:	19bb      	adds	r3, r7, r6
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	b25b      	sxtb	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d116      	bne.n	800bfc2 <VL53L1_preset_mode_singleshot_ranging+0x6a>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	2200      	movs	r2, #0
 800bf98:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	22b1      	movs	r2, #177	; 0xb1
 800bfa4:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	22d4      	movs	r2, #212	; 0xd4
 800bfb0:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800bfb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb4:	2222      	movs	r2, #34	; 0x22
 800bfb6:	5c9a      	ldrb	r2, [r3, r2]
		pdynamic->system__seed_config =
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	2210      	movs	r2, #16
 800bfc0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bfc2:	2317      	movs	r3, #23
 800bfc4:	18fb      	adds	r3, r7, r3
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	b25b      	sxtb	r3, r3
}
 800bfca:	0018      	movs	r0, r3
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	b007      	add	sp, #28
 800bfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfd2 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bfd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd4:	b089      	sub	sp, #36	; 0x24
 800bfd6:	af02      	add	r7, sp, #8
 800bfd8:	60f8      	str	r0, [r7, #12]
 800bfda:	60b9      	str	r1, [r7, #8]
 800bfdc:	607a      	str	r2, [r7, #4]
 800bfde:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bfe0:	2617      	movs	r6, #23
 800bfe2:	19bb      	adds	r3, r7, r6
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800bfe8:	19bc      	adds	r4, r7, r6
 800bfea:	683d      	ldr	r5, [r7, #0]
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	68b9      	ldr	r1, [r7, #8]
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff4:	9301      	str	r3, [sp, #4]
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	002b      	movs	r3, r5
 800bffc:	f7ff fc54 	bl	800b8a8 <VL53L1_preset_mode_standard_ranging>
 800c000:	0003      	movs	r3, r0
 800c002:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800c004:	19bb      	adds	r3, r7, r6
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	b25b      	sxtb	r3, r3
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d102      	bne.n	800c014 <VL53L1_preset_mode_olt+0x42>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	2201      	movs	r2, #1
 800c012:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c014:	2317      	movs	r3, #23
 800c016:	18fb      	adds	r3, r7, r3
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	b25b      	sxtb	r3, r3
}
 800c01c:	0018      	movs	r0, r3
 800c01e:	46bd      	mov	sp, r7
 800c020:	b007      	add	sp, #28
 800c022:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c024 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2228      	movs	r2, #40	; 0x28
 800c034:	2101      	movs	r1, #1
 800c036:	5499      	strb	r1, [r3, r2]
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2229      	movs	r2, #41	; 0x29
 800c03c:	2102      	movs	r1, #2
 800c03e:	5499      	strb	r1, [r3, r2]
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	222a      	movs	r2, #42	; 0x2a
 800c044:	210a      	movs	r1, #10
 800c046:	5499      	strb	r1, [r3, r2]
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	22e6      	movs	r2, #230	; 0xe6
 800c04c:	00d2      	lsls	r2, r2, #3
 800c04e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c050:	46c0      	nop			; (mov r8, r8)
 800c052:	46bd      	mov	sp, r7
 800c054:	b004      	add	sp, #16
 800c056:	bd80      	pop	{r7, pc}

0800c058 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	000a      	movs	r2, r1
 800c062:	1cfb      	adds	r3, r7, #3
 800c064:	701a      	strb	r2, [r3, #0]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	332c      	adds	r3, #44	; 0x2c
 800c06e:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	1cfa      	adds	r2, r7, #3
 800c074:	7812      	ldrb	r2, [r2, #0]
 800c076:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	2200      	movs	r2, #0
 800c07c:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	2202      	movs	r2, #2
 800c082:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	2200      	movs	r2, #0
 800c088:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	1cfa      	adds	r2, r7, #3
 800c08e:	7812      	ldrb	r2, [r2, #0]
 800c090:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	2200      	movs	r2, #0
 800c096:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2202      	movs	r2, #2
 800c09c:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	71da      	strb	r2, [r3, #7]

}
 800c0a4:	46c0      	nop			; (mov r8, r8)
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	b004      	add	sp, #16
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800c0b4:	2317      	movs	r3, #23
 800c0b6:	18fb      	adds	r3, r7, r3
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	332c      	adds	r3, #44	; 0x2c
 800c0c4:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800c0c6:	693a      	ldr	r2, [r7, #16]
 800c0c8:	23e6      	movs	r3, #230	; 0xe6
 800c0ca:	005b      	lsls	r3, r3, #1
 800c0cc:	5cd3      	ldrb	r3, [r2, r3]
 800c0ce:	001a      	movs	r2, r3
 800c0d0:	23f0      	movs	r3, #240	; 0xf0
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	d10c      	bne.n	800c0f0 <VL53L1_update_ll_driver_rd_state+0x44>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2203      	movs	r2, #3
 800c0da:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2202      	movs	r2, #2
 800c0e6:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	71da      	strb	r2, [r3, #7]
 800c0ee:	e05b      	b.n	800c1a8 <VL53L1_update_ll_driver_rd_state+0xfc>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	795b      	ldrb	r3, [r3, #5]
 800c0f4:	2bff      	cmp	r3, #255	; 0xff
 800c0f6:	d103      	bne.n	800c100 <VL53L1_update_ll_driver_rd_state+0x54>
			pstate->rd_stream_count = 0x80;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2280      	movs	r2, #128	; 0x80
 800c0fc:	715a      	strb	r2, [r3, #5]
 800c0fe:	e005      	b.n	800c10c <VL53L1_update_ll_driver_rd_state+0x60>
		} else {
			pstate->rd_stream_count++;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	795b      	ldrb	r3, [r3, #5]
 800c104:	3301      	adds	r3, #1
 800c106:	b2da      	uxtb	r2, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	799b      	ldrb	r3, [r3, #6]
 800c110:	2202      	movs	r2, #2
 800c112:	4053      	eors	r3, r2
 800c114:	b2da      	uxtb	r2, r3
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	791b      	ldrb	r3, [r3, #4]
 800c11e:	2b08      	cmp	r3, #8
 800c120:	d02a      	beq.n	800c178 <VL53L1_update_ll_driver_rd_state+0xcc>
 800c122:	dc34      	bgt.n	800c18e <VL53L1_update_ll_driver_rd_state+0xe2>
 800c124:	2b07      	cmp	r3, #7
 800c126:	d023      	beq.n	800c170 <VL53L1_update_ll_driver_rd_state+0xc4>
 800c128:	dc31      	bgt.n	800c18e <VL53L1_update_ll_driver_rd_state+0xe2>
 800c12a:	2b03      	cmp	r3, #3
 800c12c:	d002      	beq.n	800c134 <VL53L1_update_ll_driver_rd_state+0x88>
 800c12e:	2b06      	cmp	r3, #6
 800c130:	d017      	beq.n	800c162 <VL53L1_update_ll_driver_rd_state+0xb6>
 800c132:	e02c      	b.n	800c18e <VL53L1_update_ll_driver_rd_state+0xe2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	23e3      	movs	r3, #227	; 0xe3
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	5cd3      	ldrb	r3, [r2, r3]
 800c13c:	001a      	movs	r2, r3
 800c13e:	2302      	movs	r3, #2
 800c140:	4013      	ands	r3, r2
 800c142:	2b00      	cmp	r3, #0
 800c144:	dd03      	ble.n	800c14e <VL53L1_update_ll_driver_rd_state+0xa2>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2206      	movs	r2, #6
 800c14a:	711a      	strb	r2, [r3, #4]
 800c14c:	e002      	b.n	800c154 <VL53L1_update_ll_driver_rd_state+0xa8>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2208      	movs	r2, #8
 800c152:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	71da      	strb	r2, [r3, #7]

		break;
 800c160:	e022      	b.n	800c1a8 <VL53L1_update_ll_driver_rd_state+0xfc>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2200      	movs	r2, #0
 800c166:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2208      	movs	r2, #8
 800c16c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800c16e:	e01b      	b.n	800c1a8 <VL53L1_update_ll_driver_rd_state+0xfc>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2208      	movs	r2, #8
 800c174:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800c176:	e017      	b.n	800c1a8 <VL53L1_update_ll_driver_rd_state+0xfc>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	79db      	ldrb	r3, [r3, #7]
 800c17c:	2201      	movs	r2, #1
 800c17e:	4053      	eors	r3, r2
 800c180:	b2da      	uxtb	r2, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2208      	movs	r2, #8
 800c18a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800c18c:	e00c      	b.n	800c1a8 <VL53L1_update_ll_driver_rd_state+0xfc>

		default:

			pstate->rd_device_state  =
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2203      	movs	r2, #3
 800c192:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2200      	movs	r2, #0
 800c198:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2202      	movs	r2, #2
 800c19e:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	71da      	strb	r2, [r3, #7]

		break;
 800c1a6:	46c0      	nop			; (mov r8, r8)
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800c1a8:	2317      	movs	r3, #23
 800c1aa:	18fb      	adds	r3, r7, r3
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	b25b      	sxtb	r3, r3
}
 800c1b0:	0018      	movs	r0, r3
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	b006      	add	sp, #24
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800c1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ba:	b089      	sub	sp, #36	; 0x24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800c1c0:	241f      	movs	r4, #31
 800c1c2:	193b      	adds	r3, r7, r4
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t  *pdev =
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	332c      	adds	r3, #44	; 0x2c
 800c1d0:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	33cf      	adds	r3, #207	; 0xcf
 800c1d6:	33ff      	adds	r3, #255	; 0xff
 800c1d8:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800c1da:	200f      	movs	r0, #15
 800c1dc:	183b      	adds	r3, r7, r0
 800c1de:	2200      	movs	r2, #0
 800c1e0:	701a      	strb	r2, [r3, #0]
	uint8_t   device_stream_count   = 0;
 800c1e2:	250e      	movs	r5, #14
 800c1e4:	197b      	adds	r3, r7, r5
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	701a      	strb	r2, [r3, #0]
	uint8_t   device_gph_id         = 0;
 800c1ea:	260d      	movs	r6, #13
 800c1ec:	19bb      	adds	r3, r7, r6
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	701a      	strb	r2, [r3, #0]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	785a      	ldrb	r2, [r3, #1]
	device_range_status =
 800c1f6:	183b      	adds	r3, r7, r0
 800c1f8:	211f      	movs	r1, #31
 800c1fa:	400a      	ands	r2, r1
 800c1fc:	701a      	strb	r2, [r3, #0]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800c1fe:	197b      	adds	r3, r7, r5
 800c200:	693a      	ldr	r2, [r7, #16]
 800c202:	78d2      	ldrb	r2, [r2, #3]
 800c204:	701a      	strb	r2, [r3, #0]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800c20a:	111b      	asrs	r3, r3, #4
 800c20c:	b2da      	uxtb	r2, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800c20e:	19bb      	adds	r3, r7, r6
 800c210:	2102      	movs	r1, #2
 800c212:	400a      	ands	r2, r1
 800c214:	701a      	strb	r2, [r3, #0]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800c216:	69ba      	ldr	r2, [r7, #24]
 800c218:	23e6      	movs	r3, #230	; 0xe6
 800c21a:	005b      	lsls	r3, r3, #1
 800c21c:	5cd3      	ldrb	r3, [r2, r3]
 800c21e:	001a      	movs	r2, r3
 800c220:	2320      	movs	r3, #32
 800c222:	4013      	ands	r3, r2
 800c224:	d021      	beq.n	800c26a <VL53L1_check_ll_driver_rd_state+0xb2>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	791b      	ldrb	r3, [r3, #4]
 800c22a:	2b06      	cmp	r3, #6
 800c22c:	d107      	bne.n	800c23e <VL53L1_check_ll_driver_rd_state+0x86>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800c22e:	183b      	adds	r3, r7, r0
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	2b12      	cmp	r3, #18
 800c234:	d019      	beq.n	800c26a <VL53L1_check_ll_driver_rd_state+0xb2>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800c236:	193b      	adds	r3, r7, r4
 800c238:	22ef      	movs	r2, #239	; 0xef
 800c23a:	701a      	strb	r2, [r3, #0]
 800c23c:	e015      	b.n	800c26a <VL53L1_check_ll_driver_rd_state+0xb2>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	795b      	ldrb	r3, [r3, #5]
 800c242:	220e      	movs	r2, #14
 800c244:	18ba      	adds	r2, r7, r2
 800c246:	7812      	ldrb	r2, [r2, #0]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d003      	beq.n	800c254 <VL53L1_check_ll_driver_rd_state+0x9c>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800c24c:	231f      	movs	r3, #31
 800c24e:	18fb      	adds	r3, r7, r3
 800c250:	22ee      	movs	r2, #238	; 0xee
 800c252:	701a      	strb	r2, [r3, #0]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	799b      	ldrb	r3, [r3, #6]
 800c258:	220d      	movs	r2, #13
 800c25a:	18ba      	adds	r2, r7, r2
 800c25c:	7812      	ldrb	r2, [r2, #0]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d003      	beq.n	800c26a <VL53L1_check_ll_driver_rd_state+0xb2>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800c262:	231f      	movs	r3, #31
 800c264:	18fb      	adds	r3, r7, r3
 800c266:	22ed      	movs	r2, #237	; 0xed
 800c268:	701a      	strb	r2, [r3, #0]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800c26a:	231f      	movs	r3, #31
 800c26c:	18fb      	adds	r3, r7, r3
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	b25b      	sxtb	r3, r3
}
 800c272:	0018      	movs	r0, r3
 800c274:	46bd      	mov	sp, r7
 800c276:	b009      	add	sp, #36	; 0x24
 800c278:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c27a <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b086      	sub	sp, #24
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800c282:	2317      	movs	r3, #23
 800c284:	18fb      	adds	r3, r7, r3
 800c286:	2200      	movs	r2, #0
 800c288:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t  *pdev =
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	332c      	adds	r3, #44	; 0x2c
 800c292:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800c294:	693a      	ldr	r2, [r7, #16]
 800c296:	23e6      	movs	r3, #230	; 0xe6
 800c298:	005b      	lsls	r3, r3, #1
 800c29a:	5cd3      	ldrb	r3, [r2, r3]
 800c29c:	001a      	movs	r2, r3
 800c29e:	23f0      	movs	r3, #240	; 0xf0
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	d10c      	bne.n	800c2be <VL53L1_update_ll_driver_cfg_state+0x44>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2203      	movs	r2, #3
 800c2a8:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2202      	movs	r2, #2
 800c2b4:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	70da      	strb	r2, [r3, #3]
 800c2bc:	e03e      	b.n	800c33c <VL53L1_update_ll_driver_cfg_state+0xc2>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	785b      	ldrb	r3, [r3, #1]
 800c2c2:	2bff      	cmp	r3, #255	; 0xff
 800c2c4:	d103      	bne.n	800c2ce <VL53L1_update_ll_driver_cfg_state+0x54>
			pstate->cfg_stream_count = 0x80;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2280      	movs	r2, #128	; 0x80
 800c2ca:	705a      	strb	r2, [r3, #1]
 800c2cc:	e005      	b.n	800c2da <VL53L1_update_ll_driver_cfg_state+0x60>
		} else {
			pstate->cfg_stream_count++;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	785b      	ldrb	r3, [r3, #1]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	b2da      	uxtb	r2, r3
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	789b      	ldrb	r3, [r3, #2]
 800c2de:	2202      	movs	r2, #2
 800c2e0:	4053      	eors	r3, r2
 800c2e2:	b2da      	uxtb	r2, r3
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b03      	cmp	r3, #3
 800c2ee:	d002      	beq.n	800c2f6 <VL53L1_update_ll_driver_cfg_state+0x7c>
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	d00e      	beq.n	800c312 <VL53L1_update_ll_driver_cfg_state+0x98>
 800c2f4:	e015      	b.n	800c322 <VL53L1_update_ll_driver_cfg_state+0xa8>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	78db      	ldrb	r3, [r3, #3]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	4053      	eors	r3, r2
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2201      	movs	r2, #1
 800c308:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2204      	movs	r2, #4
 800c30e:	701a      	strb	r2, [r3, #0]
		break;
 800c310:	e014      	b.n	800c33c <VL53L1_update_ll_driver_cfg_state+0xc2>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	78db      	ldrb	r3, [r3, #3]
 800c316:	2201      	movs	r2, #1
 800c318:	4053      	eors	r3, r2
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	70da      	strb	r2, [r3, #3]

		break;
 800c320:	e00c      	b.n	800c33c <VL53L1_update_ll_driver_cfg_state+0xc2>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2203      	movs	r2, #3
 800c326:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2202      	movs	r2, #2
 800c332:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	70da      	strb	r2, [r3, #3]

		break;
 800c33a:	46c0      	nop			; (mov r8, r8)
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800c33c:	2317      	movs	r3, #23
 800c33e:	18fb      	adds	r3, r7, r3
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	b25b      	sxtb	r3, r3
}
 800c344:	0018      	movs	r0, r3
 800c346:	46bd      	mov	sp, r7
 800c348:	b006      	add	sp, #24
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	7c1a      	ldrb	r2, [r3, #16]
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	3301      	adds	r3, #1
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	7c52      	ldrb	r2, [r2, #17]
 800c366:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	3302      	adds	r3, #2
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	7c92      	ldrb	r2, [r2, #18]
 800c370:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	3303      	adds	r3, #3
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	7cd2      	ldrb	r2, [r2, #19]
 800c37a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	3304      	adds	r3, #4
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	7d12      	ldrb	r2, [r2, #20]
 800c384:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	3305      	adds	r3, #5
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	7d52      	ldrb	r2, [r2, #21]
 800c38e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	3306      	adds	r3, #6
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	7d92      	ldrb	r2, [r2, #22]
 800c398:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	3307      	adds	r3, #7
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	7dd2      	ldrb	r2, [r2, #23]
 800c3a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	3308      	adds	r3, #8
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	7e12      	ldrb	r2, [r2, #24]
 800c3ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	3309      	adds	r3, #9
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	7e52      	ldrb	r2, [r2, #25]
 800c3b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	330a      	adds	r3, #10
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	7e92      	ldrb	r2, [r2, #26]
 800c3c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	330b      	adds	r3, #11
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	7ed2      	ldrb	r2, [r2, #27]
 800c3ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	330c      	adds	r3, #12
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	7f12      	ldrb	r2, [r2, #28]
 800c3d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	330d      	adds	r3, #13
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	7f52      	ldrb	r2, [r2, #29]
 800c3de:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	330e      	adds	r3, #14
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	7f92      	ldrb	r2, [r2, #30]
 800c3e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	330f      	adds	r3, #15
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	7fd2      	ldrb	r2, [r2, #31]
 800c3f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	3310      	adds	r3, #16
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	2120      	movs	r1, #32
 800c3fc:	5c52      	ldrb	r2, [r2, r1]
 800c3fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	3311      	adds	r3, #17
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	2121      	movs	r1, #33	; 0x21
 800c408:	5c52      	ldrb	r2, [r2, r1]
 800c40a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	3312      	adds	r3, #18
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	2122      	movs	r1, #34	; 0x22
 800c414:	5c52      	ldrb	r2, [r2, r1]
 800c416:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	3313      	adds	r3, #19
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	2123      	movs	r1, #35	; 0x23
 800c420:	5c52      	ldrb	r2, [r2, r1]
 800c422:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	3314      	adds	r3, #20
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	2124      	movs	r1, #36	; 0x24
 800c42c:	5c52      	ldrb	r2, [r2, r1]
 800c42e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	3315      	adds	r3, #21
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	2125      	movs	r1, #37	; 0x25
 800c438:	5c52      	ldrb	r2, [r2, r1]
 800c43a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	3316      	adds	r3, #22
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	2126      	movs	r1, #38	; 0x26
 800c444:	5c52      	ldrb	r2, [r2, r1]
 800c446:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	3317      	adds	r3, #23
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	2127      	movs	r1, #39	; 0x27
 800c450:	5c52      	ldrb	r2, [r2, r1]
 800c452:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	3318      	adds	r3, #24
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	2128      	movs	r1, #40	; 0x28
 800c45c:	5c52      	ldrb	r2, [r2, r1]
 800c45e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	3319      	adds	r3, #25
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	2129      	movs	r1, #41	; 0x29
 800c468:	5c52      	ldrb	r2, [r2, r1]
 800c46a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	331a      	adds	r3, #26
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	212a      	movs	r1, #42	; 0x2a
 800c474:	5c52      	ldrb	r2, [r2, r1]
 800c476:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	331b      	adds	r3, #27
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	212b      	movs	r1, #43	; 0x2b
 800c480:	5c52      	ldrb	r2, [r2, r1]
 800c482:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	331c      	adds	r3, #28
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	212c      	movs	r1, #44	; 0x2c
 800c48c:	5c52      	ldrb	r2, [r2, r1]
 800c48e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	331d      	adds	r3, #29
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	212d      	movs	r1, #45	; 0x2d
 800c498:	5c52      	ldrb	r2, [r2, r1]
 800c49a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	331e      	adds	r3, #30
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	212e      	movs	r1, #46	; 0x2e
 800c4a4:	5c52      	ldrb	r2, [r2, r1]
 800c4a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	331f      	adds	r3, #31
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	212f      	movs	r1, #47	; 0x2f
 800c4b0:	5c52      	ldrb	r2, [r2, r1]
 800c4b2:	701a      	strb	r2, [r3, #0]
}
 800c4b4:	46c0      	nop			; (mov r8, r8)
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	b002      	add	sp, #8
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	603a      	str	r2, [r7, #0]
 800c4c4:	1dbb      	adds	r3, r7, #6
 800c4c6:	1c02      	adds	r2, r0, #0
 800c4c8:	801a      	strh	r2, [r3, #0]
 800c4ca:	1d3b      	adds	r3, r7, #4
 800c4cc:	1c0a      	adds	r2, r1, #0
 800c4ce:	801a      	strh	r2, [r3, #0]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800c4d0:	210e      	movs	r1, #14
 800c4d2:	187b      	adds	r3, r7, r1
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	801a      	strh	r2, [r3, #0]
	uint16_t   data = 0;
 800c4d8:	200c      	movs	r0, #12
 800c4da:	183b      	adds	r3, r7, r0
 800c4dc:	2200      	movs	r2, #0
 800c4de:	801a      	strh	r2, [r3, #0]

	data =  ip_value;
 800c4e0:	183b      	adds	r3, r7, r0
 800c4e2:	1dba      	adds	r2, r7, #6
 800c4e4:	8812      	ldrh	r2, [r2, #0]
 800c4e6:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < count ; i++) {
 800c4e8:	187b      	adds	r3, r7, r1
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	801a      	strh	r2, [r3, #0]
 800c4ee:	e017      	b.n	800c520 <VL53L1_i2c_encode_uint16_t+0x64>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800c4f0:	1d3b      	adds	r3, r7, #4
 800c4f2:	881a      	ldrh	r2, [r3, #0]
 800c4f4:	210e      	movs	r1, #14
 800c4f6:	187b      	adds	r3, r7, r1
 800c4f8:	881b      	ldrh	r3, [r3, #0]
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	683a      	ldr	r2, [r7, #0]
 800c500:	18d3      	adds	r3, r2, r3
 800c502:	200c      	movs	r0, #12
 800c504:	183a      	adds	r2, r7, r0
 800c506:	8812      	ldrh	r2, [r2, #0]
 800c508:	b2d2      	uxtb	r2, r2
 800c50a:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800c50c:	183b      	adds	r3, r7, r0
 800c50e:	183a      	adds	r2, r7, r0
 800c510:	8812      	ldrh	r2, [r2, #0]
 800c512:	0a12      	lsrs	r2, r2, #8
 800c514:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < count ; i++) {
 800c516:	187b      	adds	r3, r7, r1
 800c518:	881a      	ldrh	r2, [r3, #0]
 800c51a:	187b      	adds	r3, r7, r1
 800c51c:	3201      	adds	r2, #1
 800c51e:	801a      	strh	r2, [r3, #0]
 800c520:	230e      	movs	r3, #14
 800c522:	18fa      	adds	r2, r7, r3
 800c524:	1d3b      	adds	r3, r7, #4
 800c526:	8812      	ldrh	r2, [r2, #0]
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d3e0      	bcc.n	800c4f0 <VL53L1_i2c_encode_uint16_t+0x34>
	}
}
 800c52e:	46c0      	nop			; (mov r8, r8)
 800c530:	46c0      	nop			; (mov r8, r8)
 800c532:	46bd      	mov	sp, r7
 800c534:	b004      	add	sp, #16
 800c536:	bd80      	pop	{r7, pc}

0800c538 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	0002      	movs	r2, r0
 800c540:	6039      	str	r1, [r7, #0]
 800c542:	1dbb      	adds	r3, r7, #6
 800c544:	801a      	strh	r2, [r3, #0]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800c546:	230e      	movs	r3, #14
 800c548:	18fb      	adds	r3, r7, r3
 800c54a:	2200      	movs	r2, #0
 800c54c:	801a      	strh	r2, [r3, #0]

	while (count-- > 0) {
 800c54e:	e00d      	b.n	800c56c <VL53L1_i2c_decode_uint16_t+0x34>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800c550:	200e      	movs	r0, #14
 800c552:	183b      	adds	r3, r7, r0
 800c554:	881b      	ldrh	r3, [r3, #0]
 800c556:	021b      	lsls	r3, r3, #8
 800c558:	b21a      	sxth	r2, r3
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	1c59      	adds	r1, r3, #1
 800c55e:	6039      	str	r1, [r7, #0]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	b21b      	sxth	r3, r3
 800c564:	4313      	orrs	r3, r2
 800c566:	b21a      	sxth	r2, r3
 800c568:	183b      	adds	r3, r7, r0
 800c56a:	801a      	strh	r2, [r3, #0]
	while (count-- > 0) {
 800c56c:	1dbb      	adds	r3, r7, #6
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	1dba      	adds	r2, r7, #6
 800c572:	1e59      	subs	r1, r3, #1
 800c574:	8011      	strh	r1, [r2, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1ea      	bne.n	800c550 <VL53L1_i2c_decode_uint16_t+0x18>
	}

	return value;
 800c57a:	230e      	movs	r3, #14
 800c57c:	18fb      	adds	r3, r7, r3
 800c57e:	881b      	ldrh	r3, [r3, #0]
}
 800c580:	0018      	movs	r0, r3
 800c582:	46bd      	mov	sp, r7
 800c584:	b004      	add	sp, #16
 800c586:	bd80      	pop	{r7, pc}

0800c588 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	603a      	str	r2, [r7, #0]
 800c590:	1dbb      	adds	r3, r7, #6
 800c592:	1c02      	adds	r2, r0, #0
 800c594:	801a      	strh	r2, [r3, #0]
 800c596:	1d3b      	adds	r3, r7, #4
 800c598:	1c0a      	adds	r2, r1, #0
 800c59a:	801a      	strh	r2, [r3, #0]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800c59c:	210e      	movs	r1, #14
 800c59e:	187b      	adds	r3, r7, r1
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	801a      	strh	r2, [r3, #0]
	int16_t    data = 0;
 800c5a4:	200c      	movs	r0, #12
 800c5a6:	183b      	adds	r3, r7, r0
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	801a      	strh	r2, [r3, #0]

	data =  ip_value;
 800c5ac:	183b      	adds	r3, r7, r0
 800c5ae:	1dba      	adds	r2, r7, #6
 800c5b0:	8812      	ldrh	r2, [r2, #0]
 800c5b2:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < count ; i++) {
 800c5b4:	187b      	adds	r3, r7, r1
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	801a      	strh	r2, [r3, #0]
 800c5ba:	e018      	b.n	800c5ee <VL53L1_i2c_encode_int16_t+0x66>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800c5bc:	1d3b      	adds	r3, r7, #4
 800c5be:	881a      	ldrh	r2, [r3, #0]
 800c5c0:	210e      	movs	r1, #14
 800c5c2:	187b      	adds	r3, r7, r1
 800c5c4:	881b      	ldrh	r3, [r3, #0]
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	18d3      	adds	r3, r2, r3
 800c5ce:	200c      	movs	r0, #12
 800c5d0:	183a      	adds	r2, r7, r0
 800c5d2:	8812      	ldrh	r2, [r2, #0]
 800c5d4:	b2d2      	uxtb	r2, r2
 800c5d6:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800c5d8:	183b      	adds	r3, r7, r0
 800c5da:	183a      	adds	r2, r7, r0
 800c5dc:	2000      	movs	r0, #0
 800c5de:	5e12      	ldrsh	r2, [r2, r0]
 800c5e0:	1212      	asrs	r2, r2, #8
 800c5e2:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < count ; i++) {
 800c5e4:	187b      	adds	r3, r7, r1
 800c5e6:	881a      	ldrh	r2, [r3, #0]
 800c5e8:	187b      	adds	r3, r7, r1
 800c5ea:	3201      	adds	r2, #1
 800c5ec:	801a      	strh	r2, [r3, #0]
 800c5ee:	230e      	movs	r3, #14
 800c5f0:	18fa      	adds	r2, r7, r3
 800c5f2:	1d3b      	adds	r3, r7, #4
 800c5f4:	8812      	ldrh	r2, [r2, #0]
 800c5f6:	881b      	ldrh	r3, [r3, #0]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d3df      	bcc.n	800c5bc <VL53L1_i2c_encode_int16_t+0x34>
	}
}
 800c5fc:	46c0      	nop			; (mov r8, r8)
 800c5fe:	46c0      	nop			; (mov r8, r8)
 800c600:	46bd      	mov	sp, r7
 800c602:	b004      	add	sp, #16
 800c604:	bd80      	pop	{r7, pc}

0800c606 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b084      	sub	sp, #16
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	0002      	movs	r2, r0
 800c60e:	6039      	str	r1, [r7, #0]
 800c610:	1dbb      	adds	r3, r7, #6
 800c612:	801a      	strh	r2, [r3, #0]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800c614:	210e      	movs	r1, #14
 800c616:	187b      	adds	r3, r7, r1
 800c618:	2200      	movs	r2, #0
 800c61a:	801a      	strh	r2, [r3, #0]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	b25b      	sxtb	r3, r3
 800c622:	2b00      	cmp	r3, #0
 800c624:	da12      	bge.n	800c64c <VL53L1_i2c_decode_int16_t+0x46>
		value = 0xFFFF;
 800c626:	187b      	adds	r3, r7, r1
 800c628:	2201      	movs	r2, #1
 800c62a:	4252      	negs	r2, r2
 800c62c:	801a      	strh	r2, [r3, #0]
	}

	while (count-- > 0) {
 800c62e:	e00d      	b.n	800c64c <VL53L1_i2c_decode_int16_t+0x46>
		value = (value << 8) | (int16_t)*pbuffer++;
 800c630:	200e      	movs	r0, #14
 800c632:	183b      	adds	r3, r7, r0
 800c634:	2200      	movs	r2, #0
 800c636:	5e9b      	ldrsh	r3, [r3, r2]
 800c638:	021b      	lsls	r3, r3, #8
 800c63a:	b219      	sxth	r1, r3
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	1c5a      	adds	r2, r3, #1
 800c640:	603a      	str	r2, [r7, #0]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	b21a      	sxth	r2, r3
 800c646:	183b      	adds	r3, r7, r0
 800c648:	430a      	orrs	r2, r1
 800c64a:	801a      	strh	r2, [r3, #0]
	while (count-- > 0) {
 800c64c:	1dbb      	adds	r3, r7, #6
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	1dba      	adds	r2, r7, #6
 800c652:	1e59      	subs	r1, r3, #1
 800c654:	8011      	strh	r1, [r2, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1ea      	bne.n	800c630 <VL53L1_i2c_decode_int16_t+0x2a>
	}

	return value;
 800c65a:	230e      	movs	r3, #14
 800c65c:	18fb      	adds	r3, r7, r3
 800c65e:	2200      	movs	r2, #0
 800c660:	5e9b      	ldrsh	r3, [r3, r2]
}
 800c662:	0018      	movs	r0, r3
 800c664:	46bd      	mov	sp, r7
 800c666:	b004      	add	sp, #16
 800c668:	bd80      	pop	{r7, pc}

0800c66a <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b086      	sub	sp, #24
 800c66e:	af00      	add	r7, sp, #0
 800c670:	60f8      	str	r0, [r7, #12]
 800c672:	607a      	str	r2, [r7, #4]
 800c674:	230a      	movs	r3, #10
 800c676:	18fb      	adds	r3, r7, r3
 800c678:	1c0a      	adds	r2, r1, #0
 800c67a:	801a      	strh	r2, [r3, #0]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800c67c:	2116      	movs	r1, #22
 800c67e:	187b      	adds	r3, r7, r1
 800c680:	2200      	movs	r2, #0
 800c682:	801a      	strh	r2, [r3, #0]
	uint32_t   data = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800c68c:	187b      	adds	r3, r7, r1
 800c68e:	2200      	movs	r2, #0
 800c690:	801a      	strh	r2, [r3, #0]
 800c692:	e014      	b.n	800c6be <VL53L1_i2c_encode_uint32_t+0x54>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800c694:	230a      	movs	r3, #10
 800c696:	18fb      	adds	r3, r7, r3
 800c698:	881a      	ldrh	r2, [r3, #0]
 800c69a:	2116      	movs	r1, #22
 800c69c:	187b      	adds	r3, r7, r1
 800c69e:	881b      	ldrh	r3, [r3, #0]
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	18d3      	adds	r3, r2, r3
 800c6a8:	693a      	ldr	r2, [r7, #16]
 800c6aa:	b2d2      	uxtb	r2, r2
 800c6ac:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	0a1b      	lsrs	r3, r3, #8
 800c6b2:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800c6b4:	187b      	adds	r3, r7, r1
 800c6b6:	881a      	ldrh	r2, [r3, #0]
 800c6b8:	187b      	adds	r3, r7, r1
 800c6ba:	3201      	adds	r2, #1
 800c6bc:	801a      	strh	r2, [r3, #0]
 800c6be:	2316      	movs	r3, #22
 800c6c0:	18fa      	adds	r2, r7, r3
 800c6c2:	230a      	movs	r3, #10
 800c6c4:	18fb      	adds	r3, r7, r3
 800c6c6:	8812      	ldrh	r2, [r2, #0]
 800c6c8:	881b      	ldrh	r3, [r3, #0]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d3e2      	bcc.n	800c694 <VL53L1_i2c_encode_uint32_t+0x2a>
	}
}
 800c6ce:	46c0      	nop			; (mov r8, r8)
 800c6d0:	46c0      	nop			; (mov r8, r8)
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	b006      	add	sp, #24
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	0002      	movs	r2, r0
 800c6e0:	6039      	str	r1, [r7, #0]
 800c6e2:	1dbb      	adds	r3, r7, #6
 800c6e4:	801a      	strh	r2, [r3, #0]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800c6ea:	e007      	b.n	800c6fc <VL53L1_i2c_decode_uint32_t+0x24>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	021a      	lsls	r2, r3, #8
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	1c59      	adds	r1, r3, #1
 800c6f4:	6039      	str	r1, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800c6fc:	1dbb      	adds	r3, r7, #6
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	1dba      	adds	r2, r7, #6
 800c702:	1e59      	subs	r1, r3, #1
 800c704:	8011      	strh	r1, [r2, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1f0      	bne.n	800c6ec <VL53L1_i2c_decode_uint32_t+0x14>
	}

	return value;
 800c70a:	68fb      	ldr	r3, [r7, #12]
}
 800c70c:	0018      	movs	r0, r3
 800c70e:	46bd      	mov	sp, r7
 800c710:	b004      	add	sp, #16
 800c712:	bd80      	pop	{r7, pc}

0800c714 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	0002      	movs	r2, r0
 800c71c:	6039      	str	r1, [r7, #0]
 800c71e:	1dbb      	adds	r3, r7, #6
 800c720:	801a      	strh	r2, [r3, #0]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800c722:	2300      	movs	r3, #0
 800c724:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	b25b      	sxtb	r3, r3
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	da0b      	bge.n	800c748 <VL53L1_i2c_decode_int32_t+0x34>
		value = 0xFFFFFFFF;
 800c730:	2301      	movs	r3, #1
 800c732:	425b      	negs	r3, r3
 800c734:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800c736:	e007      	b.n	800c748 <VL53L1_i2c_decode_int32_t+0x34>
		value = (value << 8) | (int32_t)*pbuffer++;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	021a      	lsls	r2, r3, #8
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	1c59      	adds	r1, r3, #1
 800c740:	6039      	str	r1, [r7, #0]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	4313      	orrs	r3, r2
 800c746:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800c748:	1dbb      	adds	r3, r7, #6
 800c74a:	881b      	ldrh	r3, [r3, #0]
 800c74c:	1dba      	adds	r2, r7, #6
 800c74e:	1e59      	subs	r1, r3, #1
 800c750:	8011      	strh	r1, [r2, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1f0      	bne.n	800c738 <VL53L1_i2c_decode_int32_t+0x24>
	}

	return value;
 800c756:	68fb      	ldr	r3, [r7, #12]
}
 800c758:	0018      	movs	r0, r3
 800c75a:	46bd      	mov	sp, r7
 800c75c:	b004      	add	sp, #16
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800c760:	b5b0      	push	{r4, r5, r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	0002      	movs	r2, r0
 800c768:	1dbb      	adds	r3, r7, #6
 800c76a:	801a      	strh	r2, [r3, #0]
 800c76c:	1d7b      	adds	r3, r7, #5
 800c76e:	1c0a      	adds	r2, r1, #0
 800c770:	701a      	strb	r2, [r3, #0]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800c772:	2300      	movs	r3, #0
 800c774:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800c776:	2513      	movs	r5, #19
 800c778:	197b      	adds	r3, r7, r5
 800c77a:	2200      	movs	r2, #0
 800c77c:	701a      	strb	r2, [r3, #0]
	uint32_t  macro_period_us      = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800c782:	1dbb      	adds	r3, r7, #6
 800c784:	881b      	ldrh	r3, [r3, #0]
 800c786:	0018      	movs	r0, r3
 800c788:	f000 fc18 	bl	800cfbc <VL53L1_calc_pll_period_us>
 800c78c:	0003      	movs	r3, r0
 800c78e:	617b      	str	r3, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800c790:	197c      	adds	r4, r7, r5
 800c792:	1d7b      	adds	r3, r7, #5
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	0018      	movs	r0, r3
 800c798:	f000 fc26 	bl	800cfe8 <VL53L1_decode_vcsel_period>
 800c79c:	0003      	movs	r3, r0
 800c79e:	7023      	strb	r3, [r4, #0]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800c7a0:	697a      	ldr	r2, [r7, #20]
 800c7a2:	0013      	movs	r3, r2
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	189b      	adds	r3, r3, r2
 800c7a8:	021b      	lsls	r3, r3, #8
 800c7aa:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	099b      	lsrs	r3, r3, #6
 800c7b0:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800c7b2:	197b      	adds	r3, r7, r5
 800c7b4:	781a      	ldrb	r2, [r3, #0]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	4353      	muls	r3, r2
 800c7ba:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	099b      	lsrs	r3, r3, #6
 800c7c0:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
}
 800c7c4:	0018      	movs	r0, r3
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	b006      	add	sp, #24
 800c7ca:	bdb0      	pop	{r4, r5, r7, pc}

0800c7cc <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800c7cc:	b5b0      	push	{r4, r5, r7, lr}
 800c7ce:	b088      	sub	sp, #32
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	000c      	movs	r4, r1
 800c7d6:	0010      	movs	r0, r2
 800c7d8:	0019      	movs	r1, r3
 800c7da:	250a      	movs	r5, #10
 800c7dc:	197b      	adds	r3, r7, r5
 800c7de:	1c22      	adds	r2, r4, #0
 800c7e0:	801a      	strh	r2, [r3, #0]
 800c7e2:	2308      	movs	r3, #8
 800c7e4:	18fb      	adds	r3, r7, r3
 800c7e6:	1c02      	adds	r2, r0, #0
 800c7e8:	801a      	strh	r2, [r3, #0]
 800c7ea:	1dfb      	adds	r3, r7, #7
 800c7ec:	1c0a      	adds	r2, r1, #0
 800c7ee:	701a      	strb	r2, [r3, #0]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800c7f4:	231e      	movs	r3, #30
 800c7f6:	18fb      	adds	r3, r7, r3
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	801a      	strh	r2, [r3, #0]
	int32_t    central_rate_int         = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800c800:	241c      	movs	r4, #28
 800c802:	193b      	adds	r3, r7, r4
 800c804:	2200      	movs	r2, #0
 800c806:	801a      	strh	r2, [r3, #0]
	int16_t    y_gradient_int           = 0;
 800c808:	231a      	movs	r3, #26
 800c80a:	18fb      	adds	r3, r7, r3
 800c80c:	2200      	movs	r2, #0
 800c80e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	011b      	lsls	r3, r3, #4
 800c814:	22fa      	movs	r2, #250	; 0xfa
 800c816:	0091      	lsls	r1, r2, #2
 800c818:	0018      	movs	r0, r3
 800c81a:	f7f3 fd1b 	bl	8000254 <__divsi3>
 800c81e:	0003      	movs	r3, r0
 800c820:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800c822:	197b      	adds	r3, r7, r5
 800c824:	2200      	movs	r2, #0
 800c826:	5e9b      	ldrsh	r3, [r3, r2]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	da05      	bge.n	800c838 <VL53L1_calc_range_ignore_threshold+0x6c>
		x_gradient_int = x_gradient * -1;
 800c82c:	197b      	adds	r3, r7, r5
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	425b      	negs	r3, r3
 800c832:	b29a      	uxth	r2, r3
 800c834:	193b      	adds	r3, r7, r4
 800c836:	801a      	strh	r2, [r3, #0]
	}

	if (y_gradient < 0) {
 800c838:	2208      	movs	r2, #8
 800c83a:	18bb      	adds	r3, r7, r2
 800c83c:	2100      	movs	r1, #0
 800c83e:	5e5b      	ldrsh	r3, [r3, r1]
 800c840:	2b00      	cmp	r3, #0
 800c842:	da06      	bge.n	800c852 <VL53L1_calc_range_ignore_threshold+0x86>
		y_gradient_int = y_gradient * -1;
 800c844:	18bb      	adds	r3, r7, r2
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	425b      	negs	r3, r3
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	231a      	movs	r3, #26
 800c84e:	18fb      	adds	r3, r7, r3
 800c850:	801a      	strh	r2, [r3, #0]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800c852:	231c      	movs	r3, #28
 800c854:	18fb      	adds	r3, r7, r3
 800c856:	2200      	movs	r2, #0
 800c858:	5e9a      	ldrsh	r2, [r3, r2]
 800c85a:	231a      	movs	r3, #26
 800c85c:	18fb      	adds	r3, r7, r3
 800c85e:	2100      	movs	r1, #0
 800c860:	5e5b      	ldrsh	r3, [r3, r1]
 800c862:	18d3      	adds	r3, r2, r3
 800c864:	015b      	lsls	r3, r3, #5
 800c866:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	22fa      	movs	r2, #250	; 0xfa
 800c86c:	0091      	lsls	r1, r2, #2
 800c86e:	0018      	movs	r0, r3
 800c870:	f7f3 fcf0 	bl	8000254 <__divsi3>
 800c874:	0003      	movs	r3, r0
 800c876:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800c878:	697a      	ldr	r2, [r7, #20]
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	18d3      	adds	r3, r2, r3
 800c87e:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800c880:	1dfb      	adds	r3, r7, #7
 800c882:	781a      	ldrb	r2, [r3, #0]
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	4353      	muls	r3, r2
 800c888:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	3310      	adds	r3, #16
 800c88e:	2b00      	cmp	r3, #0
 800c890:	da00      	bge.n	800c894 <VL53L1_calc_range_ignore_threshold+0xc8>
 800c892:	331f      	adds	r3, #31
 800c894:	115b      	asrs	r3, r3, #5
 800c896:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800c898:	697a      	ldr	r2, [r7, #20]
 800c89a:	2380      	movs	r3, #128	; 0x80
 800c89c:	025b      	lsls	r3, r3, #9
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	db05      	blt.n	800c8ae <VL53L1_calc_range_ignore_threshold+0xe2>
		range_ignore_thresh_kcps = 0xFFFF;
 800c8a2:	231e      	movs	r3, #30
 800c8a4:	18fb      	adds	r3, r7, r3
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	4252      	negs	r2, r2
 800c8aa:	801a      	strh	r2, [r3, #0]
 800c8ac:	e003      	b.n	800c8b6 <VL53L1_calc_range_ignore_threshold+0xea>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800c8ae:	231e      	movs	r3, #30
 800c8b0:	18fb      	adds	r3, r7, r3
 800c8b2:	697a      	ldr	r2, [r7, #20]
 800c8b4:	801a      	strh	r2, [r3, #0]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800c8b6:	231e      	movs	r3, #30
 800c8b8:	18fb      	adds	r3, r7, r3
 800c8ba:	881b      	ldrh	r3, [r3, #0]
}
 800c8bc:	0018      	movs	r0, r3
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	b008      	add	sp, #32
 800c8c2:	bdb0      	pop	{r4, r5, r7, pc}

0800c8c4 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	031a      	lsls	r2, r3, #12
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	085b      	lsrs	r3, r3, #1
 800c8da:	18d3      	adds	r3, r2, r3
	timeout_mclks   =
 800c8dc:	6839      	ldr	r1, [r7, #0]
 800c8de:	0018      	movs	r0, r3
 800c8e0:	f7f3 fc2e 	bl	8000140 <__udivsi3>
 800c8e4:	0003      	movs	r3, r0
 800c8e6:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
}
 800c8ea:	0018      	movs	r0, r3
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	b004      	add	sp, #16
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c8f2:	b5b0      	push	{r4, r5, r7, lr}
 800c8f4:	b084      	sub	sp, #16
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800c900:	250a      	movs	r5, #10
 800c902:	197b      	adds	r3, r7, r5
 800c904:	2200      	movs	r2, #0
 800c906:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	0011      	movs	r1, r2
 800c90e:	0018      	movs	r0, r3
 800c910:	f7ff ffd8 	bl	800c8c4 <VL53L1_calc_timeout_mclks>
 800c914:	0003      	movs	r3, r0
 800c916:	60fb      	str	r3, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800c918:	197c      	adds	r4, r7, r5
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	0018      	movs	r0, r3
 800c91e:	f000 f85d 	bl	800c9dc <VL53L1_encode_timeout>
 800c922:	0003      	movs	r3, r0
 800c924:	8023      	strh	r3, [r4, #0]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800c926:	197b      	adds	r3, r7, r5
 800c928:	881b      	ldrh	r3, [r3, #0]
}
 800c92a:	0018      	movs	r0, r3
 800c92c:	46bd      	mov	sp, r7
 800c92e:	b004      	add	sp, #16
 800c930:	bdb0      	pop	{r4, r5, r7, pc}

0800c932 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800c932:	b5b0      	push	{r4, r5, r7, lr}
 800c934:	b088      	sub	sp, #32
 800c936:	af00      	add	r7, sp, #0
 800c938:	60f8      	str	r0, [r7, #12]
 800c93a:	60b9      	str	r1, [r7, #8]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	61fb      	str	r3, [r7, #28]
	uint64_t tmp            = 0;
 800c940:	2200      	movs	r2, #0
 800c942:	2300      	movs	r3, #0
 800c944:	613a      	str	r2, [r7, #16]
 800c946:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	001c      	movs	r4, r3
 800c94c:	2300      	movs	r3, #0
 800c94e:	001d      	movs	r5, r3
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	603b      	str	r3, [r7, #0]
 800c954:	2300      	movs	r3, #0
 800c956:	607b      	str	r3, [r7, #4]
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	0020      	movs	r0, r4
 800c95e:	0029      	movs	r1, r5
 800c960:	f7f3 fdc2 	bl	80004e8 <__aeabi_lmul>
 800c964:	0002      	movs	r2, r0
 800c966:	000b      	movs	r3, r1
 800c968:	613a      	str	r2, [r7, #16]
 800c96a:	617b      	str	r3, [r7, #20]
	tmp += 0x00800;
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	2080      	movs	r0, #128	; 0x80
 800c972:	0100      	lsls	r0, r0, #4
 800c974:	2100      	movs	r1, #0
 800c976:	1812      	adds	r2, r2, r0
 800c978:	414b      	adcs	r3, r1
 800c97a:	613a      	str	r2, [r7, #16]
 800c97c:	617b      	str	r3, [r7, #20]
	tmp  = tmp >> 12;
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	051b      	lsls	r3, r3, #20
 800c982:	693a      	ldr	r2, [r7, #16]
 800c984:	0b12      	lsrs	r2, r2, #12
 800c986:	4313      	orrs	r3, r2
 800c988:	613b      	str	r3, [r7, #16]
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	0b1b      	lsrs	r3, r3, #12
 800c98e:	617b      	str	r3, [r7, #20]

	timeout_us = (uint32_t)tmp;
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	61fb      	str	r3, [r7, #28]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c994:	69fb      	ldr	r3, [r7, #28]
}
 800c996:	0018      	movs	r0, r3
 800c998:	46bd      	mov	sp, r7
 800c99a:	b008      	add	sp, #32
 800c99c:	bdb0      	pop	{r4, r5, r7, pc}

0800c99e <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	0002      	movs	r2, r0
 800c9a6:	6039      	str	r1, [r7, #0]
 800c9a8:	1dbb      	adds	r3, r7, #6
 800c9aa:	801a      	strh	r2, [r3, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800c9b4:	1dbb      	adds	r3, r7, #6
 800c9b6:	881b      	ldrh	r3, [r3, #0]
 800c9b8:	0018      	movs	r0, r3
 800c9ba:	f000 f846 	bl	800ca4a <VL53L1_decode_timeout>
 800c9be:	0003      	movs	r3, r0
 800c9c0:	60fb      	str	r3, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	0011      	movs	r1, r2
 800c9c8:	0018      	movs	r0, r3
 800c9ca:	f7ff ffb2 	bl	800c932 <VL53L1_calc_timeout_us>
 800c9ce:	0003      	movs	r3, r0
 800c9d0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c9d2:	68bb      	ldr	r3, [r7, #8]
}
 800c9d4:	0018      	movs	r0, r3
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	b004      	add	sp, #16
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c9e4:	2316      	movs	r3, #22
 800c9e6:	18fb      	adds	r3, r7, r3
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	801a      	strh	r2, [r3, #0]
	uint32_t ls_byte = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c9f0:	230e      	movs	r3, #14
 800c9f2:	18fb      	adds	r3, r7, r3
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	801a      	strh	r2, [r3, #0]

	if (timeout_mclks > 0) {
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d01e      	beq.n	800ca3c <VL53L1_encode_timeout+0x60>
		ls_byte = timeout_mclks - 1;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	3b01      	subs	r3, #1
 800ca02:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ca04:	e008      	b.n	800ca18 <VL53L1_encode_timeout+0x3c>
			ls_byte = ls_byte >> 1;
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	085b      	lsrs	r3, r3, #1
 800ca0a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800ca0c:	210e      	movs	r1, #14
 800ca0e:	187b      	adds	r3, r7, r1
 800ca10:	881a      	ldrh	r2, [r3, #0]
 800ca12:	187b      	adds	r3, r7, r1
 800ca14:	3201      	adds	r2, #1
 800ca16:	801a      	strh	r2, [r3, #0]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	22ff      	movs	r2, #255	; 0xff
 800ca1c:	4393      	bics	r3, r2
 800ca1e:	d1f2      	bne.n	800ca06 <VL53L1_encode_timeout+0x2a>
		}

		encoded_timeout = (ms_byte << 8)
 800ca20:	230e      	movs	r3, #14
 800ca22:	18fb      	adds	r3, r7, r3
 800ca24:	881b      	ldrh	r3, [r3, #0]
 800ca26:	021b      	lsls	r3, r3, #8
 800ca28:	b299      	uxth	r1, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	22ff      	movs	r2, #255	; 0xff
 800ca30:	4013      	ands	r3, r2
 800ca32:	b29a      	uxth	r2, r3
		encoded_timeout = (ms_byte << 8)
 800ca34:	2316      	movs	r3, #22
 800ca36:	18fb      	adds	r3, r7, r3
 800ca38:	188a      	adds	r2, r1, r2
 800ca3a:	801a      	strh	r2, [r3, #0]
	}

	return encoded_timeout;
 800ca3c:	2316      	movs	r3, #22
 800ca3e:	18fb      	adds	r3, r7, r3
 800ca40:	881b      	ldrh	r3, [r3, #0]
}
 800ca42:	0018      	movs	r0, r3
 800ca44:	46bd      	mov	sp, r7
 800ca46:	b006      	add	sp, #24
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b084      	sub	sp, #16
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	0002      	movs	r2, r0
 800ca52:	1dbb      	adds	r3, r7, #6
 800ca54:	801a      	strh	r2, [r3, #0]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800ca56:	2300      	movs	r3, #0
 800ca58:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ca5a:	1dbb      	adds	r3, r7, #6
 800ca5c:	881b      	ldrh	r3, [r3, #0]
 800ca5e:	22ff      	movs	r2, #255	; 0xff
 800ca60:	4013      	ands	r3, r2
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800ca62:	1dba      	adds	r2, r7, #6
 800ca64:	8812      	ldrh	r2, [r2, #0]
 800ca66:	0a12      	lsrs	r2, r2, #8
 800ca68:	b292      	uxth	r2, r2
 800ca6a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800ca70:	68fb      	ldr	r3, [r7, #12]
}
 800ca72:	0018      	movs	r0, r3
 800ca74:	46bd      	mov	sp, r7
 800ca76:	b004      	add	sp, #16
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800ca7a:	b5b0      	push	{r4, r5, r7, lr}
 800ca7c:	b088      	sub	sp, #32
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	60f8      	str	r0, [r7, #12]
 800ca82:	60b9      	str	r1, [r7, #8]
 800ca84:	607a      	str	r2, [r7, #4]
 800ca86:	001a      	movs	r2, r3
 800ca88:	1cbb      	adds	r3, r7, #2
 800ca8a:	801a      	strh	r2, [r3, #0]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ca8c:	211f      	movs	r1, #31
 800ca8e:	187b      	adds	r3, r7, r1
 800ca90:	2200      	movs	r2, #0
 800ca92:	701a      	strb	r2, [r3, #0]

	uint32_t macro_period_us    = 0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800ca9c:	2312      	movs	r3, #18
 800ca9e:	18fb      	adds	r3, r7, r3
 800caa0:	2200      	movs	r2, #0
 800caa2:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800caa4:	1cbb      	adds	r3, r7, #2
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d103      	bne.n	800cab4 <VL53L1_calc_timeout_register_values+0x3a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800caac:	187b      	adds	r3, r7, r1
 800caae:	22f1      	movs	r2, #241	; 0xf1
 800cab0:	701a      	strb	r2, [r3, #0]
 800cab2:	e080      	b.n	800cbb6 <VL53L1_calc_timeout_register_values+0x13c>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800cab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab6:	799a      	ldrb	r2, [r3, #6]
 800cab8:	1cbb      	adds	r3, r7, #2
 800caba:	881b      	ldrh	r3, [r3, #0]
 800cabc:	0011      	movs	r1, r2
 800cabe:	0018      	movs	r0, r3
 800cac0:	f7ff fe4e 	bl	800c760 <VL53L1_calc_macro_period_us>
 800cac4:	0003      	movs	r3, r0
 800cac6:	617b      	str	r3, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800cac8:	697a      	ldr	r2, [r7, #20]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	0011      	movs	r1, r2
 800cace:	0018      	movs	r0, r3
 800cad0:	f7ff fef8 	bl	800c8c4 <VL53L1_calc_timeout_mclks>
 800cad4:	0003      	movs	r3, r0
 800cad6:	61bb      	str	r3, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	2bff      	cmp	r3, #255	; 0xff
 800cadc:	d901      	bls.n	800cae2 <VL53L1_calc_timeout_register_values+0x68>
			timeout_mclks = 0xFF;
 800cade:	23ff      	movs	r3, #255	; 0xff
 800cae0:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800cae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae8:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800caea:	2512      	movs	r5, #18
 800caec:	197c      	adds	r4, r7, r5
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	0011      	movs	r1, r2
 800caf4:	0018      	movs	r0, r3
 800caf6:	f7ff fefc 	bl	800c8f2 <VL53L1_calc_encoded_timeout>
 800cafa:	0003      	movs	r3, r0
 800cafc:	8023      	strh	r3, [r4, #0]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800cafe:	002c      	movs	r4, r5
 800cb00:	193b      	adds	r3, r7, r4
 800cb02:	881b      	ldrh	r3, [r3, #0]
 800cb04:	0a1b      	lsrs	r3, r3, #8
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800cb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0c:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800cb0e:	193b      	adds	r3, r7, r4
 800cb10:	881b      	ldrh	r3, [r3, #0]
 800cb12:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800cb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb16:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800cb18:	0025      	movs	r5, r4
 800cb1a:	193c      	adds	r4, r7, r4
 800cb1c:	697a      	ldr	r2, [r7, #20]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	0011      	movs	r1, r2
 800cb22:	0018      	movs	r0, r3
 800cb24:	f7ff fee5 	bl	800c8f2 <VL53L1_calc_encoded_timeout>
 800cb28:	0003      	movs	r3, r0
 800cb2a:	8023      	strh	r3, [r4, #0]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800cb2c:	002c      	movs	r4, r5
 800cb2e:	193b      	adds	r3, r7, r4
 800cb30:	881b      	ldrh	r3, [r3, #0]
 800cb32:	0a1b      	lsrs	r3, r3, #8
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800cb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800cb3c:	193b      	adds	r3, r7, r4
 800cb3e:	881b      	ldrh	r3, [r3, #0]
 800cb40:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800cb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb44:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800cb46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb48:	7a5a      	ldrb	r2, [r3, #9]
 800cb4a:	1cbb      	adds	r3, r7, #2
 800cb4c:	881b      	ldrh	r3, [r3, #0]
 800cb4e:	0011      	movs	r1, r2
 800cb50:	0018      	movs	r0, r3
 800cb52:	f7ff fe05 	bl	800c760 <VL53L1_calc_macro_period_us>
 800cb56:	0003      	movs	r3, r0
 800cb58:	617b      	str	r3, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800cb5a:	0025      	movs	r5, r4
 800cb5c:	193c      	adds	r4, r7, r4
 800cb5e:	697a      	ldr	r2, [r7, #20]
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	0011      	movs	r1, r2
 800cb64:	0018      	movs	r0, r3
 800cb66:	f7ff fec4 	bl	800c8f2 <VL53L1_calc_encoded_timeout>
 800cb6a:	0003      	movs	r3, r0
 800cb6c:	8023      	strh	r3, [r4, #0]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800cb6e:	002c      	movs	r4, r5
 800cb70:	193b      	adds	r3, r7, r4
 800cb72:	881b      	ldrh	r3, [r3, #0]
 800cb74:	0a1b      	lsrs	r3, r3, #8
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7c:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800cb7e:	193b      	adds	r3, r7, r4
 800cb80:	881b      	ldrh	r3, [r3, #0]
 800cb82:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800cb84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb86:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800cb88:	0025      	movs	r5, r4
 800cb8a:	193c      	adds	r4, r7, r4
 800cb8c:	697a      	ldr	r2, [r7, #20]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	0011      	movs	r1, r2
 800cb92:	0018      	movs	r0, r3
 800cb94:	f7ff fead 	bl	800c8f2 <VL53L1_calc_encoded_timeout>
 800cb98:	0003      	movs	r3, r0
 800cb9a:	8023      	strh	r3, [r4, #0]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800cb9c:	0029      	movs	r1, r5
 800cb9e:	187b      	adds	r3, r7, r1
 800cba0:	881b      	ldrh	r3, [r3, #0]
 800cba2:	0a1b      	lsrs	r3, r3, #8
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800cba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbaa:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800cbac:	187b      	adds	r3, r7, r1
 800cbae:	881b      	ldrh	r3, [r3, #0]
 800cbb0:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800cbb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb4:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800cbb6:	231f      	movs	r3, #31
 800cbb8:	18fb      	adds	r3, r7, r3
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	b25b      	sxtb	r3, r3

}
 800cbbe:	0018      	movs	r0, r3
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	b008      	add	sp, #32
 800cbc4:	bdb0      	pop	{r4, r5, r7, pc}

0800cbc6 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b082      	sub	sp, #8
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	603a      	str	r2, [r7, #0]
 800cbce:	1dfb      	adds	r3, r7, #7
 800cbd0:	1c02      	adds	r2, r0, #0
 800cbd2:	701a      	strb	r2, [r3, #0]
 800cbd4:	1dbb      	adds	r3, r7, #6
 800cbd6:	1c0a      	adds	r2, r1, #0
 800cbd8:	701a      	strb	r2, [r3, #0]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800cbda:	1dfb      	adds	r3, r7, #7
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	2b07      	cmp	r3, #7
 800cbe0:	d90c      	bls.n	800cbfc <VL53L1_encode_row_col+0x36>
		*pspad_number = 128 + (col << 3) + (15-row);
 800cbe2:	1dbb      	adds	r3, r7, #6
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	00db      	lsls	r3, r3, #3
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	1dfb      	adds	r3, r7, #7
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	3b71      	subs	r3, #113	; 0x71
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800cbfa:	e00c      	b.n	800cc16 <VL53L1_encode_row_col+0x50>
		*pspad_number = ((15-col) << 3) + row;
 800cbfc:	1dbb      	adds	r3, r7, #6
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	220f      	movs	r2, #15
 800cc02:	1ad3      	subs	r3, r2, r3
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	1dfb      	adds	r3, r7, #7
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	18d3      	adds	r3, r2, r3
 800cc10:	b2da      	uxtb	r2, r3
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	701a      	strb	r2, [r3, #0]
}
 800cc16:	46c0      	nop			; (mov r8, r8)
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	b002      	add	sp, #8
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b084      	sub	sp, #16
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	607a      	str	r2, [r7, #4]
 800cc28:	210f      	movs	r1, #15
 800cc2a:	187b      	adds	r3, r7, r1
 800cc2c:	1c02      	adds	r2, r0, #0
 800cc2e:	701a      	strb	r2, [r3, #0]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800cc30:	187b      	adds	r3, r7, r1
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	091b      	lsrs	r3, r3, #4
 800cc36:	b2da      	uxtb	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800cc3c:	187b      	adds	r3, r7, r1
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	220f      	movs	r2, #15
 800cc42:	4013      	ands	r3, r2
 800cc44:	b2da      	uxtb	r2, r3
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	701a      	strb	r2, [r3, #0]

}
 800cc4a:	46c0      	nop			; (mov r8, r8)
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	b004      	add	sp, #16
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b082      	sub	sp, #8
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	603a      	str	r2, [r7, #0]
 800cc5a:	1dfb      	adds	r3, r7, #7
 800cc5c:	1c02      	adds	r2, r0, #0
 800cc5e:	701a      	strb	r2, [r3, #0]
 800cc60:	1dbb      	adds	r3, r7, #6
 800cc62:	1c0a      	adds	r2, r1, #0
 800cc64:	701a      	strb	r2, [r3, #0]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800cc66:	1dbb      	adds	r3, r7, #6
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	011b      	lsls	r3, r3, #4
 800cc6c:	b2da      	uxtb	r2, r3
 800cc6e:	1dfb      	adds	r3, r7, #7
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	18d3      	adds	r3, r2, r3
 800cc74:	b2da      	uxtb	r2, r3
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	701a      	strb	r2, [r3, #0]

}
 800cc7a:	46c0      	nop			; (mov r8, r8)
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	b002      	add	sp, #8
 800cc80:	bd80      	pop	{r7, pc}
	...

0800cc84 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cc8c:	200f      	movs	r0, #15
 800cc8e:	183b      	adds	r3, r7, r0
 800cc90:	2200      	movs	r2, #0
 800cc92:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800cc98:	68ba      	ldr	r2, [r7, #8]
 800cc9a:	23b9      	movs	r3, #185	; 0xb9
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	2103      	movs	r1, #3
 800cca0:	54d1      	strb	r1, [r2, r3]
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	4a14      	ldr	r2, [pc, #80]	; (800ccf8 <VL53L1_low_power_auto_data_init+0x74>)
 800cca6:	2100      	movs	r1, #0
 800cca8:	5499      	strb	r1, [r3, r2]
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	4a13      	ldr	r2, [pc, #76]	; (800ccfc <VL53L1_low_power_auto_data_init+0x78>)
 800ccae:	2100      	movs	r1, #0
 800ccb0:	5499      	strb	r1, [r3, r2]
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	4a12      	ldr	r2, [pc, #72]	; (800cd00 <VL53L1_low_power_auto_data_init+0x7c>)
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	5499      	strb	r1, [r3, r2]
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	23ba      	movs	r3, #186	; 0xba
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	54d1      	strb	r1, [r2, r3]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	4a0f      	ldr	r2, [pc, #60]	; (800cd04 <VL53L1_low_power_auto_data_init+0x80>)
 800ccc8:	2100      	movs	r1, #0
 800ccca:	5499      	strb	r1, [r3, r2]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	4a0e      	ldr	r2, [pc, #56]	; (800cd08 <VL53L1_low_power_auto_data_init+0x84>)
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	5499      	strb	r1, [r3, r2]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800ccd4:	68ba      	ldr	r2, [r7, #8]
 800ccd6:	23bb      	movs	r3, #187	; 0xbb
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	2100      	movs	r1, #0
 800ccdc:	50d1      	str	r1, [r2, r3]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	23bc      	movs	r3, #188	; 0xbc
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	2100      	movs	r1, #0
 800cce6:	52d1      	strh	r1, [r2, r3]

	LOG_FUNCTION_END(status);

	return status;
 800cce8:	183b      	adds	r3, r7, r0
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	b25b      	sxtb	r3, r3
}
 800ccee:	0018      	movs	r0, r3
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	b004      	add	sp, #16
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	46c0      	nop			; (mov r8, r8)
 800ccf8:	000002e5 	.word	0x000002e5
 800ccfc:	000002e6 	.word	0x000002e6
 800cd00:	000002e7 	.word	0x000002e7
 800cd04:	000002e9 	.word	0x000002e9
 800cd08:	000002ea 	.word	0x000002ea

0800cd0c <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd14:	230f      	movs	r3, #15
 800cd16:	18fb      	adds	r3, r7, r3
 800cd18:	2200      	movs	r2, #0
 800cd1a:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	4a1c      	ldr	r2, [pc, #112]	; (800cd94 <VL53L1_low_power_auto_data_stop_range+0x88>)
 800cd24:	21ff      	movs	r1, #255	; 0xff
 800cd26:	5499      	strb	r1, [r3, r2]

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	4a1b      	ldr	r2, [pc, #108]	; (800cd98 <VL53L1_low_power_auto_data_stop_range+0x8c>)
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	5499      	strb	r1, [r3, r2]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	23bb      	movs	r3, #187	; 0xbb
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	2100      	movs	r1, #0
 800cd38:	50d1      	str	r1, [r2, r3]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800cd3a:	68ba      	ldr	r2, [r7, #8]
 800cd3c:	23bc      	movs	r3, #188	; 0xbc
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	2100      	movs	r1, #0
 800cd42:	52d1      	strh	r1, [r2, r3]

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800cd44:	68ba      	ldr	r2, [r7, #8]
 800cd46:	23ba      	movs	r3, #186	; 0xba
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	5cd3      	ldrb	r3, [r2, r3]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d007      	beq.n	800cd60 <VL53L1_low_power_auto_data_stop_range+0x54>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800cd50:	68ba      	ldr	r2, [r7, #8]
 800cd52:	23ba      	movs	r3, #186	; 0xba
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	5cd1      	ldrb	r1, [r2, r3]
		pdev->stat_nvm.vhv_config__init =
 800cd58:	68ba      	ldr	r2, [r7, #8]
 800cd5a:	2364      	movs	r3, #100	; 0x64
 800cd5c:	33ff      	adds	r3, #255	; 0xff
 800cd5e:	54d1      	strb	r1, [r2, r3]
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	4a0e      	ldr	r2, [pc, #56]	; (800cd9c <VL53L1_low_power_auto_data_stop_range+0x90>)
 800cd64:	5c9b      	ldrb	r3, [r3, r2]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d006      	beq.n	800cd78 <VL53L1_low_power_auto_data_stop_range+0x6c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	4a0b      	ldr	r2, [pc, #44]	; (800cd9c <VL53L1_low_power_auto_data_stop_range+0x90>)
 800cd6e:	5c99      	ldrb	r1, [r3, r2]
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	23b0      	movs	r3, #176	; 0xb0
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	54d1      	strb	r1, [r2, r3]

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 800cd78:	68ba      	ldr	r2, [r7, #8]
 800cd7a:	238e      	movs	r3, #142	; 0x8e
 800cd7c:	33ff      	adds	r3, #255	; 0xff
 800cd7e:	2100      	movs	r1, #0
 800cd80:	54d1      	strb	r1, [r2, r3]

	LOG_FUNCTION_END(status);

	return status;
 800cd82:	230f      	movs	r3, #15
 800cd84:	18fb      	adds	r3, r7, r3
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	b25b      	sxtb	r3, r3
}
 800cd8a:	0018      	movs	r0, r3
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	b004      	add	sp, #16
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	46c0      	nop			; (mov r8, r8)
 800cd94:	000002e6 	.word	0x000002e6
 800cd98:	000002ea 	.word	0x000002ea
 800cd9c:	000002e9 	.word	0x000002e9

0800cda0 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cdac:	2117      	movs	r1, #23
 800cdae:	187b      	adds	r3, r7, r1
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	228b      	movs	r2, #139	; 0x8b
 800cdc4:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	4a05      	ldr	r2, [pc, #20]	; (800cde0 <VL53L1_config_low_power_auto_mode+0x40>)
 800cdca:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2202      	movs	r2, #2
 800cdd0:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 800cdd2:	187b      	adds	r3, r7, r1
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	b25b      	sxtb	r3, r3
}
 800cdd8:	0018      	movs	r0, r3
 800cdda:	46bd      	mov	sp, r7
 800cddc:	b006      	add	sp, #24
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	ffffc800 	.word	0xffffc800

0800cde4 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cdf0:	200b      	movs	r0, #11
 800cdf2:	183b      	adds	r3, r7, r0
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	2364      	movs	r3, #100	; 0x64
 800cdfc:	33ff      	adds	r3, #255	; 0xff
 800cdfe:	5cd1      	ldrb	r1, [r2, r3]
	pdev->low_power_auto_data.saved_vhv_init =
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	23ba      	movs	r3, #186	; 0xba
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	54d1      	strb	r1, [r2, r3]
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	23b0      	movs	r3, #176	; 0xb0
 800ce0c:	005b      	lsls	r3, r3, #1
 800ce0e:	5cd1      	ldrb	r1, [r2, r3]
	pdev->low_power_auto_data.saved_vhv_timeout =
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	4a1c      	ldr	r2, [pc, #112]	; (800ce84 <VL53L1_low_power_auto_setup_manual_calibration+0xa0>)
 800ce14:	5499      	strb	r1, [r3, r2]

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	2364      	movs	r3, #100	; 0x64
 800ce1a:	33ff      	adds	r3, #255	; 0xff
 800ce1c:	5cd3      	ldrb	r3, [r2, r3]
 800ce1e:	227f      	movs	r2, #127	; 0x7f
 800ce20:	4013      	ands	r3, r2
 800ce22:	b2d9      	uxtb	r1, r3
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	2364      	movs	r3, #100	; 0x64
 800ce28:	33ff      	adds	r3, #255	; 0xff
 800ce2a:	54d1      	strb	r1, [r2, r3]
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	23b0      	movs	r3, #176	; 0xb0
 800ce30:	005b      	lsls	r3, r3, #1
 800ce32:	5cd3      	ldrb	r3, [r2, r3]
 800ce34:	2203      	movs	r2, #3
 800ce36:	4013      	ands	r3, r2
 800ce38:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800ce3a:	68f9      	ldr	r1, [r7, #12]
 800ce3c:	23b9      	movs	r3, #185	; 0xb9
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	5ccb      	ldrb	r3, [r1, r3]
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800ce46:	18d3      	adds	r3, r2, r3
 800ce48:	b2d9      	uxtb	r1, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	23b0      	movs	r3, #176	; 0xb0
 800ce4e:	005b      	lsls	r3, r3, #1
 800ce50:	54d1      	strb	r1, [r2, r3]
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	238e      	movs	r3, #142	; 0x8e
 800ce56:	33ff      	adds	r3, #255	; 0xff
 800ce58:	2101      	movs	r1, #1
 800ce5a:	54d1      	strb	r1, [r2, r3]
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	4a0a      	ldr	r2, [pc, #40]	; (800ce88 <VL53L1_low_power_auto_setup_manual_calibration+0xa4>)
 800ce60:	5c99      	ldrb	r1, [r3, r2]
	pdev->low_power_auto_data.first_run_phasecal_result =
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	4a09      	ldr	r2, [pc, #36]	; (800ce8c <VL53L1_low_power_auto_setup_manual_calibration+0xa8>)
 800ce66:	5499      	strb	r1, [r3, r2]
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	4a08      	ldr	r2, [pc, #32]	; (800ce8c <VL53L1_low_power_auto_setup_manual_calibration+0xa8>)
 800ce6c:	5c99      	ldrb	r1, [r3, r2]
	pdev->gen_cfg.cal_config__vcsel_start =
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	2388      	movs	r3, #136	; 0x88
 800ce72:	33ff      	adds	r3, #255	; 0xff
 800ce74:	54d1      	strb	r1, [r2, r3]

	LOG_FUNCTION_END(status);

	return status;
 800ce76:	183b      	adds	r3, r7, r0
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	b25b      	sxtb	r3, r3
}
 800ce7c:	0018      	movs	r0, r3
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	b004      	add	sp, #16
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	000002e9 	.word	0x000002e9
 800ce88:	000002ae 	.word	0x000002ae
 800ce8c:	000002ea 	.word	0x000002ea

0800ce90 <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ce9c:	2317      	movs	r3, #23
 800ce9e:	18fb      	adds	r3, r7, r3
 800cea0:	2200      	movs	r2, #0
 800cea2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	23ef      	movs	r3, #239	; 0xef
 800cea8:	005b      	lsls	r3, r3, #1
 800ceaa:	5ad3      	ldrh	r3, [r2, r3]
 800ceac:	0019      	movs	r1, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	23eb      	movs	r3, #235	; 0xeb
 800ceb2:	005b      	lsls	r3, r3, #1
 800ceb4:	5ad3      	ldrh	r3, [r2, r3]
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800ceb6:	18cb      	adds	r3, r1, r3
 800ceb8:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 800ceba:	693a      	ldr	r2, [r7, #16]
 800cebc:	2380      	movs	r3, #128	; 0x80
 800cebe:	025b      	lsls	r3, r3, #9
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d301      	bcc.n	800cec8 <VL53L1_low_power_auto_update_DSS+0x38>
		utemp32a = 0xFFFF;
 800cec4:	4b3b      	ldr	r3, [pc, #236]	; (800cfb4 <VL53L1_low_power_auto_update_DSS+0x124>)
 800cec6:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	041b      	lsls	r3, r3, #16
 800cecc:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	23e9      	movs	r3, #233	; 0xe9
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	5ad3      	ldrh	r3, [r2, r3]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d104      	bne.n	800cee4 <VL53L1_low_power_auto_update_DSS+0x54>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800ceda:	2317      	movs	r3, #23
 800cedc:	18fb      	adds	r3, r7, r3
 800cede:	22f1      	movs	r2, #241	; 0xf1
 800cee0:	701a      	strb	r2, [r3, #0]
 800cee2:	e043      	b.n	800cf6c <VL53L1_low_power_auto_update_DSS+0xdc>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	23e9      	movs	r3, #233	; 0xe9
 800cee8:	005b      	lsls	r3, r3, #1
 800ceea:	5ad3      	ldrh	r3, [r2, r3]
		utemp32a = utemp32a /
 800ceec:	0019      	movs	r1, r3
 800ceee:	6938      	ldr	r0, [r7, #16]
 800cef0:	f7f3 f926 	bl	8000140 <__udivsi3>
 800cef4:	0003      	movs	r3, r0
 800cef6:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	23bb      	movs	r3, #187	; 0xbb
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	6939      	ldr	r1, [r7, #16]
 800cf00:	50d1      	str	r1, [r2, r3]
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	23b2      	movs	r3, #178	; 0xb2
 800cf06:	005b      	lsls	r3, r3, #1
 800cf08:	5ad3      	ldrh	r3, [r2, r3]
 800cf0a:	041b      	lsls	r3, r3, #16
 800cf0c:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 800cf0e:	68fa      	ldr	r2, [r7, #12]
 800cf10:	23bb      	movs	r3, #187	; 0xbb
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	58d3      	ldr	r3, [r2, r3]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d104      	bne.n	800cf24 <VL53L1_low_power_auto_update_DSS+0x94>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800cf1a:	2317      	movs	r3, #23
 800cf1c:	18fb      	adds	r3, r7, r3
 800cf1e:	22f1      	movs	r2, #241	; 0xf1
 800cf20:	701a      	strb	r2, [r3, #0]
 800cf22:	e023      	b.n	800cf6c <VL53L1_low_power_auto_update_DSS+0xdc>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	23bb      	movs	r3, #187	; 0xbb
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	58d3      	ldr	r3, [r2, r3]
			utemp32a = utemp32a /
 800cf2c:	0019      	movs	r1, r3
 800cf2e:	6938      	ldr	r0, [r7, #16]
 800cf30:	f7f3 f906 	bl	8000140 <__udivsi3>
 800cf34:	0003      	movs	r3, r0
 800cf36:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 800cf38:	693a      	ldr	r2, [r7, #16]
 800cf3a:	2380      	movs	r3, #128	; 0x80
 800cf3c:	025b      	lsls	r3, r3, #9
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d301      	bcc.n	800cf46 <VL53L1_low_power_auto_update_DSS+0xb6>
				utemp32a = 0xFFFF;
 800cf42:	4b1c      	ldr	r3, [pc, #112]	; (800cfb4 <VL53L1_low_power_auto_update_DSS+0x124>)
 800cf44:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	b299      	uxth	r1, r3
			pdev->low_power_auto_data.dss__required_spads =
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	23bc      	movs	r3, #188	; 0xbc
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	52d1      	strh	r1, [r2, r3]

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	23bc      	movs	r3, #188	; 0xbc
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	5ad1      	ldrh	r1, [r2, r3]
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	23ca      	movs	r3, #202	; 0xca
 800cf5e:	005b      	lsls	r3, r3, #1
 800cf60:	52d1      	strh	r1, [r2, r3]
			pdev->gen_cfg.dss_config__roi_mode_control =
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	23c7      	movs	r3, #199	; 0xc7
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	2102      	movs	r1, #2
 800cf6a:	54d1      	strb	r1, [r2, r3]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 800cf6c:	2017      	movs	r0, #23
 800cf6e:	183b      	adds	r3, r7, r0
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	b25b      	sxtb	r3, r3
 800cf74:	330f      	adds	r3, #15
 800cf76:	d114      	bne.n	800cfa2 <VL53L1_low_power_auto_update_DSS+0x112>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	23bc      	movs	r3, #188	; 0xbc
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	490e      	ldr	r1, [pc, #56]	; (800cfb8 <VL53L1_low_power_auto_update_DSS+0x128>)
 800cf80:	52d1      	strh	r1, [r2, r3]

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	23bc      	movs	r3, #188	; 0xbc
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	5ad1      	ldrh	r1, [r2, r3]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	23ca      	movs	r3, #202	; 0xca
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	52d1      	strh	r1, [r2, r3]
		pdev->gen_cfg.dss_config__roi_mode_control =
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	23c7      	movs	r3, #199	; 0xc7
 800cf96:	005b      	lsls	r3, r3, #1
 800cf98:	2102      	movs	r1, #2
 800cf9a:	54d1      	strb	r1, [r2, r3]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 800cf9c:	183b      	adds	r3, r7, r0
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800cfa2:	2317      	movs	r3, #23
 800cfa4:	18fb      	adds	r3, r7, r3
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	b25b      	sxtb	r3, r3
}
 800cfaa:	0018      	movs	r0, r3
 800cfac:	46bd      	mov	sp, r7
 800cfae:	b006      	add	sp, #24
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	46c0      	nop			; (mov r8, r8)
 800cfb4:	0000ffff 	.word	0x0000ffff
 800cfb8:	ffff8000 	.word	0xffff8000

0800cfbc <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	0002      	movs	r2, r0
 800cfc4:	1dbb      	adds	r3, r7, #6
 800cfc6:	801a      	strh	r2, [r3, #0]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800cfcc:	1dbb      	adds	r3, r7, #6
 800cfce:	881b      	ldrh	r3, [r3, #0]
 800cfd0:	0019      	movs	r1, r3
 800cfd2:	2380      	movs	r3, #128	; 0x80
 800cfd4:	05d8      	lsls	r0, r3, #23
 800cfd6:	f7f3 f93d 	bl	8000254 <__divsi3>
 800cfda:	0003      	movs	r3, r0
 800cfdc:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800cfde:	68fb      	ldr	r3, [r7, #12]
}
 800cfe0:	0018      	movs	r0, r3
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	b004      	add	sp, #16
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	0002      	movs	r2, r0
 800cff0:	1dfb      	adds	r3, r7, #7
 800cff2:	701a      	strb	r2, [r3, #0]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800cff4:	210f      	movs	r1, #15
 800cff6:	187b      	adds	r3, r7, r1
 800cff8:	2200      	movs	r2, #0
 800cffa:	701a      	strb	r2, [r3, #0]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800cffc:	1dfb      	adds	r3, r7, #7
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	3301      	adds	r3, #1
 800d002:	b2db      	uxtb	r3, r3
 800d004:	187a      	adds	r2, r7, r1
 800d006:	18db      	adds	r3, r3, r3
 800d008:	7013      	strb	r3, [r2, #0]

	return vcsel_period_pclks;
 800d00a:	187b      	adds	r3, r7, r1
 800d00c:	781b      	ldrb	r3, [r3, #0]
}
 800d00e:	0018      	movs	r0, r3
 800d010:	46bd      	mov	sp, r7
 800d012:	b004      	add	sp, #16
 800d014:	bd80      	pop	{r7, pc}

0800d016 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b084      	sub	sp, #16
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	607a      	str	r2, [r7, #4]
 800d020:	210f      	movs	r1, #15
 800d022:	187b      	adds	r3, r7, r1
 800d024:	1c02      	adds	r2, r0, #0
 800d026:	701a      	strb	r2, [r3, #0]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800d028:	187b      	adds	r3, r7, r1
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	b25b      	sxtb	r3, r3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	da12      	bge.n	800d058 <VL53L1_decode_row_col+0x42>
		*prow = 8 + ((255-spad_number) & 0x07);
 800d032:	187b      	adds	r3, r7, r1
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	43db      	mvns	r3, r3
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	2207      	movs	r2, #7
 800d03c:	4013      	ands	r3, r2
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	3308      	adds	r3, #8
 800d042:	b2da      	uxtb	r2, r3
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800d048:	187b      	adds	r3, r7, r1
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	3b80      	subs	r3, #128	; 0x80
 800d04e:	10db      	asrs	r3, r3, #3
 800d050:	b2da      	uxtb	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800d056:	e00f      	b.n	800d078 <VL53L1_decode_row_col+0x62>
		*prow = spad_number & 0x07;
 800d058:	210f      	movs	r1, #15
 800d05a:	187b      	adds	r3, r7, r1
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	2207      	movs	r2, #7
 800d060:	4013      	ands	r3, r2
 800d062:	b2da      	uxtb	r2, r3
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800d068:	187b      	adds	r3, r7, r1
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	227f      	movs	r2, #127	; 0x7f
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	10db      	asrs	r3, r3, #3
 800d072:	b2da      	uxtb	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	701a      	strb	r2, [r3, #0]
}
 800d078:	46c0      	nop			; (mov r8, r8)
 800d07a:	46bd      	mov	sp, r7
 800d07c:	b004      	add	sp, #16
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	607a      	str	r2, [r7, #4]
 800d08a:	200a      	movs	r0, #10
 800d08c:	183b      	adds	r3, r7, r0
 800d08e:	1c0a      	adds	r2, r1, #0
 800d090:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d092:	2317      	movs	r3, #23
 800d094:	18fb      	adds	r3, r7, r3
 800d096:	2200      	movs	r2, #0
 800d098:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800d09a:	183b      	adds	r3, r7, r0
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	2b0a      	cmp	r3, #10
 800d0a0:	d802      	bhi.n	800d0a8 <VL53L1_i2c_encode_static_nvm_managed+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d0a2:	230a      	movs	r3, #10
 800d0a4:	425b      	negs	r3, r3
 800d0a6:	e049      	b.n	800d13c <VL53L1_i2c_encode_static_nvm_managed+0xbc>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	227f      	movs	r2, #127	; 0x7f
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800d0be:	210f      	movs	r1, #15
 800d0c0:	400a      	ands	r2, r1
 800d0c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800d0c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800d0ce:	217f      	movs	r1, #127	; 0x7f
 800d0d0:	400a      	ands	r2, r1
 800d0d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800d0d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800d0de:	2103      	movs	r1, #3
 800d0e0:	400a      	ands	r2, r1
 800d0e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800d0e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800d0ee:	217f      	movs	r1, #127	; 0x7f
 800d0f0:	400a      	ands	r2, r1
 800d0f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800d0f4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	88d8      	ldrh	r0, [r3, #6]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3305      	adds	r3, #5
 800d0fe:	001a      	movs	r2, r3
 800d100:	2102      	movs	r1, #2
 800d102:	f7ff f9db 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800d10a:	68fa      	ldr	r2, [r7, #12]
 800d10c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800d10e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800d114:	68fa      	ldr	r2, [r7, #12]
 800d116:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800d118:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800d122:	213f      	movs	r1, #63	; 0x3f
 800d124:	400a      	ands	r2, r1
 800d126:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d128:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800d132:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d134:	2317      	movs	r3, #23
 800d136:	18fb      	adds	r3, r7, r3
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	b25b      	sxtb	r3, r3
}
 800d13c:	0018      	movs	r0, r3
 800d13e:	46bd      	mov	sp, r7
 800d140:	b006      	add	sp, #24
 800d142:	bd80      	pop	{r7, pc}

0800d144 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b086      	sub	sp, #24
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60b9      	str	r1, [r7, #8]
 800d14c:	607a      	str	r2, [r7, #4]
 800d14e:	210e      	movs	r1, #14
 800d150:	187b      	adds	r3, r7, r1
 800d152:	1c02      	adds	r2, r0, #0
 800d154:	801a      	strh	r2, [r3, #0]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d156:	2317      	movs	r3, #23
 800d158:	18fb      	adds	r3, r7, r3
 800d15a:	2200      	movs	r2, #0
 800d15c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800d15e:	187b      	adds	r3, r7, r1
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	2b0a      	cmp	r3, #10
 800d164:	d802      	bhi.n	800d16c <VL53L1_i2c_decode_static_nvm_managed+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d166:	230a      	movs	r3, #10
 800d168:	425b      	negs	r3, r3
 800d16a:	e048      	b.n	800d1fe <VL53L1_i2c_decode_static_nvm_managed+0xba>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	227f      	movs	r2, #127	; 0x7f
 800d172:	4013      	ands	r3, r2
 800d174:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	3301      	adds	r3, #1
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	220f      	movs	r2, #15
 800d182:	4013      	ands	r3, r2
 800d184:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	3302      	adds	r3, #2
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	227f      	movs	r2, #127	; 0x7f
 800d192:	4013      	ands	r3, r2
 800d194:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	3303      	adds	r3, #3
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2203      	movs	r2, #3
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	227f      	movs	r2, #127	; 0x7f
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	3305      	adds	r3, #5
 800d1be:	0019      	movs	r1, r3
 800d1c0:	2002      	movs	r0, #2
 800d1c2:	f7ff f9b9 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800d1c6:	0003      	movs	r3, r0
 800d1c8:	001a      	movs	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	79da      	ldrb	r2, [r3, #7]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	7a1a      	ldrb	r2, [r3, #8]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	3309      	adds	r3, #9
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	223f      	movs	r2, #63	; 0x3f
 800d1e6:	4013      	ands	r3, r2
 800d1e8:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	7a9a      	ldrb	r2, [r3, #10]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800d1f6:	2317      	movs	r3, #23
 800d1f8:	18fb      	adds	r3, r7, r3
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	b25b      	sxtb	r3, r3
}
 800d1fe:	0018      	movs	r0, r3
 800d200:	46bd      	mov	sp, r7
 800d202:	b006      	add	sp, #24
 800d204:	bd80      	pop	{r7, pc}

0800d206 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800d206:	b590      	push	{r4, r7, lr}
 800d208:	b087      	sub	sp, #28
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
 800d20e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d210:	2117      	movs	r1, #23
 800d212:	187b      	adds	r3, r7, r1
 800d214:	2200      	movs	r2, #0
 800d216:	701a      	strb	r2, [r3, #0]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800d218:	000a      	movs	r2, r1
 800d21a:	18bb      	adds	r3, r7, r2
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	b25b      	sxtb	r3, r3
 800d220:	2b00      	cmp	r3, #0
 800d222:	d109      	bne.n	800d238 <VL53L1_get_static_nvm_managed+0x32>
		status = VL53L1_ReadMulti(
 800d224:	18bc      	adds	r4, r7, r2
 800d226:	230c      	movs	r3, #12
 800d228:	18fa      	adds	r2, r7, r3
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	230b      	movs	r3, #11
 800d22e:	2101      	movs	r1, #1
 800d230:	f001 f9ac 	bl	800e58c <VL53L1_ReadMulti>
 800d234:	0003      	movs	r3, r0
 800d236:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800d238:	2217      	movs	r2, #23
 800d23a:	18bb      	adds	r3, r7, r2
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	b25b      	sxtb	r3, r3
 800d240:	2b00      	cmp	r3, #0
 800d242:	d109      	bne.n	800d258 <VL53L1_get_static_nvm_managed+0x52>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800d244:	18bc      	adds	r4, r7, r2
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	230c      	movs	r3, #12
 800d24a:	18fb      	adds	r3, r7, r3
 800d24c:	0019      	movs	r1, r3
 800d24e:	200b      	movs	r0, #11
 800d250:	f7ff ff78 	bl	800d144 <VL53L1_i2c_decode_static_nvm_managed>
 800d254:	0003      	movs	r3, r0
 800d256:	7023      	strb	r3, [r4, #0]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800d258:	2317      	movs	r3, #23
 800d25a:	18fb      	adds	r3, r7, r3
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	b25b      	sxtb	r3, r3
}
 800d260:	0018      	movs	r0, r3
 800d262:	46bd      	mov	sp, r7
 800d264:	b007      	add	sp, #28
 800d266:	bd90      	pop	{r4, r7, pc}

0800d268 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b086      	sub	sp, #24
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	607a      	str	r2, [r7, #4]
 800d272:	200a      	movs	r0, #10
 800d274:	183b      	adds	r3, r7, r0
 800d276:	1c0a      	adds	r2, r1, #0
 800d278:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d27a:	2317      	movs	r3, #23
 800d27c:	18fb      	adds	r3, r7, r3
 800d27e:	2200      	movs	r2, #0
 800d280:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800d282:	183b      	adds	r3, r7, r0
 800d284:	881b      	ldrh	r3, [r3, #0]
 800d286:	2b16      	cmp	r3, #22
 800d288:	d802      	bhi.n	800d290 <VL53L1_i2c_encode_customer_nvm_managed+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d28a:	230a      	movs	r3, #10
 800d28c:	425b      	negs	r3, r3
 800d28e:	e078      	b.n	800d382 <VL53L1_i2c_encode_customer_nvm_managed+0x11a>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800d2a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800d2a6:	68fa      	ldr	r2, [r7, #12]
 800d2a8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800d2aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800d2b0:	68fa      	ldr	r2, [r7, #12]
 800d2b2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800d2b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800d2be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800d2c8:	210f      	movs	r1, #15
 800d2ca:	400a      	ands	r2, r1
 800d2cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800d2ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800d2d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800d2e2:	213f      	movs	r1, #63	; 0x3f
 800d2e4:	400a      	ands	r2, r1
 800d2e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800d2e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800d2f2:	2103      	movs	r1, #3
 800d2f4:	400a      	ands	r2, r1
 800d2f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800d2f8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	8958      	ldrh	r0, [r3, #10]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	3309      	adds	r3, #9
 800d302:	001a      	movs	r2, r3
 800d304:	2102      	movs	r1, #2
 800d306:	f7ff f8d9 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	200c      	movs	r0, #12
 800d30e:	5e18      	ldrsh	r0, [r3, r0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	330b      	adds	r3, #11
 800d314:	001a      	movs	r2, r3
 800d316:	2102      	movs	r1, #2
 800d318:	f7ff f936 	bl	800c588 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	200e      	movs	r0, #14
 800d320:	5e18      	ldrsh	r0, [r3, r0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	330d      	adds	r3, #13
 800d326:	001a      	movs	r2, r3
 800d328:	2102      	movs	r1, #2
 800d32a:	f7ff f92d 	bl	800c588 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	8a18      	ldrh	r0, [r3, #16]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	330f      	adds	r3, #15
 800d336:	001a      	movs	r2, r3
 800d338:	2102      	movs	r1, #2
 800d33a:	f7ff f8bf 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2212      	movs	r2, #18
 800d342:	5e9b      	ldrsh	r3, [r3, r2]
	VL53L1_i2c_encode_int16_t(
 800d344:	04db      	lsls	r3, r3, #19
 800d346:	0cdb      	lsrs	r3, r3, #19
 800d348:	b218      	sxth	r0, r3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	3311      	adds	r3, #17
 800d34e:	001a      	movs	r2, r3
 800d350:	2102      	movs	r1, #2
 800d352:	f7ff f919 	bl	800c588 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2014      	movs	r0, #20
 800d35a:	5e18      	ldrsh	r0, [r3, r0]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	3313      	adds	r3, #19
 800d360:	001a      	movs	r2, r3
 800d362:	2102      	movs	r1, #2
 800d364:	f7ff f910 	bl	800c588 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2016      	movs	r0, #22
 800d36c:	5e18      	ldrsh	r0, [r3, r0]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	3315      	adds	r3, #21
 800d372:	001a      	movs	r2, r3
 800d374:	2102      	movs	r1, #2
 800d376:	f7ff f907 	bl	800c588 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800d37a:	2317      	movs	r3, #23
 800d37c:	18fb      	adds	r3, r7, r3
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	b25b      	sxtb	r3, r3
}
 800d382:	0018      	movs	r0, r3
 800d384:	46bd      	mov	sp, r7
 800d386:	b006      	add	sp, #24
 800d388:	bd80      	pop	{r7, pc}

0800d38a <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b086      	sub	sp, #24
 800d38e:	af00      	add	r7, sp, #0
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
 800d394:	210e      	movs	r1, #14
 800d396:	187b      	adds	r3, r7, r1
 800d398:	1c02      	adds	r2, r0, #0
 800d39a:	801a      	strh	r2, [r3, #0]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d39c:	2317      	movs	r3, #23
 800d39e:	18fb      	adds	r3, r7, r3
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800d3a4:	187b      	adds	r3, r7, r1
 800d3a6:	881b      	ldrh	r3, [r3, #0]
 800d3a8:	2b16      	cmp	r3, #22
 800d3aa:	d802      	bhi.n	800d3b2 <VL53L1_i2c_decode_customer_nvm_managed+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d3ac:	230a      	movs	r3, #10
 800d3ae:	425b      	negs	r3, r3
 800d3b0:	e07b      	b.n	800d4aa <VL53L1_i2c_decode_customer_nvm_managed+0x120>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	785a      	ldrb	r2, [r3, #1]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	789a      	ldrb	r2, [r3, #2]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	78da      	ldrb	r2, [r3, #3]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	791a      	ldrb	r2, [r3, #4]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	3305      	adds	r3, #5
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	220f      	movs	r2, #15
 800d3e2:	4013      	ands	r3, r2
 800d3e4:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	799a      	ldrb	r2, [r3, #6]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	3307      	adds	r3, #7
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	223f      	movs	r2, #63	; 0x3f
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	3308      	adds	r3, #8
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	2203      	movs	r2, #3
 800d40a:	4013      	ands	r3, r2
 800d40c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	3309      	adds	r3, #9
 800d416:	0019      	movs	r1, r3
 800d418:	2002      	movs	r0, #2
 800d41a:	f7ff f88d 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800d41e:	0003      	movs	r3, r0
 800d420:	001a      	movs	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	330b      	adds	r3, #11
 800d42a:	0019      	movs	r1, r3
 800d42c:	2002      	movs	r0, #2
 800d42e:	f7ff f8ea 	bl	800c606 <VL53L1_i2c_decode_int16_t>
 800d432:	0003      	movs	r3, r0
 800d434:	001a      	movs	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	330d      	adds	r3, #13
 800d43e:	0019      	movs	r1, r3
 800d440:	2002      	movs	r0, #2
 800d442:	f7ff f8e0 	bl	800c606 <VL53L1_i2c_decode_int16_t>
 800d446:	0003      	movs	r3, r0
 800d448:	001a      	movs	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	330f      	adds	r3, #15
 800d452:	0019      	movs	r1, r3
 800d454:	2002      	movs	r0, #2
 800d456:	f7ff f86f 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800d45a:	0003      	movs	r3, r0
 800d45c:	001a      	movs	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	3311      	adds	r3, #17
 800d466:	0019      	movs	r1, r3
 800d468:	2002      	movs	r0, #2
 800d46a:	f7ff f8cc 	bl	800c606 <VL53L1_i2c_decode_int16_t>
 800d46e:	0003      	movs	r3, r0
 800d470:	04db      	lsls	r3, r3, #19
 800d472:	0cdb      	lsrs	r3, r3, #19
 800d474:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	3313      	adds	r3, #19
 800d47e:	0019      	movs	r1, r3
 800d480:	2002      	movs	r0, #2
 800d482:	f7ff f8c0 	bl	800c606 <VL53L1_i2c_decode_int16_t>
 800d486:	0003      	movs	r3, r0
 800d488:	001a      	movs	r2, r3
	pdata->mm_config__inner_offset_mm =
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	3315      	adds	r3, #21
 800d492:	0019      	movs	r1, r3
 800d494:	2002      	movs	r0, #2
 800d496:	f7ff f8b6 	bl	800c606 <VL53L1_i2c_decode_int16_t>
 800d49a:	0003      	movs	r3, r0
 800d49c:	001a      	movs	r2, r3
	pdata->mm_config__outer_offset_mm =
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800d4a2:	2317      	movs	r3, #23
 800d4a4:	18fb      	adds	r3, r7, r3
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	b25b      	sxtb	r3, r3
}
 800d4aa:	0018      	movs	r0, r3
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	b006      	add	sp, #24
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800d4b2:	b590      	push	{r4, r7, lr}
 800d4b4:	b089      	sub	sp, #36	; 0x24
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d4bc:	211f      	movs	r1, #31
 800d4be:	187b      	adds	r3, r7, r1
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	701a      	strb	r2, [r3, #0]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800d4c4:	000a      	movs	r2, r1
 800d4c6:	18bb      	adds	r3, r7, r2
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	b25b      	sxtb	r3, r3
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d109      	bne.n	800d4e4 <VL53L1_get_customer_nvm_managed+0x32>
		status = VL53L1_ReadMulti(
 800d4d0:	18bc      	adds	r4, r7, r2
 800d4d2:	2308      	movs	r3, #8
 800d4d4:	18fa      	adds	r2, r7, r3
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	2317      	movs	r3, #23
 800d4da:	210d      	movs	r1, #13
 800d4dc:	f001 f856 	bl	800e58c <VL53L1_ReadMulti>
 800d4e0:	0003      	movs	r3, r0
 800d4e2:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800d4e4:	221f      	movs	r2, #31
 800d4e6:	18bb      	adds	r3, r7, r2
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	b25b      	sxtb	r3, r3
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d109      	bne.n	800d504 <VL53L1_get_customer_nvm_managed+0x52>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800d4f0:	18bc      	adds	r4, r7, r2
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	2308      	movs	r3, #8
 800d4f6:	18fb      	adds	r3, r7, r3
 800d4f8:	0019      	movs	r1, r3
 800d4fa:	2017      	movs	r0, #23
 800d4fc:	f7ff ff45 	bl	800d38a <VL53L1_i2c_decode_customer_nvm_managed>
 800d500:	0003      	movs	r3, r0
 800d502:	7023      	strb	r3, [r4, #0]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800d504:	231f      	movs	r3, #31
 800d506:	18fb      	adds	r3, r7, r3
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	b25b      	sxtb	r3, r3
}
 800d50c:	0018      	movs	r0, r3
 800d50e:	46bd      	mov	sp, r7
 800d510:	b009      	add	sp, #36	; 0x24
 800d512:	bd90      	pop	{r4, r7, pc}

0800d514 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	607a      	str	r2, [r7, #4]
 800d51e:	200a      	movs	r0, #10
 800d520:	183b      	adds	r3, r7, r0
 800d522:	1c0a      	adds	r2, r1, #0
 800d524:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d526:	2317      	movs	r3, #23
 800d528:	18fb      	adds	r3, r7, r3
 800d52a:	2200      	movs	r2, #0
 800d52c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d52e:	183b      	adds	r3, r7, r0
 800d530:	881b      	ldrh	r3, [r3, #0]
 800d532:	2b1f      	cmp	r3, #31
 800d534:	d802      	bhi.n	800d53c <VL53L1_i2c_encode_static_config+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d536:	230a      	movs	r3, #10
 800d538:	425b      	negs	r3, r3
 800d53a:	e0d1      	b.n	800d6e0 <VL53L1_i2c_encode_static_config+0x1cc>

	VL53L1_i2c_encode_uint16_t(
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	2102      	movs	r1, #2
 800d544:	0018      	movs	r0, r3
 800d546:	f7fe ffb9 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800d552:	2101      	movs	r1, #1
 800d554:	400a      	ands	r2, r1
 800d556:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800d558:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800d562:	210f      	movs	r1, #15
 800d564:	400a      	ands	r2, r1
 800d566:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800d568:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800d572:	210f      	movs	r1, #15
 800d574:	400a      	ands	r2, r1
 800d576:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800d578:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800d582:	211f      	movs	r1, #31
 800d584:	400a      	ands	r2, r1
 800d586:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800d588:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800d592:	217f      	movs	r1, #127	; 0x7f
 800d594:	400a      	ands	r2, r1
 800d596:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d598:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800d5a2:	217f      	movs	r1, #127	; 0x7f
 800d5a4:	400a      	ands	r2, r1
 800d5a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800d5a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800d5b2:	2101      	movs	r1, #1
 800d5b4:	400a      	ands	r2, r1
 800d5b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800d5b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800d5c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800d5cc:	2101      	movs	r1, #1
 800d5ce:	400a      	ands	r2, r1
 800d5d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800d5d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800d5dc:	2103      	movs	r1, #3
 800d5de:	400a      	ands	r2, r1
 800d5e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800d5e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800d5ec:	211f      	movs	r1, #31
 800d5ee:	400a      	ands	r2, r1
 800d5f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800d5f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800d5fc:	2103      	movs	r1, #3
 800d5fe:	400a      	ands	r2, r1
 800d600:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800d602:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800d60c:	2103      	movs	r1, #3
 800d60e:	400a      	ands	r2, r1
 800d610:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800d612:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800d61c:	2107      	movs	r1, #7
 800d61e:	400a      	ands	r2, r1
 800d620:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800d622:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800d62c:	211f      	movs	r1, #31
 800d62e:	400a      	ands	r2, r1
 800d630:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800d632:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800d63c:	2101      	movs	r1, #1
 800d63e:	400a      	ands	r2, r1
 800d640:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800d642:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800d64c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800d656:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800d65c:	68fa      	ldr	r2, [r7, #12]
 800d65e:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800d660:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800d66a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800d674:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800d67e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	8b18      	ldrh	r0, [r3, #24]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	3318      	adds	r3, #24
 800d688:	001a      	movs	r2, r3
 800d68a:	2102      	movs	r1, #2
 800d68c:	f7fe ff16 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800d698:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800d6a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800d6ac:	210f      	movs	r1, #15
 800d6ae:	400a      	ands	r2, r1
 800d6b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800d6b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800d6bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800d6c6:	210f      	movs	r1, #15
 800d6c8:	400a      	ands	r2, r1
 800d6ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800d6cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800d6d2:	68fa      	ldr	r2, [r7, #12]
 800d6d4:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800d6d6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d6d8:	2317      	movs	r3, #23
 800d6da:	18fb      	adds	r3, r7, r3
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	b25b      	sxtb	r3, r3
}
 800d6e0:	0018      	movs	r0, r3
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	b006      	add	sp, #24
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	607a      	str	r2, [r7, #4]
 800d6f2:	200a      	movs	r0, #10
 800d6f4:	183b      	adds	r3, r7, r0
 800d6f6:	1c0a      	adds	r2, r1, #0
 800d6f8:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d6fa:	2317      	movs	r3, #23
 800d6fc:	18fb      	adds	r3, r7, r3
 800d6fe:	2200      	movs	r2, #0
 800d700:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d702:	183b      	adds	r3, r7, r0
 800d704:	881b      	ldrh	r3, [r3, #0]
 800d706:	2b15      	cmp	r3, #21
 800d708:	d802      	bhi.n	800d710 <VL53L1_i2c_encode_general_config+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d70a:	230a      	movs	r3, #10
 800d70c:	425b      	negs	r3, r3
 800d70e:	e072      	b.n	800d7f6 <VL53L1_i2c_encode_general_config+0x10e>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800d71c:	68fa      	ldr	r2, [r7, #12]
 800d71e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800d720:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800d72a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800d734:	217f      	movs	r1, #127	; 0x7f
 800d736:	400a      	ands	r2, r1
 800d738:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800d73a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800d740:	051b      	lsls	r3, r3, #20
 800d742:	0d1b      	lsrs	r3, r3, #20
 800d744:	b298      	uxth	r0, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	3304      	adds	r3, #4
 800d74a:	001a      	movs	r2, r3
 800d74c:	2102      	movs	r1, #2
 800d74e:	f7fe feb5 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800d75a:	217f      	movs	r1, #127	; 0x7f
 800d75c:	400a      	ands	r2, r1
 800d75e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d760:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800d76a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800d774:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800d77e:	2101      	movs	r1, #1
 800d780:	400a      	ands	r2, r1
 800d782:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d784:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800d78e:	2107      	movs	r1, #7
 800d790:	400a      	ands	r2, r1
 800d792:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800d794:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	8998      	ldrh	r0, [r3, #12]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	330c      	adds	r3, #12
 800d79e:	001a      	movs	r2, r3
 800d7a0:	2102      	movs	r1, #2
 800d7a2:	f7fe fe8b 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	89d8      	ldrh	r0, [r3, #14]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	330e      	adds	r3, #14
 800d7ae:	001a      	movs	r2, r3
 800d7b0:	2102      	movs	r1, #2
 800d7b2:	f7fe fe83 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	8a18      	ldrh	r0, [r3, #16]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	3310      	adds	r3, #16
 800d7be:	001a      	movs	r2, r3
 800d7c0:	2102      	movs	r1, #2
 800d7c2:	f7fe fe7b 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800d7ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800d7d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800d7de:	68fa      	ldr	r2, [r7, #12]
 800d7e0:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800d7e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800d7ec:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d7ee:	2317      	movs	r3, #23
 800d7f0:	18fb      	adds	r3, r7, r3
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	b25b      	sxtb	r3, r3
}
 800d7f6:	0018      	movs	r0, r3
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	b006      	add	sp, #24
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b086      	sub	sp, #24
 800d802:	af00      	add	r7, sp, #0
 800d804:	60f8      	str	r0, [r7, #12]
 800d806:	607a      	str	r2, [r7, #4]
 800d808:	200a      	movs	r0, #10
 800d80a:	183b      	adds	r3, r7, r0
 800d80c:	1c0a      	adds	r2, r1, #0
 800d80e:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d810:	2317      	movs	r3, #23
 800d812:	18fb      	adds	r3, r7, r3
 800d814:	2200      	movs	r2, #0
 800d816:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d818:	183b      	adds	r3, r7, r0
 800d81a:	881b      	ldrh	r3, [r3, #0]
 800d81c:	2b16      	cmp	r3, #22
 800d81e:	d802      	bhi.n	800d826 <VL53L1_i2c_encode_timing_config+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d820:	230a      	movs	r3, #10
 800d822:	425b      	negs	r3, r3
 800d824:	e070      	b.n	800d908 <VL53L1_i2c_encode_timing_config+0x10a>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	220f      	movs	r2, #15
 800d82c:	4013      	ands	r3, r2
 800d82e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800d83c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800d846:	210f      	movs	r1, #15
 800d848:	400a      	ands	r2, r1
 800d84a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800d84c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800d856:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800d860:	210f      	movs	r1, #15
 800d862:	400a      	ands	r2, r1
 800d864:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800d866:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800d870:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800d87a:	213f      	movs	r1, #63	; 0x3f
 800d87c:	400a      	ands	r2, r1
 800d87e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d880:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800d88a:	210f      	movs	r1, #15
 800d88c:	400a      	ands	r2, r1
 800d88e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800d890:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800d89a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800d8a4:	213f      	movs	r1, #63	; 0x3f
 800d8a6:	400a      	ands	r2, r1
 800d8a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d8aa:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	8958      	ldrh	r0, [r3, #10]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	330a      	adds	r3, #10
 800d8b4:	001a      	movs	r2, r3
 800d8b6:	2102      	movs	r1, #2
 800d8b8:	f7fe fe00 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	8998      	ldrh	r0, [r3, #12]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	330c      	adds	r3, #12
 800d8c4:	001a      	movs	r2, r3
 800d8c6:	2102      	movs	r1, #2
 800d8c8:	f7fe fdf8 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800d8d0:	68fa      	ldr	r2, [r7, #12]
 800d8d2:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800d8d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800d8de:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6918      	ldr	r0, [r3, #16]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	3312      	adds	r3, #18
 800d8e8:	001a      	movs	r2, r3
 800d8ea:	2104      	movs	r1, #4
 800d8ec:	f7fe febd 	bl	800c66a <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800d8f8:	2101      	movs	r1, #1
 800d8fa:	400a      	ands	r2, r1
 800d8fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800d8fe:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d900:	2317      	movs	r3, #23
 800d902:	18fb      	adds	r3, r7, r3
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	b25b      	sxtb	r3, r3
}
 800d908:	0018      	movs	r0, r3
 800d90a:	46bd      	mov	sp, r7
 800d90c:	b006      	add	sp, #24
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	607a      	str	r2, [r7, #4]
 800d91a:	200a      	movs	r0, #10
 800d91c:	183b      	adds	r3, r7, r0
 800d91e:	1c0a      	adds	r2, r1, #0
 800d920:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d922:	2317      	movs	r3, #23
 800d924:	18fb      	adds	r3, r7, r3
 800d926:	2200      	movs	r2, #0
 800d928:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d92a:	183b      	adds	r3, r7, r0
 800d92c:	881b      	ldrh	r3, [r3, #0]
 800d92e:	2b11      	cmp	r3, #17
 800d930:	d802      	bhi.n	800d938 <VL53L1_i2c_encode_dynamic_config+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d932:	230a      	movs	r3, #10
 800d934:	425b      	negs	r3, r3
 800d936:	e073      	b.n	800da20 <VL53L1_i2c_encode_dynamic_config+0x110>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	2203      	movs	r2, #3
 800d93e:	4013      	ands	r3, r2
 800d940:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	8858      	ldrh	r0, [r3, #2]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	3301      	adds	r3, #1
 800d94e:	001a      	movs	r2, r3
 800d950:	2102      	movs	r1, #2
 800d952:	f7fe fdb3 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	8898      	ldrh	r0, [r3, #4]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	3303      	adds	r3, #3
 800d95e:	001a      	movs	r2, r3
 800d960:	2102      	movs	r1, #2
 800d962:	f7fe fdab 	bl	800c4bc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800d96e:	2101      	movs	r1, #1
 800d970:	400a      	ands	r2, r1
 800d972:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800d974:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800d97e:	2107      	movs	r1, #7
 800d980:	400a      	ands	r2, r1
 800d982:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d984:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800d98a:	68fa      	ldr	r2, [r7, #12]
 800d98c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800d98e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800d998:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800d9a2:	217f      	movs	r1, #127	; 0x7f
 800d9a4:	400a      	ands	r2, r1
 800d9a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d9a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800d9b2:	217f      	movs	r1, #127	; 0x7f
 800d9b4:	400a      	ands	r2, r1
 800d9b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800d9b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800d9c2:	2103      	movs	r1, #3
 800d9c4:	400a      	ands	r2, r1
 800d9c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800d9c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800d9d2:	2103      	movs	r1, #3
 800d9d4:	400a      	ands	r2, r1
 800d9d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800d9d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800d9e2:	210f      	movs	r1, #15
 800d9e4:	400a      	ands	r2, r1
 800d9e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800d9e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800d9f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800d9fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800da02:	68fa      	ldr	r2, [r7, #12]
 800da04:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800da06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800da10:	2103      	movs	r1, #3
 800da12:	400a      	ands	r2, r1
 800da14:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800da16:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800da18:	2317      	movs	r3, #23
 800da1a:	18fb      	adds	r3, r7, r3
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	b25b      	sxtb	r3, r3
}
 800da20:	0018      	movs	r0, r3
 800da22:	46bd      	mov	sp, r7
 800da24:	b006      	add	sp, #24
 800da26:	bd80      	pop	{r7, pc}

0800da28 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b086      	sub	sp, #24
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	607a      	str	r2, [r7, #4]
 800da32:	200a      	movs	r0, #10
 800da34:	183b      	adds	r3, r7, r0
 800da36:	1c0a      	adds	r2, r1, #0
 800da38:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800da3a:	2317      	movs	r3, #23
 800da3c:	18fb      	adds	r3, r7, r3
 800da3e:	2200      	movs	r2, #0
 800da40:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800da42:	183b      	adds	r3, r7, r0
 800da44:	881b      	ldrh	r3, [r3, #0]
 800da46:	2b04      	cmp	r3, #4
 800da48:	d802      	bhi.n	800da50 <VL53L1_i2c_encode_system_control+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800da4a:	230a      	movs	r3, #10
 800da4c:	425b      	negs	r3, r3
 800da4e:	e027      	b.n	800daa0 <VL53L1_i2c_encode_system_control+0x78>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	2201      	movs	r2, #1
 800da56:	4013      	ands	r3, r2
 800da58:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800da66:	2101      	movs	r1, #1
 800da68:	400a      	ands	r2, r1
 800da6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800da6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800da76:	2101      	movs	r1, #1
 800da78:	400a      	ands	r2, r1
 800da7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800da7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800da86:	2103      	movs	r1, #3
 800da88:	400a      	ands	r2, r1
 800da8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800da8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800da92:	68fa      	ldr	r2, [r7, #12]
 800da94:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800da96:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800da98:	2317      	movs	r3, #23
 800da9a:	18fb      	adds	r3, r7, r3
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	b25b      	sxtb	r3, r3
}
 800daa0:	0018      	movs	r0, r3
 800daa2:	46bd      	mov	sp, r7
 800daa4:	b006      	add	sp, #24
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 800daa8:	b590      	push	{r4, r7, lr}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dab2:	210f      	movs	r1, #15
 800dab4:	187b      	adds	r3, r7, r1
 800dab6:	2200      	movs	r2, #0
 800dab8:	701a      	strb	r2, [r3, #0]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800daba:	000a      	movs	r2, r1
 800dabc:	18bb      	adds	r3, r7, r2
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	b25b      	sxtb	r3, r3
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d109      	bne.n	800dada <VL53L1_set_system_control+0x32>
		status = VL53L1_i2c_encode_system_control(
 800dac6:	18bc      	adds	r4, r7, r2
 800dac8:	2308      	movs	r3, #8
 800daca:	18fa      	adds	r2, r7, r3
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	2105      	movs	r1, #5
 800dad0:	0018      	movs	r0, r3
 800dad2:	f7ff ffa9 	bl	800da28 <VL53L1_i2c_encode_system_control>
 800dad6:	0003      	movs	r3, r0
 800dad8:	7023      	strb	r3, [r4, #0]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 800dada:	220f      	movs	r2, #15
 800dadc:	18bb      	adds	r3, r7, r2
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	b25b      	sxtb	r3, r3
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d109      	bne.n	800dafa <VL53L1_set_system_control+0x52>
		status = VL53L1_WriteMulti(
 800dae6:	18bc      	adds	r4, r7, r2
 800dae8:	2308      	movs	r3, #8
 800daea:	18fa      	adds	r2, r7, r3
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	2305      	movs	r3, #5
 800daf0:	2183      	movs	r1, #131	; 0x83
 800daf2:	f000 fd07 	bl	800e504 <VL53L1_WriteMulti>
 800daf6:	0003      	movs	r3, r0
 800daf8:	7023      	strb	r3, [r4, #0]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800dafa:	230f      	movs	r3, #15
 800dafc:	18fb      	adds	r3, r7, r3
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	b25b      	sxtb	r3, r3
}
 800db02:	0018      	movs	r0, r3
 800db04:	46bd      	mov	sp, r7
 800db06:	b005      	add	sp, #20
 800db08:	bd90      	pop	{r4, r7, pc}

0800db0a <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b086      	sub	sp, #24
 800db0e:	af00      	add	r7, sp, #0
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	210e      	movs	r1, #14
 800db16:	187b      	adds	r3, r7, r1
 800db18:	1c02      	adds	r2, r0, #0
 800db1a:	801a      	strh	r2, [r3, #0]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800db1c:	2317      	movs	r3, #23
 800db1e:	18fb      	adds	r3, r7, r3
 800db20:	2200      	movs	r2, #0
 800db22:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800db24:	187b      	adds	r3, r7, r1
 800db26:	881b      	ldrh	r3, [r3, #0]
 800db28:	2b2b      	cmp	r3, #43	; 0x2b
 800db2a:	d802      	bhi.n	800db32 <VL53L1_i2c_decode_system_results+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800db2c:	230a      	movs	r3, #10
 800db2e:	425b      	negs	r3, r3
 800db30:	e0e4      	b.n	800dcfc <VL53L1_i2c_decode_system_results+0x1f2>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	223f      	movs	r2, #63	; 0x3f
 800db38:	4013      	ands	r3, r2
 800db3a:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	785a      	ldrb	r2, [r3, #1]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	3302      	adds	r3, #2
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	220f      	movs	r2, #15
 800db50:	4013      	ands	r3, r2
 800db52:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	78da      	ldrb	r2, [r3, #3]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	3304      	adds	r3, #4
 800db64:	0019      	movs	r1, r3
 800db66:	2002      	movs	r0, #2
 800db68:	f7fe fce6 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800db6c:	0003      	movs	r3, r0
 800db6e:	001a      	movs	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	3306      	adds	r3, #6
 800db78:	0019      	movs	r1, r3
 800db7a:	2002      	movs	r0, #2
 800db7c:	f7fe fcdc 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800db80:	0003      	movs	r3, r0
 800db82:	001a      	movs	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	3308      	adds	r3, #8
 800db8c:	0019      	movs	r1, r3
 800db8e:	2002      	movs	r0, #2
 800db90:	f7fe fcd2 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800db94:	0003      	movs	r3, r0
 800db96:	001a      	movs	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	330a      	adds	r3, #10
 800dba0:	0019      	movs	r1, r3
 800dba2:	2002      	movs	r0, #2
 800dba4:	f7fe fcc8 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dba8:	0003      	movs	r3, r0
 800dbaa:	001a      	movs	r2, r3
	pdata->result__sigma_sd0 =
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	330c      	adds	r3, #12
 800dbb4:	0019      	movs	r1, r3
 800dbb6:	2002      	movs	r0, #2
 800dbb8:	f7fe fcbe 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dbbc:	0003      	movs	r3, r0
 800dbbe:	001a      	movs	r2, r3
	pdata->result__phase_sd0 =
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	330e      	adds	r3, #14
 800dbc8:	0019      	movs	r1, r3
 800dbca:	2002      	movs	r0, #2
 800dbcc:	f7fe fcb4 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dbd0:	0003      	movs	r3, r0
 800dbd2:	001a      	movs	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	3310      	adds	r3, #16
 800dbdc:	0019      	movs	r1, r3
 800dbde:	2002      	movs	r0, #2
 800dbe0:	f7fe fcaa 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dbe4:	0003      	movs	r3, r0
 800dbe6:	001a      	movs	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	3312      	adds	r3, #18
 800dbf0:	0019      	movs	r1, r3
 800dbf2:	2002      	movs	r0, #2
 800dbf4:	f7fe fca0 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dbf8:	0003      	movs	r3, r0
 800dbfa:	001a      	movs	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	3314      	adds	r3, #20
 800dc04:	0019      	movs	r1, r3
 800dc06:	2002      	movs	r0, #2
 800dc08:	f7fe fc96 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dc0c:	0003      	movs	r3, r0
 800dc0e:	001a      	movs	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	3316      	adds	r3, #22
 800dc18:	0019      	movs	r1, r3
 800dc1a:	2002      	movs	r0, #2
 800dc1c:	f7fe fc8c 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dc20:	0003      	movs	r3, r0
 800dc22:	001a      	movs	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	3318      	adds	r3, #24
 800dc2c:	0019      	movs	r1, r3
 800dc2e:	2002      	movs	r0, #2
 800dc30:	f7fe fc82 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dc34:	0003      	movs	r3, r0
 800dc36:	001a      	movs	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	331a      	adds	r3, #26
 800dc40:	0019      	movs	r1, r3
 800dc42:	2002      	movs	r0, #2
 800dc44:	f7fe fc78 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dc48:	0003      	movs	r3, r0
 800dc4a:	001a      	movs	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	331c      	adds	r3, #28
 800dc54:	0019      	movs	r1, r3
 800dc56:	2002      	movs	r0, #2
 800dc58:	f7fe fc6e 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dc5c:	0003      	movs	r3, r0
 800dc5e:	001a      	movs	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	331e      	adds	r3, #30
 800dc68:	0019      	movs	r1, r3
 800dc6a:	2002      	movs	r0, #2
 800dc6c:	f7fe fc64 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dc70:	0003      	movs	r3, r0
 800dc72:	001a      	movs	r2, r3
	pdata->result__sigma_sd1 =
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	3320      	adds	r3, #32
 800dc7c:	0019      	movs	r1, r3
 800dc7e:	2002      	movs	r0, #2
 800dc80:	f7fe fc5a 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dc84:	0003      	movs	r3, r0
 800dc86:	001a      	movs	r2, r3
	pdata->result__phase_sd1 =
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	3322      	adds	r3, #34	; 0x22
 800dc90:	0019      	movs	r1, r3
 800dc92:	2002      	movs	r0, #2
 800dc94:	f7fe fc50 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dc98:	0003      	movs	r3, r0
 800dc9a:	001a      	movs	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	3324      	adds	r3, #36	; 0x24
 800dca4:	0019      	movs	r1, r3
 800dca6:	2002      	movs	r0, #2
 800dca8:	f7fe fc46 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dcac:	0003      	movs	r3, r0
 800dcae:	001a      	movs	r2, r3
	pdata->result__spare_0_sd1 =
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	3326      	adds	r3, #38	; 0x26
 800dcb8:	0019      	movs	r1, r3
 800dcba:	2002      	movs	r0, #2
 800dcbc:	f7fe fc3c 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dcc0:	0003      	movs	r3, r0
 800dcc2:	001a      	movs	r2, r3
	pdata->result__spare_1_sd1 =
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	3328      	adds	r3, #40	; 0x28
 800dccc:	0019      	movs	r1, r3
 800dcce:	2002      	movs	r0, #2
 800dcd0:	f7fe fc32 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800dcd4:	0003      	movs	r3, r0
 800dcd6:	001a      	movs	r2, r3
	pdata->result__spare_2_sd1 =
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	222a      	movs	r2, #42	; 0x2a
 800dce0:	5c99      	ldrb	r1, [r3, r2]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	222a      	movs	r2, #42	; 0x2a
 800dce6:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	222b      	movs	r2, #43	; 0x2b
 800dcec:	5c99      	ldrb	r1, [r3, r2]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	222b      	movs	r2, #43	; 0x2b
 800dcf2:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800dcf4:	2317      	movs	r3, #23
 800dcf6:	18fb      	adds	r3, r7, r3
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	b25b      	sxtb	r3, r3
}
 800dcfc:	0018      	movs	r0, r3
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	b006      	add	sp, #24
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b086      	sub	sp, #24
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60b9      	str	r1, [r7, #8]
 800dd0c:	607a      	str	r2, [r7, #4]
 800dd0e:	210e      	movs	r1, #14
 800dd10:	187b      	adds	r3, r7, r1
 800dd12:	1c02      	adds	r2, r0, #0
 800dd14:	801a      	strh	r2, [r3, #0]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dd16:	2317      	movs	r3, #23
 800dd18:	18fb      	adds	r3, r7, r3
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800dd1e:	187b      	adds	r3, r7, r1
 800dd20:	881b      	ldrh	r3, [r3, #0]
 800dd22:	2b20      	cmp	r3, #32
 800dd24:	d802      	bhi.n	800dd2c <VL53L1_i2c_decode_core_results+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800dd26:	230a      	movs	r3, #10
 800dd28:	425b      	negs	r3, r3
 800dd2a:	e050      	b.n	800ddce <VL53L1_i2c_decode_core_results+0xca>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	0019      	movs	r1, r3
 800dd30:	2004      	movs	r0, #4
 800dd32:	f7fe fcd1 	bl	800c6d8 <VL53L1_i2c_decode_uint32_t>
 800dd36:	0002      	movs	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	3304      	adds	r3, #4
 800dd40:	0019      	movs	r1, r3
 800dd42:	2004      	movs	r0, #4
 800dd44:	f7fe fcc8 	bl	800c6d8 <VL53L1_i2c_decode_uint32_t>
 800dd48:	0002      	movs	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	3308      	adds	r3, #8
 800dd52:	0019      	movs	r1, r3
 800dd54:	2004      	movs	r0, #4
 800dd56:	f7fe fcdd 	bl	800c714 <VL53L1_i2c_decode_int32_t>
 800dd5a:	0002      	movs	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	330c      	adds	r3, #12
 800dd64:	0019      	movs	r1, r3
 800dd66:	2004      	movs	r0, #4
 800dd68:	f7fe fcb6 	bl	800c6d8 <VL53L1_i2c_decode_uint32_t>
 800dd6c:	0002      	movs	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	3310      	adds	r3, #16
 800dd76:	0019      	movs	r1, r3
 800dd78:	2004      	movs	r0, #4
 800dd7a:	f7fe fcad 	bl	800c6d8 <VL53L1_i2c_decode_uint32_t>
 800dd7e:	0002      	movs	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	3314      	adds	r3, #20
 800dd88:	0019      	movs	r1, r3
 800dd8a:	2004      	movs	r0, #4
 800dd8c:	f7fe fca4 	bl	800c6d8 <VL53L1_i2c_decode_uint32_t>
 800dd90:	0002      	movs	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	3318      	adds	r3, #24
 800dd9a:	0019      	movs	r1, r3
 800dd9c:	2004      	movs	r0, #4
 800dd9e:	f7fe fcb9 	bl	800c714 <VL53L1_i2c_decode_int32_t>
 800dda2:	0002      	movs	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	331c      	adds	r3, #28
 800ddac:	0019      	movs	r1, r3
 800ddae:	2004      	movs	r0, #4
 800ddb0:	f7fe fc92 	bl	800c6d8 <VL53L1_i2c_decode_uint32_t>
 800ddb4:	0002      	movs	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	2220      	movs	r2, #32
 800ddbe:	5c99      	ldrb	r1, [r3, r2]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2220      	movs	r2, #32
 800ddc4:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800ddc6:	2317      	movs	r3, #23
 800ddc8:	18fb      	adds	r3, r7, r3
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	b25b      	sxtb	r3, r3
}
 800ddce:	0018      	movs	r0, r3
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	b006      	add	sp, #24
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b086      	sub	sp, #24
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
 800dde0:	210e      	movs	r1, #14
 800dde2:	187b      	adds	r3, r7, r1
 800dde4:	1c02      	adds	r2, r0, #0
 800dde6:	801a      	strh	r2, [r3, #0]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dde8:	2317      	movs	r3, #23
 800ddea:	18fb      	adds	r3, r7, r3
 800ddec:	2200      	movs	r2, #0
 800ddee:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800ddf0:	187b      	adds	r3, r7, r1
 800ddf2:	881b      	ldrh	r3, [r3, #0]
 800ddf4:	2b37      	cmp	r3, #55	; 0x37
 800ddf6:	d802      	bhi.n	800ddfe <VL53L1_i2c_decode_debug_results+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ddf8:	230a      	movs	r3, #10
 800ddfa:	425b      	negs	r3, r3
 800ddfc:	e161      	b.n	800e0c2 <VL53L1_i2c_decode_debug_results+0x2ec>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	0019      	movs	r1, r3
 800de02:	2002      	movs	r0, #2
 800de04:	f7fe fb98 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800de08:	0003      	movs	r3, r0
 800de0a:	001a      	movs	r2, r3
	pdata->phasecal_result__reference_phase =
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	3302      	adds	r3, #2
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	227f      	movs	r2, #127	; 0x7f
 800de18:	4013      	ands	r3, r2
 800de1a:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	3303      	adds	r3, #3
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	223f      	movs	r2, #63	; 0x3f
 800de28:	4013      	ands	r3, r2
 800de2a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	3304      	adds	r3, #4
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	2203      	movs	r2, #3
 800de38:	4013      	ands	r3, r2
 800de3a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	3305      	adds	r3, #5
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	2201      	movs	r2, #1
 800de48:	4013      	ands	r3, r2
 800de4a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	3306      	adds	r3, #6
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	223f      	movs	r2, #63	; 0x3f
 800de58:	4013      	ands	r3, r2
 800de5a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	3307      	adds	r3, #7
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	223f      	movs	r2, #63	; 0x3f
 800de68:	4013      	ands	r3, r2
 800de6a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	3308      	adds	r3, #8
 800de74:	0019      	movs	r1, r3
 800de76:	2002      	movs	r0, #2
 800de78:	f7fe fb5e 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800de7c:	0003      	movs	r3, r0
 800de7e:	059b      	lsls	r3, r3, #22
 800de80:	0d9b      	lsrs	r3, r3, #22
 800de82:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	330a      	adds	r3, #10
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	2203      	movs	r2, #3
 800de90:	4013      	ands	r3, r2
 800de92:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	330b      	adds	r3, #11
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	2203      	movs	r2, #3
 800dea0:	4013      	ands	r3, r2
 800dea2:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	330c      	adds	r3, #12
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	220f      	movs	r2, #15
 800deb0:	4013      	ands	r3, r2
 800deb2:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	330d      	adds	r3, #13
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	2207      	movs	r2, #7
 800dec0:	4013      	ands	r3, r2
 800dec2:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	330e      	adds	r3, #14
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	2201      	movs	r2, #1
 800ded0:	4013      	ands	r3, r2
 800ded2:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	330f      	adds	r3, #15
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	2203      	movs	r2, #3
 800dee0:	4013      	ands	r3, r2
 800dee2:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	7c1a      	ldrb	r2, [r3, #16]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	7c5a      	ldrb	r2, [r3, #17]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	3312      	adds	r3, #18
 800defc:	0019      	movs	r1, r3
 800defe:	2002      	movs	r0, #2
 800df00:	f7fe fb1a 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800df04:	0003      	movs	r3, r0
 800df06:	051b      	lsls	r3, r3, #20
 800df08:	0d1b      	lsrs	r3, r3, #20
 800df0a:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	3316      	adds	r3, #22
 800df14:	0019      	movs	r1, r3
 800df16:	2002      	movs	r0, #2
 800df18:	f7fe fb0e 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800df1c:	0003      	movs	r3, r0
 800df1e:	001a      	movs	r2, r3
	pdata->gph__system__thresh_high =
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	3318      	adds	r3, #24
 800df28:	0019      	movs	r1, r3
 800df2a:	2002      	movs	r0, #2
 800df2c:	f7fe fb04 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800df30:	0003      	movs	r3, r0
 800df32:	001a      	movs	r2, r3
	pdata->gph__system__thresh_low =
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	331a      	adds	r3, #26
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	2201      	movs	r2, #1
 800df40:	4013      	ands	r3, r2
 800df42:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	331b      	adds	r3, #27
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	2207      	movs	r2, #7
 800df50:	4013      	ands	r3, r2
 800df52:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	7f1a      	ldrb	r2, [r3, #28]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	7f5a      	ldrb	r2, [r3, #29]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	331e      	adds	r3, #30
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	227f      	movs	r2, #127	; 0x7f
 800df70:	4013      	ands	r3, r2
 800df72:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	331f      	adds	r3, #31
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	227f      	movs	r2, #127	; 0x7f
 800df80:	4013      	ands	r3, r2
 800df82:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	3320      	adds	r3, #32
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	2203      	movs	r2, #3
 800df90:	4013      	ands	r3, r2
 800df92:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	3321      	adds	r3, #33	; 0x21
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	220f      	movs	r2, #15
 800dfa0:	4013      	ands	r3, r2
 800dfa2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	2222      	movs	r2, #34	; 0x22
 800dfac:	5c99      	ldrb	r1, [r3, r2]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2220      	movs	r2, #32
 800dfb2:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2223      	movs	r2, #35	; 0x23
 800dfb8:	5c99      	ldrb	r1, [r3, r2]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2221      	movs	r2, #33	; 0x21
 800dfbe:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	2224      	movs	r2, #36	; 0x24
 800dfc4:	5c99      	ldrb	r1, [r3, r2]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2222      	movs	r2, #34	; 0x22
 800dfca:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	3325      	adds	r3, #37	; 0x25
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	4013      	ands	r3, r2
 800dfd6:	b2d9      	uxtb	r1, r3
	pdata->gph__gph_id =
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2223      	movs	r2, #35	; 0x23
 800dfdc:	5499      	strb	r1, [r3, r2]
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	3326      	adds	r3, #38	; 0x26
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	2203      	movs	r2, #3
 800dfe6:	4013      	ands	r3, r2
 800dfe8:	b2d9      	uxtb	r1, r3
	pdata->system__interrupt_set =
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2224      	movs	r2, #36	; 0x24
 800dfee:	5499      	strb	r1, [r3, r2]
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	3327      	adds	r3, #39	; 0x27
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	221f      	movs	r2, #31
 800dff8:	4013      	ands	r3, r2
 800dffa:	b2d9      	uxtb	r1, r3
	pdata->interrupt_manager__enables =
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2225      	movs	r2, #37	; 0x25
 800e000:	5499      	strb	r1, [r3, r2]
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	3328      	adds	r3, #40	; 0x28
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	221f      	movs	r2, #31
 800e00a:	4013      	ands	r3, r2
 800e00c:	b2d9      	uxtb	r1, r3
	pdata->interrupt_manager__clear =
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2226      	movs	r2, #38	; 0x26
 800e012:	5499      	strb	r1, [r3, r2]
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	3329      	adds	r3, #41	; 0x29
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	221f      	movs	r2, #31
 800e01c:	4013      	ands	r3, r2
 800e01e:	b2d9      	uxtb	r1, r3
	pdata->interrupt_manager__status =
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2227      	movs	r2, #39	; 0x27
 800e024:	5499      	strb	r1, [r3, r2]
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	332a      	adds	r3, #42	; 0x2a
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2201      	movs	r2, #1
 800e02e:	4013      	ands	r3, r2
 800e030:	b2d9      	uxtb	r1, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2228      	movs	r2, #40	; 0x28
 800e036:	5499      	strb	r1, [r3, r2]
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	332b      	adds	r3, #43	; 0x2b
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	2201      	movs	r2, #1
 800e040:	4013      	ands	r3, r2
 800e042:	b2d9      	uxtb	r1, r3
	pdata->power_management__go1_reset_status =
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2229      	movs	r2, #41	; 0x29
 800e048:	5499      	strb	r1, [r3, r2]
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	332c      	adds	r3, #44	; 0x2c
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	2203      	movs	r2, #3
 800e052:	4013      	ands	r3, r2
 800e054:	b2d9      	uxtb	r1, r3
	pdata->pad_startup_mode__value_ro =
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	222a      	movs	r2, #42	; 0x2a
 800e05a:	5499      	strb	r1, [r3, r2]
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	332d      	adds	r3, #45	; 0x2d
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	223f      	movs	r2, #63	; 0x3f
 800e064:	4013      	ands	r3, r2
 800e066:	b2d9      	uxtb	r1, r3
	pdata->pad_startup_mode__value_ctrl =
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	222b      	movs	r2, #43	; 0x2b
 800e06c:	5499      	strb	r1, [r3, r2]
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	332e      	adds	r3, #46	; 0x2e
 800e072:	0019      	movs	r1, r3
 800e074:	2004      	movs	r0, #4
 800e076:	f7fe fb2f 	bl	800c6d8 <VL53L1_i2c_decode_uint32_t>
 800e07a:	0003      	movs	r3, r0
 800e07c:	039b      	lsls	r3, r3, #14
 800e07e:	0b9a      	lsrs	r2, r3, #14
	pdata->pll_period_us =
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	3332      	adds	r3, #50	; 0x32
 800e088:	0019      	movs	r1, r3
 800e08a:	2004      	movs	r0, #4
 800e08c:	f7fe fb24 	bl	800c6d8 <VL53L1_i2c_decode_uint32_t>
 800e090:	0002      	movs	r2, r0
	pdata->interrupt_scheduler__data_out =
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	3336      	adds	r3, #54	; 0x36
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2201      	movs	r2, #1
 800e09e:	4013      	ands	r3, r2
 800e0a0:	b2d9      	uxtb	r1, r3
	pdata->nvm_bist__complete =
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2234      	movs	r2, #52	; 0x34
 800e0a6:	5499      	strb	r1, [r3, r2]
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	3337      	adds	r3, #55	; 0x37
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	b2d9      	uxtb	r1, r3
	pdata->nvm_bist__status =
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2235      	movs	r2, #53	; 0x35
 800e0b8:	5499      	strb	r1, [r3, r2]

	LOG_FUNCTION_END(status);

	return status;
 800e0ba:	2317      	movs	r3, #23
 800e0bc:	18fb      	adds	r3, r7, r3
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	b25b      	sxtb	r3, r3
}
 800e0c2:	0018      	movs	r0, r3
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	b006      	add	sp, #24
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b086      	sub	sp, #24
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	210e      	movs	r1, #14
 800e0d6:	187b      	adds	r3, r7, r1
 800e0d8:	1c02      	adds	r2, r0, #0
 800e0da:	801a      	strh	r2, [r3, #0]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e0dc:	2317      	movs	r3, #23
 800e0de:	18fb      	adds	r3, r7, r3
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800e0e4:	187b      	adds	r3, r7, r1
 800e0e6:	881b      	ldrh	r3, [r3, #0]
 800e0e8:	2b30      	cmp	r3, #48	; 0x30
 800e0ea:	d802      	bhi.n	800e0f2 <VL53L1_i2c_decode_nvm_copy_data+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800e0ec:	230a      	movs	r3, #10
 800e0ee:	425b      	negs	r3, r3
 800e0f0:	e114      	b.n	800e31c <VL53L1_i2c_decode_nvm_copy_data+0x252>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	785a      	ldrb	r2, [r3, #1]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	789a      	ldrb	r2, [r3, #2]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	3303      	adds	r3, #3
 800e10e:	0019      	movs	r1, r3
 800e110:	2002      	movs	r0, #2
 800e112:	f7fe fa11 	bl	800c538 <VL53L1_i2c_decode_uint16_t>
 800e116:	0003      	movs	r3, r0
 800e118:	001a      	movs	r2, r3
	pdata->identification__module_id =
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	3305      	adds	r3, #5
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	227f      	movs	r2, #127	; 0x7f
 800e126:	4013      	ands	r3, r2
 800e128:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	3306      	adds	r3, #6
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	2207      	movs	r2, #7
 800e136:	4013      	ands	r3, r2
 800e138:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	3307      	adds	r3, #7
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	2207      	movs	r2, #7
 800e146:	4013      	ands	r3, r2
 800e148:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	3308      	adds	r3, #8
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	223f      	movs	r2, #63	; 0x3f
 800e156:	4013      	ands	r3, r2
 800e158:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	3309      	adds	r3, #9
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	223f      	movs	r2, #63	; 0x3f
 800e166:	4013      	ands	r3, r2
 800e168:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	330a      	adds	r3, #10
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	2201      	movs	r2, #1
 800e176:	4013      	ands	r3, r2
 800e178:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	330b      	adds	r3, #11
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	227f      	movs	r2, #127	; 0x7f
 800e186:	4013      	ands	r3, r2
 800e188:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	330c      	adds	r3, #12
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	2201      	movs	r2, #1
 800e196:	4013      	ands	r3, r2
 800e198:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	330d      	adds	r3, #13
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	223f      	movs	r2, #63	; 0x3f
 800e1a6:	4013      	ands	r3, r2
 800e1a8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	330e      	adds	r3, #14
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	223f      	movs	r2, #63	; 0x3f
 800e1b6:	4013      	ands	r3, r2
 800e1b8:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	7bda      	ldrb	r2, [r3, #15]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	7c1a      	ldrb	r2, [r3, #16]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	7c5a      	ldrb	r2, [r3, #17]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	7c9a      	ldrb	r2, [r3, #18]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	7cda      	ldrb	r2, [r3, #19]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	7d1a      	ldrb	r2, [r3, #20]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	7d5a      	ldrb	r2, [r3, #21]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	7d9a      	ldrb	r2, [r3, #22]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	7dda      	ldrb	r2, [r3, #23]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	7e1a      	ldrb	r2, [r3, #24]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	7e5a      	ldrb	r2, [r3, #25]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	7e9a      	ldrb	r2, [r3, #26]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	7eda      	ldrb	r2, [r3, #27]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	7f1a      	ldrb	r2, [r3, #28]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	7f5a      	ldrb	r2, [r3, #29]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	7f9a      	ldrb	r2, [r3, #30]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	7fd9      	ldrb	r1, [r3, #31]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2220      	movs	r2, #32
 800e246:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	2220      	movs	r2, #32
 800e24c:	5c99      	ldrb	r1, [r3, r2]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2221      	movs	r2, #33	; 0x21
 800e252:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	2221      	movs	r2, #33	; 0x21
 800e258:	5c99      	ldrb	r1, [r3, r2]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2222      	movs	r2, #34	; 0x22
 800e25e:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	2222      	movs	r2, #34	; 0x22
 800e264:	5c99      	ldrb	r1, [r3, r2]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2223      	movs	r2, #35	; 0x23
 800e26a:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	2223      	movs	r2, #35	; 0x23
 800e270:	5c99      	ldrb	r1, [r3, r2]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2224      	movs	r2, #36	; 0x24
 800e276:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	2224      	movs	r2, #36	; 0x24
 800e27c:	5c99      	ldrb	r1, [r3, r2]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2225      	movs	r2, #37	; 0x25
 800e282:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2225      	movs	r2, #37	; 0x25
 800e288:	5c99      	ldrb	r1, [r3, r2]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2226      	movs	r2, #38	; 0x26
 800e28e:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	2226      	movs	r2, #38	; 0x26
 800e294:	5c99      	ldrb	r1, [r3, r2]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2227      	movs	r2, #39	; 0x27
 800e29a:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	2227      	movs	r2, #39	; 0x27
 800e2a0:	5c99      	ldrb	r1, [r3, r2]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2228      	movs	r2, #40	; 0x28
 800e2a6:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	2228      	movs	r2, #40	; 0x28
 800e2ac:	5c99      	ldrb	r1, [r3, r2]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2229      	movs	r2, #41	; 0x29
 800e2b2:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	2229      	movs	r2, #41	; 0x29
 800e2b8:	5c99      	ldrb	r1, [r3, r2]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	222a      	movs	r2, #42	; 0x2a
 800e2be:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	222a      	movs	r2, #42	; 0x2a
 800e2c4:	5c99      	ldrb	r1, [r3, r2]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	222b      	movs	r2, #43	; 0x2b
 800e2ca:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	222b      	movs	r2, #43	; 0x2b
 800e2d0:	5c99      	ldrb	r1, [r3, r2]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	222c      	movs	r2, #44	; 0x2c
 800e2d6:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	222c      	movs	r2, #44	; 0x2c
 800e2dc:	5c99      	ldrb	r1, [r3, r2]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	222d      	movs	r2, #45	; 0x2d
 800e2e2:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	222d      	movs	r2, #45	; 0x2d
 800e2e8:	5c99      	ldrb	r1, [r3, r2]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	222e      	movs	r2, #46	; 0x2e
 800e2ee:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	222e      	movs	r2, #46	; 0x2e
 800e2f4:	5c99      	ldrb	r1, [r3, r2]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	222f      	movs	r2, #47	; 0x2f
 800e2fa:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	222f      	movs	r2, #47	; 0x2f
 800e300:	5c99      	ldrb	r1, [r3, r2]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2230      	movs	r2, #48	; 0x30
 800e306:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	2230      	movs	r2, #48	; 0x30
 800e30c:	5c99      	ldrb	r1, [r3, r2]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2231      	movs	r2, #49	; 0x31
 800e312:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800e314:	2317      	movs	r3, #23
 800e316:	18fb      	adds	r3, r7, r3
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	b25b      	sxtb	r3, r3
}
 800e31c:	0018      	movs	r0, r3
 800e31e:	46bd      	mov	sp, r7
 800e320:	b006      	add	sp, #24
 800e322:	bd80      	pop	{r7, pc}

0800e324 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800e324:	b590      	push	{r4, r7, lr}
 800e326:	b091      	sub	sp, #68	; 0x44
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e32e:	213f      	movs	r1, #63	; 0x3f
 800e330:	187b      	adds	r3, r7, r1
 800e332:	2200      	movs	r2, #0
 800e334:	701a      	strb	r2, [r3, #0]
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800e336:	000a      	movs	r2, r1
 800e338:	18bb      	adds	r3, r7, r2
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	b25b      	sxtb	r3, r3
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d10b      	bne.n	800e35a <VL53L1_get_nvm_copy_data+0x36>
		status = VL53L1_ReadMulti(
 800e342:	18bc      	adds	r4, r7, r2
 800e344:	230c      	movs	r3, #12
 800e346:	18fa      	adds	r2, r7, r3
 800e348:	2310      	movs	r3, #16
 800e34a:	33ff      	adds	r3, #255	; 0xff
 800e34c:	0019      	movs	r1, r3
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	2331      	movs	r3, #49	; 0x31
 800e352:	f000 f91b 	bl	800e58c <VL53L1_ReadMulti>
 800e356:	0003      	movs	r3, r0
 800e358:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800e35a:	223f      	movs	r2, #63	; 0x3f
 800e35c:	18bb      	adds	r3, r7, r2
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	b25b      	sxtb	r3, r3
 800e362:	2b00      	cmp	r3, #0
 800e364:	d109      	bne.n	800e37a <VL53L1_get_nvm_copy_data+0x56>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800e366:	18bc      	adds	r4, r7, r2
 800e368:	683a      	ldr	r2, [r7, #0]
 800e36a:	230c      	movs	r3, #12
 800e36c:	18fb      	adds	r3, r7, r3
 800e36e:	0019      	movs	r1, r3
 800e370:	2031      	movs	r0, #49	; 0x31
 800e372:	f7ff feaa 	bl	800e0ca <VL53L1_i2c_decode_nvm_copy_data>
 800e376:	0003      	movs	r3, r0
 800e378:	7023      	strb	r3, [r4, #0]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e37a:	233f      	movs	r3, #63	; 0x3f
 800e37c:	18fb      	adds	r3, r7, r3
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	b25b      	sxtb	r3, r3
}
 800e382:	0018      	movs	r0, r3
 800e384:	46bd      	mov	sp, r7
 800e386:	b011      	add	sp, #68	; 0x44
 800e388:	bd90      	pop	{r4, r7, pc}

0800e38a <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800e38a:	b5b0      	push	{r4, r5, r7, lr}
 800e38c:	b086      	sub	sp, #24
 800e38e:	af02      	add	r7, sp, #8
 800e390:	6078      	str	r0, [r7, #4]
 800e392:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800e394:	250f      	movs	r5, #15
 800e396:	197b      	adds	r3, r7, r5
 800e398:	2200      	movs	r2, #0
 800e39a:	701a      	strb	r2, [r3, #0]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800e39c:	197c      	adds	r4, r7, r5
 800e39e:	2396      	movs	r3, #150	; 0x96
 800e3a0:	00da      	lsls	r2, r3, #3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	0011      	movs	r1, r2
 800e3a6:	0018      	movs	r0, r3
 800e3a8:	f000 fa22 	bl	800e7f0 <VL53L1_WaitUs>
 800e3ac:	0003      	movs	r3, r0
 800e3ae:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800e3b0:	197b      	adds	r3, r7, r5
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	b25b      	sxtb	r3, r3
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d10c      	bne.n	800e3d4 <VL53L1_poll_for_boot_completion+0x4a>
		status =
			VL53L1_WaitValueMaskEx(
 800e3ba:	197c      	adds	r4, r7, r5
 800e3bc:	6839      	ldr	r1, [r7, #0]
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	9301      	str	r3, [sp, #4]
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	22e5      	movs	r2, #229	; 0xe5
 800e3cc:	f000 fa24 	bl	800e818 <VL53L1_WaitValueMaskEx>
 800e3d0:	0003      	movs	r3, r0
 800e3d2:	7023      	strb	r3, [r4, #0]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800e3d4:	230f      	movs	r3, #15
 800e3d6:	18fb      	adds	r3, r7, r3
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	b25b      	sxtb	r3, r3
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d104      	bne.n	800e3ea <VL53L1_poll_for_boot_completion+0x60>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2103      	movs	r1, #3
 800e3e4:	0018      	movs	r0, r3
 800e3e6:	f7fd fe37 	bl	800c058 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800e3ea:	230f      	movs	r3, #15
 800e3ec:	18fb      	adds	r3, r7, r3
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	b25b      	sxtb	r3, r3
}
 800e3f2:	0018      	movs	r0, r3
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	b004      	add	sp, #16
 800e3f8:	bdb0      	pop	{r4, r5, r7, pc}

0800e3fa <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800e3fa:	b5b0      	push	{r4, r5, r7, lr}
 800e3fc:	b088      	sub	sp, #32
 800e3fe:	af02      	add	r7, sp, #8
 800e400:	6078      	str	r0, [r7, #4]
 800e402:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e404:	2316      	movs	r3, #22
 800e406:	18fb      	adds	r3, r7, r3
 800e408:	2200      	movs	r2, #0
 800e40a:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800e410:	210f      	movs	r1, #15
 800e412:	187b      	adds	r3, r7, r1
 800e414:	2200      	movs	r2, #0
 800e416:	701a      	strb	r2, [r3, #0]
	uint8_t  interrupt_ready          = 0;
 800e418:	2417      	movs	r4, #23
 800e41a:	193b      	adds	r3, r7, r4
 800e41c:	2200      	movs	r2, #0
 800e41e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800e420:	693a      	ldr	r2, [r7, #16]
 800e422:	23b8      	movs	r3, #184	; 0xb8
 800e424:	005b      	lsls	r3, r3, #1
 800e426:	5cd2      	ldrb	r2, [r2, r3]
	gpio__mux_active_high_hv =
 800e428:	0008      	movs	r0, r1
 800e42a:	187b      	adds	r3, r7, r1
 800e42c:	2110      	movs	r1, #16
 800e42e:	400a      	ands	r2, r1
 800e430:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800e432:	183b      	adds	r3, r7, r0
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d103      	bne.n	800e442 <VL53L1_poll_for_range_completion+0x48>
		interrupt_ready = 0x01;
 800e43a:	193b      	adds	r3, r7, r4
 800e43c:	2201      	movs	r2, #1
 800e43e:	701a      	strb	r2, [r3, #0]
 800e440:	e003      	b.n	800e44a <VL53L1_poll_for_range_completion+0x50>
	else
		interrupt_ready = 0x00;
 800e442:	2317      	movs	r3, #23
 800e444:	18fb      	adds	r3, r7, r3
 800e446:	2200      	movs	r2, #0
 800e448:	701a      	strb	r2, [r3, #0]

	status =
		VL53L1_WaitValueMaskEx(
 800e44a:	2516      	movs	r5, #22
 800e44c:	197c      	adds	r4, r7, r5
 800e44e:	2317      	movs	r3, #23
 800e450:	18fb      	adds	r3, r7, r3
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	6839      	ldr	r1, [r7, #0]
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	2201      	movs	r2, #1
 800e45a:	9201      	str	r2, [sp, #4]
 800e45c:	2201      	movs	r2, #1
 800e45e:	9200      	str	r2, [sp, #0]
 800e460:	2231      	movs	r2, #49	; 0x31
 800e462:	f000 f9d9 	bl	800e818 <VL53L1_WaitValueMaskEx>
 800e466:	0003      	movs	r3, r0
 800e468:	7023      	strb	r3, [r4, #0]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800e46a:	197b      	adds	r3, r7, r5
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	b25b      	sxtb	r3, r3
}
 800e470:	0018      	movs	r0, r3
 800e472:	46bd      	mov	sp, r7
 800e474:	b006      	add	sp, #24
 800e476:	bdb0      	pop	{r4, r5, r7, pc}

0800e478 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e478:	b590      	push	{r4, r7, lr}
 800e47a:	b089      	sub	sp, #36	; 0x24
 800e47c:	af02      	add	r7, sp, #8
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	330a      	adds	r3, #10
 800e488:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	23e8      	movs	r3, #232	; 0xe8
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	58d0      	ldr	r0, [r2, r3]
 800e492:	68fa      	ldr	r2, [r7, #12]
 800e494:	23e6      	movs	r3, #230	; 0xe6
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	5cd3      	ldrb	r3, [r2, r3]
 800e49a:	b299      	uxth	r1, r3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	b29c      	uxth	r4, r3
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	68ba      	ldr	r2, [r7, #8]
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	0023      	movs	r3, r4
 800e4a8:	f001 febe 	bl	8010228 <HAL_I2C_Master_Transmit>
 800e4ac:	0003      	movs	r3, r0
 800e4ae:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e4b0:	693b      	ldr	r3, [r7, #16]
}
 800e4b2:	0018      	movs	r0, r3
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	b007      	add	sp, #28
 800e4b8:	bd90      	pop	{r4, r7, pc}

0800e4ba <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e4ba:	b590      	push	{r4, r7, lr}
 800e4bc:	b089      	sub	sp, #36	; 0x24
 800e4be:	af02      	add	r7, sp, #8
 800e4c0:	60f8      	str	r0, [r7, #12]
 800e4c2:	60b9      	str	r1, [r7, #8]
 800e4c4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	330a      	adds	r3, #10
 800e4ca:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	23e8      	movs	r3, #232	; 0xe8
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	58d0      	ldr	r0, [r2, r3]
 800e4d4:	68fa      	ldr	r2, [r7, #12]
 800e4d6:	23e6      	movs	r3, #230	; 0xe6
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	5cd3      	ldrb	r3, [r2, r3]
 800e4dc:	2201      	movs	r2, #1
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	b299      	uxth	r1, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	b29c      	uxth	r4, r3
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	9300      	str	r3, [sp, #0]
 800e4ee:	0023      	movs	r3, r4
 800e4f0:	f001 ffa2 	bl	8010438 <HAL_I2C_Master_Receive>
 800e4f4:	0003      	movs	r3, r0
 800e4f6:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e4f8:	693b      	ldr	r3, [r7, #16]
}
 800e4fa:	0018      	movs	r0, r3
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	b007      	add	sp, #28
 800e500:	bd90      	pop	{r4, r7, pc}
	...

0800e504 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800e504:	b580      	push	{r7, lr}
 800e506:	b086      	sub	sp, #24
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	607a      	str	r2, [r7, #4]
 800e50e:	603b      	str	r3, [r7, #0]
 800e510:	230a      	movs	r3, #10
 800e512:	18fb      	adds	r3, r7, r3
 800e514:	1c0a      	adds	r2, r1, #0
 800e516:	801a      	strh	r2, [r3, #0]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e518:	2317      	movs	r3, #23
 800e51a:	18fb      	adds	r3, r7, r3
 800e51c:	2200      	movs	r2, #0
 800e51e:	701a      	strb	r2, [r3, #0]
    if (count > sizeof(_I2CBuffer) - 1) {
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	2bff      	cmp	r3, #255	; 0xff
 800e524:	d902      	bls.n	800e52c <VL53L1_WriteMulti+0x28>
        return VL53L1_ERROR_INVALID_PARAMS;
 800e526:	2304      	movs	r3, #4
 800e528:	425b      	negs	r3, r3
 800e52a:	e026      	b.n	800e57a <VL53L1_WriteMulti+0x76>
    }
    _I2CBuffer[0] = index>>8;
 800e52c:	210a      	movs	r1, #10
 800e52e:	187b      	adds	r3, r7, r1
 800e530:	881b      	ldrh	r3, [r3, #0]
 800e532:	0a1b      	lsrs	r3, r3, #8
 800e534:	b29b      	uxth	r3, r3
 800e536:	b2da      	uxtb	r2, r3
 800e538:	4b12      	ldr	r3, [pc, #72]	; (800e584 <VL53L1_WriteMulti+0x80>)
 800e53a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e53c:	187b      	adds	r3, r7, r1
 800e53e:	881b      	ldrh	r3, [r3, #0]
 800e540:	b2da      	uxtb	r2, r3
 800e542:	4b10      	ldr	r3, [pc, #64]	; (800e584 <VL53L1_WriteMulti+0x80>)
 800e544:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800e546:	683a      	ldr	r2, [r7, #0]
 800e548:	6879      	ldr	r1, [r7, #4]
 800e54a:	4b0f      	ldr	r3, [pc, #60]	; (800e588 <VL53L1_WriteMulti+0x84>)
 800e54c:	0018      	movs	r0, r3
 800e54e:	f005 f835 	bl	80135bc <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	1c9a      	adds	r2, r3, #2
 800e556:	490b      	ldr	r1, [pc, #44]	; (800e584 <VL53L1_WriteMulti+0x80>)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	0018      	movs	r0, r3
 800e55c:	f7ff ff8c 	bl	800e478 <_I2CWrite>
 800e560:	0003      	movs	r3, r0
 800e562:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d003      	beq.n	800e572 <VL53L1_WriteMulti+0x6e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e56a:	2317      	movs	r3, #23
 800e56c:	18fb      	adds	r3, r7, r3
 800e56e:	22f3      	movs	r2, #243	; 0xf3
 800e570:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 800e572:	2317      	movs	r3, #23
 800e574:	18fb      	adds	r3, r7, r3
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	b25b      	sxtb	r3, r3
}
 800e57a:	0018      	movs	r0, r3
 800e57c:	46bd      	mov	sp, r7
 800e57e:	b006      	add	sp, #24
 800e580:	bd80      	pop	{r7, pc}
 800e582:	46c0      	nop			; (mov r8, r8)
 800e584:	200036ac 	.word	0x200036ac
 800e588:	200036ae 	.word	0x200036ae

0800e58c <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800e58c:	b590      	push	{r4, r7, lr}
 800e58e:	b087      	sub	sp, #28
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	607a      	str	r2, [r7, #4]
 800e596:	603b      	str	r3, [r7, #0]
 800e598:	200a      	movs	r0, #10
 800e59a:	183b      	adds	r3, r7, r0
 800e59c:	1c0a      	adds	r2, r1, #0
 800e59e:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e5a0:	2417      	movs	r4, #23
 800e5a2:	193b      	adds	r3, r7, r4
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e5a8:	0001      	movs	r1, r0
 800e5aa:	187b      	adds	r3, r7, r1
 800e5ac:	881b      	ldrh	r3, [r3, #0]
 800e5ae:	0a1b      	lsrs	r3, r3, #8
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	b2da      	uxtb	r2, r3
 800e5b4:	4b17      	ldr	r3, [pc, #92]	; (800e614 <VL53L1_ReadMulti+0x88>)
 800e5b6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e5b8:	187b      	adds	r3, r7, r1
 800e5ba:	881b      	ldrh	r3, [r3, #0]
 800e5bc:	b2da      	uxtb	r2, r3
 800e5be:	4b15      	ldr	r3, [pc, #84]	; (800e614 <VL53L1_ReadMulti+0x88>)
 800e5c0:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e5c2:	4914      	ldr	r1, [pc, #80]	; (800e614 <VL53L1_ReadMulti+0x88>)
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2202      	movs	r2, #2
 800e5c8:	0018      	movs	r0, r3
 800e5ca:	f7ff ff55 	bl	800e478 <_I2CWrite>
 800e5ce:	0003      	movs	r3, r0
 800e5d0:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d003      	beq.n	800e5e0 <VL53L1_ReadMulti+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e5d8:	193b      	adds	r3, r7, r4
 800e5da:	22f3      	movs	r2, #243	; 0xf3
 800e5dc:	701a      	strb	r2, [r3, #0]
        goto done;
 800e5de:	e010      	b.n	800e602 <VL53L1_ReadMulti+0x76>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800e5e0:	683a      	ldr	r2, [r7, #0]
 800e5e2:	6879      	ldr	r1, [r7, #4]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	0018      	movs	r0, r3
 800e5e8:	f7ff ff67 	bl	800e4ba <_I2CRead>
 800e5ec:	0003      	movs	r3, r0
 800e5ee:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d004      	beq.n	800e600 <VL53L1_ReadMulti+0x74>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e5f6:	2317      	movs	r3, #23
 800e5f8:	18fb      	adds	r3, r7, r3
 800e5fa:	22f3      	movs	r2, #243	; 0xf3
 800e5fc:	701a      	strb	r2, [r3, #0]
 800e5fe:	e000      	b.n	800e602 <VL53L1_ReadMulti+0x76>
    }
done:
 800e600:	46c0      	nop			; (mov r8, r8)
    VL53L1_PutI2cBus();
    return Status;
 800e602:	2317      	movs	r3, #23
 800e604:	18fb      	adds	r3, r7, r3
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	b25b      	sxtb	r3, r3
}
 800e60a:	0018      	movs	r0, r3
 800e60c:	46bd      	mov	sp, r7
 800e60e:	b007      	add	sp, #28
 800e610:	bd90      	pop	{r4, r7, pc}
 800e612:	46c0      	nop			; (mov r8, r8)
 800e614:	200036ac 	.word	0x200036ac

0800e618 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800e618:	b590      	push	{r4, r7, lr}
 800e61a:	b085      	sub	sp, #20
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	0008      	movs	r0, r1
 800e622:	0011      	movs	r1, r2
 800e624:	1cbb      	adds	r3, r7, #2
 800e626:	1c02      	adds	r2, r0, #0
 800e628:	801a      	strh	r2, [r3, #0]
 800e62a:	1c7b      	adds	r3, r7, #1
 800e62c:	1c0a      	adds	r2, r1, #0
 800e62e:	701a      	strb	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e630:	240f      	movs	r4, #15
 800e632:	193b      	adds	r3, r7, r4
 800e634:	2200      	movs	r2, #0
 800e636:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e638:	1cbb      	adds	r3, r7, #2
 800e63a:	881b      	ldrh	r3, [r3, #0]
 800e63c:	0a1b      	lsrs	r3, r3, #8
 800e63e:	b29b      	uxth	r3, r3
 800e640:	b2da      	uxtb	r2, r3
 800e642:	4b10      	ldr	r3, [pc, #64]	; (800e684 <VL53L1_WrByte+0x6c>)
 800e644:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e646:	1cbb      	adds	r3, r7, #2
 800e648:	881b      	ldrh	r3, [r3, #0]
 800e64a:	b2da      	uxtb	r2, r3
 800e64c:	4b0d      	ldr	r3, [pc, #52]	; (800e684 <VL53L1_WrByte+0x6c>)
 800e64e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800e650:	4b0c      	ldr	r3, [pc, #48]	; (800e684 <VL53L1_WrByte+0x6c>)
 800e652:	1c7a      	adds	r2, r7, #1
 800e654:	7812      	ldrb	r2, [r2, #0]
 800e656:	709a      	strb	r2, [r3, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800e658:	490a      	ldr	r1, [pc, #40]	; (800e684 <VL53L1_WrByte+0x6c>)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2203      	movs	r2, #3
 800e65e:	0018      	movs	r0, r3
 800e660:	f7ff ff0a 	bl	800e478 <_I2CWrite>
 800e664:	0003      	movs	r3, r0
 800e666:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d002      	beq.n	800e674 <VL53L1_WrByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e66e:	193b      	adds	r3, r7, r4
 800e670:	22f3      	movs	r2, #243	; 0xf3
 800e672:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 800e674:	230f      	movs	r3, #15
 800e676:	18fb      	adds	r3, r7, r3
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	b25b      	sxtb	r3, r3
}
 800e67c:	0018      	movs	r0, r3
 800e67e:	46bd      	mov	sp, r7
 800e680:	b005      	add	sp, #20
 800e682:	bd90      	pop	{r4, r7, pc}
 800e684:	200036ac 	.word	0x200036ac

0800e688 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800e688:	b590      	push	{r4, r7, lr}
 800e68a:	b087      	sub	sp, #28
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	607a      	str	r2, [r7, #4]
 800e692:	200a      	movs	r0, #10
 800e694:	183b      	adds	r3, r7, r0
 800e696:	1c0a      	adds	r2, r1, #0
 800e698:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e69a:	2417      	movs	r4, #23
 800e69c:	193b      	adds	r3, r7, r4
 800e69e:	2200      	movs	r2, #0
 800e6a0:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800e6a2:	0001      	movs	r1, r0
 800e6a4:	187b      	adds	r3, r7, r1
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	0a1b      	lsrs	r3, r3, #8
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	b2da      	uxtb	r2, r3
 800e6ae:	4b17      	ldr	r3, [pc, #92]	; (800e70c <VL53L1_RdByte+0x84>)
 800e6b0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800e6b2:	187b      	adds	r3, r7, r1
 800e6b4:	881b      	ldrh	r3, [r3, #0]
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	4b14      	ldr	r3, [pc, #80]	; (800e70c <VL53L1_RdByte+0x84>)
 800e6ba:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e6bc:	4913      	ldr	r1, [pc, #76]	; (800e70c <VL53L1_RdByte+0x84>)
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2202      	movs	r2, #2
 800e6c2:	0018      	movs	r0, r3
 800e6c4:	f7ff fed8 	bl	800e478 <_I2CWrite>
 800e6c8:	0003      	movs	r3, r0
 800e6ca:	613b      	str	r3, [r7, #16]
    if( status_int ){
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d003      	beq.n	800e6da <VL53L1_RdByte+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e6d2:	193b      	adds	r3, r7, r4
 800e6d4:	22f3      	movs	r2, #243	; 0xf3
 800e6d6:	701a      	strb	r2, [r3, #0]
        goto done;
 800e6d8:	e010      	b.n	800e6fc <VL53L1_RdByte+0x74>
    }
    status_int = _I2CRead(Dev, data, 1);
 800e6da:	6879      	ldr	r1, [r7, #4]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	0018      	movs	r0, r3
 800e6e2:	f7ff feea 	bl	800e4ba <_I2CRead>
 800e6e6:	0003      	movs	r3, r0
 800e6e8:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d004      	beq.n	800e6fa <VL53L1_RdByte+0x72>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e6f0:	2317      	movs	r3, #23
 800e6f2:	18fb      	adds	r3, r7, r3
 800e6f4:	22f3      	movs	r2, #243	; 0xf3
 800e6f6:	701a      	strb	r2, [r3, #0]
 800e6f8:	e000      	b.n	800e6fc <VL53L1_RdByte+0x74>
    }
done:
 800e6fa:	46c0      	nop			; (mov r8, r8)
    VL53L1_PutI2cBus();
    return Status;
 800e6fc:	2317      	movs	r3, #23
 800e6fe:	18fb      	adds	r3, r7, r3
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	b25b      	sxtb	r3, r3
}
 800e704:	0018      	movs	r0, r3
 800e706:	46bd      	mov	sp, r7
 800e708:	b007      	add	sp, #28
 800e70a:	bd90      	pop	{r4, r7, pc}
 800e70c:	200036ac 	.word	0x200036ac

0800e710 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800e710:	b590      	push	{r4, r7, lr}
 800e712:	b087      	sub	sp, #28
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	607a      	str	r2, [r7, #4]
 800e71a:	200a      	movs	r0, #10
 800e71c:	183b      	adds	r3, r7, r0
 800e71e:	1c0a      	adds	r2, r1, #0
 800e720:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e722:	2417      	movs	r4, #23
 800e724:	193b      	adds	r3, r7, r4
 800e726:	2200      	movs	r2, #0
 800e728:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e72a:	0001      	movs	r1, r0
 800e72c:	187b      	adds	r3, r7, r1
 800e72e:	881b      	ldrh	r3, [r3, #0]
 800e730:	0a1b      	lsrs	r3, r3, #8
 800e732:	b29b      	uxth	r3, r3
 800e734:	b2da      	uxtb	r2, r3
 800e736:	4b1d      	ldr	r3, [pc, #116]	; (800e7ac <VL53L1_RdWord+0x9c>)
 800e738:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800e73a:	187b      	adds	r3, r7, r1
 800e73c:	881b      	ldrh	r3, [r3, #0]
 800e73e:	b2da      	uxtb	r2, r3
 800e740:	4b1a      	ldr	r3, [pc, #104]	; (800e7ac <VL53L1_RdWord+0x9c>)
 800e742:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e744:	4919      	ldr	r1, [pc, #100]	; (800e7ac <VL53L1_RdWord+0x9c>)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2202      	movs	r2, #2
 800e74a:	0018      	movs	r0, r3
 800e74c:	f7ff fe94 	bl	800e478 <_I2CWrite>
 800e750:	0003      	movs	r3, r0
 800e752:	613b      	str	r3, [r7, #16]

    if( status_int ){
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d003      	beq.n	800e762 <VL53L1_RdWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e75a:	193b      	adds	r3, r7, r4
 800e75c:	22f3      	movs	r2, #243	; 0xf3
 800e75e:	701a      	strb	r2, [r3, #0]
        goto done;
 800e760:	e01b      	b.n	800e79a <VL53L1_RdWord+0x8a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800e762:	4912      	ldr	r1, [pc, #72]	; (800e7ac <VL53L1_RdWord+0x9c>)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2202      	movs	r2, #2
 800e768:	0018      	movs	r0, r3
 800e76a:	f7ff fea6 	bl	800e4ba <_I2CRead>
 800e76e:	0003      	movs	r3, r0
 800e770:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d004      	beq.n	800e782 <VL53L1_RdWord+0x72>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e778:	2317      	movs	r3, #23
 800e77a:	18fb      	adds	r3, r7, r3
 800e77c:	22f3      	movs	r2, #243	; 0xf3
 800e77e:	701a      	strb	r2, [r3, #0]
        goto done;
 800e780:	e00b      	b.n	800e79a <VL53L1_RdWord+0x8a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800e782:	4b0a      	ldr	r3, [pc, #40]	; (800e7ac <VL53L1_RdWord+0x9c>)
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	b29b      	uxth	r3, r3
 800e788:	021b      	lsls	r3, r3, #8
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	4b07      	ldr	r3, [pc, #28]	; (800e7ac <VL53L1_RdWord+0x9c>)
 800e78e:	785b      	ldrb	r3, [r3, #1]
 800e790:	b29b      	uxth	r3, r3
 800e792:	18d3      	adds	r3, r2, r3
 800e794:	b29a      	uxth	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800e79a:	2317      	movs	r3, #23
 800e79c:	18fb      	adds	r3, r7, r3
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	b25b      	sxtb	r3, r3
}
 800e7a2:	0018      	movs	r0, r3
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	b007      	add	sp, #28
 800e7a8:	bd90      	pop	{r4, r7, pc}
 800e7aa:	46c0      	nop			; (mov r8, r8)
 800e7ac:	200036ac 	.word	0x200036ac

0800e7b0 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800e7b8:	210f      	movs	r1, #15
 800e7ba:	187b      	adds	r3, r7, r1
 800e7bc:	2200      	movs	r2, #0
 800e7be:	701a      	strb	r2, [r3, #0]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800e7c6:	187b      	adds	r3, r7, r1
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	b25b      	sxtb	r3, r3
}
 800e7cc:	0018      	movs	r0, r3
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	b004      	add	sp, #16
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	0018      	movs	r0, r3
 800e7e2:	f001 f85b 	bl	800f89c <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800e7e6:	2300      	movs	r3, #0
}
 800e7e8:	0018      	movs	r0, r3
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	b002      	add	sp, #8
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	22fa      	movs	r2, #250	; 0xfa
 800e7fe:	0091      	lsls	r1, r2, #2
 800e800:	0018      	movs	r0, r3
 800e802:	f7f1 fd27 	bl	8000254 <__divsi3>
 800e806:	0003      	movs	r3, r0
 800e808:	0018      	movs	r0, r3
 800e80a:	f001 f847 	bl	800f89c <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800e80e:	2300      	movs	r3, #0
}
 800e810:	0018      	movs	r0, r3
 800e812:	46bd      	mov	sp, r7
 800e814:	b002      	add	sp, #8
 800e816:	bd80      	pop	{r7, pc}

0800e818 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800e818:	b590      	push	{r4, r7, lr}
 800e81a:	4c5f      	ldr	r4, [pc, #380]	; (800e998 <VL53L1_WaitValueMaskEx+0x180>)
 800e81c:	44a5      	add	sp, r4
 800e81e:	af00      	add	r7, sp, #0
 800e820:	60f8      	str	r0, [r7, #12]
 800e822:	60b9      	str	r1, [r7, #8]
 800e824:	0019      	movs	r1, r3
 800e826:	4b5d      	ldr	r3, [pc, #372]	; (800e99c <VL53L1_WaitValueMaskEx+0x184>)
 800e828:	208a      	movs	r0, #138	; 0x8a
 800e82a:	0080      	lsls	r0, r0, #2
 800e82c:	4684      	mov	ip, r0
 800e82e:	44bc      	add	ip, r7
 800e830:	4463      	add	r3, ip
 800e832:	801a      	strh	r2, [r3, #0]
 800e834:	4b5a      	ldr	r3, [pc, #360]	; (800e9a0 <VL53L1_WaitValueMaskEx+0x188>)
 800e836:	228a      	movs	r2, #138	; 0x8a
 800e838:	0092      	lsls	r2, r2, #2
 800e83a:	4694      	mov	ip, r2
 800e83c:	44bc      	add	ip, r7
 800e83e:	4463      	add	r3, ip
 800e840:	1c0a      	adds	r2, r1, #0
 800e842:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800e844:	4b57      	ldr	r3, [pc, #348]	; (800e9a4 <VL53L1_WaitValueMaskEx+0x18c>)
 800e846:	18fb      	adds	r3, r7, r3
 800e848:	2200      	movs	r2, #0
 800e84a:	701a      	strb	r2, [r3, #0]
	uint32_t     start_time_ms = 0;
 800e84c:	2300      	movs	r3, #0
 800e84e:	2486      	movs	r4, #134	; 0x86
 800e850:	00a4      	lsls	r4, r4, #2
 800e852:	193a      	adds	r2, r7, r4
 800e854:	6013      	str	r3, [r2, #0]
	uint32_t     current_time_ms = 0;
 800e856:	2300      	movs	r3, #0
 800e858:	2285      	movs	r2, #133	; 0x85
 800e85a:	0092      	lsls	r2, r2, #2
 800e85c:	18ba      	adds	r2, r7, r2
 800e85e:	6013      	str	r3, [r2, #0]
	uint32_t     polling_time_ms = 0;
 800e860:	2300      	movs	r3, #0
 800e862:	2288      	movs	r2, #136	; 0x88
 800e864:	0092      	lsls	r2, r2, #2
 800e866:	18ba      	adds	r2, r7, r2
 800e868:	6013      	str	r3, [r2, #0]
	uint8_t      byte_value      = 0;
 800e86a:	4b4f      	ldr	r3, [pc, #316]	; (800e9a8 <VL53L1_WaitValueMaskEx+0x190>)
 800e86c:	18fb      	adds	r3, r7, r3
 800e86e:	2200      	movs	r2, #0
 800e870:	701a      	strb	r2, [r3, #0]
	uint8_t      found           = 0;
 800e872:	4b4e      	ldr	r3, [pc, #312]	; (800e9ac <VL53L1_WaitValueMaskEx+0x194>)
 800e874:	18fb      	adds	r3, r7, r3
 800e876:	2200      	movs	r2, #0
 800e878:	701a      	strb	r2, [r3, #0]
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800e87a:	4a4d      	ldr	r2, [pc, #308]	; (800e9b0 <VL53L1_WaitValueMaskEx+0x198>)
 800e87c:	494d      	ldr	r1, [pc, #308]	; (800e9b4 <VL53L1_WaitValueMaskEx+0x19c>)
 800e87e:	2310      	movs	r3, #16
 800e880:	18fb      	adds	r3, r7, r3
 800e882:	0018      	movs	r0, r3
 800e884:	f005 fb26 	bl	8013ed4 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800e888:	193b      	adds	r3, r7, r4
 800e88a:	0018      	movs	r0, r3
 800e88c:	f7ff ff90 	bl	800e7b0 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800e890:	e057      	b.n	800e942 <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800e892:	4a44      	ldr	r2, [pc, #272]	; (800e9a4 <VL53L1_WaitValueMaskEx+0x18c>)
 800e894:	18bb      	adds	r3, r7, r2
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	b25b      	sxtb	r3, r3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d10f      	bne.n	800e8be <VL53L1_WaitValueMaskEx+0xa6>
			status = VL53L1_RdByte(
 800e89e:	18bc      	adds	r4, r7, r2
 800e8a0:	4b41      	ldr	r3, [pc, #260]	; (800e9a8 <VL53L1_WaitValueMaskEx+0x190>)
 800e8a2:	18fa      	adds	r2, r7, r3
 800e8a4:	4b3d      	ldr	r3, [pc, #244]	; (800e99c <VL53L1_WaitValueMaskEx+0x184>)
 800e8a6:	218a      	movs	r1, #138	; 0x8a
 800e8a8:	0089      	lsls	r1, r1, #2
 800e8aa:	468c      	mov	ip, r1
 800e8ac:	44bc      	add	ip, r7
 800e8ae:	4463      	add	r3, ip
 800e8b0:	8819      	ldrh	r1, [r3, #0]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	0018      	movs	r0, r3
 800e8b6:	f7ff fee7 	bl	800e688 <VL53L1_RdByte>
 800e8ba:	0003      	movs	r3, r0
 800e8bc:	7023      	strb	r3, [r4, #0]
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800e8be:	4b3a      	ldr	r3, [pc, #232]	; (800e9a8 <VL53L1_WaitValueMaskEx+0x190>)
 800e8c0:	18fb      	adds	r3, r7, r3
 800e8c2:	781a      	ldrb	r2, [r3, #0]
 800e8c4:	238e      	movs	r3, #142	; 0x8e
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	18fb      	adds	r3, r7, r3
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	4013      	ands	r3, r2
 800e8ce:	b2db      	uxtb	r3, r3
 800e8d0:	4a33      	ldr	r2, [pc, #204]	; (800e9a0 <VL53L1_WaitValueMaskEx+0x188>)
 800e8d2:	218a      	movs	r1, #138	; 0x8a
 800e8d4:	0089      	lsls	r1, r1, #2
 800e8d6:	468c      	mov	ip, r1
 800e8d8:	44bc      	add	ip, r7
 800e8da:	4462      	add	r2, ip
 800e8dc:	7812      	ldrb	r2, [r2, #0]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d103      	bne.n	800e8ea <VL53L1_WaitValueMaskEx+0xd2>
			found = 1;
 800e8e2:	4b32      	ldr	r3, [pc, #200]	; (800e9ac <VL53L1_WaitValueMaskEx+0x194>)
 800e8e4:	18fb      	adds	r3, r7, r3
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	701a      	strb	r2, [r3, #0]

		if (status == VL53L1_ERROR_NONE  &&
 800e8ea:	492e      	ldr	r1, [pc, #184]	; (800e9a4 <VL53L1_WaitValueMaskEx+0x18c>)
 800e8ec:	187b      	adds	r3, r7, r1
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	b25b      	sxtb	r3, r3
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d114      	bne.n	800e920 <VL53L1_WaitValueMaskEx+0x108>
 800e8f6:	4b2d      	ldr	r3, [pc, #180]	; (800e9ac <VL53L1_WaitValueMaskEx+0x194>)
 800e8f8:	18fb      	adds	r3, r7, r3
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10f      	bne.n	800e920 <VL53L1_WaitValueMaskEx+0x108>
			found == 0 &&
 800e900:	228f      	movs	r2, #143	; 0x8f
 800e902:	0092      	lsls	r2, r2, #2
 800e904:	18bb      	adds	r3, r7, r2
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d009      	beq.n	800e920 <VL53L1_WaitValueMaskEx+0x108>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800e90c:	18bb      	adds	r3, r7, r2
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	187c      	adds	r4, r7, r1
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	0011      	movs	r1, r2
 800e916:	0018      	movs	r0, r3
 800e918:	f7ff ff5c 	bl	800e7d4 <VL53L1_WaitMs>
 800e91c:	0003      	movs	r3, r0
 800e91e:	7023      	strb	r3, [r4, #0]
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800e920:	2485      	movs	r4, #133	; 0x85
 800e922:	00a4      	lsls	r4, r4, #2
 800e924:	193b      	adds	r3, r7, r4
 800e926:	0018      	movs	r0, r3
 800e928:	f7ff ff42 	bl	800e7b0 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800e92c:	193b      	adds	r3, r7, r4
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	2386      	movs	r3, #134	; 0x86
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	18fb      	adds	r3, r7, r3
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	2288      	movs	r2, #136	; 0x88
 800e93c:	0092      	lsls	r2, r2, #2
 800e93e:	18ba      	adds	r2, r7, r2
 800e940:	6013      	str	r3, [r2, #0]
	while ((status == VL53L1_ERROR_NONE) &&
 800e942:	4b18      	ldr	r3, [pc, #96]	; (800e9a4 <VL53L1_WaitValueMaskEx+0x18c>)
 800e944:	18fb      	adds	r3, r7, r3
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	b25b      	sxtb	r3, r3
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d10b      	bne.n	800e966 <VL53L1_WaitValueMaskEx+0x14e>
 800e94e:	2388      	movs	r3, #136	; 0x88
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	18fb      	adds	r3, r7, r3
 800e954:	681a      	ldr	r2, [r3, #0]
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d204      	bcs.n	800e966 <VL53L1_WaitValueMaskEx+0x14e>
		   (polling_time_ms < timeout_ms) &&
 800e95c:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <VL53L1_WaitValueMaskEx+0x194>)
 800e95e:	18fb      	adds	r3, r7, r3
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d095      	beq.n	800e892 <VL53L1_WaitValueMaskEx+0x7a>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800e966:	4b11      	ldr	r3, [pc, #68]	; (800e9ac <VL53L1_WaitValueMaskEx+0x194>)
 800e968:	18fb      	adds	r3, r7, r3
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d108      	bne.n	800e982 <VL53L1_WaitValueMaskEx+0x16a>
 800e970:	4a0c      	ldr	r2, [pc, #48]	; (800e9a4 <VL53L1_WaitValueMaskEx+0x18c>)
 800e972:	18bb      	adds	r3, r7, r2
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	b25b      	sxtb	r3, r3
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d102      	bne.n	800e982 <VL53L1_WaitValueMaskEx+0x16a>
		status = VL53L1_ERROR_TIME_OUT;
 800e97c:	18bb      	adds	r3, r7, r2
 800e97e:	22f9      	movs	r2, #249	; 0xf9
 800e980:	701a      	strb	r2, [r3, #0]

	return status;
 800e982:	4b08      	ldr	r3, [pc, #32]	; (800e9a4 <VL53L1_WaitValueMaskEx+0x18c>)
 800e984:	18fb      	adds	r3, r7, r3
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	b25b      	sxtb	r3, r3
}
 800e98a:	0018      	movs	r0, r3
 800e98c:	46bd      	mov	sp, r7
 800e98e:	238b      	movs	r3, #139	; 0x8b
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	449d      	add	sp, r3
 800e994:	bd90      	pop	{r4, r7, pc}
 800e996:	46c0      	nop			; (mov r8, r8)
 800e998:	fffffdd4 	.word	0xfffffdd4
 800e99c:	fffffdde 	.word	0xfffffdde
 800e9a0:	fffffddd 	.word	0xfffffddd
 800e9a4:	00000227 	.word	0x00000227
 800e9a8:	00000213 	.word	0x00000213
 800e9ac:	0000021f 	.word	0x0000021f
 800e9b0:	000001ff 	.word	0x000001ff
 800e9b4:	08016180 	.word	0x08016180

0800e9b8 <Stspin220_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void Stspin220_Board_Delay(uint32_t delay)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	0018      	movs	r0, r3
 800e9c4:	f000 ff6a 	bl	800f89c <HAL_Delay>
}
 800e9c8:	46c0      	nop			; (mov r8, r8)
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	b002      	add	sp, #8
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <Stspin220_Board_GpioInit>:
/******************************************************//**
 * @brief  Initiliases the GPIOs used by the STSPIN220
 * @retval None
  **********************************************************/
void Stspin220_Board_GpioInit(void)
{
 800e9d0:	b590      	push	{r4, r7, lr}
 800e9d2:	b089      	sub	sp, #36	; 0x24
 800e9d4:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct;
  
  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 800e9d6:	4b41      	ldr	r3, [pc, #260]	; (800eadc <Stspin220_Board_GpioInit+0x10c>)
 800e9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9da:	4b40      	ldr	r3, [pc, #256]	; (800eadc <Stspin220_Board_GpioInit+0x10c>)
 800e9dc:	2101      	movs	r1, #1
 800e9de:	430a      	orrs	r2, r1
 800e9e0:	62da      	str	r2, [r3, #44]	; 0x2c
 800e9e2:	4b3e      	ldr	r3, [pc, #248]	; (800eadc <Stspin220_Board_GpioInit+0x10c>)
 800e9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	4013      	ands	r3, r2
 800e9ea:	60bb      	str	r3, [r7, #8]
 800e9ec:	68bb      	ldr	r3, [r7, #8]
  __GPIOB_CLK_ENABLE();
 800e9ee:	4b3b      	ldr	r3, [pc, #236]	; (800eadc <Stspin220_Board_GpioInit+0x10c>)
 800e9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9f2:	4b3a      	ldr	r3, [pc, #232]	; (800eadc <Stspin220_Board_GpioInit+0x10c>)
 800e9f4:	2102      	movs	r1, #2
 800e9f6:	430a      	orrs	r2, r1
 800e9f8:	62da      	str	r2, [r3, #44]	; 0x2c
 800e9fa:	4b38      	ldr	r3, [pc, #224]	; (800eadc <Stspin220_Board_GpioInit+0x10c>)
 800e9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9fe:	2202      	movs	r2, #2
 800ea00:	4013      	ands	r3, r2
 800ea02:	607b      	str	r3, [r7, #4]
 800ea04:	687b      	ldr	r3, [r7, #4]
  __GPIOC_CLK_ENABLE();  
 800ea06:	4b35      	ldr	r3, [pc, #212]	; (800eadc <Stspin220_Board_GpioInit+0x10c>)
 800ea08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea0a:	4b34      	ldr	r3, [pc, #208]	; (800eadc <Stspin220_Board_GpioInit+0x10c>)
 800ea0c:	2104      	movs	r1, #4
 800ea0e:	430a      	orrs	r2, r1
 800ea10:	62da      	str	r2, [r3, #44]	; 0x2c
 800ea12:	4b32      	ldr	r3, [pc, #200]	; (800eadc <Stspin220_Board_GpioInit+0x10c>)
 800ea14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea16:	2204      	movs	r2, #4
 800ea18:	4013      	ands	r3, r2
 800ea1a:	603b      	str	r3, [r7, #0]
 800ea1c:	683b      	ldr	r3, [r7, #0]
  /* Configure STSPIN220 - EN pin --------------------------------------------*/
  /* When this pin is set low, it is configured just before as                */
  /* GPIO_MODE_OUTPUT_PP with GPIO_NOPULL                                     */
  /* When this pin is set high, it is just after configured for FAULT         */
  /* as GPIO_MODE_IT_FALLING with GPIO_PULLUP                                 */
  Stspin220_Board_Disable();
 800ea1e:	f000 fa05 	bl	800ee2c <Stspin220_Board_Disable>
  
  /* Set Priority of External Line Interrupt used for the FAULT interrupt*/ 
  HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_IRQn_EN_AND_FAULT,\
 800ea22:	2200      	movs	r2, #0
 800ea24:	2101      	movs	r1, #1
 800ea26:	2007      	movs	r0, #7
 800ea28:	f001 f834 	bl	800fa94 <HAL_NVIC_SetPriority>
    BSP_MOTOR_CONTROL_BOARD_PRIORITY_EN_AND_FAULT,\
    0);
    
  /* Enable the External Line Interrupt used for the FAULT interrupt*/
  HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_IRQn_EN_AND_FAULT);  
 800ea2c:	2007      	movs	r0, #7
 800ea2e:	f001 f846 	bl	800fabe <HAL_NVIC_EnableIRQ>
 
  /* Configure STSPIN220 - MODE1 pin -----------------------------------------*/
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_MODE1;
 800ea32:	240c      	movs	r4, #12
 800ea34:	193b      	adds	r3, r7, r4
 800ea36:	2210      	movs	r2, #16
 800ea38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ea3a:	193b      	adds	r3, r7, r4
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea40:	193b      	adds	r3, r7, r4
 800ea42:	2200      	movs	r2, #0
 800ea44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800ea46:	193b      	adds	r3, r7, r4
 800ea48:	2201      	movs	r2, #1
 800ea4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_MODE1, &GPIO_InitStruct);
 800ea4c:	193b      	adds	r3, r7, r4
 800ea4e:	4a24      	ldr	r2, [pc, #144]	; (800eae0 <Stspin220_Board_GpioInit+0x110>)
 800ea50:	0019      	movs	r1, r3
 800ea52:	0010      	movs	r0, r2
 800ea54:	f001 f8b8 	bl	800fbc8 <HAL_GPIO_Init>

  /* Configure STSPIN220 - MODE2 pin -----------------------------------------*/
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_MODE2;
 800ea58:	193b      	adds	r3, r7, r4
 800ea5a:	2240      	movs	r2, #64	; 0x40
 800ea5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ea5e:	193b      	adds	r3, r7, r4
 800ea60:	2201      	movs	r2, #1
 800ea62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea64:	193b      	adds	r3, r7, r4
 800ea66:	2200      	movs	r2, #0
 800ea68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800ea6a:	193b      	adds	r3, r7, r4
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_MODE2, &GPIO_InitStruct);
 800ea70:	193b      	adds	r3, r7, r4
 800ea72:	4a1b      	ldr	r2, [pc, #108]	; (800eae0 <Stspin220_Board_GpioInit+0x110>)
 800ea74:	0019      	movs	r1, r3
 800ea76:	0010      	movs	r0, r2
 800ea78:	f001 f8a6 	bl	800fbc8 <HAL_GPIO_Init>

  /* Configure STSPIN220 - DIR pin -------------------------------------------*/
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_DIR_MODE4;
 800ea7c:	0021      	movs	r1, r4
 800ea7e:	187b      	adds	r3, r7, r1
 800ea80:	2280      	movs	r2, #128	; 0x80
 800ea82:	0052      	lsls	r2, r2, #1
 800ea84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ea86:	000c      	movs	r4, r1
 800ea88:	193b      	adds	r3, r7, r4
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea8e:	193b      	adds	r3, r7, r4
 800ea90:	2200      	movs	r2, #0
 800ea92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800ea94:	193b      	adds	r3, r7, r4
 800ea96:	2201      	movs	r2, #1
 800ea98:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_DIR_MODE4, &GPIO_InitStruct);
 800ea9a:	193a      	adds	r2, r7, r4
 800ea9c:	23a0      	movs	r3, #160	; 0xa0
 800ea9e:	05db      	lsls	r3, r3, #23
 800eaa0:	0011      	movs	r1, r2
 800eaa2:	0018      	movs	r0, r3
 800eaa4:	f001 f890 	bl	800fbc8 <HAL_GPIO_Init>
  
  /* Configure STSPIN220 - STBY/RESET pin ------------------------------------*/
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_STBY_RESET;
 800eaa8:	0021      	movs	r1, r4
 800eaaa:	187b      	adds	r3, r7, r1
 800eaac:	2280      	movs	r2, #128	; 0x80
 800eaae:	0152      	lsls	r2, r2, #5
 800eab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eab2:	187b      	adds	r3, r7, r1
 800eab4:	2201      	movs	r2, #1
 800eab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eab8:	187b      	adds	r3, r7, r1
 800eaba:	2200      	movs	r2, #0
 800eabc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800eabe:	187b      	adds	r3, r7, r1
 800eac0:	2201      	movs	r2, #1
 800eac2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_STBY_RESET, &GPIO_InitStruct);
 800eac4:	187b      	adds	r3, r7, r1
 800eac6:	4a06      	ldr	r2, [pc, #24]	; (800eae0 <Stspin220_Board_GpioInit+0x110>)
 800eac8:	0019      	movs	r1, r3
 800eaca:	0010      	movs	r0, r2
 800eacc:	f001 f87c 	bl	800fbc8 <HAL_GPIO_Init>
  Stspin220_Board_Reset();
 800ead0:	f000 f98a 	bl	800ede8 <Stspin220_Board_Reset>

}
 800ead4:	46c0      	nop			; (mov r8, r8)
 800ead6:	46bd      	mov	sp, r7
 800ead8:	b009      	add	sp, #36	; 0x24
 800eada:	bd90      	pop	{r4, r7, pc}
 800eadc:	40021000 	.word	0x40021000
 800eae0:	50000400 	.word	0x50000400

0800eae4 <Stspin220_Board_TimStckStart>:
 * @brief  Starts the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Stspin220_Board_TimStckStart()
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	af00      	add	r7, sp, #0
  {
    __HAL_TIM_CLEAR_IT(&hTimerStepClock, TIM_IT_CC1);
  }
  else if (BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK == TIM_CHANNEL_2)
  {
    __HAL_TIM_CLEAR_IT(&hTimerStepClock, TIM_IT_CC2);
 800eae8:	4b0f      	ldr	r3, [pc, #60]	; (800eb28 <Stspin220_Board_TimStckStart+0x44>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2205      	movs	r2, #5
 800eaee:	4252      	negs	r2, r2
 800eaf0:	611a      	str	r2, [r3, #16]
  {
    __HAL_TIM_CLEAR_IT(&hTimerStepClock, TIM_IT_CC4);
  }
  /* Start timer interrupts */
#if (BSP_MOTOR_CONTROL_BOARD_OUTPUT_TIM_STCK == TIMER_MAIN_OUTPUT)
    if (hTimerStepClock.Instance->CCER == 0)
 800eaf2:	4b0d      	ldr	r3, [pc, #52]	; (800eb28 <Stspin220_Board_TimStckStart+0x44>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	6a1b      	ldr	r3, [r3, #32]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d108      	bne.n	800eb0e <Stspin220_Board_TimStckStart+0x2a>
  {
      hTimerStepClock.Instance->CCER |=\
 800eafc:	4b0a      	ldr	r3, [pc, #40]	; (800eb28 <Stspin220_Board_TimStckStart+0x44>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	6a1a      	ldr	r2, [r3, #32]
 800eb02:	4b09      	ldr	r3, [pc, #36]	; (800eb28 <Stspin220_Board_TimStckStart+0x44>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2120      	movs	r1, #32
 800eb08:	430a      	orrs	r2, r1
 800eb0a:	621a      	str	r2, [r3, #32]
 800eb0c:	e003      	b.n	800eb16 <Stspin220_Board_TimStckStart+0x32>
      (TIM_OCPOLARITY_LOW<<BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK);
  }
  else
  {
      hTimerStepClock.Instance->CCER = 0;
 800eb0e:	4b06      	ldr	r3, [pc, #24]	; (800eb28 <Stspin220_Board_TimStckStart+0x44>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2200      	movs	r2, #0
 800eb14:	621a      	str	r2, [r3, #32]
  }
  HAL_TIM_OC_Start_IT(&hTimerStepClock,\
 800eb16:	4b04      	ldr	r3, [pc, #16]	; (800eb28 <Stspin220_Board_TimStckStart+0x44>)
 800eb18:	2104      	movs	r1, #4
 800eb1a:	0018      	movs	r0, r3
 800eb1c:	f002 ff8e 	bl	8011a3c <HAL_TIM_OC_Start_IT>
    BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3,\
        GPIO_PIN_RESET);
    HAL_TIM_OC_Start_IT(&hTimerStepClock,\
    BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK);
#endif /* (BSP_MOTOR_CONTROL_BOARD_OUTPUT_TIM_STCK == TIMER_NO_OUTPUT) */
}
 800eb20:	46c0      	nop			; (mov r8, r8)
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	46c0      	nop			; (mov r8, r8)
 800eb28:	200037b0 	.word	0x200037b0

0800eb2c <Stspin220_Board_TimStckCompareInit>:
/******************************************************//**
 * @brief Step clock compare value initialization
 * @retval None
 **********************************************************/
void Stspin220_Board_TimStckCompareInit(void)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	af00      	add	r7, sp, #0
  ccrValue = hTimerStepClock.Instance->CNT;
 800eb30:	4b03      	ldr	r3, [pc, #12]	; (800eb40 <Stspin220_Board_TimStckCompareInit+0x14>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb36:	4b03      	ldr	r3, [pc, #12]	; (800eb44 <Stspin220_Board_TimStckCompareInit+0x18>)
 800eb38:	601a      	str	r2, [r3, #0]
}
 800eb3a:	46c0      	nop			; (mov r8, r8)
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	200037b0 	.word	0x200037b0
 800eb44:	200037ac 	.word	0x200037ac

0800eb48 <Stspin220_Board_TimStckSetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Stspin220_Board_TimStckSetFreq(uint16_t newFreq)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	0002      	movs	r2, r0
 800eb50:	1dbb      	adds	r3, r7, #6
 800eb52:	801a      	strh	r2, [r3, #0]
  ccrValue += (HAL_RCC_GetSysClockFreq()/\
 800eb54:	f002 fcee 	bl	8011534 <HAL_RCC_GetSysClockFreq>
 800eb58:	0002      	movs	r2, r0
                           (TIMER_PRESCALER * 2 * (uint32_t)newFreq));
 800eb5a:	1dbb      	adds	r3, r7, #6
 800eb5c:	881b      	ldrh	r3, [r3, #0]
 800eb5e:	019b      	lsls	r3, r3, #6
  ccrValue += (HAL_RCC_GetSysClockFreq()/\
 800eb60:	0019      	movs	r1, r3
 800eb62:	0010      	movs	r0, r2
 800eb64:	f7f1 faec 	bl	8000140 <__udivsi3>
 800eb68:	0003      	movs	r3, r0
 800eb6a:	001a      	movs	r2, r3
 800eb6c:	4b06      	ldr	r3, [pc, #24]	; (800eb88 <Stspin220_Board_TimStckSetFreq+0x40>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	18d2      	adds	r2, r2, r3
 800eb72:	4b05      	ldr	r3, [pc, #20]	; (800eb88 <Stspin220_Board_TimStckSetFreq+0x40>)
 800eb74:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SetCompare(&hTimerStepClock,\
 800eb76:	4b05      	ldr	r3, [pc, #20]	; (800eb8c <Stspin220_Board_TimStckSetFreq+0x44>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4a03      	ldr	r2, [pc, #12]	; (800eb88 <Stspin220_Board_TimStckSetFreq+0x40>)
 800eb7c:	6812      	ldr	r2, [r2, #0]
 800eb7e:	639a      	str	r2, [r3, #56]	; 0x38
    BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK,\
    ccrValue);
}
 800eb80:	46c0      	nop			; (mov r8, r8)
 800eb82:	46bd      	mov	sp, r7
 800eb84:	b002      	add	sp, #8
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	200037ac 	.word	0x200037ac
 800eb8c:	200037b0 	.word	0x200037b0

0800eb90 <Stspin220_Board_PwmRefStart>:
/******************************************************//**
 * @brief  Starts the PWM used for the reference voltage generation
 * @retval None
 **********************************************************/
void Stspin220_Board_PwmRefStart(void)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_IT(&hTimerPwm,BSP_MOTOR_CONTROL_BOARD_CHAN_PWM_REF);  
 800eb94:	4b05      	ldr	r3, [pc, #20]	; (800ebac <Stspin220_Board_PwmRefStart+0x1c>)
 800eb96:	2104      	movs	r1, #4
 800eb98:	0018      	movs	r0, r3
 800eb9a:	f003 f82f 	bl	8011bfc <HAL_TIM_PWM_Start_IT>
  HAL_Delay(5*PWM_FILTER_TIME_CONSTANT);
 800eb9e:	2019      	movs	r0, #25
 800eba0:	f000 fe7c 	bl	800f89c <HAL_Delay>
}
 800eba4:	46c0      	nop			; (mov r8, r8)
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	46c0      	nop			; (mov r8, r8)
 800ebac:	200037ec 	.word	0x200037ec

0800ebb0 <Stspin220_Board_PwmRefSetFreqAndDutyCycle>:
 * @param[in] newFreq in Hz
 * @param[in] dutyCycle 0 - 100%
 * @retval None
 **********************************************************/
void Stspin220_Board_PwmRefSetFreqAndDutyCycle(uint32_t newFreq, uint8_t dutyCycle)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	000a      	movs	r2, r1
 800ebba:	1cfb      	adds	r3, r7, #3
 800ebbc:	701a      	strb	r2, [r3, #0]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800ebbe:	f002 fcb9 	bl	8011534 <HAL_RCC_GetSysClockFreq>
 800ebc2:	0003      	movs	r3, r0
 800ebc4:	617b      	str	r3, [r7, #20]
  uint32_t period = (sysFreq/newFreq) - 1;
 800ebc6:	6879      	ldr	r1, [r7, #4]
 800ebc8:	6978      	ldr	r0, [r7, #20]
 800ebca:	f7f1 fab9 	bl	8000140 <__udivsi3>
 800ebce:	0003      	movs	r3, r0
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	613b      	str	r3, [r7, #16]
  uint16_t pulseLength;
  TIM_HandleTypeDef *pHTim;
  
  pHTim = &hTimerPwm;
 800ebd4:	4b15      	ldr	r3, [pc, #84]	; (800ec2c <Stspin220_Board_PwmRefSetFreqAndDutyCycle+0x7c>)
 800ebd6:	60fb      	str	r3, [r7, #12]
  pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_PWM_REF;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	4a15      	ldr	r2, [pc, #84]	; (800ec30 <Stspin220_Board_PwmRefSetFreqAndDutyCycle+0x80>)
 800ebdc:	601a      	str	r2, [r3, #0]
  
  if (dutyCycle > 100) dutyCycle = 100;
 800ebde:	1cfb      	adds	r3, r7, #3
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	2b64      	cmp	r3, #100	; 0x64
 800ebe4:	d902      	bls.n	800ebec <Stspin220_Board_PwmRefSetFreqAndDutyCycle+0x3c>
 800ebe6:	1cfb      	adds	r3, r7, #3
 800ebe8:	2264      	movs	r2, #100	; 0x64
 800ebea:	701a      	strb	r2, [r3, #0]
  pulseLength = (uint16_t)((period * (100-(uint32_t)dutyCycle)) / 100);
 800ebec:	1cfb      	adds	r3, r7, #3
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	2264      	movs	r2, #100	; 0x64
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	693a      	ldr	r2, [r7, #16]
 800ebf6:	4353      	muls	r3, r2
 800ebf8:	2164      	movs	r1, #100	; 0x64
 800ebfa:	0018      	movs	r0, r3
 800ebfc:	f7f1 faa0 	bl	8000140 <__udivsi3>
 800ec00:	0003      	movs	r3, r0
 800ec02:	001a      	movs	r2, r3
 800ec04:	210a      	movs	r1, #10
 800ec06:	187b      	adds	r3, r7, r1
 800ec08:	801a      	strh	r2, [r3, #0]
  
  __HAL_TIM_SetAutoreload(pHTim, period);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	693a      	ldr	r2, [r7, #16]
 800ec10:	62da      	str	r2, [r3, #44]	; 0x2c
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	693a      	ldr	r2, [r7, #16]
 800ec16:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SetCompare(pHTim, BSP_MOTOR_CONTROL_BOARD_CHAN_PWM_REF, pulseLength);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	187a      	adds	r2, r7, r1
 800ec1e:	8812      	ldrh	r2, [r2, #0]
 800ec20:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ec22:	46c0      	nop			; (mov r8, r8)
 800ec24:	46bd      	mov	sp, r7
 800ec26:	b006      	add	sp, #24
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	46c0      	nop			; (mov r8, r8)
 800ec2c:	200037ec 	.word	0x200037ec
 800ec30:	40011400 	.word	0x40011400

0800ec34 <Stspin220_Board_PwmRefInit>:
/******************************************************//**
 * @brief  Initialises the PWM used for the reference voltage generation
 * @retval None
 **********************************************************/
void Stspin220_Board_PwmRefInit(void)
{
 800ec34:	b590      	push	{r4, r7, lr}
 800ec36:	b089      	sub	sp, #36	; 0x24
 800ec38:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;

  pHTim = &hTimerPwm;
 800ec3a:	4b1a      	ldr	r3, [pc, #104]	; (800eca4 <Stspin220_Board_PwmRefInit+0x70>)
 800ec3c:	61fb      	str	r3, [r7, #28]
  
  pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_PWM_REF;
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	4a19      	ldr	r2, [pc, #100]	; (800eca8 <Stspin220_Board_PwmRefInit+0x74>)
 800ec42:	601a      	str	r2, [r3, #0]
  pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	2200      	movs	r2, #0
 800ec48:	609a      	str	r2, [r3, #8]
  pHTim->Init.Prescaler = 0;
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	605a      	str	r2, [r3, #4]
  pHTim->Init.Period = 0;
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	2200      	movs	r2, #0
 800ec54:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	611a      	str	r2, [r3, #16]
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ec5c:	240c      	movs	r4, #12
 800ec5e:	193b      	adds	r3, r7, r4
 800ec60:	2260      	movs	r2, #96	; 0x60
 800ec62:	601a      	str	r2, [r3, #0]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ec64:	193b      	adds	r3, r7, r4
 800ec66:	2200      	movs	r2, #0
 800ec68:	60da      	str	r2, [r3, #12]
  sConfigOC.Pulse = 0;
 800ec6a:	193b      	adds	r3, r7, r4
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	605a      	str	r2, [r3, #4]

  HAL_TIM_PWM_Init(pHTim);
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	0018      	movs	r0, r3
 800ec74:	f002 ff96 	bl	8011ba4 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_PWM_REF);
 800ec78:	1939      	adds	r1, r7, r4
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	2204      	movs	r2, #4
 800ec7e:	0018      	movs	r0, r3
 800ec80:	f003 f954 	bl	8011f2c <HAL_TIM_PWM_ConfigChannel>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ec84:	1d3b      	adds	r3, r7, #4
 800ec86:	2200      	movs	r2, #0
 800ec88:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ec8a:	1d3b      	adds	r3, r7, #4
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 800ec90:	1d3a      	adds	r2, r7, #4
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	0011      	movs	r1, r2
 800ec96:	0018      	movs	r0, r3
 800ec98:	f003 fbb1 	bl	80123fe <HAL_TIMEx_MasterConfigSynchronization>
}
 800ec9c:	46c0      	nop			; (mov r8, r8)
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	b009      	add	sp, #36	; 0x24
 800eca2:	bd90      	pop	{r4, r7, pc}
 800eca4:	200037ec 	.word	0x200037ec
 800eca8:	40011400 	.word	0x40011400

0800ecac <Stspin220_Board_TimStckInit>:
/******************************************************//**
 * @brief  Initialises the timer used for the step clock
 * @retval None
 **********************************************************/
void Stspin220_Board_TimStckInit(void)
{
 800ecac:	b590      	push	{r4, r7, lr}
 800ecae:	b089      	sub	sp, #36	; 0x24
 800ecb0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;

  pHTim = &hTimerStepClock;
 800ecb2:	4b27      	ldr	r3, [pc, #156]	; (800ed50 <Stspin220_Board_TimStckInit+0xa4>)
 800ecb4:	61fb      	str	r3, [r7, #28]
  pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIM_STCK;
 800ecb6:	69fb      	ldr	r3, [r7, #28]
 800ecb8:	2280      	movs	r2, #128	; 0x80
 800ecba:	05d2      	lsls	r2, r2, #23
 800ecbc:	601a      	str	r2, [r3, #0]
  pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	609a      	str	r2, [r3, #8]
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	221f      	movs	r2, #31
 800ecc8:	605a      	str	r2, [r3, #4]
  pHTim->Init.Period = 0xFFFF;
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	4a21      	ldr	r2, [pc, #132]	; (800ed54 <Stspin220_Board_TimStckInit+0xa8>)
 800ecce:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	611a      	str	r2, [r3, #16]
  HAL_TIM_OC_Init(pHTim);  
 800ecd6:	69fb      	ldr	r3, [r7, #28]
 800ecd8:	0018      	movs	r0, r3
 800ecda:	f002 fe59 	bl	8011990 <HAL_TIM_OC_Init>

  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ecde:	210c      	movs	r1, #12
 800ece0:	187b      	adds	r3, r7, r1
 800ece2:	2200      	movs	r2, #0
 800ece4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ece6:	187b      	adds	r3, r7, r1
 800ece8:	2200      	movs	r2, #0
 800ecea:	60da      	str	r2, [r3, #12]
  sConfigOC.Pulse = 0;
 800ecec:	187b      	adds	r3, r7, r1
 800ecee:	2200      	movs	r2, #0
 800ecf0:	605a      	str	r2, [r3, #4]
  if (pHTim->Instance != TIM21)
 800ecf2:	69fb      	ldr	r3, [r7, #28]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	4a18      	ldr	r2, [pc, #96]	; (800ed58 <Stspin220_Board_TimStckInit+0xac>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d00d      	beq.n	800ed18 <Stspin220_Board_TimStckInit+0x6c>
  {
    /* Setting the OCMode to TIM_OCMODE_FORCED_ACTIVE ensures that on the */
    /* first interrupt occuring in the toggle mode, a rising edge will occur */
    sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 800ecfc:	187b      	adds	r3, r7, r1
 800ecfe:	2250      	movs	r2, #80	; 0x50
 800ed00:	601a      	str	r2, [r3, #0]
    HAL_TIM_OC_ConfigChannel(pHTim, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK);
 800ed02:	000c      	movs	r4, r1
 800ed04:	1879      	adds	r1, r7, r1
 800ed06:	69fb      	ldr	r3, [r7, #28]
 800ed08:	2204      	movs	r2, #4
 800ed0a:	0018      	movs	r0, r3
 800ed0c:	f003 f8b8 	bl	8011e80 <HAL_TIM_OC_ConfigChannel>
    sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800ed10:	193b      	adds	r3, r7, r4
 800ed12:	2230      	movs	r2, #48	; 0x30
 800ed14:	601a      	str	r2, [r3, #0]
 800ed16:	e003      	b.n	800ed20 <Stspin220_Board_TimStckInit+0x74>
  }
  else
  {
    sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800ed18:	230c      	movs	r3, #12
 800ed1a:	18fb      	adds	r3, r7, r3
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	601a      	str	r2, [r3, #0]
  }
  HAL_TIM_OC_ConfigChannel(pHTim, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK);
 800ed20:	230c      	movs	r3, #12
 800ed22:	18f9      	adds	r1, r7, r3
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	2204      	movs	r2, #4
 800ed28:	0018      	movs	r0, r3
 800ed2a:	f003 f8a9 	bl	8011e80 <HAL_TIM_OC_ConfigChannel>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ed2e:	1d3b      	adds	r3, r7, #4
 800ed30:	2200      	movs	r2, #0
 800ed32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ed34:	1d3b      	adds	r3, r7, #4
 800ed36:	2200      	movs	r2, #0
 800ed38:	605a      	str	r2, [r3, #4]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 800ed3a:	1d3a      	adds	r2, r7, #4
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	0011      	movs	r1, r2
 800ed40:	0018      	movs	r0, r3
 800ed42:	f003 fb5c 	bl	80123fe <HAL_TIMEx_MasterConfigSynchronization>
}
 800ed46:	46c0      	nop			; (mov r8, r8)
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	b009      	add	sp, #36	; 0x24
 800ed4c:	bd90      	pop	{r4, r7, pc}
 800ed4e:	46c0      	nop			; (mov r8, r8)
 800ed50:	200037b0 	.word	0x200037b0
 800ed54:	0000ffff 	.word	0x0000ffff
 800ed58:	40010800 	.word	0x40010800

0800ed5c <Stspin220_Board_TimStckDeInit>:
/******************************************************//**
 * @brief  DeInitialises the timer used for the step clock
 * @retval None
 **********************************************************/
void Stspin220_Board_TimStckDeInit(void)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	af00      	add	r7, sp, #0
  HAL_TIM_OC_DeInit(&hTimerStepClock);
 800ed60:	4b03      	ldr	r3, [pc, #12]	; (800ed70 <Stspin220_Board_TimStckDeInit+0x14>)
 800ed62:	0018      	movs	r0, r3
 800ed64:	f002 fe40 	bl	80119e8 <HAL_TIM_OC_DeInit>
}
 800ed68:	46c0      	nop			; (mov r8, r8)
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	46c0      	nop			; (mov r8, r8)
 800ed70:	200037b0 	.word	0x200037b0

0800ed74 <Stspin220_Board_TimStckStop>:
 * @brief  Stops the timer
 * @param[in] pToggleOdd pointer to the volatile toggleOdd variable
 * @retval 1 if OK, 0 if STCK MODE3 pin is high (forbidden configuration) 
 **********************************************************/
uint8_t Stspin220_Board_TimStckStop(volatile uint8_t *pToggleOdd)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ed7c:	b672      	cpsid	i
}
 800ed7e:	46c0      	nop			; (mov r8, r8)
  __disable_irq();
  if (*pToggleOdd == 1)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	2b01      	cmp	r3, #1
 800ed88:	d103      	bne.n	800ed92 <Stspin220_Board_TimStckStop+0x1e>
  __ASM volatile ("cpsie i" : : : "memory");
 800ed8a:	b662      	cpsie	i
}
 800ed8c:	46c0      	nop			; (mov r8, r8)
{
    __enable_irq();
    return 1;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e014      	b.n	800edbc <Stspin220_Board_TimStckStop+0x48>
  }
  if (HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3,\
 800ed92:	4b0c      	ldr	r3, [pc, #48]	; (800edc4 <Stspin220_Board_TimStckStop+0x50>)
 800ed94:	2108      	movs	r1, #8
 800ed96:	0018      	movs	r0, r3
 800ed98:	f001 f976 	bl	8010088 <HAL_GPIO_ReadPin>
 800ed9c:	1e03      	subs	r3, r0, #0
 800ed9e:	d003      	beq.n	800eda8 <Stspin220_Board_TimStckStop+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 800eda0:	b662      	cpsie	i
}
 800eda2:	46c0      	nop			; (mov r8, r8)
    BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3) != 0)
  {
    __enable_irq();
    return 0;
 800eda4:	2300      	movs	r3, #0
 800eda6:	e009      	b.n	800edbc <Stspin220_Board_TimStckStop+0x48>
  }
#if (BSP_MOTOR_CONTROL_BOARD_OUTPUT_TIM_STCK == TIMER_COMPLEMENTARY_OUTPUT)
  HAL_TIMEx_OCN_Stop_IT(&hTimerStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK);
#else
  HAL_TIM_OC_Stop_IT(&hTimerStepClock,BSP_MOTOR_CONTROL_BOARD_CHAN_TIM_STCK);
 800eda8:	4b07      	ldr	r3, [pc, #28]	; (800edc8 <Stspin220_Board_TimStckStop+0x54>)
 800edaa:	2104      	movs	r1, #4
 800edac:	0018      	movs	r0, r3
 800edae:	f002 fe9f 	bl	8011af0 <HAL_TIM_OC_Stop_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800edb2:	b662      	cpsie	i
}
 800edb4:	46c0      	nop			; (mov r8, r8)
#endif
  __enable_irq();
  /* DeInitialize the step clock timer */
  Stspin220_Board_TimStckDeInit();
 800edb6:	f7ff ffd1 	bl	800ed5c <Stspin220_Board_TimStckDeInit>
  return 1;
 800edba:	2301      	movs	r3, #1
}
 800edbc:	0018      	movs	r0, r3
 800edbe:	46bd      	mov	sp, r7
 800edc0:	b002      	add	sp, #8
 800edc2:	bd80      	pop	{r7, pc}
 800edc4:	50000400 	.word	0x50000400
 800edc8:	200037b0 	.word	0x200037b0

0800edcc <Stspin220_Board_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the STSPIN220 reset (pin set to High)
 * @retval None
 **********************************************************/
void Stspin220_Board_ReleaseReset(void)
{ 
 800edcc:	b580      	push	{r7, lr}
 800edce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_STBY_RESET,\
 800edd0:	2380      	movs	r3, #128	; 0x80
 800edd2:	015b      	lsls	r3, r3, #5
 800edd4:	4803      	ldr	r0, [pc, #12]	; (800ede4 <Stspin220_Board_ReleaseReset+0x18>)
 800edd6:	2201      	movs	r2, #1
 800edd8:	0019      	movs	r1, r3
 800edda:	f001 f972 	bl	80100c2 <HAL_GPIO_WritePin>
    BSP_MOTOR_CONTROL_BOARD_PIN_STBY_RESET,\
    GPIO_PIN_SET);
}
 800edde:	46c0      	nop			; (mov r8, r8)
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	50000400 	.word	0x50000400

0800ede8 <Stspin220_Board_Reset>:
/******************************************************//**
 * @brief  Resets the STSPIN220 (reset pin set to low)
 * @retval None
 **********************************************************/
void Stspin220_Board_Reset(void)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_STBY_RESET,\
 800edec:	2380      	movs	r3, #128	; 0x80
 800edee:	015b      	lsls	r3, r3, #5
 800edf0:	4803      	ldr	r0, [pc, #12]	; (800ee00 <Stspin220_Board_Reset+0x18>)
 800edf2:	2200      	movs	r2, #0
 800edf4:	0019      	movs	r1, r3
 800edf6:	f001 f964 	bl	80100c2 <HAL_GPIO_WritePin>
    BSP_MOTOR_CONTROL_BOARD_PIN_STBY_RESET,\
    GPIO_PIN_RESET);
}
 800edfa:	46c0      	nop			; (mov r8, r8)
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	50000400 	.word	0x50000400

0800ee04 <Stspin220_Board_SetDirectionGpio>:
 * @brief  Set the GPIO used for the direction
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void Stspin220_Board_SetDirectionGpio(uint8_t gpioState)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	0002      	movs	r2, r0
 800ee0c:	1dfb      	adds	r3, r7, #7
 800ee0e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_DIR_MODE4,\
 800ee10:	1dfb      	adds	r3, r7, #7
 800ee12:	781a      	ldrb	r2, [r3, #0]
 800ee14:	2380      	movs	r3, #128	; 0x80
 800ee16:	0059      	lsls	r1, r3, #1
 800ee18:	23a0      	movs	r3, #160	; 0xa0
 800ee1a:	05db      	lsls	r3, r3, #23
 800ee1c:	0018      	movs	r0, r3
 800ee1e:	f001 f950 	bl	80100c2 <HAL_GPIO_WritePin>
    BSP_MOTOR_CONTROL_BOARD_PIN_DIR_MODE4,\
    (GPIO_PinState)gpioState);
}
 800ee22:	46c0      	nop			; (mov r8, r8)
 800ee24:	46bd      	mov	sp, r7
 800ee26:	b002      	add	sp, #8
 800ee28:	bd80      	pop	{r7, pc}
	...

0800ee2c <Stspin220_Board_Disable>:
 * @brief Disable the power bridges (leave the output bridges HiZ)
 * the IHM06A1 board
 * @retval None
 **********************************************************/
void Stspin220_Board_Disable(void)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Configure the GPIO connected to EN pin as an output */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT;
 800ee32:	1d3b      	adds	r3, r7, #4
 800ee34:	2280      	movs	r2, #128	; 0x80
 800ee36:	0192      	lsls	r2, r2, #6
 800ee38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ee3a:	1d3b      	adds	r3, r7, #4
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee40:	1d3b      	adds	r3, r7, #4
 800ee42:	2200      	movs	r2, #0
 800ee44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800ee46:	1d3b      	adds	r3, r7, #4
 800ee48:	2201      	movs	r2, #1
 800ee4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, &GPIO_InitStruct);
 800ee4c:	1d3b      	adds	r3, r7, #4
 800ee4e:	4a0c      	ldr	r2, [pc, #48]	; (800ee80 <Stspin220_Board_Disable+0x54>)
 800ee50:	0019      	movs	r1, r3
 800ee52:	0010      	movs	r0, r2
 800ee54:	f000 feb8 	bl	800fbc8 <HAL_GPIO_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 800ee58:	b672      	cpsid	i
}
 800ee5a:	46c0      	nop			; (mov r8, r8)
  __disable_irq();
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT,\
 800ee5c:	2380      	movs	r3, #128	; 0x80
 800ee5e:	019b      	lsls	r3, r3, #6
 800ee60:	4807      	ldr	r0, [pc, #28]	; (800ee80 <Stspin220_Board_Disable+0x54>)
 800ee62:	2200      	movs	r2, #0
 800ee64:	0019      	movs	r1, r3
 800ee66:	f001 f92c 	bl	80100c2 <HAL_GPIO_WritePin>
    BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT,\
    GPIO_PIN_RESET);
  __HAL_GPIO_EXTI_CLEAR_IT(BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT);
 800ee6a:	4b06      	ldr	r3, [pc, #24]	; (800ee84 <Stspin220_Board_Disable+0x58>)
 800ee6c:	2280      	movs	r2, #128	; 0x80
 800ee6e:	0192      	lsls	r2, r2, #6
 800ee70:	615a      	str	r2, [r3, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 800ee72:	b662      	cpsie	i
}
 800ee74:	46c0      	nop			; (mov r8, r8)
  __enable_irq();
}
 800ee76:	46c0      	nop			; (mov r8, r8)
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	b006      	add	sp, #24
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	46c0      	nop			; (mov r8, r8)
 800ee80:	50000400 	.word	0x50000400
 800ee84:	40010400 	.word	0x40010400

0800ee88 <Stspin220_Board_Enable>:
/******************************************************//**
 * @brief Enable the power bridges (leave the output bridges HiZ)
 * @retval None
 **********************************************************/
void Stspin220_Board_Enable(void)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b086      	sub	sp, #24
 800ee8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  if (HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT,BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT) == 0)
 800ee8e:	2380      	movs	r3, #128	; 0x80
 800ee90:	019b      	lsls	r3, r3, #6
 800ee92:	4a19      	ldr	r2, [pc, #100]	; (800eef8 <Stspin220_Board_Enable+0x70>)
 800ee94:	0019      	movs	r1, r3
 800ee96:	0010      	movs	r0, r2
 800ee98:	f001 f8f6 	bl	8010088 <HAL_GPIO_ReadPin>
 800ee9c:	1e03      	subs	r3, r0, #0
 800ee9e:	d126      	bne.n	800eeee <Stspin220_Board_Enable+0x66>
  {
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT, GPIO_PIN_SET);
 800eea0:	2380      	movs	r3, #128	; 0x80
 800eea2:	019b      	lsls	r3, r3, #6
 800eea4:	4814      	ldr	r0, [pc, #80]	; (800eef8 <Stspin220_Board_Enable+0x70>)
 800eea6:	2201      	movs	r2, #1
 800eea8:	0019      	movs	r1, r3
 800eeaa:	f001 f90a 	bl	80100c2 <HAL_GPIO_WritePin>
  HAL_Delay(BRIDGE_TURN_ON_DELAY);
 800eeae:	200a      	movs	r0, #10
 800eeb0:	f000 fcf4 	bl	800f89c <HAL_Delay>
  /* Configure the GPIO connected to EN pin to take interrupt */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT;
 800eeb4:	1d3b      	adds	r3, r7, #4
 800eeb6:	2280      	movs	r2, #128	; 0x80
 800eeb8:	0192      	lsls	r2, r2, #6
 800eeba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800eebc:	1d3b      	adds	r3, r7, #4
 800eebe:	4a0f      	ldr	r2, [pc, #60]	; (800eefc <Stspin220_Board_Enable+0x74>)
 800eec0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eec2:	1d3b      	adds	r3, r7, #4
 800eec4:	2201      	movs	r2, #1
 800eec6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800eec8:	1d3b      	adds	r3, r7, #4
 800eeca:	2201      	movs	r2, #1
 800eecc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, &GPIO_InitStruct);
 800eece:	1d3b      	adds	r3, r7, #4
 800eed0:	4a09      	ldr	r2, [pc, #36]	; (800eef8 <Stspin220_Board_Enable+0x70>)
 800eed2:	0019      	movs	r1, r3
 800eed4:	0010      	movs	r0, r2
 800eed6:	f000 fe77 	bl	800fbc8 <HAL_GPIO_Init>
  __HAL_GPIO_EXTI_CLEAR_IT(BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT);
 800eeda:	4b09      	ldr	r3, [pc, #36]	; (800ef00 <Stspin220_Board_Enable+0x78>)
 800eedc:	2280      	movs	r2, #128	; 0x80
 800eede:	0192      	lsls	r2, r2, #6
 800eee0:	615a      	str	r2, [r3, #20]
  HAL_NVIC_ClearPendingIRQ(BSP_MOTOR_CONTROL_BOARD_IRQn_EN_AND_FAULT);
 800eee2:	2007      	movs	r0, #7
 800eee4:	f000 fe18 	bl	800fb18 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_IRQn_EN_AND_FAULT);  
 800eee8:	2007      	movs	r0, #7
 800eeea:	f000 fde8 	bl	800fabe <HAL_NVIC_EnableIRQ>
  }
}
 800eeee:	46c0      	nop			; (mov r8, r8)
 800eef0:	46bd      	mov	sp, r7
 800eef2:	b006      	add	sp, #24
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	46c0      	nop			; (mov r8, r8)
 800eef8:	50000400 	.word	0x50000400
 800eefc:	10210000 	.word	0x10210000
 800ef00:	40010400 	.word	0x40010400

0800ef04 <Stspin220_Board_EN_AND_FAULT_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the EN FAULT pin state.
 * @retval The EN FAULT pin value.
 **********************************************************/
uint32_t Stspin220_Board_EN_AND_FAULT_PIN_GetState(void)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_PORT_EN_AND_FAULT, BSP_MOTOR_CONTROL_BOARD_PIN_EN_AND_FAULT);
 800ef08:	2380      	movs	r3, #128	; 0x80
 800ef0a:	019b      	lsls	r3, r3, #6
 800ef0c:	4a04      	ldr	r2, [pc, #16]	; (800ef20 <Stspin220_Board_EN_AND_FAULT_PIN_GetState+0x1c>)
 800ef0e:	0019      	movs	r1, r3
 800ef10:	0010      	movs	r0, r2
 800ef12:	f001 f8b9 	bl	8010088 <HAL_GPIO_ReadPin>
 800ef16:	0003      	movs	r3, r0
}
 800ef18:	0018      	movs	r0, r3
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	46c0      	nop			; (mov r8, r8)
 800ef20:	50000400 	.word	0x50000400

0800ef24 <Stspin220_Board_SetModePins>:
 **********************************************************/
uint8_t Stspin220_Board_SetModePins(uint8_t modePin1Level,\
  uint8_t modePin2Level,\
  uint8_t modePin3Level,\
  uint8_t modePin4Level)
{
 800ef24:	b5b0      	push	{r4, r5, r7, lr}
 800ef26:	b088      	sub	sp, #32
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	0005      	movs	r5, r0
 800ef2c:	000c      	movs	r4, r1
 800ef2e:	0010      	movs	r0, r2
 800ef30:	0019      	movs	r1, r3
 800ef32:	1dfb      	adds	r3, r7, #7
 800ef34:	1c2a      	adds	r2, r5, #0
 800ef36:	701a      	strb	r2, [r3, #0]
 800ef38:	1dbb      	adds	r3, r7, #6
 800ef3a:	1c22      	adds	r2, r4, #0
 800ef3c:	701a      	strb	r2, [r3, #0]
 800ef3e:	1d7b      	adds	r3, r7, #5
 800ef40:	1c02      	adds	r2, r0, #0
 800ef42:	701a      	strb	r2, [r3, #0]
 800ef44:	1d3b      	adds	r3, r7, #4
 800ef46:	1c0a      	adds	r2, r1, #0
 800ef48:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  if (modePin1Level != 0)
 800ef4a:	1dfb      	adds	r3, r7, #7
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d006      	beq.n	800ef60 <Stspin220_Board_SetModePins+0x3c>
{
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE1,\
 800ef52:	4b2f      	ldr	r3, [pc, #188]	; (800f010 <Stspin220_Board_SetModePins+0xec>)
 800ef54:	2201      	movs	r2, #1
 800ef56:	2110      	movs	r1, #16
 800ef58:	0018      	movs	r0, r3
 800ef5a:	f001 f8b2 	bl	80100c2 <HAL_GPIO_WritePin>
 800ef5e:	e005      	b.n	800ef6c <Stspin220_Board_SetModePins+0x48>
      BSP_MOTOR_CONTROL_BOARD_PIN_MODE1,\
      GPIO_PIN_SET);
  }
  else
  {
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE1,\
 800ef60:	4b2b      	ldr	r3, [pc, #172]	; (800f010 <Stspin220_Board_SetModePins+0xec>)
 800ef62:	2200      	movs	r2, #0
 800ef64:	2110      	movs	r1, #16
 800ef66:	0018      	movs	r0, r3
 800ef68:	f001 f8ab 	bl	80100c2 <HAL_GPIO_WritePin>
      BSP_MOTOR_CONTROL_BOARD_PIN_MODE1,\
      GPIO_PIN_RESET);
  }

  if (modePin2Level != 0)
 800ef6c:	1dbb      	adds	r3, r7, #6
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d006      	beq.n	800ef82 <Stspin220_Board_SetModePins+0x5e>
  {
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE2,\
 800ef74:	4b26      	ldr	r3, [pc, #152]	; (800f010 <Stspin220_Board_SetModePins+0xec>)
 800ef76:	2201      	movs	r2, #1
 800ef78:	2140      	movs	r1, #64	; 0x40
 800ef7a:	0018      	movs	r0, r3
 800ef7c:	f001 f8a1 	bl	80100c2 <HAL_GPIO_WritePin>
 800ef80:	e005      	b.n	800ef8e <Stspin220_Board_SetModePins+0x6a>
      BSP_MOTOR_CONTROL_BOARD_PIN_MODE2,\
      GPIO_PIN_SET);
  }
  else
  {
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE2,\
 800ef82:	4b23      	ldr	r3, [pc, #140]	; (800f010 <Stspin220_Board_SetModePins+0xec>)
 800ef84:	2200      	movs	r2, #0
 800ef86:	2140      	movs	r1, #64	; 0x40
 800ef88:	0018      	movs	r0, r3
 800ef8a:	f001 f89a 	bl	80100c2 <HAL_GPIO_WritePin>
      BSP_MOTOR_CONTROL_BOARD_PIN_MODE2,\
      GPIO_PIN_RESET);
  }

  Stspin220_Board_TimStckDeInit();
 800ef8e:	f7ff fee5 	bl	800ed5c <Stspin220_Board_TimStckDeInit>
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3;
 800ef92:	210c      	movs	r1, #12
 800ef94:	187b      	adds	r3, r7, r1
 800ef96:	2208      	movs	r2, #8
 800ef98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ef9a:	187b      	adds	r3, r7, r1
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800efa0:	187b      	adds	r3, r7, r1
 800efa2:	2200      	movs	r2, #0
 800efa4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800efa6:	187b      	adds	r3, r7, r1
 800efa8:	2201      	movs	r2, #1
 800efaa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3, &GPIO_InitStruct);
 800efac:	187b      	adds	r3, r7, r1
 800efae:	4a18      	ldr	r2, [pc, #96]	; (800f010 <Stspin220_Board_SetModePins+0xec>)
 800efb0:	0019      	movs	r1, r3
 800efb2:	0010      	movs	r0, r2
 800efb4:	f000 fe08 	bl	800fbc8 <HAL_GPIO_Init>
  
  if (modePin3Level != 0)
 800efb8:	1d7b      	adds	r3, r7, #5
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d006      	beq.n	800efce <Stspin220_Board_SetModePins+0xaa>
  {
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3,\
 800efc0:	4b13      	ldr	r3, [pc, #76]	; (800f010 <Stspin220_Board_SetModePins+0xec>)
 800efc2:	2201      	movs	r2, #1
 800efc4:	2108      	movs	r1, #8
 800efc6:	0018      	movs	r0, r3
 800efc8:	f001 f87b 	bl	80100c2 <HAL_GPIO_WritePin>
 800efcc:	e005      	b.n	800efda <Stspin220_Board_SetModePins+0xb6>
      BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3,\
      GPIO_PIN_SET);
  }
  else
  {
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_TIM_STCK_MODE3,\
 800efce:	4b10      	ldr	r3, [pc, #64]	; (800f010 <Stspin220_Board_SetModePins+0xec>)
 800efd0:	2200      	movs	r2, #0
 800efd2:	2108      	movs	r1, #8
 800efd4:	0018      	movs	r0, r3
 800efd6:	f001 f874 	bl	80100c2 <HAL_GPIO_WritePin>
      BSP_MOTOR_CONTROL_BOARD_PIN_TIM_STCK_MODE3,\
      GPIO_PIN_RESET);
  }
  
  if (modePin4Level != 0)
 800efda:	1d3b      	adds	r3, r7, #4
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d008      	beq.n	800eff4 <Stspin220_Board_SetModePins+0xd0>
  {
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_DIR_MODE4,\
 800efe2:	2380      	movs	r3, #128	; 0x80
 800efe4:	0059      	lsls	r1, r3, #1
 800efe6:	23a0      	movs	r3, #160	; 0xa0
 800efe8:	05db      	lsls	r3, r3, #23
 800efea:	2201      	movs	r2, #1
 800efec:	0018      	movs	r0, r3
 800efee:	f001 f868 	bl	80100c2 <HAL_GPIO_WritePin>
 800eff2:	e007      	b.n	800f004 <Stspin220_Board_SetModePins+0xe0>
      BSP_MOTOR_CONTROL_BOARD_PIN_DIR_MODE4,\
      GPIO_PIN_SET);
  }
  else
  {
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_DIR_MODE4,\
 800eff4:	2380      	movs	r3, #128	; 0x80
 800eff6:	0059      	lsls	r1, r3, #1
 800eff8:	23a0      	movs	r3, #160	; 0xa0
 800effa:	05db      	lsls	r3, r3, #23
 800effc:	2200      	movs	r2, #0
 800effe:	0018      	movs	r0, r3
 800f000:	f001 f85f 	bl	80100c2 <HAL_GPIO_WritePin>
      BSP_MOTOR_CONTROL_BOARD_PIN_DIR_MODE4,\
      GPIO_PIN_RESET);
  }
  
  return 1;
 800f004:	2301      	movs	r3, #1
}
 800f006:	0018      	movs	r0, r3
 800f008:	46bd      	mov	sp, r7
 800f00a:	b008      	add	sp, #32
 800f00c:	bdb0      	pop	{r4, r5, r7, pc}
 800f00e:	46c0      	nop			; (mov r8, r8)
 800f010:	50000400 	.word	0x50000400

0800f014 <Stspin220_Board_SetFullStep>:
/******************************************************//**
 * @brief Select Full Step mode
 * @retval None
 **********************************************************/
void Stspin220_Board_SetFullStep(void)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE1,\
 800f018:	4b07      	ldr	r3, [pc, #28]	; (800f038 <Stspin220_Board_SetFullStep+0x24>)
 800f01a:	2200      	movs	r2, #0
 800f01c:	2110      	movs	r1, #16
 800f01e:	0018      	movs	r0, r3
 800f020:	f001 f84f 	bl	80100c2 <HAL_GPIO_WritePin>
    BSP_MOTOR_CONTROL_BOARD_PIN_MODE1,\
    GPIO_PIN_RESET);
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE2,\
 800f024:	4b04      	ldr	r3, [pc, #16]	; (800f038 <Stspin220_Board_SetFullStep+0x24>)
 800f026:	2200      	movs	r2, #0
 800f028:	2140      	movs	r1, #64	; 0x40
 800f02a:	0018      	movs	r0, r3
 800f02c:	f001 f849 	bl	80100c2 <HAL_GPIO_WritePin>
    BSP_MOTOR_CONTROL_BOARD_PIN_MODE2,\
    GPIO_PIN_RESET);
}
 800f030:	46c0      	nop			; (mov r8, r8)
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	46c0      	nop			; (mov r8, r8)
 800f038:	50000400 	.word	0x50000400

0800f03c <Stspin220_Board_UnsetFullStep>:
/******************************************************//**
 * @brief Unselect Full Step mode
 * @retval None
 **********************************************************/
void Stspin220_Board_UnsetFullStep(void)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_PORT_MODE1,\
 800f040:	4b04      	ldr	r3, [pc, #16]	; (800f054 <Stspin220_Board_UnsetFullStep+0x18>)
 800f042:	2201      	movs	r2, #1
 800f044:	2110      	movs	r1, #16
 800f046:	0018      	movs	r0, r3
 800f048:	f001 f83b 	bl	80100c2 <HAL_GPIO_WritePin>
    BSP_MOTOR_CONTROL_BOARD_PIN_MODE1,\
    GPIO_PIN_SET);
}
 800f04c:	46c0      	nop			; (mov r8, r8)
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	46c0      	nop			; (mov r8, r8)
 800f054:	50000400 	.word	0x50000400

0800f058 <L6474_GetMotorHandle>:

/** @defgroup MOTOR_CONTROL_Weak_Private_Functions MOTOR CONTROL Weak Private Functions
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800f058:	b580      	push	{r7, lr}
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	2300      	movs	r3, #0
 800f05e:	0018      	movs	r0, r3
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <l647x_GetMotorHandle>:
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800f064:	b580      	push	{r7, lr}
 800f066:	af00      	add	r7, sp, #0
 800f068:	2300      	movs	r3, #0
 800f06a:	0018      	movs	r0, r3
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800f070:	b580      	push	{r7, lr}
 800f072:	af00      	add	r7, sp, #0
 800f074:	2300      	movs	r3, #0
 800f076:	0018      	movs	r0, r3
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <Powerstep01_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800f07c:	b580      	push	{r7, lr}
 800f07e:	af00      	add	r7, sp, #0
 800f080:	2300      	movs	r3, #0
 800f082:	0018      	movs	r0, r3
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800f088:	b580      	push	{r7, lr}
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	2300      	movs	r3, #0
 800f08e:	0018      	movs	r0, r3
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800f094:	b580      	push	{r7, lr}
 800f096:	af00      	add	r7, sp, #0
 800f098:	2300      	movs	r3, #0
 800f09a:	0018      	movs	r0, r3
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}

0800f0a0 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	0018      	movs	r0, r3
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b082      	sub	sp, #8
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 800f0b4:	4b0c      	ldr	r3, [pc, #48]	; (800f0e8 <BSP_MotorControl_AttachErrorHandler+0x3c>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00b      	beq.n	800f0d4 <BSP_MotorControl_AttachErrorHandler+0x28>
 800f0bc:	4b0a      	ldr	r3, [pc, #40]	; (800f0e8 <BSP_MotorControl_AttachErrorHandler+0x3c>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	689b      	ldr	r3, [r3, #8]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d006      	beq.n	800f0d4 <BSP_MotorControl_AttachErrorHandler+0x28>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 800f0c6:	4b08      	ldr	r3, [pc, #32]	; (800f0e8 <BSP_MotorControl_AttachErrorHandler+0x3c>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	0010      	movs	r0, r2
 800f0d0:	4798      	blx	r3
 800f0d2:	e004      	b.n	800f0de <BSP_MotorControl_AttachErrorHandler+0x32>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 800f0d4:	4b05      	ldr	r3, [pc, #20]	; (800f0ec <BSP_MotorControl_AttachErrorHandler+0x40>)
 800f0d6:	0018      	movs	r0, r3
 800f0d8:	f000 f82c 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }
}
 800f0dc:	46c0      	nop			; (mov r8, r8)
 800f0de:	46c0      	nop			; (mov r8, r8)
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	b002      	add	sp, #8
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	46c0      	nop			; (mov r8, r8)
 800f0e8:	20000460 	.word	0x20000460
 800f0ec:	00000802 	.word	0x00000802

0800f0f0 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 800f0f8:	4b0c      	ldr	r3, [pc, #48]	; (800f12c <BSP_MotorControl_AttachFlagInterrupt+0x3c>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00b      	beq.n	800f118 <BSP_MotorControl_AttachFlagInterrupt+0x28>
 800f100:	4b0a      	ldr	r3, [pc, #40]	; (800f12c <BSP_MotorControl_AttachFlagInterrupt+0x3c>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	68db      	ldr	r3, [r3, #12]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d006      	beq.n	800f118 <BSP_MotorControl_AttachFlagInterrupt+0x28>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 800f10a:	4b08      	ldr	r3, [pc, #32]	; (800f12c <BSP_MotorControl_AttachFlagInterrupt+0x3c>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	68db      	ldr	r3, [r3, #12]
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	0010      	movs	r0, r2
 800f114:	4798      	blx	r3
 800f116:	e004      	b.n	800f122 <BSP_MotorControl_AttachFlagInterrupt+0x32>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 800f118:	4b05      	ldr	r3, [pc, #20]	; (800f130 <BSP_MotorControl_AttachFlagInterrupt+0x40>)
 800f11a:	0018      	movs	r0, r3
 800f11c:	f000 f80a 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }  
}
 800f120:	46c0      	nop			; (mov r8, r8)
 800f122:	46c0      	nop			; (mov r8, r8)
 800f124:	46bd      	mov	sp, r7
 800f126:	b002      	add	sp, #8
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	46c0      	nop			; (mov r8, r8)
 800f12c:	20000460 	.word	0x20000460
 800f130:	00000803 	.word	0x00000803

0800f134 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	0002      	movs	r2, r0
 800f13c:	1dbb      	adds	r3, r7, #6
 800f13e:	801a      	strh	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 800f140:	4b0b      	ldr	r3, [pc, #44]	; (800f170 <BSP_MotorControl_ErrorHandler+0x3c>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d00e      	beq.n	800f166 <BSP_MotorControl_ErrorHandler+0x32>
 800f148:	4b09      	ldr	r3, [pc, #36]	; (800f170 <BSP_MotorControl_ErrorHandler+0x3c>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	22f0      	movs	r2, #240	; 0xf0
 800f14e:	589b      	ldr	r3, [r3, r2]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d008      	beq.n	800f166 <BSP_MotorControl_ErrorHandler+0x32>
  {
    motorDrvHandle->ErrorHandler(error);
 800f154:	4b06      	ldr	r3, [pc, #24]	; (800f170 <BSP_MotorControl_ErrorHandler+0x3c>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	22f0      	movs	r2, #240	; 0xf0
 800f15a:	589b      	ldr	r3, [r3, r2]
 800f15c:	1dba      	adds	r2, r7, #6
 800f15e:	8812      	ldrh	r2, [r2, #0]
 800f160:	0010      	movs	r0, r2
 800f162:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 800f164:	e000      	b.n	800f168 <BSP_MotorControl_ErrorHandler+0x34>
    while(1)
 800f166:	e7fe      	b.n	800f166 <BSP_MotorControl_ErrorHandler+0x32>
}
 800f168:	46bd      	mov	sp, r7
 800f16a:	b002      	add	sp, #8
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	46c0      	nop			; (mov r8, r8)
 800f170:	20000460 	.word	0x20000460

0800f174 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	0002      	movs	r2, r0
 800f17c:	6039      	str	r1, [r7, #0]
 800f17e:	1dbb      	adds	r3, r7, #6
 800f180:	801a      	strh	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 800f182:	4b0d      	ldr	r3, [pc, #52]	; (800f1b8 <BSP_MotorControl_Init+0x44>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d00b      	beq.n	800f1a2 <BSP_MotorControl_Init+0x2e>
 800f18a:	4b0b      	ldr	r3, [pc, #44]	; (800f1b8 <BSP_MotorControl_Init+0x44>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d006      	beq.n	800f1a2 <BSP_MotorControl_Init+0x2e>
  {
    motorDrvHandle->Init(initDeviceParameters);
 800f194:	4b08      	ldr	r3, [pc, #32]	; (800f1b8 <BSP_MotorControl_Init+0x44>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	683a      	ldr	r2, [r7, #0]
 800f19c:	0010      	movs	r0, r2
 800f19e:	4798      	blx	r3
 800f1a0:	e005      	b.n	800f1ae <BSP_MotorControl_Init+0x3a>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 800f1a2:	2380      	movs	r3, #128	; 0x80
 800f1a4:	011b      	lsls	r3, r3, #4
 800f1a6:	0018      	movs	r0, r3
 800f1a8:	f7ff ffc4 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }  
}
 800f1ac:	46c0      	nop			; (mov r8, r8)
 800f1ae:	46c0      	nop			; (mov r8, r8)
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	b002      	add	sp, #8
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	46c0      	nop			; (mov r8, r8)
 800f1b8:	20000460 	.word	0x20000460

0800f1bc <BSP_MotorControl_GetPosition>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t BSP_MotorControl_GetPosition(uint8_t deviceId)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	0002      	movs	r2, r0
 800f1c4:	1dfb      	adds	r3, r7, #7
 800f1c6:	701a      	strb	r2, [r3, #0]
  int32_t pos = 0;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	60fb      	str	r3, [r7, #12]
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetPosition != 0))
 800f1cc:	4b0d      	ldr	r3, [pc, #52]	; (800f204 <BSP_MotorControl_GetPosition+0x48>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d00e      	beq.n	800f1f2 <BSP_MotorControl_GetPosition+0x36>
 800f1d4:	4b0b      	ldr	r3, [pc, #44]	; (800f204 <BSP_MotorControl_GetPosition+0x48>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d009      	beq.n	800f1f2 <BSP_MotorControl_GetPosition+0x36>
  {
    pos = motorDrvHandle->GetPosition(deviceId);
 800f1de:	4b09      	ldr	r3, [pc, #36]	; (800f204 <BSP_MotorControl_GetPosition+0x48>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1e4:	1dfa      	adds	r2, r7, #7
 800f1e6:	7812      	ldrb	r2, [r2, #0]
 800f1e8:	0010      	movs	r0, r2
 800f1ea:	4798      	blx	r3
 800f1ec:	0003      	movs	r3, r0
 800f1ee:	60fb      	str	r3, [r7, #12]
 800f1f0:	e003      	b.n	800f1fa <BSP_MotorControl_GetPosition+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(14);
 800f1f2:	4b05      	ldr	r3, [pc, #20]	; (800f208 <BSP_MotorControl_GetPosition+0x4c>)
 800f1f4:	0018      	movs	r0, r3
 800f1f6:	f7ff ff9d 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }      
  return(pos);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
}
 800f1fc:	0018      	movs	r0, r3
 800f1fe:	46bd      	mov	sp, r7
 800f200:	b004      	add	sp, #16
 800f202:	bd80      	pop	{r7, pc}
 800f204:	20000460 	.word	0x20000460
 800f208:	0000080e 	.word	0x0000080e

0800f20c <BSP_MotorControl_GoTo>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void BSP_MotorControl_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	0002      	movs	r2, r0
 800f214:	6039      	str	r1, [r7, #0]
 800f216:	1dfb      	adds	r3, r7, #7
 800f218:	701a      	strb	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GoTo != 0))
 800f21a:	4b0d      	ldr	r3, [pc, #52]	; (800f250 <BSP_MotorControl_GoTo+0x44>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00d      	beq.n	800f23e <BSP_MotorControl_GoTo+0x32>
 800f222:	4b0b      	ldr	r3, [pc, #44]	; (800f250 <BSP_MotorControl_GoTo+0x44>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d008      	beq.n	800f23e <BSP_MotorControl_GoTo+0x32>
  {
    motorDrvHandle->GoTo(deviceId, targetPosition);
 800f22c:	4b08      	ldr	r3, [pc, #32]	; (800f250 <BSP_MotorControl_GoTo+0x44>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f232:	6839      	ldr	r1, [r7, #0]
 800f234:	1dfa      	adds	r2, r7, #7
 800f236:	7812      	ldrb	r2, [r2, #0]
 800f238:	0010      	movs	r0, r2
 800f23a:	4798      	blx	r3
 800f23c:	e004      	b.n	800f248 <BSP_MotorControl_GoTo+0x3c>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(17);
 800f23e:	4b05      	ldr	r3, [pc, #20]	; (800f254 <BSP_MotorControl_GoTo+0x48>)
 800f240:	0018      	movs	r0, r3
 800f242:	f7ff ff77 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }      
}
 800f246:	46c0      	nop			; (mov r8, r8)
 800f248:	46c0      	nop			; (mov r8, r8)
 800f24a:	46bd      	mov	sp, r7
 800f24c:	b002      	add	sp, #8
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	20000460 	.word	0x20000460
 800f254:	00000811 	.word	0x00000811

0800f258 <BSP_MotorControl_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void BSP_MotorControl_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 800f258:	b590      	push	{r4, r7, lr}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	603a      	str	r2, [r7, #0]
 800f260:	1dfb      	adds	r3, r7, #7
 800f262:	1c02      	adds	r2, r0, #0
 800f264:	701a      	strb	r2, [r3, #0]
 800f266:	1dbb      	adds	r3, r7, #6
 800f268:	1c0a      	adds	r2, r1, #0
 800f26a:	701a      	strb	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Move != 0))
 800f26c:	4b0e      	ldr	r3, [pc, #56]	; (800f2a8 <BSP_MotorControl_Move+0x50>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d00f      	beq.n	800f294 <BSP_MotorControl_Move+0x3c>
 800f274:	4b0c      	ldr	r3, [pc, #48]	; (800f2a8 <BSP_MotorControl_Move+0x50>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00a      	beq.n	800f294 <BSP_MotorControl_Move+0x3c>
  {
    motorDrvHandle->Move(deviceId, direction, stepCount);
 800f27e:	4b0a      	ldr	r3, [pc, #40]	; (800f2a8 <BSP_MotorControl_Move+0x50>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f284:	683c      	ldr	r4, [r7, #0]
 800f286:	1dba      	adds	r2, r7, #6
 800f288:	7811      	ldrb	r1, [r2, #0]
 800f28a:	1dfa      	adds	r2, r7, #7
 800f28c:	7810      	ldrb	r0, [r2, #0]
 800f28e:	0022      	movs	r2, r4
 800f290:	4798      	blx	r3
 800f292:	e004      	b.n	800f29e <BSP_MotorControl_Move+0x46>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(19);
 800f294:	4b05      	ldr	r3, [pc, #20]	; (800f2ac <BSP_MotorControl_Move+0x54>)
 800f296:	0018      	movs	r0, r3
 800f298:	f7ff ff4c 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }      
}
 800f29c:	46c0      	nop			; (mov r8, r8)
 800f29e:	46c0      	nop			; (mov r8, r8)
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	b003      	add	sp, #12
 800f2a4:	bd90      	pop	{r4, r7, pc}
 800f2a6:	46c0      	nop			; (mov r8, r8)
 800f2a8:	20000460 	.word	0x20000460
 800f2ac:	00000813 	.word	0x00000813

0800f2b0 <BSP_MotorControl_Run>:
 * @retval None
 * @note For unidirectionnal brush DC motor, direction parameter 
 * has no effect
 **********************************************************/
void BSP_MotorControl_Run(uint8_t deviceId, motorDir_t direction)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	0002      	movs	r2, r0
 800f2b8:	1dfb      	adds	r3, r7, #7
 800f2ba:	701a      	strb	r2, [r3, #0]
 800f2bc:	1dbb      	adds	r3, r7, #6
 800f2be:	1c0a      	adds	r2, r1, #0
 800f2c0:	701a      	strb	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Run != 0))
 800f2c2:	4b0e      	ldr	r3, [pc, #56]	; (800f2fc <BSP_MotorControl_Run+0x4c>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00e      	beq.n	800f2e8 <BSP_MotorControl_Run+0x38>
 800f2ca:	4b0c      	ldr	r3, [pc, #48]	; (800f2fc <BSP_MotorControl_Run+0x4c>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d009      	beq.n	800f2e8 <BSP_MotorControl_Run+0x38>
  {
    motorDrvHandle->Run(deviceId, direction); 
 800f2d4:	4b09      	ldr	r3, [pc, #36]	; (800f2fc <BSP_MotorControl_Run+0x4c>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2da:	1dba      	adds	r2, r7, #6
 800f2dc:	7811      	ldrb	r1, [r2, #0]
 800f2de:	1dfa      	adds	r2, r7, #7
 800f2e0:	7812      	ldrb	r2, [r2, #0]
 800f2e2:	0010      	movs	r0, r2
 800f2e4:	4798      	blx	r3
 800f2e6:	e004      	b.n	800f2f2 <BSP_MotorControl_Run+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(21);
 800f2e8:	4b05      	ldr	r3, [pc, #20]	; (800f300 <BSP_MotorControl_Run+0x50>)
 800f2ea:	0018      	movs	r0, r3
 800f2ec:	f7ff ff22 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }      
}
 800f2f0:	46c0      	nop			; (mov r8, r8)
 800f2f2:	46c0      	nop			; (mov r8, r8)
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	b002      	add	sp, #8
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	46c0      	nop			; (mov r8, r8)
 800f2fc:	20000460 	.word	0x20000460
 800f300:	00000815 	.word	0x00000815

0800f304 <BSP_MotorControl_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 800f304:	b590      	push	{r4, r7, lr}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	0002      	movs	r2, r0
 800f30c:	1dfb      	adds	r3, r7, #7
 800f30e:	701a      	strb	r2, [r3, #0]
 800f310:	1d3b      	adds	r3, r7, #4
 800f312:	1c0a      	adds	r2, r1, #0
 800f314:	801a      	strh	r2, [r3, #0]
  bool status = FALSE;
 800f316:	210f      	movs	r1, #15
 800f318:	187b      	adds	r3, r7, r1
 800f31a:	2200      	movs	r2, #0
 800f31c:	701a      	strb	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetAcceleration != 0))
 800f31e:	4b10      	ldr	r3, [pc, #64]	; (800f360 <BSP_MotorControl_SetAcceleration+0x5c>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d011      	beq.n	800f34a <BSP_MotorControl_SetAcceleration+0x46>
 800f326:	4b0e      	ldr	r3, [pc, #56]	; (800f360 <BSP_MotorControl_SetAcceleration+0x5c>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d00c      	beq.n	800f34a <BSP_MotorControl_SetAcceleration+0x46>
  {
    status = motorDrvHandle->SetAcceleration(deviceId, newAcc);
 800f330:	4b0b      	ldr	r3, [pc, #44]	; (800f360 <BSP_MotorControl_SetAcceleration+0x5c>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f336:	187c      	adds	r4, r7, r1
 800f338:	1d3a      	adds	r2, r7, #4
 800f33a:	8811      	ldrh	r1, [r2, #0]
 800f33c:	1dfa      	adds	r2, r7, #7
 800f33e:	7812      	ldrb	r2, [r2, #0]
 800f340:	0010      	movs	r0, r2
 800f342:	4798      	blx	r3
 800f344:	0003      	movs	r3, r0
 800f346:	7023      	strb	r3, [r4, #0]
 800f348:	e003      	b.n	800f352 <BSP_MotorControl_SetAcceleration+0x4e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(22);
 800f34a:	4b06      	ldr	r3, [pc, #24]	; (800f364 <BSP_MotorControl_SetAcceleration+0x60>)
 800f34c:	0018      	movs	r0, r3
 800f34e:	f7ff fef1 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 800f352:	230f      	movs	r3, #15
 800f354:	18fb      	adds	r3, r7, r3
 800f356:	781b      	ldrb	r3, [r3, #0]
}            
 800f358:	0018      	movs	r0, r3
 800f35a:	46bd      	mov	sp, r7
 800f35c:	b005      	add	sp, #20
 800f35e:	bd90      	pop	{r4, r7, pc}
 800f360:	20000460 	.word	0x20000460
 800f364:	00000816 	.word	0x00000816

0800f368 <BSP_MotorControl_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 800f368:	b590      	push	{r4, r7, lr}
 800f36a:	b085      	sub	sp, #20
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	0002      	movs	r2, r0
 800f370:	1dfb      	adds	r3, r7, #7
 800f372:	701a      	strb	r2, [r3, #0]
 800f374:	1d3b      	adds	r3, r7, #4
 800f376:	1c0a      	adds	r2, r1, #0
 800f378:	801a      	strh	r2, [r3, #0]
  bool status = FALSE;
 800f37a:	210f      	movs	r1, #15
 800f37c:	187b      	adds	r3, r7, r1
 800f37e:	2200      	movs	r2, #0
 800f380:	701a      	strb	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetDeceleration != 0))
 800f382:	4b10      	ldr	r3, [pc, #64]	; (800f3c4 <BSP_MotorControl_SetDeceleration+0x5c>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d011      	beq.n	800f3ae <BSP_MotorControl_SetDeceleration+0x46>
 800f38a:	4b0e      	ldr	r3, [pc, #56]	; (800f3c4 <BSP_MotorControl_SetDeceleration+0x5c>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f390:	2b00      	cmp	r3, #0
 800f392:	d00c      	beq.n	800f3ae <BSP_MotorControl_SetDeceleration+0x46>
  {
    status = motorDrvHandle->SetDeceleration(deviceId, newDec);
 800f394:	4b0b      	ldr	r3, [pc, #44]	; (800f3c4 <BSP_MotorControl_SetDeceleration+0x5c>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f39a:	187c      	adds	r4, r7, r1
 800f39c:	1d3a      	adds	r2, r7, #4
 800f39e:	8811      	ldrh	r1, [r2, #0]
 800f3a0:	1dfa      	adds	r2, r7, #7
 800f3a2:	7812      	ldrb	r2, [r2, #0]
 800f3a4:	0010      	movs	r0, r2
 800f3a6:	4798      	blx	r3
 800f3a8:	0003      	movs	r3, r0
 800f3aa:	7023      	strb	r3, [r4, #0]
 800f3ac:	e003      	b.n	800f3b6 <BSP_MotorControl_SetDeceleration+0x4e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(23);
 800f3ae:	4b06      	ldr	r3, [pc, #24]	; (800f3c8 <BSP_MotorControl_SetDeceleration+0x60>)
 800f3b0:	0018      	movs	r0, r3
 800f3b2:	f7ff febf 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }        
  return (status);
 800f3b6:	230f      	movs	r3, #15
 800f3b8:	18fb      	adds	r3, r7, r3
 800f3ba:	781b      	ldrb	r3, [r3, #0]
}        
 800f3bc:	0018      	movs	r0, r3
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	b005      	add	sp, #20
 800f3c2:	bd90      	pop	{r4, r7, pc}
 800f3c4:	20000460 	.word	0x20000460
 800f3c8:	00000817 	.word	0x00000817

0800f3cc <BSP_MotorControl_SetHome>:
 * @param[in] homePosition new absolute home position 
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetHome(uint8_t deviceId, int32_t homePosition)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b082      	sub	sp, #8
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	0002      	movs	r2, r0
 800f3d4:	6039      	str	r1, [r7, #0]
 800f3d6:	1dfb      	adds	r3, r7, #7
 800f3d8:	701a      	strb	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetHome != 0))
 800f3da:	4b0d      	ldr	r3, [pc, #52]	; (800f410 <BSP_MotorControl_SetHome+0x44>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d00d      	beq.n	800f3fe <BSP_MotorControl_SetHome+0x32>
 800f3e2:	4b0b      	ldr	r3, [pc, #44]	; (800f410 <BSP_MotorControl_SetHome+0x44>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d008      	beq.n	800f3fe <BSP_MotorControl_SetHome+0x32>
  {
    motorDrvHandle->SetHome(deviceId, homePosition);
 800f3ec:	4b08      	ldr	r3, [pc, #32]	; (800f410 <BSP_MotorControl_SetHome+0x44>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f3f2:	6839      	ldr	r1, [r7, #0]
 800f3f4:	1dfa      	adds	r2, r7, #7
 800f3f6:	7812      	ldrb	r2, [r2, #0]
 800f3f8:	0010      	movs	r0, r2
 800f3fa:	4798      	blx	r3
 800f3fc:	e004      	b.n	800f408 <BSP_MotorControl_SetHome+0x3c>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(24);
 800f3fe:	4b05      	ldr	r3, [pc, #20]	; (800f414 <BSP_MotorControl_SetHome+0x48>)
 800f400:	0018      	movs	r0, r3
 800f402:	f7ff fe97 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }        
}
 800f406:	46c0      	nop			; (mov r8, r8)
 800f408:	46c0      	nop			; (mov r8, r8)
 800f40a:	46bd      	mov	sp, r7
 800f40c:	b002      	add	sp, #8
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	20000460 	.word	0x20000460
 800f414:	00000818 	.word	0x00000818

0800f418 <BSP_MotorControl_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note For a stepper motor, the command is not performed if the device 
 * is executing a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 800f418:	b590      	push	{r4, r7, lr}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	0002      	movs	r2, r0
 800f420:	1dfb      	adds	r3, r7, #7
 800f422:	701a      	strb	r2, [r3, #0]
 800f424:	1d3b      	adds	r3, r7, #4
 800f426:	1c0a      	adds	r2, r1, #0
 800f428:	801a      	strh	r2, [r3, #0]
  bool status = FALSE;
 800f42a:	210f      	movs	r1, #15
 800f42c:	187b      	adds	r3, r7, r1
 800f42e:	2200      	movs	r2, #0
 800f430:	701a      	strb	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 800f432:	4b10      	ldr	r3, [pc, #64]	; (800f474 <BSP_MotorControl_SetMaxSpeed+0x5c>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d011      	beq.n	800f45e <BSP_MotorControl_SetMaxSpeed+0x46>
 800f43a:	4b0e      	ldr	r3, [pc, #56]	; (800f474 <BSP_MotorControl_SetMaxSpeed+0x5c>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f440:	2b00      	cmp	r3, #0
 800f442:	d00c      	beq.n	800f45e <BSP_MotorControl_SetMaxSpeed+0x46>
  {
    status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 800f444:	4b0b      	ldr	r3, [pc, #44]	; (800f474 <BSP_MotorControl_SetMaxSpeed+0x5c>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f44a:	187c      	adds	r4, r7, r1
 800f44c:	1d3a      	adds	r2, r7, #4
 800f44e:	8811      	ldrh	r1, [r2, #0]
 800f450:	1dfa      	adds	r2, r7, #7
 800f452:	7812      	ldrb	r2, [r2, #0]
 800f454:	0010      	movs	r0, r2
 800f456:	4798      	blx	r3
 800f458:	0003      	movs	r3, r0
 800f45a:	7023      	strb	r3, [r4, #0]
 800f45c:	e003      	b.n	800f466 <BSP_MotorControl_SetMaxSpeed+0x4e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
 800f45e:	4b06      	ldr	r3, [pc, #24]	; (800f478 <BSP_MotorControl_SetMaxSpeed+0x60>)
 800f460:	0018      	movs	r0, r3
 800f462:	f7ff fe67 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }     
  return (status);  
 800f466:	230f      	movs	r3, #15
 800f468:	18fb      	adds	r3, r7, r3
 800f46a:	781b      	ldrb	r3, [r3, #0]
}                                                     
 800f46c:	0018      	movs	r0, r3
 800f46e:	46bd      	mov	sp, r7
 800f470:	b005      	add	sp, #20
 800f472:	bd90      	pop	{r4, r7, pc}
 800f474:	20000460 	.word	0x20000460
 800f478:	0000081a 	.word	0x0000081a

0800f47c <BSP_MotorControl_SoftStop>:
 *            motorId  from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool BSP_MotorControl_SoftStop(uint8_t deviceId)
{	
 800f47c:	b590      	push	{r4, r7, lr}
 800f47e:	b085      	sub	sp, #20
 800f480:	af00      	add	r7, sp, #0
 800f482:	0002      	movs	r2, r0
 800f484:	1dfb      	adds	r3, r7, #7
 800f486:	701a      	strb	r2, [r3, #0]
  bool status = FALSE;
 800f488:	210f      	movs	r1, #15
 800f48a:	187b      	adds	r3, r7, r1
 800f48c:	2200      	movs	r2, #0
 800f48e:	701a      	strb	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SoftStop != 0))
 800f490:	4b0f      	ldr	r3, [pc, #60]	; (800f4d0 <BSP_MotorControl_SoftStop+0x54>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00f      	beq.n	800f4b8 <BSP_MotorControl_SoftStop+0x3c>
 800f498:	4b0d      	ldr	r3, [pc, #52]	; (800f4d0 <BSP_MotorControl_SoftStop+0x54>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d00a      	beq.n	800f4b8 <BSP_MotorControl_SoftStop+0x3c>
  {
    status = motorDrvHandle->SoftStop(deviceId);
 800f4a2:	4b0b      	ldr	r3, [pc, #44]	; (800f4d0 <BSP_MotorControl_SoftStop+0x54>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4a8:	187c      	adds	r4, r7, r1
 800f4aa:	1dfa      	adds	r2, r7, #7
 800f4ac:	7812      	ldrb	r2, [r2, #0]
 800f4ae:	0010      	movs	r0, r2
 800f4b0:	4798      	blx	r3
 800f4b2:	0003      	movs	r3, r0
 800f4b4:	7023      	strb	r3, [r4, #0]
 800f4b6:	e003      	b.n	800f4c0 <BSP_MotorControl_SoftStop+0x44>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(28);
 800f4b8:	4b06      	ldr	r3, [pc, #24]	; (800f4d4 <BSP_MotorControl_SoftStop+0x58>)
 800f4ba:	0018      	movs	r0, r3
 800f4bc:	f7ff fe3a 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }    
  return (status);  
 800f4c0:	230f      	movs	r3, #15
 800f4c2:	18fb      	adds	r3, r7, r3
 800f4c4:	781b      	ldrb	r3, [r3, #0]
}
 800f4c6:	0018      	movs	r0, r3
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	b005      	add	sp, #20
 800f4cc:	bd90      	pop	{r4, r7, pc}
 800f4ce:	46c0      	nop			; (mov r8, r8)
 800f4d0:	20000460 	.word	0x20000460
 800f4d4:	0000081c 	.word	0x0000081c

0800f4d8 <BSP_MotorControl_StepClockHandler>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void BSP_MotorControl_StepClockHandler(uint8_t deviceId)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	0002      	movs	r2, r0
 800f4e0:	1dfb      	adds	r3, r7, #7
 800f4e2:	701a      	strb	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->StepClockHandler != 0))
 800f4e4:	4b0c      	ldr	r3, [pc, #48]	; (800f518 <BSP_MotorControl_StepClockHandler+0x40>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d00c      	beq.n	800f506 <BSP_MotorControl_StepClockHandler+0x2e>
 800f4ec:	4b0a      	ldr	r3, [pc, #40]	; (800f518 <BSP_MotorControl_StepClockHandler+0x40>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d007      	beq.n	800f506 <BSP_MotorControl_StepClockHandler+0x2e>
  {
    motorDrvHandle->StepClockHandler(deviceId);
 800f4f6:	4b08      	ldr	r3, [pc, #32]	; (800f518 <BSP_MotorControl_StepClockHandler+0x40>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4fc:	1dfa      	adds	r2, r7, #7
 800f4fe:	7812      	ldrb	r2, [r2, #0]
 800f500:	0010      	movs	r0, r2
 800f502:	4798      	blx	r3
 800f504:	e004      	b.n	800f510 <BSP_MotorControl_StepClockHandler+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(29);
 800f506:	4b05      	ldr	r3, [pc, #20]	; (800f51c <BSP_MotorControl_StepClockHandler+0x44>)
 800f508:	0018      	movs	r0, r3
 800f50a:	f7ff fe13 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }   
}
 800f50e:	46c0      	nop			; (mov r8, r8)
 800f510:	46c0      	nop			; (mov r8, r8)
 800f512:	46bd      	mov	sp, r7
 800f514:	b002      	add	sp, #8
 800f516:	bd80      	pop	{r7, pc}
 800f518:	20000460 	.word	0x20000460
 800f51c:	0000081d 	.word	0x0000081d

0800f520 <BSP_MotorControl_WaitWhileActive>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_WaitWhileActive(uint8_t deviceId)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	0002      	movs	r2, r0
 800f528:	1dfb      	adds	r3, r7, #7
 800f52a:	701a      	strb	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->WaitWhileActive != 0))
 800f52c:	4b0c      	ldr	r3, [pc, #48]	; (800f560 <BSP_MotorControl_WaitWhileActive+0x40>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00c      	beq.n	800f54e <BSP_MotorControl_WaitWhileActive+0x2e>
 800f534:	4b0a      	ldr	r3, [pc, #40]	; (800f560 <BSP_MotorControl_WaitWhileActive+0x40>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d007      	beq.n	800f54e <BSP_MotorControl_WaitWhileActive+0x2e>
  {
    motorDrvHandle->WaitWhileActive(deviceId);
 800f53e:	4b08      	ldr	r3, [pc, #32]	; (800f560 <BSP_MotorControl_WaitWhileActive+0x40>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f544:	1dfa      	adds	r2, r7, #7
 800f546:	7812      	ldrb	r2, [r2, #0]
 800f548:	0010      	movs	r0, r2
 800f54a:	4798      	blx	r3
 800f54c:	e004      	b.n	800f558 <BSP_MotorControl_WaitWhileActive+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(30);
 800f54e:	4b05      	ldr	r3, [pc, #20]	; (800f564 <BSP_MotorControl_WaitWhileActive+0x44>)
 800f550:	0018      	movs	r0, r3
 800f552:	f7ff fdef 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }    
}
 800f556:	46c0      	nop			; (mov r8, r8)
 800f558:	46c0      	nop			; (mov r8, r8)
 800f55a:	46bd      	mov	sp, r7
 800f55c:	b002      	add	sp, #8
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	20000460 	.word	0x20000460
 800f564:	0000081e 	.word	0x0000081e

0800f568 <BSP_MotorControl_CmdDisable>:
 * @note For brush DC motor, when input of different brigdes are parallelized 
 * together, the disabling of one bridge leads to the disabling
 * of the second one
 **********************************************************/
void BSP_MotorControl_CmdDisable(uint8_t deviceId)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	0002      	movs	r2, r0
 800f570:	1dfb      	adds	r3, r7, #7
 800f572:	701a      	strb	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdDisable != 0))
 800f574:	4b0c      	ldr	r3, [pc, #48]	; (800f5a8 <BSP_MotorControl_CmdDisable+0x40>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d00c      	beq.n	800f596 <BSP_MotorControl_CmdDisable+0x2e>
 800f57c:	4b0a      	ldr	r3, [pc, #40]	; (800f5a8 <BSP_MotorControl_CmdDisable+0x40>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f582:	2b00      	cmp	r3, #0
 800f584:	d007      	beq.n	800f596 <BSP_MotorControl_CmdDisable+0x2e>
  {
    motorDrvHandle->CmdDisable(deviceId);
 800f586:	4b08      	ldr	r3, [pc, #32]	; (800f5a8 <BSP_MotorControl_CmdDisable+0x40>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f58c:	1dfa      	adds	r2, r7, #7
 800f58e:	7812      	ldrb	r2, [r2, #0]
 800f590:	0010      	movs	r0, r2
 800f592:	4798      	blx	r3
 800f594:	e004      	b.n	800f5a0 <BSP_MotorControl_CmdDisable+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(31);
 800f596:	4b05      	ldr	r3, [pc, #20]	; (800f5ac <BSP_MotorControl_CmdDisable+0x44>)
 800f598:	0018      	movs	r0, r3
 800f59a:	f7ff fdcb 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }    
}
 800f59e:	46c0      	nop			; (mov r8, r8)
 800f5a0:	46c0      	nop			; (mov r8, r8)
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	b002      	add	sp, #8
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	20000460 	.word	0x20000460
 800f5ac:	0000081f 	.word	0x0000081f

0800f5b0 <BSP_MotorControl_GetBridgeInputPwmFreq>:
 * @param[in] bridgeId from 0 for bridge A to 1 for bridge B for brush DC motor
 * bridgeId must be 0 for L6208 (both bridges are set with the same frequency)
 * @retval Freq in Hz
 **********************************************************/
uint32_t BSP_MotorControl_GetBridgeInputPwmFreq(uint8_t bridgeId)
{	
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	0002      	movs	r2, r0
 800f5b8:	1dfb      	adds	r3, r7, #7
 800f5ba:	701a      	strb	r2, [r3, #0]
  uint32_t pwmFreq = 0;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	60fb      	str	r3, [r7, #12]
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetBridgeInputPwmFreq != 0))
 800f5c0:	4b0f      	ldr	r3, [pc, #60]	; (800f600 <BSP_MotorControl_GetBridgeInputPwmFreq+0x50>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d012      	beq.n	800f5ee <BSP_MotorControl_GetBridgeInputPwmFreq+0x3e>
 800f5c8:	4b0d      	ldr	r3, [pc, #52]	; (800f600 <BSP_MotorControl_GetBridgeInputPwmFreq+0x50>)
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	2384      	movs	r3, #132	; 0x84
 800f5ce:	005b      	lsls	r3, r3, #1
 800f5d0:	58d3      	ldr	r3, [r2, r3]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00b      	beq.n	800f5ee <BSP_MotorControl_GetBridgeInputPwmFreq+0x3e>
  {
    pwmFreq = motorDrvHandle->GetBridgeInputPwmFreq(bridgeId);
 800f5d6:	4b0a      	ldr	r3, [pc, #40]	; (800f600 <BSP_MotorControl_GetBridgeInputPwmFreq+0x50>)
 800f5d8:	681a      	ldr	r2, [r3, #0]
 800f5da:	2384      	movs	r3, #132	; 0x84
 800f5dc:	005b      	lsls	r3, r3, #1
 800f5de:	58d3      	ldr	r3, [r2, r3]
 800f5e0:	1dfa      	adds	r2, r7, #7
 800f5e2:	7812      	ldrb	r2, [r2, #0]
 800f5e4:	0010      	movs	r0, r2
 800f5e6:	4798      	blx	r3
 800f5e8:	0003      	movs	r3, r0
 800f5ea:	60fb      	str	r3, [r7, #12]
 800f5ec:	e003      	b.n	800f5f6 <BSP_MotorControl_GetBridgeInputPwmFreq+0x46>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(66);
 800f5ee:	4b05      	ldr	r3, [pc, #20]	; (800f604 <BSP_MotorControl_GetBridgeInputPwmFreq+0x54>)
 800f5f0:	0018      	movs	r0, r3
 800f5f2:	f7ff fd9f 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  }    
  return (pwmFreq);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
}
 800f5f8:	0018      	movs	r0, r3
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	b004      	add	sp, #16
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	20000460 	.word	0x20000460
 800f604:	00000842 	.word	0x00000842

0800f608 <BSP_MotorControl_SetStopMode>:
 *            deviceId dummy parameter for compatibility with motor.h
 * @param[in] stopMode selected stop mode
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	0002      	movs	r2, r0
 800f610:	1dfb      	adds	r3, r7, #7
 800f612:	701a      	strb	r2, [r3, #0]
 800f614:	1dbb      	adds	r3, r7, #6
 800f616:	1c0a      	adds	r2, r1, #0
 800f618:	701a      	strb	r2, [r3, #0]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetStopMode != 0))
 800f61a:	4b10      	ldr	r3, [pc, #64]	; (800f65c <BSP_MotorControl_SetStopMode+0x54>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d012      	beq.n	800f648 <BSP_MotorControl_SetStopMode+0x40>
 800f622:	4b0e      	ldr	r3, [pc, #56]	; (800f65c <BSP_MotorControl_SetStopMode+0x54>)
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	2388      	movs	r3, #136	; 0x88
 800f628:	005b      	lsls	r3, r3, #1
 800f62a:	58d3      	ldr	r3, [r2, r3]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d00b      	beq.n	800f648 <BSP_MotorControl_SetStopMode+0x40>
  {
    motorDrvHandle->SetStopMode(deviceId, stopMode);
 800f630:	4b0a      	ldr	r3, [pc, #40]	; (800f65c <BSP_MotorControl_SetStopMode+0x54>)
 800f632:	681a      	ldr	r2, [r3, #0]
 800f634:	2388      	movs	r3, #136	; 0x88
 800f636:	005b      	lsls	r3, r3, #1
 800f638:	58d3      	ldr	r3, [r2, r3]
 800f63a:	1dba      	adds	r2, r7, #6
 800f63c:	7811      	ldrb	r1, [r2, #0]
 800f63e:	1dfa      	adds	r2, r7, #7
 800f640:	7812      	ldrb	r2, [r2, #0]
 800f642:	0010      	movs	r0, r2
 800f644:	4798      	blx	r3
 800f646:	e004      	b.n	800f652 <BSP_MotorControl_SetStopMode+0x4a>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(68);
 800f648:	4b05      	ldr	r3, [pc, #20]	; (800f660 <BSP_MotorControl_SetStopMode+0x58>)
 800f64a:	0018      	movs	r0, r3
 800f64c:	f7ff fd72 	bl	800f134 <BSP_MotorControl_ErrorHandler>
  } 
}
 800f650:	46c0      	nop			; (mov r8, r8)
 800f652:	46c0      	nop			; (mov r8, r8)
 800f654:	46bd      	mov	sp, r7
 800f656:	b002      	add	sp, #8
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	46c0      	nop			; (mov r8, r8)
 800f65c:	20000460 	.word	0x20000460
 800f660:	00000844 	.word	0x00000844

0800f664 <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 800f664:	b590      	push	{r4, r7, lr}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	0002      	movs	r2, r0
 800f66c:	1dbb      	adds	r3, r7, #6
 800f66e:	801a      	strh	r2, [r3, #0]
 800f670:	1d7b      	adds	r3, r7, #5
 800f672:	1c0a      	adds	r2, r1, #0
 800f674:	701a      	strb	r2, [r3, #0]
  MotorControlBoardId = id;
 800f676:	4b49      	ldr	r3, [pc, #292]	; (800f79c <BSP_MotorControl_SetNbDevices+0x138>)
 800f678:	1dba      	adds	r2, r7, #6
 800f67a:	8812      	ldrh	r2, [r2, #0]
 800f67c:	801a      	strh	r2, [r3, #0]
  bool status = FALSE;
 800f67e:	230f      	movs	r3, #15
 800f680:	18fb      	adds	r3, r7, r3
 800f682:	2200      	movs	r2, #0
 800f684:	701a      	strb	r2, [r3, #0]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 800f686:	1dbb      	adds	r3, r7, #6
 800f688:	881b      	ldrh	r3, [r3, #0]
 800f68a:	4a45      	ldr	r2, [pc, #276]	; (800f7a0 <BSP_MotorControl_SetNbDevices+0x13c>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d105      	bne.n	800f69c <BSP_MotorControl_SetNbDevices+0x38>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 800f690:	f7ff fce2 	bl	800f058 <L6474_GetMotorHandle>
 800f694:	0002      	movs	r2, r0
 800f696:	4b43      	ldr	r3, [pc, #268]	; (800f7a4 <BSP_MotorControl_SetNbDevices+0x140>)
 800f698:	601a      	str	r2, [r3, #0]
 800f69a:	e05b      	b.n	800f754 <BSP_MotorControl_SetNbDevices+0xf0>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 800f69c:	1dbb      	adds	r3, r7, #6
 800f69e:	881b      	ldrh	r3, [r3, #0]
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d105      	bne.n	800f6b0 <BSP_MotorControl_SetNbDevices+0x4c>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 800f6a4:	f7ff fcea 	bl	800f07c <Powerstep01_GetMotorHandle>
 800f6a8:	0002      	movs	r2, r0
 800f6aa:	4b3e      	ldr	r3, [pc, #248]	; (800f7a4 <BSP_MotorControl_SetNbDevices+0x140>)
 800f6ac:	601a      	str	r2, [r3, #0]
 800f6ae:	e051      	b.n	800f754 <BSP_MotorControl_SetNbDevices+0xf0>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 800f6b0:	1dbb      	adds	r3, r7, #6
 800f6b2:	881b      	ldrh	r3, [r3, #0]
 800f6b4:	4a3c      	ldr	r2, [pc, #240]	; (800f7a8 <BSP_MotorControl_SetNbDevices+0x144>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d105      	bne.n	800f6c6 <BSP_MotorControl_SetNbDevices+0x62>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 800f6ba:	f7ff fce5 	bl	800f088 <L6206_GetMotorHandle>
 800f6be:	0002      	movs	r2, r0
 800f6c0:	4b38      	ldr	r3, [pc, #224]	; (800f7a4 <BSP_MotorControl_SetNbDevices+0x140>)
 800f6c2:	601a      	str	r2, [r3, #0]
 800f6c4:	e046      	b.n	800f754 <BSP_MotorControl_SetNbDevices+0xf0>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 800f6c6:	1dbb      	adds	r3, r7, #6
 800f6c8:	881a      	ldrh	r2, [r3, #0]
 800f6ca:	23c2      	movs	r3, #194	; 0xc2
 800f6cc:	015b      	lsls	r3, r3, #5
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d105      	bne.n	800f6de <BSP_MotorControl_SetNbDevices+0x7a>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 800f6d2:	f7ff fcdf 	bl	800f094 <L6208_GetMotorHandle>
 800f6d6:	0002      	movs	r2, r0
 800f6d8:	4b32      	ldr	r3, [pc, #200]	; (800f7a4 <BSP_MotorControl_SetNbDevices+0x140>)
 800f6da:	601a      	str	r2, [r3, #0]
 800f6dc:	e03a      	b.n	800f754 <BSP_MotorControl_SetNbDevices+0xf0>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 800f6de:	1dbb      	adds	r3, r7, #6
 800f6e0:	881b      	ldrh	r3, [r3, #0]
 800f6e2:	2bdc      	cmp	r3, #220	; 0xdc
 800f6e4:	d105      	bne.n	800f6f2 <BSP_MotorControl_SetNbDevices+0x8e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 800f6e6:	f7f7 f83f 	bl	8006768 <Stspin220_GetMotorHandle>
 800f6ea:	0002      	movs	r2, r0
 800f6ec:	4b2d      	ldr	r3, [pc, #180]	; (800f7a4 <BSP_MotorControl_SetNbDevices+0x140>)
 800f6ee:	601a      	str	r2, [r3, #0]
 800f6f0:	e030      	b.n	800f754 <BSP_MotorControl_SetNbDevices+0xf0>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 800f6f2:	1dbb      	adds	r3, r7, #6
 800f6f4:	881b      	ldrh	r3, [r3, #0]
 800f6f6:	4a2d      	ldr	r2, [pc, #180]	; (800f7ac <BSP_MotorControl_SetNbDevices+0x148>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d004      	beq.n	800f706 <BSP_MotorControl_SetNbDevices+0xa2>
 800f6fc:	1dbb      	adds	r3, r7, #6
 800f6fe:	881b      	ldrh	r3, [r3, #0]
 800f700:	4a2b      	ldr	r2, [pc, #172]	; (800f7b0 <BSP_MotorControl_SetNbDevices+0x14c>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d105      	bne.n	800f712 <BSP_MotorControl_SetNbDevices+0xae>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 800f706:	f7ff fcad 	bl	800f064 <l647x_GetMotorHandle>
 800f70a:	0002      	movs	r2, r0
 800f70c:	4b25      	ldr	r3, [pc, #148]	; (800f7a4 <BSP_MotorControl_SetNbDevices+0x140>)
 800f70e:	601a      	str	r2, [r3, #0]
 800f710:	e020      	b.n	800f754 <BSP_MotorControl_SetNbDevices+0xf0>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 800f712:	1dbb      	adds	r3, r7, #6
 800f714:	881b      	ldrh	r3, [r3, #0]
 800f716:	4a27      	ldr	r2, [pc, #156]	; (800f7b4 <BSP_MotorControl_SetNbDevices+0x150>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d004      	beq.n	800f726 <BSP_MotorControl_SetNbDevices+0xc2>
 800f71c:	1dbb      	adds	r3, r7, #6
 800f71e:	881b      	ldrh	r3, [r3, #0]
 800f720:	4a25      	ldr	r2, [pc, #148]	; (800f7b8 <BSP_MotorControl_SetNbDevices+0x154>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d105      	bne.n	800f732 <BSP_MotorControl_SetNbDevices+0xce>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 800f726:	f7ff fca3 	bl	800f070 <l648x_GetMotorHandle>
 800f72a:	0002      	movs	r2, r0
 800f72c:	4b1d      	ldr	r3, [pc, #116]	; (800f7a4 <BSP_MotorControl_SetNbDevices+0x140>)
 800f72e:	601a      	str	r2, [r3, #0]
 800f730:	e010      	b.n	800f754 <BSP_MotorControl_SetNbDevices+0xf0>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 800f732:	1dbb      	adds	r3, r7, #6
 800f734:	881b      	ldrh	r3, [r3, #0]
 800f736:	2bf0      	cmp	r3, #240	; 0xf0
 800f738:	d003      	beq.n	800f742 <BSP_MotorControl_SetNbDevices+0xde>
 800f73a:	1dbb      	adds	r3, r7, #6
 800f73c:	881b      	ldrh	r3, [r3, #0]
 800f73e:	2bfa      	cmp	r3, #250	; 0xfa
 800f740:	d105      	bne.n	800f74e <BSP_MotorControl_SetNbDevices+0xea>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 800f742:	f7ff fcad 	bl	800f0a0 <Stspin240_250_GetMotorHandle>
 800f746:	0002      	movs	r2, r0
 800f748:	4b16      	ldr	r3, [pc, #88]	; (800f7a4 <BSP_MotorControl_SetNbDevices+0x140>)
 800f74a:	601a      	str	r2, [r3, #0]
 800f74c:	e002      	b.n	800f754 <BSP_MotorControl_SetNbDevices+0xf0>
  }  
  else
  {
    motorDrvHandle = 0;
 800f74e:	4b15      	ldr	r3, [pc, #84]	; (800f7a4 <BSP_MotorControl_SetNbDevices+0x140>)
 800f750:	2200      	movs	r2, #0
 800f752:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetNbDevices != 0)&&(nbDevices !=0))
 800f754:	4b13      	ldr	r3, [pc, #76]	; (800f7a4 <BSP_MotorControl_SetNbDevices+0x140>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d017      	beq.n	800f78c <BSP_MotorControl_SetNbDevices+0x128>
 800f75c:	4b11      	ldr	r3, [pc, #68]	; (800f7a4 <BSP_MotorControl_SetNbDevices+0x140>)
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	23a2      	movs	r3, #162	; 0xa2
 800f762:	005b      	lsls	r3, r3, #1
 800f764:	58d3      	ldr	r3, [r2, r3]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d010      	beq.n	800f78c <BSP_MotorControl_SetNbDevices+0x128>
 800f76a:	1d7b      	adds	r3, r7, #5
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d00c      	beq.n	800f78c <BSP_MotorControl_SetNbDevices+0x128>
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 800f772:	4b0c      	ldr	r3, [pc, #48]	; (800f7a4 <BSP_MotorControl_SetNbDevices+0x140>)
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	23a2      	movs	r3, #162	; 0xa2
 800f778:	005b      	lsls	r3, r3, #1
 800f77a:	58d3      	ldr	r3, [r2, r3]
 800f77c:	220f      	movs	r2, #15
 800f77e:	18bc      	adds	r4, r7, r2
 800f780:	1d7a      	adds	r2, r7, #5
 800f782:	7812      	ldrb	r2, [r2, #0]
 800f784:	0010      	movs	r0, r2
 800f786:	4798      	blx	r3
 800f788:	0003      	movs	r3, r0
 800f78a:	7023      	strb	r3, [r4, #0]
  }
  return (status);
 800f78c:	230f      	movs	r3, #15
 800f78e:	18fb      	adds	r3, r7, r3
 800f790:	781b      	ldrb	r3, [r3, #0]
}
 800f792:	0018      	movs	r0, r3
 800f794:	46bd      	mov	sp, r7
 800f796:	b005      	add	sp, #20
 800f798:	bd90      	pop	{r4, r7, pc}
 800f79a:	46c0      	nop			; (mov r8, r8)
 800f79c:	20000464 	.word	0x20000464
 800f7a0:	0000194a 	.word	0x0000194a
 800f7a4:	20000460 	.word	0x20000460
 800f7a8:	0000183e 	.word	0x0000183e
 800f7ac:	00001946 	.word	0x00001946
 800f7b0:	00001948 	.word	0x00001948
 800f7b4:	00001950 	.word	0x00001950
 800f7b8:	00001952 	.word	0x00001952

0800f7bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800f7c2:	1dfb      	adds	r3, r7, #7
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800f7c8:	4b0b      	ldr	r3, [pc, #44]	; (800f7f8 <HAL_Init+0x3c>)
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	4b0a      	ldr	r3, [pc, #40]	; (800f7f8 <HAL_Init+0x3c>)
 800f7ce:	2140      	movs	r1, #64	; 0x40
 800f7d0:	430a      	orrs	r2, r1
 800f7d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	f000 f811 	bl	800f7fc <HAL_InitTick>
 800f7da:	1e03      	subs	r3, r0, #0
 800f7dc:	d003      	beq.n	800f7e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800f7de:	1dfb      	adds	r3, r7, #7
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	701a      	strb	r2, [r3, #0]
 800f7e4:	e001      	b.n	800f7ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800f7e6:	f7f6 fd49 	bl	800627c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800f7ea:	1dfb      	adds	r3, r7, #7
 800f7ec:	781b      	ldrb	r3, [r3, #0]
}
 800f7ee:	0018      	movs	r0, r3
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	b002      	add	sp, #8
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	46c0      	nop			; (mov r8, r8)
 800f7f8:	40022000 	.word	0x40022000

0800f7fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f7fc:	b590      	push	{r4, r7, lr}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f804:	4b14      	ldr	r3, [pc, #80]	; (800f858 <HAL_InitTick+0x5c>)
 800f806:	681c      	ldr	r4, [r3, #0]
 800f808:	4b14      	ldr	r3, [pc, #80]	; (800f85c <HAL_InitTick+0x60>)
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	0019      	movs	r1, r3
 800f80e:	23fa      	movs	r3, #250	; 0xfa
 800f810:	0098      	lsls	r0, r3, #2
 800f812:	f7f0 fc95 	bl	8000140 <__udivsi3>
 800f816:	0003      	movs	r3, r0
 800f818:	0019      	movs	r1, r3
 800f81a:	0020      	movs	r0, r4
 800f81c:	f7f0 fc90 	bl	8000140 <__udivsi3>
 800f820:	0003      	movs	r3, r0
 800f822:	0018      	movs	r0, r3
 800f824:	f000 f96b 	bl	800fafe <HAL_SYSTICK_Config>
 800f828:	1e03      	subs	r3, r0, #0
 800f82a:	d001      	beq.n	800f830 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800f82c:	2301      	movs	r3, #1
 800f82e:	e00f      	b.n	800f850 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b03      	cmp	r3, #3
 800f834:	d80b      	bhi.n	800f84e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f836:	6879      	ldr	r1, [r7, #4]
 800f838:	2301      	movs	r3, #1
 800f83a:	425b      	negs	r3, r3
 800f83c:	2200      	movs	r2, #0
 800f83e:	0018      	movs	r0, r3
 800f840:	f000 f928 	bl	800fa94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f844:	4b06      	ldr	r3, [pc, #24]	; (800f860 <HAL_InitTick+0x64>)
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f84a:	2300      	movs	r3, #0
 800f84c:	e000      	b.n	800f850 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800f84e:	2301      	movs	r3, #1
}
 800f850:	0018      	movs	r0, r3
 800f852:	46bd      	mov	sp, r7
 800f854:	b003      	add	sp, #12
 800f856:	bd90      	pop	{r4, r7, pc}
 800f858:	200000d8 	.word	0x200000d8
 800f85c:	20000264 	.word	0x20000264
 800f860:	20000260 	.word	0x20000260

0800f864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f868:	4b05      	ldr	r3, [pc, #20]	; (800f880 <HAL_IncTick+0x1c>)
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	001a      	movs	r2, r3
 800f86e:	4b05      	ldr	r3, [pc, #20]	; (800f884 <HAL_IncTick+0x20>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	18d2      	adds	r2, r2, r3
 800f874:	4b03      	ldr	r3, [pc, #12]	; (800f884 <HAL_IncTick+0x20>)
 800f876:	601a      	str	r2, [r3, #0]
}
 800f878:	46c0      	nop			; (mov r8, r8)
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	46c0      	nop			; (mov r8, r8)
 800f880:	20000264 	.word	0x20000264
 800f884:	20003828 	.word	0x20003828

0800f888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	af00      	add	r7, sp, #0
  return uwTick;
 800f88c:	4b02      	ldr	r3, [pc, #8]	; (800f898 <HAL_GetTick+0x10>)
 800f88e:	681b      	ldr	r3, [r3, #0]
}
 800f890:	0018      	movs	r0, r3
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	46c0      	nop			; (mov r8, r8)
 800f898:	20003828 	.word	0x20003828

0800f89c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b084      	sub	sp, #16
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f8a4:	f7ff fff0 	bl	800f888 <HAL_GetTick>
 800f8a8:	0003      	movs	r3, r0
 800f8aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	d005      	beq.n	800f8c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f8b6:	4b0a      	ldr	r3, [pc, #40]	; (800f8e0 <HAL_Delay+0x44>)
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	001a      	movs	r2, r3
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	189b      	adds	r3, r3, r2
 800f8c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f8c2:	46c0      	nop			; (mov r8, r8)
 800f8c4:	f7ff ffe0 	bl	800f888 <HAL_GetTick>
 800f8c8:	0002      	movs	r2, r0
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	1ad3      	subs	r3, r2, r3
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d8f7      	bhi.n	800f8c4 <HAL_Delay+0x28>
  {
  }
}
 800f8d4:	46c0      	nop			; (mov r8, r8)
 800f8d6:	46c0      	nop			; (mov r8, r8)
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	b004      	add	sp, #16
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	46c0      	nop			; (mov r8, r8)
 800f8e0:	20000264 	.word	0x20000264

0800f8e4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	0002      	movs	r2, r0
 800f8ec:	1dfb      	adds	r3, r7, #7
 800f8ee:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f8f0:	1dfb      	adds	r3, r7, #7
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	001a      	movs	r2, r3
 800f8f6:	231f      	movs	r3, #31
 800f8f8:	401a      	ands	r2, r3
 800f8fa:	4b04      	ldr	r3, [pc, #16]	; (800f90c <NVIC_EnableIRQ+0x28>)
 800f8fc:	2101      	movs	r1, #1
 800f8fe:	4091      	lsls	r1, r2
 800f900:	000a      	movs	r2, r1
 800f902:	601a      	str	r2, [r3, #0]
}
 800f904:	46c0      	nop			; (mov r8, r8)
 800f906:	46bd      	mov	sp, r7
 800f908:	b002      	add	sp, #8
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	e000e100 	.word	0xe000e100

0800f910 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	0002      	movs	r2, r0
 800f918:	1dfb      	adds	r3, r7, #7
 800f91a:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f91c:	1dfb      	adds	r3, r7, #7
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	001a      	movs	r2, r3
 800f922:	231f      	movs	r3, #31
 800f924:	4013      	ands	r3, r2
 800f926:	4905      	ldr	r1, [pc, #20]	; (800f93c <NVIC_DisableIRQ+0x2c>)
 800f928:	2201      	movs	r2, #1
 800f92a:	409a      	lsls	r2, r3
 800f92c:	0013      	movs	r3, r2
 800f92e:	2280      	movs	r2, #128	; 0x80
 800f930:	508b      	str	r3, [r1, r2]
}
 800f932:	46c0      	nop			; (mov r8, r8)
 800f934:	46bd      	mov	sp, r7
 800f936:	b002      	add	sp, #8
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	46c0      	nop			; (mov r8, r8)
 800f93c:	e000e100 	.word	0xe000e100

0800f940 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	0002      	movs	r2, r0
 800f948:	1dfb      	adds	r3, r7, #7
 800f94a:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800f94c:	1dfb      	adds	r3, r7, #7
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	001a      	movs	r2, r3
 800f952:	231f      	movs	r3, #31
 800f954:	4013      	ands	r3, r2
 800f956:	4905      	ldr	r1, [pc, #20]	; (800f96c <NVIC_ClearPendingIRQ+0x2c>)
 800f958:	2201      	movs	r2, #1
 800f95a:	409a      	lsls	r2, r3
 800f95c:	23c0      	movs	r3, #192	; 0xc0
 800f95e:	005b      	lsls	r3, r3, #1
 800f960:	50ca      	str	r2, [r1, r3]
}
 800f962:	46c0      	nop			; (mov r8, r8)
 800f964:	46bd      	mov	sp, r7
 800f966:	b002      	add	sp, #8
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	46c0      	nop			; (mov r8, r8)
 800f96c:	e000e100 	.word	0xe000e100

0800f970 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f970:	b590      	push	{r4, r7, lr}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	0002      	movs	r2, r0
 800f978:	6039      	str	r1, [r7, #0]
 800f97a:	1dfb      	adds	r3, r7, #7
 800f97c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800f97e:	1dfb      	adds	r3, r7, #7
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	2b7f      	cmp	r3, #127	; 0x7f
 800f984:	d932      	bls.n	800f9ec <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f986:	4a2f      	ldr	r2, [pc, #188]	; (800fa44 <NVIC_SetPriority+0xd4>)
 800f988:	1dfb      	adds	r3, r7, #7
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	0019      	movs	r1, r3
 800f98e:	230f      	movs	r3, #15
 800f990:	400b      	ands	r3, r1
 800f992:	3b08      	subs	r3, #8
 800f994:	089b      	lsrs	r3, r3, #2
 800f996:	3306      	adds	r3, #6
 800f998:	009b      	lsls	r3, r3, #2
 800f99a:	18d3      	adds	r3, r2, r3
 800f99c:	3304      	adds	r3, #4
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	1dfa      	adds	r2, r7, #7
 800f9a2:	7812      	ldrb	r2, [r2, #0]
 800f9a4:	0011      	movs	r1, r2
 800f9a6:	2203      	movs	r2, #3
 800f9a8:	400a      	ands	r2, r1
 800f9aa:	00d2      	lsls	r2, r2, #3
 800f9ac:	21ff      	movs	r1, #255	; 0xff
 800f9ae:	4091      	lsls	r1, r2
 800f9b0:	000a      	movs	r2, r1
 800f9b2:	43d2      	mvns	r2, r2
 800f9b4:	401a      	ands	r2, r3
 800f9b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	019b      	lsls	r3, r3, #6
 800f9bc:	22ff      	movs	r2, #255	; 0xff
 800f9be:	401a      	ands	r2, r3
 800f9c0:	1dfb      	adds	r3, r7, #7
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	0018      	movs	r0, r3
 800f9c6:	2303      	movs	r3, #3
 800f9c8:	4003      	ands	r3, r0
 800f9ca:	00db      	lsls	r3, r3, #3
 800f9cc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f9ce:	481d      	ldr	r0, [pc, #116]	; (800fa44 <NVIC_SetPriority+0xd4>)
 800f9d0:	1dfb      	adds	r3, r7, #7
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	001c      	movs	r4, r3
 800f9d6:	230f      	movs	r3, #15
 800f9d8:	4023      	ands	r3, r4
 800f9da:	3b08      	subs	r3, #8
 800f9dc:	089b      	lsrs	r3, r3, #2
 800f9de:	430a      	orrs	r2, r1
 800f9e0:	3306      	adds	r3, #6
 800f9e2:	009b      	lsls	r3, r3, #2
 800f9e4:	18c3      	adds	r3, r0, r3
 800f9e6:	3304      	adds	r3, #4
 800f9e8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f9ea:	e027      	b.n	800fa3c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f9ec:	4a16      	ldr	r2, [pc, #88]	; (800fa48 <NVIC_SetPriority+0xd8>)
 800f9ee:	1dfb      	adds	r3, r7, #7
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	b25b      	sxtb	r3, r3
 800f9f4:	089b      	lsrs	r3, r3, #2
 800f9f6:	33c0      	adds	r3, #192	; 0xc0
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	589b      	ldr	r3, [r3, r2]
 800f9fc:	1dfa      	adds	r2, r7, #7
 800f9fe:	7812      	ldrb	r2, [r2, #0]
 800fa00:	0011      	movs	r1, r2
 800fa02:	2203      	movs	r2, #3
 800fa04:	400a      	ands	r2, r1
 800fa06:	00d2      	lsls	r2, r2, #3
 800fa08:	21ff      	movs	r1, #255	; 0xff
 800fa0a:	4091      	lsls	r1, r2
 800fa0c:	000a      	movs	r2, r1
 800fa0e:	43d2      	mvns	r2, r2
 800fa10:	401a      	ands	r2, r3
 800fa12:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	019b      	lsls	r3, r3, #6
 800fa18:	22ff      	movs	r2, #255	; 0xff
 800fa1a:	401a      	ands	r2, r3
 800fa1c:	1dfb      	adds	r3, r7, #7
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	0018      	movs	r0, r3
 800fa22:	2303      	movs	r3, #3
 800fa24:	4003      	ands	r3, r0
 800fa26:	00db      	lsls	r3, r3, #3
 800fa28:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fa2a:	4807      	ldr	r0, [pc, #28]	; (800fa48 <NVIC_SetPriority+0xd8>)
 800fa2c:	1dfb      	adds	r3, r7, #7
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	b25b      	sxtb	r3, r3
 800fa32:	089b      	lsrs	r3, r3, #2
 800fa34:	430a      	orrs	r2, r1
 800fa36:	33c0      	adds	r3, #192	; 0xc0
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	501a      	str	r2, [r3, r0]
}
 800fa3c:	46c0      	nop			; (mov r8, r8)
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	b003      	add	sp, #12
 800fa42:	bd90      	pop	{r4, r7, pc}
 800fa44:	e000ed00 	.word	0xe000ed00
 800fa48:	e000e100 	.word	0xe000e100

0800fa4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	1e5a      	subs	r2, r3, #1
 800fa58:	2380      	movs	r3, #128	; 0x80
 800fa5a:	045b      	lsls	r3, r3, #17
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d301      	bcc.n	800fa64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800fa60:	2301      	movs	r3, #1
 800fa62:	e010      	b.n	800fa86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fa64:	4b0a      	ldr	r3, [pc, #40]	; (800fa90 <SysTick_Config+0x44>)
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	3a01      	subs	r2, #1
 800fa6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	425b      	negs	r3, r3
 800fa70:	2103      	movs	r1, #3
 800fa72:	0018      	movs	r0, r3
 800fa74:	f7ff ff7c 	bl	800f970 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fa78:	4b05      	ldr	r3, [pc, #20]	; (800fa90 <SysTick_Config+0x44>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fa7e:	4b04      	ldr	r3, [pc, #16]	; (800fa90 <SysTick_Config+0x44>)
 800fa80:	2207      	movs	r2, #7
 800fa82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	0018      	movs	r0, r3
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	b002      	add	sp, #8
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	46c0      	nop			; (mov r8, r8)
 800fa90:	e000e010 	.word	0xe000e010

0800fa94 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b084      	sub	sp, #16
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60b9      	str	r1, [r7, #8]
 800fa9c:	607a      	str	r2, [r7, #4]
 800fa9e:	210f      	movs	r1, #15
 800faa0:	187b      	adds	r3, r7, r1
 800faa2:	1c02      	adds	r2, r0, #0
 800faa4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800faa6:	68ba      	ldr	r2, [r7, #8]
 800faa8:	187b      	adds	r3, r7, r1
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	b25b      	sxtb	r3, r3
 800faae:	0011      	movs	r1, r2
 800fab0:	0018      	movs	r0, r3
 800fab2:	f7ff ff5d 	bl	800f970 <NVIC_SetPriority>
}
 800fab6:	46c0      	nop			; (mov r8, r8)
 800fab8:	46bd      	mov	sp, r7
 800faba:	b004      	add	sp, #16
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b082      	sub	sp, #8
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	0002      	movs	r2, r0
 800fac6:	1dfb      	adds	r3, r7, #7
 800fac8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800faca:	1dfb      	adds	r3, r7, #7
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	b25b      	sxtb	r3, r3
 800fad0:	0018      	movs	r0, r3
 800fad2:	f7ff ff07 	bl	800f8e4 <NVIC_EnableIRQ>
}
 800fad6:	46c0      	nop			; (mov r8, r8)
 800fad8:	46bd      	mov	sp, r7
 800fada:	b002      	add	sp, #8
 800fadc:	bd80      	pop	{r7, pc}

0800fade <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b082      	sub	sp, #8
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	0002      	movs	r2, r0
 800fae6:	1dfb      	adds	r3, r7, #7
 800fae8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800faea:	1dfb      	adds	r3, r7, #7
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	b25b      	sxtb	r3, r3
 800faf0:	0018      	movs	r0, r3
 800faf2:	f7ff ff0d 	bl	800f910 <NVIC_DisableIRQ>
}
 800faf6:	46c0      	nop			; (mov r8, r8)
 800faf8:	46bd      	mov	sp, r7
 800fafa:	b002      	add	sp, #8
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800fafe:	b580      	push	{r7, lr}
 800fb00:	b082      	sub	sp, #8
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	0018      	movs	r0, r3
 800fb0a:	f7ff ff9f 	bl	800fa4c <SysTick_Config>
 800fb0e:	0003      	movs	r3, r0
}
 800fb10:	0018      	movs	r0, r3
 800fb12:	46bd      	mov	sp, r7
 800fb14:	b002      	add	sp, #8
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	0002      	movs	r2, r0
 800fb20:	1dfb      	adds	r3, r7, #7
 800fb22:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800fb24:	1dfb      	adds	r3, r7, #7
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	b25b      	sxtb	r3, r3
 800fb2a:	0018      	movs	r0, r3
 800fb2c:	f7ff ff08 	bl	800f940 <NVIC_ClearPendingIRQ>
}
 800fb30:	46c0      	nop			; (mov r8, r8)
 800fb32:	46bd      	mov	sp, r7
 800fb34:	b002      	add	sp, #8
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fb40:	210f      	movs	r1, #15
 800fb42:	187b      	adds	r3, r7, r1
 800fb44:	2200      	movs	r2, #0
 800fb46:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2225      	movs	r2, #37	; 0x25
 800fb4c:	5c9b      	ldrb	r3, [r3, r2]
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	2b02      	cmp	r3, #2
 800fb52:	d006      	beq.n	800fb62 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2204      	movs	r2, #4
 800fb58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800fb5a:	187b      	adds	r3, r7, r1
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	701a      	strb	r2, [r3, #0]
 800fb60:	e02a      	b.n	800fbb8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	210e      	movs	r1, #14
 800fb6e:	438a      	bics	r2, r1
 800fb70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	2101      	movs	r1, #1
 800fb7e:	438a      	bics	r2, r1
 800fb80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb86:	221c      	movs	r2, #28
 800fb88:	401a      	ands	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb8e:	2101      	movs	r1, #1
 800fb90:	4091      	lsls	r1, r2
 800fb92:	000a      	movs	r2, r1
 800fb94:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2225      	movs	r2, #37	; 0x25
 800fb9a:	2101      	movs	r1, #1
 800fb9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2224      	movs	r2, #36	; 0x24
 800fba2:	2100      	movs	r1, #0
 800fba4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d004      	beq.n	800fbb8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbb2:	687a      	ldr	r2, [r7, #4]
 800fbb4:	0010      	movs	r0, r2
 800fbb6:	4798      	blx	r3
    }
  }
  return status;
 800fbb8:	230f      	movs	r3, #15
 800fbba:	18fb      	adds	r3, r7, r3
 800fbbc:	781b      	ldrb	r3, [r3, #0]
}
 800fbbe:	0018      	movs	r0, r3
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	b004      	add	sp, #16
 800fbc4:	bd80      	pop	{r7, pc}
	...

0800fbc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b086      	sub	sp, #24
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800fbde:	e155      	b.n	800fe8c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	2101      	movs	r1, #1
 800fbe6:	697a      	ldr	r2, [r7, #20]
 800fbe8:	4091      	lsls	r1, r2
 800fbea:	000a      	movs	r2, r1
 800fbec:	4013      	ands	r3, r2
 800fbee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d100      	bne.n	800fbf8 <HAL_GPIO_Init+0x30>
 800fbf6:	e146      	b.n	800fe86 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d00b      	beq.n	800fc18 <HAL_GPIO_Init+0x50>
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	2b02      	cmp	r3, #2
 800fc06:	d007      	beq.n	800fc18 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fc0c:	2b11      	cmp	r3, #17
 800fc0e:	d003      	beq.n	800fc18 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	2b12      	cmp	r3, #18
 800fc16:	d130      	bne.n	800fc7a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	2203      	movs	r2, #3
 800fc24:	409a      	lsls	r2, r3
 800fc26:	0013      	movs	r3, r2
 800fc28:	43da      	mvns	r2, r3
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	4013      	ands	r3, r2
 800fc2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	68da      	ldr	r2, [r3, #12]
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	409a      	lsls	r2, r3
 800fc3a:	0013      	movs	r3, r2
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	693a      	ldr	r2, [r7, #16]
 800fc46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fc4e:	2201      	movs	r2, #1
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	409a      	lsls	r2, r3
 800fc54:	0013      	movs	r3, r2
 800fc56:	43da      	mvns	r2, r3
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	4013      	ands	r3, r2
 800fc5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	091b      	lsrs	r3, r3, #4
 800fc64:	2201      	movs	r2, #1
 800fc66:	401a      	ands	r2, r3
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	409a      	lsls	r2, r3
 800fc6c:	0013      	movs	r3, r2
 800fc6e:	693a      	ldr	r2, [r7, #16]
 800fc70:	4313      	orrs	r3, r2
 800fc72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	693a      	ldr	r2, [r7, #16]
 800fc78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	68db      	ldr	r3, [r3, #12]
 800fc7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	005b      	lsls	r3, r3, #1
 800fc84:	2203      	movs	r2, #3
 800fc86:	409a      	lsls	r2, r3
 800fc88:	0013      	movs	r3, r2
 800fc8a:	43da      	mvns	r2, r3
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	4013      	ands	r3, r2
 800fc90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	689a      	ldr	r2, [r3, #8]
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	005b      	lsls	r3, r3, #1
 800fc9a:	409a      	lsls	r2, r3
 800fc9c:	0013      	movs	r3, r2
 800fc9e:	693a      	ldr	r2, [r7, #16]
 800fca0:	4313      	orrs	r3, r2
 800fca2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	693a      	ldr	r2, [r7, #16]
 800fca8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d003      	beq.n	800fcba <HAL_GPIO_Init+0xf2>
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	2b12      	cmp	r3, #18
 800fcb8:	d123      	bne.n	800fd02 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	08da      	lsrs	r2, r3, #3
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	3208      	adds	r2, #8
 800fcc2:	0092      	lsls	r2, r2, #2
 800fcc4:	58d3      	ldr	r3, [r2, r3]
 800fcc6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	2207      	movs	r2, #7
 800fccc:	4013      	ands	r3, r2
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	220f      	movs	r2, #15
 800fcd2:	409a      	lsls	r2, r3
 800fcd4:	0013      	movs	r3, r2
 800fcd6:	43da      	mvns	r2, r3
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	4013      	ands	r3, r2
 800fcdc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	691a      	ldr	r2, [r3, #16]
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	2107      	movs	r1, #7
 800fce6:	400b      	ands	r3, r1
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	409a      	lsls	r2, r3
 800fcec:	0013      	movs	r3, r2
 800fcee:	693a      	ldr	r2, [r7, #16]
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	08da      	lsrs	r2, r3, #3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	3208      	adds	r2, #8
 800fcfc:	0092      	lsls	r2, r2, #2
 800fcfe:	6939      	ldr	r1, [r7, #16]
 800fd00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	005b      	lsls	r3, r3, #1
 800fd0c:	2203      	movs	r2, #3
 800fd0e:	409a      	lsls	r2, r3
 800fd10:	0013      	movs	r3, r2
 800fd12:	43da      	mvns	r2, r3
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	4013      	ands	r3, r2
 800fd18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	2203      	movs	r2, #3
 800fd20:	401a      	ands	r2, r3
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	005b      	lsls	r3, r3, #1
 800fd26:	409a      	lsls	r2, r3
 800fd28:	0013      	movs	r3, r2
 800fd2a:	693a      	ldr	r2, [r7, #16]
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	693a      	ldr	r2, [r7, #16]
 800fd34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	685a      	ldr	r2, [r3, #4]
 800fd3a:	2380      	movs	r3, #128	; 0x80
 800fd3c:	055b      	lsls	r3, r3, #21
 800fd3e:	4013      	ands	r3, r2
 800fd40:	d100      	bne.n	800fd44 <HAL_GPIO_Init+0x17c>
 800fd42:	e0a0      	b.n	800fe86 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fd44:	4b57      	ldr	r3, [pc, #348]	; (800fea4 <HAL_GPIO_Init+0x2dc>)
 800fd46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd48:	4b56      	ldr	r3, [pc, #344]	; (800fea4 <HAL_GPIO_Init+0x2dc>)
 800fd4a:	2101      	movs	r1, #1
 800fd4c:	430a      	orrs	r2, r1
 800fd4e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800fd50:	4a55      	ldr	r2, [pc, #340]	; (800fea8 <HAL_GPIO_Init+0x2e0>)
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	089b      	lsrs	r3, r3, #2
 800fd56:	3302      	adds	r3, #2
 800fd58:	009b      	lsls	r3, r3, #2
 800fd5a:	589b      	ldr	r3, [r3, r2]
 800fd5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	2203      	movs	r2, #3
 800fd62:	4013      	ands	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	220f      	movs	r2, #15
 800fd68:	409a      	lsls	r2, r3
 800fd6a:	0013      	movs	r3, r2
 800fd6c:	43da      	mvns	r2, r3
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	4013      	ands	r3, r2
 800fd72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	23a0      	movs	r3, #160	; 0xa0
 800fd78:	05db      	lsls	r3, r3, #23
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d01f      	beq.n	800fdbe <HAL_GPIO_Init+0x1f6>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	4a4a      	ldr	r2, [pc, #296]	; (800feac <HAL_GPIO_Init+0x2e4>)
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d019      	beq.n	800fdba <HAL_GPIO_Init+0x1f2>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	4a49      	ldr	r2, [pc, #292]	; (800feb0 <HAL_GPIO_Init+0x2e8>)
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d013      	beq.n	800fdb6 <HAL_GPIO_Init+0x1ee>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	4a48      	ldr	r2, [pc, #288]	; (800feb4 <HAL_GPIO_Init+0x2ec>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d00d      	beq.n	800fdb2 <HAL_GPIO_Init+0x1ea>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4a47      	ldr	r2, [pc, #284]	; (800feb8 <HAL_GPIO_Init+0x2f0>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d007      	beq.n	800fdae <HAL_GPIO_Init+0x1e6>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	4a46      	ldr	r2, [pc, #280]	; (800febc <HAL_GPIO_Init+0x2f4>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d101      	bne.n	800fdaa <HAL_GPIO_Init+0x1e2>
 800fda6:	2305      	movs	r3, #5
 800fda8:	e00a      	b.n	800fdc0 <HAL_GPIO_Init+0x1f8>
 800fdaa:	2306      	movs	r3, #6
 800fdac:	e008      	b.n	800fdc0 <HAL_GPIO_Init+0x1f8>
 800fdae:	2304      	movs	r3, #4
 800fdb0:	e006      	b.n	800fdc0 <HAL_GPIO_Init+0x1f8>
 800fdb2:	2303      	movs	r3, #3
 800fdb4:	e004      	b.n	800fdc0 <HAL_GPIO_Init+0x1f8>
 800fdb6:	2302      	movs	r3, #2
 800fdb8:	e002      	b.n	800fdc0 <HAL_GPIO_Init+0x1f8>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e000      	b.n	800fdc0 <HAL_GPIO_Init+0x1f8>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	697a      	ldr	r2, [r7, #20]
 800fdc2:	2103      	movs	r1, #3
 800fdc4:	400a      	ands	r2, r1
 800fdc6:	0092      	lsls	r2, r2, #2
 800fdc8:	4093      	lsls	r3, r2
 800fdca:	693a      	ldr	r2, [r7, #16]
 800fdcc:	4313      	orrs	r3, r2
 800fdce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fdd0:	4935      	ldr	r1, [pc, #212]	; (800fea8 <HAL_GPIO_Init+0x2e0>)
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	089b      	lsrs	r3, r3, #2
 800fdd6:	3302      	adds	r3, #2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	693a      	ldr	r2, [r7, #16]
 800fddc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fdde:	4b38      	ldr	r3, [pc, #224]	; (800fec0 <HAL_GPIO_Init+0x2f8>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	43da      	mvns	r2, r3
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	4013      	ands	r3, r2
 800fdec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	685a      	ldr	r2, [r3, #4]
 800fdf2:	2380      	movs	r3, #128	; 0x80
 800fdf4:	025b      	lsls	r3, r3, #9
 800fdf6:	4013      	ands	r3, r2
 800fdf8:	d003      	beq.n	800fe02 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800fdfa:	693a      	ldr	r2, [r7, #16]
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800fe02:	4b2f      	ldr	r3, [pc, #188]	; (800fec0 <HAL_GPIO_Init+0x2f8>)
 800fe04:	693a      	ldr	r2, [r7, #16]
 800fe06:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800fe08:	4b2d      	ldr	r3, [pc, #180]	; (800fec0 <HAL_GPIO_Init+0x2f8>)
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	43da      	mvns	r2, r3
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	4013      	ands	r3, r2
 800fe16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	685a      	ldr	r2, [r3, #4]
 800fe1c:	2380      	movs	r3, #128	; 0x80
 800fe1e:	029b      	lsls	r3, r3, #10
 800fe20:	4013      	ands	r3, r2
 800fe22:	d003      	beq.n	800fe2c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800fe24:	693a      	ldr	r2, [r7, #16]
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800fe2c:	4b24      	ldr	r3, [pc, #144]	; (800fec0 <HAL_GPIO_Init+0x2f8>)
 800fe2e:	693a      	ldr	r2, [r7, #16]
 800fe30:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fe32:	4b23      	ldr	r3, [pc, #140]	; (800fec0 <HAL_GPIO_Init+0x2f8>)
 800fe34:	689b      	ldr	r3, [r3, #8]
 800fe36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	43da      	mvns	r2, r3
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	4013      	ands	r3, r2
 800fe40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	685a      	ldr	r2, [r3, #4]
 800fe46:	2380      	movs	r3, #128	; 0x80
 800fe48:	035b      	lsls	r3, r3, #13
 800fe4a:	4013      	ands	r3, r2
 800fe4c:	d003      	beq.n	800fe56 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800fe4e:	693a      	ldr	r2, [r7, #16]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	4313      	orrs	r3, r2
 800fe54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800fe56:	4b1a      	ldr	r3, [pc, #104]	; (800fec0 <HAL_GPIO_Init+0x2f8>)
 800fe58:	693a      	ldr	r2, [r7, #16]
 800fe5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800fe5c:	4b18      	ldr	r3, [pc, #96]	; (800fec0 <HAL_GPIO_Init+0x2f8>)
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	43da      	mvns	r2, r3
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	4013      	ands	r3, r2
 800fe6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	685a      	ldr	r2, [r3, #4]
 800fe70:	2380      	movs	r3, #128	; 0x80
 800fe72:	039b      	lsls	r3, r3, #14
 800fe74:	4013      	ands	r3, r2
 800fe76:	d003      	beq.n	800fe80 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800fe78:	693a      	ldr	r2, [r7, #16]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	4313      	orrs	r3, r2
 800fe7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800fe80:	4b0f      	ldr	r3, [pc, #60]	; (800fec0 <HAL_GPIO_Init+0x2f8>)
 800fe82:	693a      	ldr	r2, [r7, #16]
 800fe84:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	3301      	adds	r3, #1
 800fe8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	40da      	lsrs	r2, r3
 800fe94:	1e13      	subs	r3, r2, #0
 800fe96:	d000      	beq.n	800fe9a <HAL_GPIO_Init+0x2d2>
 800fe98:	e6a2      	b.n	800fbe0 <HAL_GPIO_Init+0x18>
  }
}
 800fe9a:	46c0      	nop			; (mov r8, r8)
 800fe9c:	46c0      	nop			; (mov r8, r8)
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	b006      	add	sp, #24
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	40021000 	.word	0x40021000
 800fea8:	40010000 	.word	0x40010000
 800feac:	50000400 	.word	0x50000400
 800feb0:	50000800 	.word	0x50000800
 800feb4:	50000c00 	.word	0x50000c00
 800feb8:	50001000 	.word	0x50001000
 800febc:	50001c00 	.word	0x50001c00
 800fec0:	40010400 	.word	0x40010400

0800fec4 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b086      	sub	sp, #24
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800fece:	2300      	movs	r3, #0
 800fed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fed2:	2300      	movs	r3, #0
 800fed4:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800fed6:	2300      	movs	r3, #0
 800fed8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800feda:	e0bc      	b.n	8010056 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800fedc:	2201      	movs	r2, #1
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	409a      	lsls	r2, r3
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	4013      	ands	r3, r2
 800fee6:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d100      	bne.n	800fef0 <HAL_GPIO_DeInit+0x2c>
 800feee:	e0af      	b.n	8010050 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800fef0:	4a5e      	ldr	r2, [pc, #376]	; (801006c <HAL_GPIO_DeInit+0x1a8>)
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	089b      	lsrs	r3, r3, #2
 800fef6:	3302      	adds	r3, #2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	589b      	ldr	r3, [r3, r2]
 800fefc:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	2203      	movs	r2, #3
 800ff02:	4013      	ands	r3, r2
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	220f      	movs	r2, #15
 800ff08:	409a      	lsls	r2, r3
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	4013      	ands	r3, r2
 800ff0e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ff10:	687a      	ldr	r2, [r7, #4]
 800ff12:	23a0      	movs	r3, #160	; 0xa0
 800ff14:	05db      	lsls	r3, r3, #23
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d01f      	beq.n	800ff5a <HAL_GPIO_DeInit+0x96>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	4a54      	ldr	r2, [pc, #336]	; (8010070 <HAL_GPIO_DeInit+0x1ac>)
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d019      	beq.n	800ff56 <HAL_GPIO_DeInit+0x92>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	4a53      	ldr	r2, [pc, #332]	; (8010074 <HAL_GPIO_DeInit+0x1b0>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d013      	beq.n	800ff52 <HAL_GPIO_DeInit+0x8e>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4a52      	ldr	r2, [pc, #328]	; (8010078 <HAL_GPIO_DeInit+0x1b4>)
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d00d      	beq.n	800ff4e <HAL_GPIO_DeInit+0x8a>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4a51      	ldr	r2, [pc, #324]	; (801007c <HAL_GPIO_DeInit+0x1b8>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d007      	beq.n	800ff4a <HAL_GPIO_DeInit+0x86>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	4a50      	ldr	r2, [pc, #320]	; (8010080 <HAL_GPIO_DeInit+0x1bc>)
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d101      	bne.n	800ff46 <HAL_GPIO_DeInit+0x82>
 800ff42:	2305      	movs	r3, #5
 800ff44:	e00a      	b.n	800ff5c <HAL_GPIO_DeInit+0x98>
 800ff46:	2306      	movs	r3, #6
 800ff48:	e008      	b.n	800ff5c <HAL_GPIO_DeInit+0x98>
 800ff4a:	2304      	movs	r3, #4
 800ff4c:	e006      	b.n	800ff5c <HAL_GPIO_DeInit+0x98>
 800ff4e:	2303      	movs	r3, #3
 800ff50:	e004      	b.n	800ff5c <HAL_GPIO_DeInit+0x98>
 800ff52:	2302      	movs	r3, #2
 800ff54:	e002      	b.n	800ff5c <HAL_GPIO_DeInit+0x98>
 800ff56:	2301      	movs	r3, #1
 800ff58:	e000      	b.n	800ff5c <HAL_GPIO_DeInit+0x98>
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	697a      	ldr	r2, [r7, #20]
 800ff5e:	2103      	movs	r1, #3
 800ff60:	400a      	ands	r2, r1
 800ff62:	0092      	lsls	r2, r2, #2
 800ff64:	4093      	lsls	r3, r2
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d132      	bne.n	800ffd2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ff6c:	4b45      	ldr	r3, [pc, #276]	; (8010084 <HAL_GPIO_DeInit+0x1c0>)
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	43d9      	mvns	r1, r3
 800ff74:	4b43      	ldr	r3, [pc, #268]	; (8010084 <HAL_GPIO_DeInit+0x1c0>)
 800ff76:	400a      	ands	r2, r1
 800ff78:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ff7a:	4b42      	ldr	r3, [pc, #264]	; (8010084 <HAL_GPIO_DeInit+0x1c0>)
 800ff7c:	685a      	ldr	r2, [r3, #4]
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	43d9      	mvns	r1, r3
 800ff82:	4b40      	ldr	r3, [pc, #256]	; (8010084 <HAL_GPIO_DeInit+0x1c0>)
 800ff84:	400a      	ands	r2, r1
 800ff86:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800ff88:	4b3e      	ldr	r3, [pc, #248]	; (8010084 <HAL_GPIO_DeInit+0x1c0>)
 800ff8a:	689a      	ldr	r2, [r3, #8]
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	43d9      	mvns	r1, r3
 800ff90:	4b3c      	ldr	r3, [pc, #240]	; (8010084 <HAL_GPIO_DeInit+0x1c0>)
 800ff92:	400a      	ands	r2, r1
 800ff94:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800ff96:	4b3b      	ldr	r3, [pc, #236]	; (8010084 <HAL_GPIO_DeInit+0x1c0>)
 800ff98:	68da      	ldr	r2, [r3, #12]
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	43d9      	mvns	r1, r3
 800ff9e:	4b39      	ldr	r3, [pc, #228]	; (8010084 <HAL_GPIO_DeInit+0x1c0>)
 800ffa0:	400a      	ands	r2, r1
 800ffa2:	60da      	str	r2, [r3, #12]
        
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	2203      	movs	r2, #3
 800ffa8:	4013      	ands	r3, r2
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	220f      	movs	r2, #15
 800ffae:	409a      	lsls	r2, r3
 800ffb0:	0013      	movs	r3, r2
 800ffb2:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ffb4:	4a2d      	ldr	r2, [pc, #180]	; (801006c <HAL_GPIO_DeInit+0x1a8>)
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	089b      	lsrs	r3, r3, #2
 800ffba:	3302      	adds	r3, #2
 800ffbc:	009b      	lsls	r3, r3, #2
 800ffbe:	589a      	ldr	r2, [r3, r2]
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	43d9      	mvns	r1, r3
 800ffc4:	4829      	ldr	r0, [pc, #164]	; (801006c <HAL_GPIO_DeInit+0x1a8>)
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	089b      	lsrs	r3, r3, #2
 800ffca:	400a      	ands	r2, r1
 800ffcc:	3302      	adds	r3, #2
 800ffce:	009b      	lsls	r3, r3, #2
 800ffd0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681a      	ldr	r2, [r3, #0]
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	005b      	lsls	r3, r3, #1
 800ffda:	2103      	movs	r1, #3
 800ffdc:	4099      	lsls	r1, r3
 800ffde:	000b      	movs	r3, r1
 800ffe0:	431a      	orrs	r2, r3
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	08da      	lsrs	r2, r3, #3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	3208      	adds	r2, #8
 800ffee:	0092      	lsls	r2, r2, #2
 800fff0:	58d3      	ldr	r3, [r2, r3]
 800fff2:	697a      	ldr	r2, [r7, #20]
 800fff4:	2107      	movs	r1, #7
 800fff6:	400a      	ands	r2, r1
 800fff8:	0092      	lsls	r2, r2, #2
 800fffa:	210f      	movs	r1, #15
 800fffc:	4091      	lsls	r1, r2
 800fffe:	000a      	movs	r2, r1
 8010000:	43d1      	mvns	r1, r2
 8010002:	697a      	ldr	r2, [r7, #20]
 8010004:	08d2      	lsrs	r2, r2, #3
 8010006:	4019      	ands	r1, r3
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	3208      	adds	r2, #8
 801000c:	0092      	lsls	r2, r2, #2
 801000e:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	68db      	ldr	r3, [r3, #12]
 8010014:	697a      	ldr	r2, [r7, #20]
 8010016:	0052      	lsls	r2, r2, #1
 8010018:	2103      	movs	r1, #3
 801001a:	4091      	lsls	r1, r2
 801001c:	000a      	movs	r2, r1
 801001e:	43d2      	mvns	r2, r2
 8010020:	401a      	ands	r2, r3
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	2101      	movs	r1, #1
 801002c:	697a      	ldr	r2, [r7, #20]
 801002e:	4091      	lsls	r1, r2
 8010030:	000a      	movs	r2, r1
 8010032:	43d2      	mvns	r2, r2
 8010034:	401a      	ands	r2, r3
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	689b      	ldr	r3, [r3, #8]
 801003e:	697a      	ldr	r2, [r7, #20]
 8010040:	0052      	lsls	r2, r2, #1
 8010042:	2103      	movs	r1, #3
 8010044:	4091      	lsls	r1, r2
 8010046:	000a      	movs	r2, r1
 8010048:	43d2      	mvns	r2, r2
 801004a:	401a      	ands	r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	609a      	str	r2, [r3, #8]
    }
    position++;
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	3301      	adds	r3, #1
 8010054:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8010056:	683a      	ldr	r2, [r7, #0]
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	40da      	lsrs	r2, r3
 801005c:	1e13      	subs	r3, r2, #0
 801005e:	d000      	beq.n	8010062 <HAL_GPIO_DeInit+0x19e>
 8010060:	e73c      	b.n	800fedc <HAL_GPIO_DeInit+0x18>
  }
}
 8010062:	46c0      	nop			; (mov r8, r8)
 8010064:	46c0      	nop			; (mov r8, r8)
 8010066:	46bd      	mov	sp, r7
 8010068:	b006      	add	sp, #24
 801006a:	bd80      	pop	{r7, pc}
 801006c:	40010000 	.word	0x40010000
 8010070:	50000400 	.word	0x50000400
 8010074:	50000800 	.word	0x50000800
 8010078:	50000c00 	.word	0x50000c00
 801007c:	50001000 	.word	0x50001000
 8010080:	50001c00 	.word	0x50001c00
 8010084:	40010400 	.word	0x40010400

08010088 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	000a      	movs	r2, r1
 8010092:	1cbb      	adds	r3, r7, #2
 8010094:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	691b      	ldr	r3, [r3, #16]
 801009a:	1cba      	adds	r2, r7, #2
 801009c:	8812      	ldrh	r2, [r2, #0]
 801009e:	4013      	ands	r3, r2
 80100a0:	d004      	beq.n	80100ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80100a2:	230f      	movs	r3, #15
 80100a4:	18fb      	adds	r3, r7, r3
 80100a6:	2201      	movs	r2, #1
 80100a8:	701a      	strb	r2, [r3, #0]
 80100aa:	e003      	b.n	80100b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80100ac:	230f      	movs	r3, #15
 80100ae:	18fb      	adds	r3, r7, r3
 80100b0:	2200      	movs	r2, #0
 80100b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80100b4:	230f      	movs	r3, #15
 80100b6:	18fb      	adds	r3, r7, r3
 80100b8:	781b      	ldrb	r3, [r3, #0]
}
 80100ba:	0018      	movs	r0, r3
 80100bc:	46bd      	mov	sp, r7
 80100be:	b004      	add	sp, #16
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b082      	sub	sp, #8
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
 80100ca:	0008      	movs	r0, r1
 80100cc:	0011      	movs	r1, r2
 80100ce:	1cbb      	adds	r3, r7, #2
 80100d0:	1c02      	adds	r2, r0, #0
 80100d2:	801a      	strh	r2, [r3, #0]
 80100d4:	1c7b      	adds	r3, r7, #1
 80100d6:	1c0a      	adds	r2, r1, #0
 80100d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80100da:	1c7b      	adds	r3, r7, #1
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d004      	beq.n	80100ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80100e2:	1cbb      	adds	r3, r7, #2
 80100e4:	881a      	ldrh	r2, [r3, #0]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80100ea:	e003      	b.n	80100f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80100ec:	1cbb      	adds	r3, r7, #2
 80100ee:	881a      	ldrh	r2, [r3, #0]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80100f4:	46c0      	nop			; (mov r8, r8)
 80100f6:	46bd      	mov	sp, r7
 80100f8:	b002      	add	sp, #8
 80100fa:	bd80      	pop	{r7, pc}

080100fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d101      	bne.n	801010e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801010a:	2301      	movs	r3, #1
 801010c:	e082      	b.n	8010214 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2241      	movs	r2, #65	; 0x41
 8010112:	5c9b      	ldrb	r3, [r3, r2]
 8010114:	b2db      	uxtb	r3, r3
 8010116:	2b00      	cmp	r3, #0
 8010118:	d107      	bne.n	801012a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2240      	movs	r2, #64	; 0x40
 801011e:	2100      	movs	r1, #0
 8010120:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	0018      	movs	r0, r3
 8010126:	f7f4 ffef 	bl	8005108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2241      	movs	r2, #65	; 0x41
 801012e:	2124      	movs	r1, #36	; 0x24
 8010130:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	681a      	ldr	r2, [r3, #0]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2101      	movs	r1, #1
 801013e:	438a      	bics	r2, r1
 8010140:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	685a      	ldr	r2, [r3, #4]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4934      	ldr	r1, [pc, #208]	; (801021c <HAL_I2C_Init+0x120>)
 801014c:	400a      	ands	r2, r1
 801014e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	689a      	ldr	r2, [r3, #8]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4931      	ldr	r1, [pc, #196]	; (8010220 <HAL_I2C_Init+0x124>)
 801015c:	400a      	ands	r2, r1
 801015e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	2b01      	cmp	r3, #1
 8010166:	d108      	bne.n	801017a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	689a      	ldr	r2, [r3, #8]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2180      	movs	r1, #128	; 0x80
 8010172:	0209      	lsls	r1, r1, #8
 8010174:	430a      	orrs	r2, r1
 8010176:	609a      	str	r2, [r3, #8]
 8010178:	e007      	b.n	801018a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	689a      	ldr	r2, [r3, #8]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2184      	movs	r1, #132	; 0x84
 8010184:	0209      	lsls	r1, r1, #8
 8010186:	430a      	orrs	r2, r1
 8010188:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	2b02      	cmp	r3, #2
 8010190:	d104      	bne.n	801019c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	2280      	movs	r2, #128	; 0x80
 8010198:	0112      	lsls	r2, r2, #4
 801019a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	685a      	ldr	r2, [r3, #4]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	491f      	ldr	r1, [pc, #124]	; (8010224 <HAL_I2C_Init+0x128>)
 80101a8:	430a      	orrs	r2, r1
 80101aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68da      	ldr	r2, [r3, #12]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	491a      	ldr	r1, [pc, #104]	; (8010220 <HAL_I2C_Init+0x124>)
 80101b8:	400a      	ands	r2, r1
 80101ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	691a      	ldr	r2, [r3, #16]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	695b      	ldr	r3, [r3, #20]
 80101c4:	431a      	orrs	r2, r3
 80101c6:	0011      	movs	r1, r2
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	699b      	ldr	r3, [r3, #24]
 80101cc:	021a      	lsls	r2, r3, #8
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	430a      	orrs	r2, r1
 80101d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	69d9      	ldr	r1, [r3, #28]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6a1a      	ldr	r2, [r3, #32]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	430a      	orrs	r2, r1
 80101e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2101      	movs	r1, #1
 80101f2:	430a      	orrs	r2, r1
 80101f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2200      	movs	r2, #0
 80101fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2241      	movs	r2, #65	; 0x41
 8010200:	2120      	movs	r1, #32
 8010202:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2200      	movs	r2, #0
 8010208:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2242      	movs	r2, #66	; 0x42
 801020e:	2100      	movs	r1, #0
 8010210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010212:	2300      	movs	r3, #0
}
 8010214:	0018      	movs	r0, r3
 8010216:	46bd      	mov	sp, r7
 8010218:	b002      	add	sp, #8
 801021a:	bd80      	pop	{r7, pc}
 801021c:	f0ffffff 	.word	0xf0ffffff
 8010220:	ffff7fff 	.word	0xffff7fff
 8010224:	02008000 	.word	0x02008000

08010228 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010228:	b590      	push	{r4, r7, lr}
 801022a:	b089      	sub	sp, #36	; 0x24
 801022c:	af02      	add	r7, sp, #8
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	0008      	movs	r0, r1
 8010232:	607a      	str	r2, [r7, #4]
 8010234:	0019      	movs	r1, r3
 8010236:	230a      	movs	r3, #10
 8010238:	18fb      	adds	r3, r7, r3
 801023a:	1c02      	adds	r2, r0, #0
 801023c:	801a      	strh	r2, [r3, #0]
 801023e:	2308      	movs	r3, #8
 8010240:	18fb      	adds	r3, r7, r3
 8010242:	1c0a      	adds	r2, r1, #0
 8010244:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2241      	movs	r2, #65	; 0x41
 801024a:	5c9b      	ldrb	r3, [r3, r2]
 801024c:	b2db      	uxtb	r3, r3
 801024e:	2b20      	cmp	r3, #32
 8010250:	d000      	beq.n	8010254 <HAL_I2C_Master_Transmit+0x2c>
 8010252:	e0e7      	b.n	8010424 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2240      	movs	r2, #64	; 0x40
 8010258:	5c9b      	ldrb	r3, [r3, r2]
 801025a:	2b01      	cmp	r3, #1
 801025c:	d101      	bne.n	8010262 <HAL_I2C_Master_Transmit+0x3a>
 801025e:	2302      	movs	r3, #2
 8010260:	e0e1      	b.n	8010426 <HAL_I2C_Master_Transmit+0x1fe>
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2240      	movs	r2, #64	; 0x40
 8010266:	2101      	movs	r1, #1
 8010268:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801026a:	f7ff fb0d 	bl	800f888 <HAL_GetTick>
 801026e:	0003      	movs	r3, r0
 8010270:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010272:	2380      	movs	r3, #128	; 0x80
 8010274:	0219      	lsls	r1, r3, #8
 8010276:	68f8      	ldr	r0, [r7, #12]
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	9300      	str	r3, [sp, #0]
 801027c:	2319      	movs	r3, #25
 801027e:	2201      	movs	r2, #1
 8010280:	f000 fa04 	bl	801068c <I2C_WaitOnFlagUntilTimeout>
 8010284:	1e03      	subs	r3, r0, #0
 8010286:	d001      	beq.n	801028c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8010288:	2301      	movs	r3, #1
 801028a:	e0cc      	b.n	8010426 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2241      	movs	r2, #65	; 0x41
 8010290:	2121      	movs	r1, #33	; 0x21
 8010292:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2242      	movs	r2, #66	; 0x42
 8010298:	2110      	movs	r1, #16
 801029a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2200      	movs	r2, #0
 80102a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2208      	movs	r2, #8
 80102ac:	18ba      	adds	r2, r7, r2
 80102ae:	8812      	ldrh	r2, [r2, #0]
 80102b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2200      	movs	r2, #0
 80102b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102bc:	b29b      	uxth	r3, r3
 80102be:	2bff      	cmp	r3, #255	; 0xff
 80102c0:	d911      	bls.n	80102e6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	22ff      	movs	r2, #255	; 0xff
 80102c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80102cc:	b2da      	uxtb	r2, r3
 80102ce:	2380      	movs	r3, #128	; 0x80
 80102d0:	045c      	lsls	r4, r3, #17
 80102d2:	230a      	movs	r3, #10
 80102d4:	18fb      	adds	r3, r7, r3
 80102d6:	8819      	ldrh	r1, [r3, #0]
 80102d8:	68f8      	ldr	r0, [r7, #12]
 80102da:	4b55      	ldr	r3, [pc, #340]	; (8010430 <HAL_I2C_Master_Transmit+0x208>)
 80102dc:	9300      	str	r3, [sp, #0]
 80102de:	0023      	movs	r3, r4
 80102e0:	f000 fb60 	bl	80109a4 <I2C_TransferConfig>
 80102e4:	e075      	b.n	80103d2 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80102f4:	b2da      	uxtb	r2, r3
 80102f6:	2380      	movs	r3, #128	; 0x80
 80102f8:	049c      	lsls	r4, r3, #18
 80102fa:	230a      	movs	r3, #10
 80102fc:	18fb      	adds	r3, r7, r3
 80102fe:	8819      	ldrh	r1, [r3, #0]
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	4b4b      	ldr	r3, [pc, #300]	; (8010430 <HAL_I2C_Master_Transmit+0x208>)
 8010304:	9300      	str	r3, [sp, #0]
 8010306:	0023      	movs	r3, r4
 8010308:	f000 fb4c 	bl	80109a4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 801030c:	e061      	b.n	80103d2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801030e:	697a      	ldr	r2, [r7, #20]
 8010310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	0018      	movs	r0, r3
 8010316:	f000 f9f8 	bl	801070a <I2C_WaitOnTXISFlagUntilTimeout>
 801031a:	1e03      	subs	r3, r0, #0
 801031c:	d001      	beq.n	8010322 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801031e:	2301      	movs	r3, #1
 8010320:	e081      	b.n	8010426 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010326:	781a      	ldrb	r2, [r3, #0]
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010332:	1c5a      	adds	r2, r3, #1
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801033c:	b29b      	uxth	r3, r3
 801033e:	3b01      	subs	r3, #1
 8010340:	b29a      	uxth	r2, r3
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801034a:	3b01      	subs	r3, #1
 801034c:	b29a      	uxth	r2, r3
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010356:	b29b      	uxth	r3, r3
 8010358:	2b00      	cmp	r3, #0
 801035a:	d03a      	beq.n	80103d2 <HAL_I2C_Master_Transmit+0x1aa>
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010360:	2b00      	cmp	r3, #0
 8010362:	d136      	bne.n	80103d2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010366:	68f8      	ldr	r0, [r7, #12]
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	9300      	str	r3, [sp, #0]
 801036c:	0013      	movs	r3, r2
 801036e:	2200      	movs	r2, #0
 8010370:	2180      	movs	r1, #128	; 0x80
 8010372:	f000 f98b 	bl	801068c <I2C_WaitOnFlagUntilTimeout>
 8010376:	1e03      	subs	r3, r0, #0
 8010378:	d001      	beq.n	801037e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 801037a:	2301      	movs	r3, #1
 801037c:	e053      	b.n	8010426 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010382:	b29b      	uxth	r3, r3
 8010384:	2bff      	cmp	r3, #255	; 0xff
 8010386:	d911      	bls.n	80103ac <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	22ff      	movs	r2, #255	; 0xff
 801038c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010392:	b2da      	uxtb	r2, r3
 8010394:	2380      	movs	r3, #128	; 0x80
 8010396:	045c      	lsls	r4, r3, #17
 8010398:	230a      	movs	r3, #10
 801039a:	18fb      	adds	r3, r7, r3
 801039c:	8819      	ldrh	r1, [r3, #0]
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	2300      	movs	r3, #0
 80103a2:	9300      	str	r3, [sp, #0]
 80103a4:	0023      	movs	r3, r4
 80103a6:	f000 fafd 	bl	80109a4 <I2C_TransferConfig>
 80103aa:	e012      	b.n	80103d2 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80103b0:	b29a      	uxth	r2, r3
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103ba:	b2da      	uxtb	r2, r3
 80103bc:	2380      	movs	r3, #128	; 0x80
 80103be:	049c      	lsls	r4, r3, #18
 80103c0:	230a      	movs	r3, #10
 80103c2:	18fb      	adds	r3, r7, r3
 80103c4:	8819      	ldrh	r1, [r3, #0]
 80103c6:	68f8      	ldr	r0, [r7, #12]
 80103c8:	2300      	movs	r3, #0
 80103ca:	9300      	str	r3, [sp, #0]
 80103cc:	0023      	movs	r3, r4
 80103ce:	f000 fae9 	bl	80109a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d198      	bne.n	801030e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80103dc:	697a      	ldr	r2, [r7, #20]
 80103de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	0018      	movs	r0, r3
 80103e4:	f000 f9d0 	bl	8010788 <I2C_WaitOnSTOPFlagUntilTimeout>
 80103e8:	1e03      	subs	r3, r0, #0
 80103ea:	d001      	beq.n	80103f0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80103ec:	2301      	movs	r3, #1
 80103ee:	e01a      	b.n	8010426 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	2220      	movs	r2, #32
 80103f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	685a      	ldr	r2, [r3, #4]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	490c      	ldr	r1, [pc, #48]	; (8010434 <HAL_I2C_Master_Transmit+0x20c>)
 8010404:	400a      	ands	r2, r1
 8010406:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2241      	movs	r2, #65	; 0x41
 801040c:	2120      	movs	r1, #32
 801040e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2242      	movs	r2, #66	; 0x42
 8010414:	2100      	movs	r1, #0
 8010416:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2240      	movs	r2, #64	; 0x40
 801041c:	2100      	movs	r1, #0
 801041e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010420:	2300      	movs	r3, #0
 8010422:	e000      	b.n	8010426 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8010424:	2302      	movs	r3, #2
  }
}
 8010426:	0018      	movs	r0, r3
 8010428:	46bd      	mov	sp, r7
 801042a:	b007      	add	sp, #28
 801042c:	bd90      	pop	{r4, r7, pc}
 801042e:	46c0      	nop			; (mov r8, r8)
 8010430:	80002000 	.word	0x80002000
 8010434:	fe00e800 	.word	0xfe00e800

08010438 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8010438:	b590      	push	{r4, r7, lr}
 801043a:	b089      	sub	sp, #36	; 0x24
 801043c:	af02      	add	r7, sp, #8
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	0008      	movs	r0, r1
 8010442:	607a      	str	r2, [r7, #4]
 8010444:	0019      	movs	r1, r3
 8010446:	230a      	movs	r3, #10
 8010448:	18fb      	adds	r3, r7, r3
 801044a:	1c02      	adds	r2, r0, #0
 801044c:	801a      	strh	r2, [r3, #0]
 801044e:	2308      	movs	r3, #8
 8010450:	18fb      	adds	r3, r7, r3
 8010452:	1c0a      	adds	r2, r1, #0
 8010454:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2241      	movs	r2, #65	; 0x41
 801045a:	5c9b      	ldrb	r3, [r3, r2]
 801045c:	b2db      	uxtb	r3, r3
 801045e:	2b20      	cmp	r3, #32
 8010460:	d000      	beq.n	8010464 <HAL_I2C_Master_Receive+0x2c>
 8010462:	e0e8      	b.n	8010636 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2240      	movs	r2, #64	; 0x40
 8010468:	5c9b      	ldrb	r3, [r3, r2]
 801046a:	2b01      	cmp	r3, #1
 801046c:	d101      	bne.n	8010472 <HAL_I2C_Master_Receive+0x3a>
 801046e:	2302      	movs	r3, #2
 8010470:	e0e2      	b.n	8010638 <HAL_I2C_Master_Receive+0x200>
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2240      	movs	r2, #64	; 0x40
 8010476:	2101      	movs	r1, #1
 8010478:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801047a:	f7ff fa05 	bl	800f888 <HAL_GetTick>
 801047e:	0003      	movs	r3, r0
 8010480:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010482:	2380      	movs	r3, #128	; 0x80
 8010484:	0219      	lsls	r1, r3, #8
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	9300      	str	r3, [sp, #0]
 801048c:	2319      	movs	r3, #25
 801048e:	2201      	movs	r2, #1
 8010490:	f000 f8fc 	bl	801068c <I2C_WaitOnFlagUntilTimeout>
 8010494:	1e03      	subs	r3, r0, #0
 8010496:	d001      	beq.n	801049c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8010498:	2301      	movs	r3, #1
 801049a:	e0cd      	b.n	8010638 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2241      	movs	r2, #65	; 0x41
 80104a0:	2122      	movs	r1, #34	; 0x22
 80104a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2242      	movs	r2, #66	; 0x42
 80104a8:	2110      	movs	r1, #16
 80104aa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	2200      	movs	r2, #0
 80104b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2208      	movs	r2, #8
 80104bc:	18ba      	adds	r2, r7, r2
 80104be:	8812      	ldrh	r2, [r2, #0]
 80104c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2200      	movs	r2, #0
 80104c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80104cc:	b29b      	uxth	r3, r3
 80104ce:	2bff      	cmp	r3, #255	; 0xff
 80104d0:	d911      	bls.n	80104f6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	22ff      	movs	r2, #255	; 0xff
 80104d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104dc:	b2da      	uxtb	r2, r3
 80104de:	2380      	movs	r3, #128	; 0x80
 80104e0:	045c      	lsls	r4, r3, #17
 80104e2:	230a      	movs	r3, #10
 80104e4:	18fb      	adds	r3, r7, r3
 80104e6:	8819      	ldrh	r1, [r3, #0]
 80104e8:	68f8      	ldr	r0, [r7, #12]
 80104ea:	4b55      	ldr	r3, [pc, #340]	; (8010640 <HAL_I2C_Master_Receive+0x208>)
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	0023      	movs	r3, r4
 80104f0:	f000 fa58 	bl	80109a4 <I2C_TransferConfig>
 80104f4:	e076      	b.n	80105e4 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010504:	b2da      	uxtb	r2, r3
 8010506:	2380      	movs	r3, #128	; 0x80
 8010508:	049c      	lsls	r4, r3, #18
 801050a:	230a      	movs	r3, #10
 801050c:	18fb      	adds	r3, r7, r3
 801050e:	8819      	ldrh	r1, [r3, #0]
 8010510:	68f8      	ldr	r0, [r7, #12]
 8010512:	4b4b      	ldr	r3, [pc, #300]	; (8010640 <HAL_I2C_Master_Receive+0x208>)
 8010514:	9300      	str	r3, [sp, #0]
 8010516:	0023      	movs	r3, r4
 8010518:	f000 fa44 	bl	80109a4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 801051c:	e062      	b.n	80105e4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801051e:	697a      	ldr	r2, [r7, #20]
 8010520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	0018      	movs	r0, r3
 8010526:	f000 f96b 	bl	8010800 <I2C_WaitOnRXNEFlagUntilTimeout>
 801052a:	1e03      	subs	r3, r0, #0
 801052c:	d001      	beq.n	8010532 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801052e:	2301      	movs	r3, #1
 8010530:	e082      	b.n	8010638 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801053c:	b2d2      	uxtb	r2, r2
 801053e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010544:	1c5a      	adds	r2, r3, #1
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801054e:	3b01      	subs	r3, #1
 8010550:	b29a      	uxth	r2, r3
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801055a:	b29b      	uxth	r3, r3
 801055c:	3b01      	subs	r3, #1
 801055e:	b29a      	uxth	r2, r3
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010568:	b29b      	uxth	r3, r3
 801056a:	2b00      	cmp	r3, #0
 801056c:	d03a      	beq.n	80105e4 <HAL_I2C_Master_Receive+0x1ac>
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010572:	2b00      	cmp	r3, #0
 8010574:	d136      	bne.n	80105e4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010578:	68f8      	ldr	r0, [r7, #12]
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	9300      	str	r3, [sp, #0]
 801057e:	0013      	movs	r3, r2
 8010580:	2200      	movs	r2, #0
 8010582:	2180      	movs	r1, #128	; 0x80
 8010584:	f000 f882 	bl	801068c <I2C_WaitOnFlagUntilTimeout>
 8010588:	1e03      	subs	r3, r0, #0
 801058a:	d001      	beq.n	8010590 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 801058c:	2301      	movs	r3, #1
 801058e:	e053      	b.n	8010638 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010594:	b29b      	uxth	r3, r3
 8010596:	2bff      	cmp	r3, #255	; 0xff
 8010598:	d911      	bls.n	80105be <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	22ff      	movs	r2, #255	; 0xff
 801059e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105a4:	b2da      	uxtb	r2, r3
 80105a6:	2380      	movs	r3, #128	; 0x80
 80105a8:	045c      	lsls	r4, r3, #17
 80105aa:	230a      	movs	r3, #10
 80105ac:	18fb      	adds	r3, r7, r3
 80105ae:	8819      	ldrh	r1, [r3, #0]
 80105b0:	68f8      	ldr	r0, [r7, #12]
 80105b2:	2300      	movs	r3, #0
 80105b4:	9300      	str	r3, [sp, #0]
 80105b6:	0023      	movs	r3, r4
 80105b8:	f000 f9f4 	bl	80109a4 <I2C_TransferConfig>
 80105bc:	e012      	b.n	80105e4 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105c2:	b29a      	uxth	r2, r3
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105cc:	b2da      	uxtb	r2, r3
 80105ce:	2380      	movs	r3, #128	; 0x80
 80105d0:	049c      	lsls	r4, r3, #18
 80105d2:	230a      	movs	r3, #10
 80105d4:	18fb      	adds	r3, r7, r3
 80105d6:	8819      	ldrh	r1, [r3, #0]
 80105d8:	68f8      	ldr	r0, [r7, #12]
 80105da:	2300      	movs	r3, #0
 80105dc:	9300      	str	r3, [sp, #0]
 80105de:	0023      	movs	r3, r4
 80105e0:	f000 f9e0 	bl	80109a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d197      	bne.n	801051e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80105ee:	697a      	ldr	r2, [r7, #20]
 80105f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	0018      	movs	r0, r3
 80105f6:	f000 f8c7 	bl	8010788 <I2C_WaitOnSTOPFlagUntilTimeout>
 80105fa:	1e03      	subs	r3, r0, #0
 80105fc:	d001      	beq.n	8010602 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80105fe:	2301      	movs	r3, #1
 8010600:	e01a      	b.n	8010638 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2220      	movs	r2, #32
 8010608:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	685a      	ldr	r2, [r3, #4]
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	490b      	ldr	r1, [pc, #44]	; (8010644 <HAL_I2C_Master_Receive+0x20c>)
 8010616:	400a      	ands	r2, r1
 8010618:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2241      	movs	r2, #65	; 0x41
 801061e:	2120      	movs	r1, #32
 8010620:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2242      	movs	r2, #66	; 0x42
 8010626:	2100      	movs	r1, #0
 8010628:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2240      	movs	r2, #64	; 0x40
 801062e:	2100      	movs	r1, #0
 8010630:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010632:	2300      	movs	r3, #0
 8010634:	e000      	b.n	8010638 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8010636:	2302      	movs	r3, #2
  }
}
 8010638:	0018      	movs	r0, r3
 801063a:	46bd      	mov	sp, r7
 801063c:	b007      	add	sp, #28
 801063e:	bd90      	pop	{r4, r7, pc}
 8010640:	80002400 	.word	0x80002400
 8010644:	fe00e800 	.word	0xfe00e800

08010648 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	699b      	ldr	r3, [r3, #24]
 8010656:	2202      	movs	r2, #2
 8010658:	4013      	ands	r3, r2
 801065a:	2b02      	cmp	r3, #2
 801065c:	d103      	bne.n	8010666 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	2200      	movs	r2, #0
 8010664:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	699b      	ldr	r3, [r3, #24]
 801066c:	2201      	movs	r2, #1
 801066e:	4013      	ands	r3, r2
 8010670:	2b01      	cmp	r3, #1
 8010672:	d007      	beq.n	8010684 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	699a      	ldr	r2, [r3, #24]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	2101      	movs	r1, #1
 8010680:	430a      	orrs	r2, r1
 8010682:	619a      	str	r2, [r3, #24]
  }
}
 8010684:	46c0      	nop			; (mov r8, r8)
 8010686:	46bd      	mov	sp, r7
 8010688:	b002      	add	sp, #8
 801068a:	bd80      	pop	{r7, pc}

0801068c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	603b      	str	r3, [r7, #0]
 8010698:	1dfb      	adds	r3, r7, #7
 801069a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801069c:	e021      	b.n	80106e2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	3301      	adds	r3, #1
 80106a2:	d01e      	beq.n	80106e2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106a4:	f7ff f8f0 	bl	800f888 <HAL_GetTick>
 80106a8:	0002      	movs	r2, r0
 80106aa:	69bb      	ldr	r3, [r7, #24]
 80106ac:	1ad3      	subs	r3, r2, r3
 80106ae:	683a      	ldr	r2, [r7, #0]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d302      	bcc.n	80106ba <I2C_WaitOnFlagUntilTimeout+0x2e>
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d113      	bne.n	80106e2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106be:	2220      	movs	r2, #32
 80106c0:	431a      	orrs	r2, r3
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2241      	movs	r2, #65	; 0x41
 80106ca:	2120      	movs	r1, #32
 80106cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2242      	movs	r2, #66	; 0x42
 80106d2:	2100      	movs	r1, #0
 80106d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2240      	movs	r2, #64	; 0x40
 80106da:	2100      	movs	r1, #0
 80106dc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80106de:	2301      	movs	r3, #1
 80106e0:	e00f      	b.n	8010702 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	699b      	ldr	r3, [r3, #24]
 80106e8:	68ba      	ldr	r2, [r7, #8]
 80106ea:	4013      	ands	r3, r2
 80106ec:	68ba      	ldr	r2, [r7, #8]
 80106ee:	1ad3      	subs	r3, r2, r3
 80106f0:	425a      	negs	r2, r3
 80106f2:	4153      	adcs	r3, r2
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	001a      	movs	r2, r3
 80106f8:	1dfb      	adds	r3, r7, #7
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d0ce      	beq.n	801069e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010700:	2300      	movs	r3, #0
}
 8010702:	0018      	movs	r0, r3
 8010704:	46bd      	mov	sp, r7
 8010706:	b004      	add	sp, #16
 8010708:	bd80      	pop	{r7, pc}

0801070a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801070a:	b580      	push	{r7, lr}
 801070c:	b084      	sub	sp, #16
 801070e:	af00      	add	r7, sp, #0
 8010710:	60f8      	str	r0, [r7, #12]
 8010712:	60b9      	str	r1, [r7, #8]
 8010714:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010716:	e02b      	b.n	8010770 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8010718:	687a      	ldr	r2, [r7, #4]
 801071a:	68b9      	ldr	r1, [r7, #8]
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	0018      	movs	r0, r3
 8010720:	f000 f8da 	bl	80108d8 <I2C_IsAcknowledgeFailed>
 8010724:	1e03      	subs	r3, r0, #0
 8010726:	d001      	beq.n	801072c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010728:	2301      	movs	r3, #1
 801072a:	e029      	b.n	8010780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	3301      	adds	r3, #1
 8010730:	d01e      	beq.n	8010770 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010732:	f7ff f8a9 	bl	800f888 <HAL_GetTick>
 8010736:	0002      	movs	r2, r0
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	429a      	cmp	r2, r3
 8010740:	d302      	bcc.n	8010748 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d113      	bne.n	8010770 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801074c:	2220      	movs	r2, #32
 801074e:	431a      	orrs	r2, r3
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2241      	movs	r2, #65	; 0x41
 8010758:	2120      	movs	r1, #32
 801075a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2242      	movs	r2, #66	; 0x42
 8010760:	2100      	movs	r1, #0
 8010762:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2240      	movs	r2, #64	; 0x40
 8010768:	2100      	movs	r1, #0
 801076a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801076c:	2301      	movs	r3, #1
 801076e:	e007      	b.n	8010780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	699b      	ldr	r3, [r3, #24]
 8010776:	2202      	movs	r2, #2
 8010778:	4013      	ands	r3, r2
 801077a:	2b02      	cmp	r3, #2
 801077c:	d1cc      	bne.n	8010718 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801077e:	2300      	movs	r3, #0
}
 8010780:	0018      	movs	r0, r3
 8010782:	46bd      	mov	sp, r7
 8010784:	b004      	add	sp, #16
 8010786:	bd80      	pop	{r7, pc}

08010788 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
 801078e:	60f8      	str	r0, [r7, #12]
 8010790:	60b9      	str	r1, [r7, #8]
 8010792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010794:	e028      	b.n	80107e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	68b9      	ldr	r1, [r7, #8]
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	0018      	movs	r0, r3
 801079e:	f000 f89b 	bl	80108d8 <I2C_IsAcknowledgeFailed>
 80107a2:	1e03      	subs	r3, r0, #0
 80107a4:	d001      	beq.n	80107aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80107a6:	2301      	movs	r3, #1
 80107a8:	e026      	b.n	80107f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80107aa:	f7ff f86d 	bl	800f888 <HAL_GetTick>
 80107ae:	0002      	movs	r2, r0
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	1ad3      	subs	r3, r2, r3
 80107b4:	68ba      	ldr	r2, [r7, #8]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d302      	bcc.n	80107c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d113      	bne.n	80107e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107c4:	2220      	movs	r2, #32
 80107c6:	431a      	orrs	r2, r3
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	2241      	movs	r2, #65	; 0x41
 80107d0:	2120      	movs	r1, #32
 80107d2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2242      	movs	r2, #66	; 0x42
 80107d8:	2100      	movs	r1, #0
 80107da:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2240      	movs	r2, #64	; 0x40
 80107e0:	2100      	movs	r1, #0
 80107e2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80107e4:	2301      	movs	r3, #1
 80107e6:	e007      	b.n	80107f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	699b      	ldr	r3, [r3, #24]
 80107ee:	2220      	movs	r2, #32
 80107f0:	4013      	ands	r3, r2
 80107f2:	2b20      	cmp	r3, #32
 80107f4:	d1cf      	bne.n	8010796 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80107f6:	2300      	movs	r3, #0
}
 80107f8:	0018      	movs	r0, r3
 80107fa:	46bd      	mov	sp, r7
 80107fc:	b004      	add	sp, #16
 80107fe:	bd80      	pop	{r7, pc}

08010800 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	60f8      	str	r0, [r7, #12]
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801080c:	e055      	b.n	80108ba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	68b9      	ldr	r1, [r7, #8]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	0018      	movs	r0, r3
 8010816:	f000 f85f 	bl	80108d8 <I2C_IsAcknowledgeFailed>
 801081a:	1e03      	subs	r3, r0, #0
 801081c:	d001      	beq.n	8010822 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801081e:	2301      	movs	r3, #1
 8010820:	e053      	b.n	80108ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	699b      	ldr	r3, [r3, #24]
 8010828:	2220      	movs	r2, #32
 801082a:	4013      	ands	r3, r2
 801082c:	2b20      	cmp	r3, #32
 801082e:	d129      	bne.n	8010884 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	699b      	ldr	r3, [r3, #24]
 8010836:	2204      	movs	r2, #4
 8010838:	4013      	ands	r3, r2
 801083a:	2b04      	cmp	r3, #4
 801083c:	d105      	bne.n	801084a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010842:	2b00      	cmp	r3, #0
 8010844:	d001      	beq.n	801084a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	e03f      	b.n	80108ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	2220      	movs	r2, #32
 8010850:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	685a      	ldr	r2, [r3, #4]
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	491d      	ldr	r1, [pc, #116]	; (80108d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 801085e:	400a      	ands	r2, r1
 8010860:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2200      	movs	r2, #0
 8010866:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2241      	movs	r2, #65	; 0x41
 801086c:	2120      	movs	r1, #32
 801086e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2242      	movs	r2, #66	; 0x42
 8010874:	2100      	movs	r1, #0
 8010876:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2240      	movs	r2, #64	; 0x40
 801087c:	2100      	movs	r1, #0
 801087e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010880:	2301      	movs	r3, #1
 8010882:	e022      	b.n	80108ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010884:	f7ff f800 	bl	800f888 <HAL_GetTick>
 8010888:	0002      	movs	r2, r0
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	1ad3      	subs	r3, r2, r3
 801088e:	68ba      	ldr	r2, [r7, #8]
 8010890:	429a      	cmp	r2, r3
 8010892:	d302      	bcc.n	801089a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d10f      	bne.n	80108ba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801089e:	2220      	movs	r2, #32
 80108a0:	431a      	orrs	r2, r3
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	2241      	movs	r2, #65	; 0x41
 80108aa:	2120      	movs	r1, #32
 80108ac:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2240      	movs	r2, #64	; 0x40
 80108b2:	2100      	movs	r1, #0
 80108b4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80108b6:	2301      	movs	r3, #1
 80108b8:	e007      	b.n	80108ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	699b      	ldr	r3, [r3, #24]
 80108c0:	2204      	movs	r2, #4
 80108c2:	4013      	ands	r3, r2
 80108c4:	2b04      	cmp	r3, #4
 80108c6:	d1a2      	bne.n	801080e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80108c8:	2300      	movs	r3, #0
}
 80108ca:	0018      	movs	r0, r3
 80108cc:	46bd      	mov	sp, r7
 80108ce:	b004      	add	sp, #16
 80108d0:	bd80      	pop	{r7, pc}
 80108d2:	46c0      	nop			; (mov r8, r8)
 80108d4:	fe00e800 	.word	0xfe00e800

080108d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	699b      	ldr	r3, [r3, #24]
 80108ea:	2210      	movs	r2, #16
 80108ec:	4013      	ands	r3, r2
 80108ee:	2b10      	cmp	r3, #16
 80108f0:	d151      	bne.n	8010996 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80108f2:	e021      	b.n	8010938 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	3301      	adds	r3, #1
 80108f8:	d01e      	beq.n	8010938 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80108fa:	f7fe ffc5 	bl	800f888 <HAL_GetTick>
 80108fe:	0002      	movs	r2, r0
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	1ad3      	subs	r3, r2, r3
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	429a      	cmp	r2, r3
 8010908:	d302      	bcc.n	8010910 <I2C_IsAcknowledgeFailed+0x38>
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d113      	bne.n	8010938 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010914:	2220      	movs	r2, #32
 8010916:	431a      	orrs	r2, r3
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	2241      	movs	r2, #65	; 0x41
 8010920:	2120      	movs	r1, #32
 8010922:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	2242      	movs	r2, #66	; 0x42
 8010928:	2100      	movs	r1, #0
 801092a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	2240      	movs	r2, #64	; 0x40
 8010930:	2100      	movs	r1, #0
 8010932:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8010934:	2301      	movs	r3, #1
 8010936:	e02f      	b.n	8010998 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	699b      	ldr	r3, [r3, #24]
 801093e:	2220      	movs	r2, #32
 8010940:	4013      	ands	r3, r2
 8010942:	2b20      	cmp	r3, #32
 8010944:	d1d6      	bne.n	80108f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2210      	movs	r2, #16
 801094c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	2220      	movs	r2, #32
 8010954:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	0018      	movs	r0, r3
 801095a:	f7ff fe75 	bl	8010648 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	685a      	ldr	r2, [r3, #4]
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	490d      	ldr	r1, [pc, #52]	; (80109a0 <I2C_IsAcknowledgeFailed+0xc8>)
 801096a:	400a      	ands	r2, r1
 801096c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010972:	2204      	movs	r2, #4
 8010974:	431a      	orrs	r2, r3
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2241      	movs	r2, #65	; 0x41
 801097e:	2120      	movs	r1, #32
 8010980:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	2242      	movs	r2, #66	; 0x42
 8010986:	2100      	movs	r1, #0
 8010988:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2240      	movs	r2, #64	; 0x40
 801098e:	2100      	movs	r1, #0
 8010990:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8010992:	2301      	movs	r3, #1
 8010994:	e000      	b.n	8010998 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8010996:	2300      	movs	r3, #0
}
 8010998:	0018      	movs	r0, r3
 801099a:	46bd      	mov	sp, r7
 801099c:	b004      	add	sp, #16
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	fe00e800 	.word	0xfe00e800

080109a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80109a4:	b590      	push	{r4, r7, lr}
 80109a6:	b085      	sub	sp, #20
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	60f8      	str	r0, [r7, #12]
 80109ac:	0008      	movs	r0, r1
 80109ae:	0011      	movs	r1, r2
 80109b0:	607b      	str	r3, [r7, #4]
 80109b2:	240a      	movs	r4, #10
 80109b4:	193b      	adds	r3, r7, r4
 80109b6:	1c02      	adds	r2, r0, #0
 80109b8:	801a      	strh	r2, [r3, #0]
 80109ba:	2009      	movs	r0, #9
 80109bc:	183b      	adds	r3, r7, r0
 80109be:	1c0a      	adds	r2, r1, #0
 80109c0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	6a3a      	ldr	r2, [r7, #32]
 80109ca:	0d51      	lsrs	r1, r2, #21
 80109cc:	2280      	movs	r2, #128	; 0x80
 80109ce:	00d2      	lsls	r2, r2, #3
 80109d0:	400a      	ands	r2, r1
 80109d2:	490e      	ldr	r1, [pc, #56]	; (8010a0c <I2C_TransferConfig+0x68>)
 80109d4:	430a      	orrs	r2, r1
 80109d6:	43d2      	mvns	r2, r2
 80109d8:	401a      	ands	r2, r3
 80109da:	0011      	movs	r1, r2
 80109dc:	193b      	adds	r3, r7, r4
 80109de:	881b      	ldrh	r3, [r3, #0]
 80109e0:	059b      	lsls	r3, r3, #22
 80109e2:	0d9a      	lsrs	r2, r3, #22
 80109e4:	183b      	adds	r3, r7, r0
 80109e6:	781b      	ldrb	r3, [r3, #0]
 80109e8:	0418      	lsls	r0, r3, #16
 80109ea:	23ff      	movs	r3, #255	; 0xff
 80109ec:	041b      	lsls	r3, r3, #16
 80109ee:	4003      	ands	r3, r0
 80109f0:	431a      	orrs	r2, r3
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	431a      	orrs	r2, r3
 80109f6:	6a3b      	ldr	r3, [r7, #32]
 80109f8:	431a      	orrs	r2, r3
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	430a      	orrs	r2, r1
 8010a00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8010a02:	46c0      	nop			; (mov r8, r8)
 8010a04:	46bd      	mov	sp, r7
 8010a06:	b005      	add	sp, #20
 8010a08:	bd90      	pop	{r4, r7, pc}
 8010a0a:	46c0      	nop			; (mov r8, r8)
 8010a0c:	03ff63ff 	.word	0x03ff63ff

08010a10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2241      	movs	r2, #65	; 0x41
 8010a1e:	5c9b      	ldrb	r3, [r3, r2]
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	2b20      	cmp	r3, #32
 8010a24:	d138      	bne.n	8010a98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2240      	movs	r2, #64	; 0x40
 8010a2a:	5c9b      	ldrb	r3, [r3, r2]
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	d101      	bne.n	8010a34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010a30:	2302      	movs	r3, #2
 8010a32:	e032      	b.n	8010a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2240      	movs	r2, #64	; 0x40
 8010a38:	2101      	movs	r1, #1
 8010a3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2241      	movs	r2, #65	; 0x41
 8010a40:	2124      	movs	r1, #36	; 0x24
 8010a42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2101      	movs	r1, #1
 8010a50:	438a      	bics	r2, r1
 8010a52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4911      	ldr	r1, [pc, #68]	; (8010aa4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8010a60:	400a      	ands	r2, r1
 8010a62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	6819      	ldr	r1, [r3, #0]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	683a      	ldr	r2, [r7, #0]
 8010a70:	430a      	orrs	r2, r1
 8010a72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2101      	movs	r1, #1
 8010a80:	430a      	orrs	r2, r1
 8010a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2241      	movs	r2, #65	; 0x41
 8010a88:	2120      	movs	r1, #32
 8010a8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2240      	movs	r2, #64	; 0x40
 8010a90:	2100      	movs	r1, #0
 8010a92:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010a94:	2300      	movs	r3, #0
 8010a96:	e000      	b.n	8010a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010a98:	2302      	movs	r3, #2
  }
}
 8010a9a:	0018      	movs	r0, r3
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	b002      	add	sp, #8
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	46c0      	nop			; (mov r8, r8)
 8010aa4:	ffffefff 	.word	0xffffefff

08010aa8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b084      	sub	sp, #16
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2241      	movs	r2, #65	; 0x41
 8010ab6:	5c9b      	ldrb	r3, [r3, r2]
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	2b20      	cmp	r3, #32
 8010abc:	d139      	bne.n	8010b32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2240      	movs	r2, #64	; 0x40
 8010ac2:	5c9b      	ldrb	r3, [r3, r2]
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d101      	bne.n	8010acc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010ac8:	2302      	movs	r3, #2
 8010aca:	e033      	b.n	8010b34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2240      	movs	r2, #64	; 0x40
 8010ad0:	2101      	movs	r1, #1
 8010ad2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2241      	movs	r2, #65	; 0x41
 8010ad8:	2124      	movs	r1, #36	; 0x24
 8010ada:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	2101      	movs	r1, #1
 8010ae8:	438a      	bics	r2, r1
 8010aea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	4a11      	ldr	r2, [pc, #68]	; (8010b3c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8010af8:	4013      	ands	r3, r2
 8010afa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	021b      	lsls	r3, r3, #8
 8010b00:	68fa      	ldr	r2, [r7, #12]
 8010b02:	4313      	orrs	r3, r2
 8010b04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	68fa      	ldr	r2, [r7, #12]
 8010b0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	2101      	movs	r1, #1
 8010b1a:	430a      	orrs	r2, r1
 8010b1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2241      	movs	r2, #65	; 0x41
 8010b22:	2120      	movs	r1, #32
 8010b24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2240      	movs	r2, #64	; 0x40
 8010b2a:	2100      	movs	r1, #0
 8010b2c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	e000      	b.n	8010b34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010b32:	2302      	movs	r3, #2
  }
}
 8010b34:	0018      	movs	r0, r3
 8010b36:	46bd      	mov	sp, r7
 8010b38:	b004      	add	sp, #16
 8010b3a:	bd80      	pop	{r7, pc}
 8010b3c:	fffff0ff 	.word	0xfffff0ff

08010b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010b40:	b5b0      	push	{r4, r5, r7, lr}
 8010b42:	b08a      	sub	sp, #40	; 0x28
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d102      	bne.n	8010b54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	f000 fbbb 	bl	80112ca <HAL_RCC_OscConfig+0x78a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010b54:	4bc8      	ldr	r3, [pc, #800]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	220c      	movs	r2, #12
 8010b5a:	4013      	ands	r3, r2
 8010b5c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010b5e:	4bc6      	ldr	r3, [pc, #792]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010b60:	68da      	ldr	r2, [r3, #12]
 8010b62:	2380      	movs	r3, #128	; 0x80
 8010b64:	025b      	lsls	r3, r3, #9
 8010b66:	4013      	ands	r3, r2
 8010b68:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	2201      	movs	r2, #1
 8010b70:	4013      	ands	r3, r2
 8010b72:	d100      	bne.n	8010b76 <HAL_RCC_OscConfig+0x36>
 8010b74:	e07e      	b.n	8010c74 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	2b08      	cmp	r3, #8
 8010b7a:	d007      	beq.n	8010b8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8010b7c:	69fb      	ldr	r3, [r7, #28]
 8010b7e:	2b0c      	cmp	r3, #12
 8010b80:	d112      	bne.n	8010ba8 <HAL_RCC_OscConfig+0x68>
 8010b82:	69ba      	ldr	r2, [r7, #24]
 8010b84:	2380      	movs	r3, #128	; 0x80
 8010b86:	025b      	lsls	r3, r3, #9
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d10d      	bne.n	8010ba8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010b8c:	4bba      	ldr	r3, [pc, #744]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010b8e:	681a      	ldr	r2, [r3, #0]
 8010b90:	2380      	movs	r3, #128	; 0x80
 8010b92:	029b      	lsls	r3, r3, #10
 8010b94:	4013      	ands	r3, r2
 8010b96:	d100      	bne.n	8010b9a <HAL_RCC_OscConfig+0x5a>
 8010b98:	e06b      	b.n	8010c72 <HAL_RCC_OscConfig+0x132>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d167      	bne.n	8010c72 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	f000 fb91 	bl	80112ca <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	685a      	ldr	r2, [r3, #4]
 8010bac:	2380      	movs	r3, #128	; 0x80
 8010bae:	025b      	lsls	r3, r3, #9
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d107      	bne.n	8010bc4 <HAL_RCC_OscConfig+0x84>
 8010bb4:	4bb0      	ldr	r3, [pc, #704]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	4baf      	ldr	r3, [pc, #700]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010bba:	2180      	movs	r1, #128	; 0x80
 8010bbc:	0249      	lsls	r1, r1, #9
 8010bbe:	430a      	orrs	r2, r1
 8010bc0:	601a      	str	r2, [r3, #0]
 8010bc2:	e027      	b.n	8010c14 <HAL_RCC_OscConfig+0xd4>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	685a      	ldr	r2, [r3, #4]
 8010bc8:	23a0      	movs	r3, #160	; 0xa0
 8010bca:	02db      	lsls	r3, r3, #11
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d10e      	bne.n	8010bee <HAL_RCC_OscConfig+0xae>
 8010bd0:	4ba9      	ldr	r3, [pc, #676]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	4ba8      	ldr	r3, [pc, #672]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010bd6:	2180      	movs	r1, #128	; 0x80
 8010bd8:	02c9      	lsls	r1, r1, #11
 8010bda:	430a      	orrs	r2, r1
 8010bdc:	601a      	str	r2, [r3, #0]
 8010bde:	4ba6      	ldr	r3, [pc, #664]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010be0:	681a      	ldr	r2, [r3, #0]
 8010be2:	4ba5      	ldr	r3, [pc, #660]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010be4:	2180      	movs	r1, #128	; 0x80
 8010be6:	0249      	lsls	r1, r1, #9
 8010be8:	430a      	orrs	r2, r1
 8010bea:	601a      	str	r2, [r3, #0]
 8010bec:	e012      	b.n	8010c14 <HAL_RCC_OscConfig+0xd4>
 8010bee:	4ba2      	ldr	r3, [pc, #648]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010bf0:	681a      	ldr	r2, [r3, #0]
 8010bf2:	4ba1      	ldr	r3, [pc, #644]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010bf4:	49a1      	ldr	r1, [pc, #644]	; (8010e7c <HAL_RCC_OscConfig+0x33c>)
 8010bf6:	400a      	ands	r2, r1
 8010bf8:	601a      	str	r2, [r3, #0]
 8010bfa:	4b9f      	ldr	r3, [pc, #636]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010bfc:	681a      	ldr	r2, [r3, #0]
 8010bfe:	2380      	movs	r3, #128	; 0x80
 8010c00:	025b      	lsls	r3, r3, #9
 8010c02:	4013      	ands	r3, r2
 8010c04:	60fb      	str	r3, [r7, #12]
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	4b9b      	ldr	r3, [pc, #620]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	4b9a      	ldr	r3, [pc, #616]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010c0e:	499c      	ldr	r1, [pc, #624]	; (8010e80 <HAL_RCC_OscConfig+0x340>)
 8010c10:	400a      	ands	r2, r1
 8010c12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d015      	beq.n	8010c48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010c1c:	f7fe fe34 	bl	800f888 <HAL_GetTick>
 8010c20:	0003      	movs	r3, r0
 8010c22:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010c24:	e009      	b.n	8010c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010c26:	f7fe fe2f 	bl	800f888 <HAL_GetTick>
 8010c2a:	0002      	movs	r2, r0
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	1ad3      	subs	r3, r2, r3
 8010c30:	2b64      	cmp	r3, #100	; 0x64
 8010c32:	d902      	bls.n	8010c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010c34:	2303      	movs	r3, #3
 8010c36:	f000 fb48 	bl	80112ca <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010c3a:	4b8f      	ldr	r3, [pc, #572]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	2380      	movs	r3, #128	; 0x80
 8010c40:	029b      	lsls	r3, r3, #10
 8010c42:	4013      	ands	r3, r2
 8010c44:	d0ef      	beq.n	8010c26 <HAL_RCC_OscConfig+0xe6>
 8010c46:	e015      	b.n	8010c74 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010c48:	f7fe fe1e 	bl	800f888 <HAL_GetTick>
 8010c4c:	0003      	movs	r3, r0
 8010c4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010c50:	e008      	b.n	8010c64 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010c52:	f7fe fe19 	bl	800f888 <HAL_GetTick>
 8010c56:	0002      	movs	r2, r0
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	1ad3      	subs	r3, r2, r3
 8010c5c:	2b64      	cmp	r3, #100	; 0x64
 8010c5e:	d901      	bls.n	8010c64 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8010c60:	2303      	movs	r3, #3
 8010c62:	e332      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010c64:	4b84      	ldr	r3, [pc, #528]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	2380      	movs	r3, #128	; 0x80
 8010c6a:	029b      	lsls	r3, r3, #10
 8010c6c:	4013      	ands	r3, r2
 8010c6e:	d1f0      	bne.n	8010c52 <HAL_RCC_OscConfig+0x112>
 8010c70:	e000      	b.n	8010c74 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010c72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	2202      	movs	r2, #2
 8010c7a:	4013      	ands	r3, r2
 8010c7c:	d100      	bne.n	8010c80 <HAL_RCC_OscConfig+0x140>
 8010c7e:	e098      	b.n	8010db2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	68db      	ldr	r3, [r3, #12]
 8010c84:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8010c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c88:	2220      	movs	r2, #32
 8010c8a:	4013      	ands	r3, r2
 8010c8c:	d009      	beq.n	8010ca2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8010c8e:	4b7a      	ldr	r3, [pc, #488]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010c90:	681a      	ldr	r2, [r3, #0]
 8010c92:	4b79      	ldr	r3, [pc, #484]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010c94:	2120      	movs	r1, #32
 8010c96:	430a      	orrs	r2, r1
 8010c98:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8010c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9c:	2220      	movs	r2, #32
 8010c9e:	4393      	bics	r3, r2
 8010ca0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	2b04      	cmp	r3, #4
 8010ca6:	d005      	beq.n	8010cb4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8010ca8:	69fb      	ldr	r3, [r7, #28]
 8010caa:	2b0c      	cmp	r3, #12
 8010cac:	d13d      	bne.n	8010d2a <HAL_RCC_OscConfig+0x1ea>
 8010cae:	69bb      	ldr	r3, [r7, #24]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d13a      	bne.n	8010d2a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8010cb4:	4b70      	ldr	r3, [pc, #448]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2204      	movs	r2, #4
 8010cba:	4013      	ands	r3, r2
 8010cbc:	d004      	beq.n	8010cc8 <HAL_RCC_OscConfig+0x188>
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d101      	bne.n	8010cc8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	e300      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010cc8:	4b6b      	ldr	r3, [pc, #428]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	4a6d      	ldr	r2, [pc, #436]	; (8010e84 <HAL_RCC_OscConfig+0x344>)
 8010cce:	4013      	ands	r3, r2
 8010cd0:	0019      	movs	r1, r3
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	691b      	ldr	r3, [r3, #16]
 8010cd6:	021a      	lsls	r2, r3, #8
 8010cd8:	4b67      	ldr	r3, [pc, #412]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010cda:	430a      	orrs	r2, r1
 8010cdc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8010cde:	4b66      	ldr	r3, [pc, #408]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2209      	movs	r2, #9
 8010ce4:	4393      	bics	r3, r2
 8010ce6:	0019      	movs	r1, r3
 8010ce8:	4b63      	ldr	r3, [pc, #396]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cec:	430a      	orrs	r2, r1
 8010cee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010cf0:	f000 fc20 	bl	8011534 <HAL_RCC_GetSysClockFreq>
 8010cf4:	0001      	movs	r1, r0
 8010cf6:	4b60      	ldr	r3, [pc, #384]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	091b      	lsrs	r3, r3, #4
 8010cfc:	220f      	movs	r2, #15
 8010cfe:	4013      	ands	r3, r2
 8010d00:	4a61      	ldr	r2, [pc, #388]	; (8010e88 <HAL_RCC_OscConfig+0x348>)
 8010d02:	5cd3      	ldrb	r3, [r2, r3]
 8010d04:	000a      	movs	r2, r1
 8010d06:	40da      	lsrs	r2, r3
 8010d08:	4b60      	ldr	r3, [pc, #384]	; (8010e8c <HAL_RCC_OscConfig+0x34c>)
 8010d0a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8010d0c:	2513      	movs	r5, #19
 8010d0e:	197c      	adds	r4, r7, r5
 8010d10:	2000      	movs	r0, #0
 8010d12:	f7fe fd73 	bl	800f7fc <HAL_InitTick>
 8010d16:	0003      	movs	r3, r0
 8010d18:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8010d1a:	002a      	movs	r2, r5
 8010d1c:	18bb      	adds	r3, r7, r2
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d046      	beq.n	8010db2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8010d24:	18bb      	adds	r3, r7, r2
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	e2cf      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8010d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d027      	beq.n	8010d80 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8010d30:	4b51      	ldr	r3, [pc, #324]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	2209      	movs	r2, #9
 8010d36:	4393      	bics	r3, r2
 8010d38:	0019      	movs	r1, r3
 8010d3a:	4b4f      	ldr	r3, [pc, #316]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d3e:	430a      	orrs	r2, r1
 8010d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010d42:	f7fe fda1 	bl	800f888 <HAL_GetTick>
 8010d46:	0003      	movs	r3, r0
 8010d48:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010d4a:	e008      	b.n	8010d5e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010d4c:	f7fe fd9c 	bl	800f888 <HAL_GetTick>
 8010d50:	0002      	movs	r2, r0
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	2b02      	cmp	r3, #2
 8010d58:	d901      	bls.n	8010d5e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8010d5a:	2303      	movs	r3, #3
 8010d5c:	e2b5      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010d5e:	4b46      	ldr	r3, [pc, #280]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	2204      	movs	r2, #4
 8010d64:	4013      	ands	r3, r2
 8010d66:	d0f1      	beq.n	8010d4c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010d68:	4b43      	ldr	r3, [pc, #268]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010d6a:	685b      	ldr	r3, [r3, #4]
 8010d6c:	4a45      	ldr	r2, [pc, #276]	; (8010e84 <HAL_RCC_OscConfig+0x344>)
 8010d6e:	4013      	ands	r3, r2
 8010d70:	0019      	movs	r1, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	691b      	ldr	r3, [r3, #16]
 8010d76:	021a      	lsls	r2, r3, #8
 8010d78:	4b3f      	ldr	r3, [pc, #252]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010d7a:	430a      	orrs	r2, r1
 8010d7c:	605a      	str	r2, [r3, #4]
 8010d7e:	e018      	b.n	8010db2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010d80:	4b3d      	ldr	r3, [pc, #244]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010d82:	681a      	ldr	r2, [r3, #0]
 8010d84:	4b3c      	ldr	r3, [pc, #240]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010d86:	2101      	movs	r1, #1
 8010d88:	438a      	bics	r2, r1
 8010d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010d8c:	f7fe fd7c 	bl	800f888 <HAL_GetTick>
 8010d90:	0003      	movs	r3, r0
 8010d92:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010d94:	e008      	b.n	8010da8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010d96:	f7fe fd77 	bl	800f888 <HAL_GetTick>
 8010d9a:	0002      	movs	r2, r0
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	1ad3      	subs	r3, r2, r3
 8010da0:	2b02      	cmp	r3, #2
 8010da2:	d901      	bls.n	8010da8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8010da4:	2303      	movs	r3, #3
 8010da6:	e290      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010da8:	4b33      	ldr	r3, [pc, #204]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2204      	movs	r2, #4
 8010dae:	4013      	ands	r3, r2
 8010db0:	d1f1      	bne.n	8010d96 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	2210      	movs	r2, #16
 8010db8:	4013      	ands	r3, r2
 8010dba:	d100      	bne.n	8010dbe <HAL_RCC_OscConfig+0x27e>
 8010dbc:	e09f      	b.n	8010efe <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d13f      	bne.n	8010e44 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010dc4:	4b2c      	ldr	r3, [pc, #176]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010dc6:	681a      	ldr	r2, [r3, #0]
 8010dc8:	2380      	movs	r3, #128	; 0x80
 8010dca:	009b      	lsls	r3, r3, #2
 8010dcc:	4013      	ands	r3, r2
 8010dce:	d005      	beq.n	8010ddc <HAL_RCC_OscConfig+0x29c>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	69db      	ldr	r3, [r3, #28]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d101      	bne.n	8010ddc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8010dd8:	2301      	movs	r3, #1
 8010dda:	e276      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010ddc:	4b26      	ldr	r3, [pc, #152]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	4a2b      	ldr	r2, [pc, #172]	; (8010e90 <HAL_RCC_OscConfig+0x350>)
 8010de2:	4013      	ands	r3, r2
 8010de4:	0019      	movs	r1, r3
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dea:	4b23      	ldr	r3, [pc, #140]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010dec:	430a      	orrs	r2, r1
 8010dee:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010df0:	4b21      	ldr	r3, [pc, #132]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	021b      	lsls	r3, r3, #8
 8010df6:	0a19      	lsrs	r1, r3, #8
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6a1b      	ldr	r3, [r3, #32]
 8010dfc:	061a      	lsls	r2, r3, #24
 8010dfe:	4b1e      	ldr	r3, [pc, #120]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010e00:	430a      	orrs	r2, r1
 8010e02:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e08:	0b5b      	lsrs	r3, r3, #13
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	2280      	movs	r2, #128	; 0x80
 8010e0e:	0212      	lsls	r2, r2, #8
 8010e10:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8010e12:	4b19      	ldr	r3, [pc, #100]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	091b      	lsrs	r3, r3, #4
 8010e18:	210f      	movs	r1, #15
 8010e1a:	400b      	ands	r3, r1
 8010e1c:	491a      	ldr	r1, [pc, #104]	; (8010e88 <HAL_RCC_OscConfig+0x348>)
 8010e1e:	5ccb      	ldrb	r3, [r1, r3]
 8010e20:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8010e22:	4b1a      	ldr	r3, [pc, #104]	; (8010e8c <HAL_RCC_OscConfig+0x34c>)
 8010e24:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8010e26:	2513      	movs	r5, #19
 8010e28:	197c      	adds	r4, r7, r5
 8010e2a:	2000      	movs	r0, #0
 8010e2c:	f7fe fce6 	bl	800f7fc <HAL_InitTick>
 8010e30:	0003      	movs	r3, r0
 8010e32:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8010e34:	002a      	movs	r2, r5
 8010e36:	18bb      	adds	r3, r7, r2
 8010e38:	781b      	ldrb	r3, [r3, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d05f      	beq.n	8010efe <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8010e3e:	18bb      	adds	r3, r7, r2
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	e242      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	69db      	ldr	r3, [r3, #28]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d03e      	beq.n	8010eca <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010e4c:	4b0a      	ldr	r3, [pc, #40]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	4b09      	ldr	r3, [pc, #36]	; (8010e78 <HAL_RCC_OscConfig+0x338>)
 8010e52:	2180      	movs	r1, #128	; 0x80
 8010e54:	0049      	lsls	r1, r1, #1
 8010e56:	430a      	orrs	r2, r1
 8010e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e5a:	f7fe fd15 	bl	800f888 <HAL_GetTick>
 8010e5e:	0003      	movs	r3, r0
 8010e60:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8010e62:	e017      	b.n	8010e94 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010e64:	f7fe fd10 	bl	800f888 <HAL_GetTick>
 8010e68:	0002      	movs	r2, r0
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	1ad3      	subs	r3, r2, r3
 8010e6e:	2b02      	cmp	r3, #2
 8010e70:	d910      	bls.n	8010e94 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8010e72:	2303      	movs	r3, #3
 8010e74:	e229      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
 8010e76:	46c0      	nop			; (mov r8, r8)
 8010e78:	40021000 	.word	0x40021000
 8010e7c:	fffeffff 	.word	0xfffeffff
 8010e80:	fffbffff 	.word	0xfffbffff
 8010e84:	ffffe0ff 	.word	0xffffe0ff
 8010e88:	080162f8 	.word	0x080162f8
 8010e8c:	200000d8 	.word	0x200000d8
 8010e90:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8010e94:	4bca      	ldr	r3, [pc, #808]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	2380      	movs	r3, #128	; 0x80
 8010e9a:	009b      	lsls	r3, r3, #2
 8010e9c:	4013      	ands	r3, r2
 8010e9e:	d0e1      	beq.n	8010e64 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010ea0:	4bc7      	ldr	r3, [pc, #796]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	4ac7      	ldr	r2, [pc, #796]	; (80111c4 <HAL_RCC_OscConfig+0x684>)
 8010ea6:	4013      	ands	r3, r2
 8010ea8:	0019      	movs	r1, r3
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010eae:	4bc4      	ldr	r3, [pc, #784]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010eb0:	430a      	orrs	r2, r1
 8010eb2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010eb4:	4bc2      	ldr	r3, [pc, #776]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	021b      	lsls	r3, r3, #8
 8010eba:	0a19      	lsrs	r1, r3, #8
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6a1b      	ldr	r3, [r3, #32]
 8010ec0:	061a      	lsls	r2, r3, #24
 8010ec2:	4bbf      	ldr	r3, [pc, #764]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010ec4:	430a      	orrs	r2, r1
 8010ec6:	605a      	str	r2, [r3, #4]
 8010ec8:	e019      	b.n	8010efe <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8010eca:	4bbd      	ldr	r3, [pc, #756]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010ecc:	681a      	ldr	r2, [r3, #0]
 8010ece:	4bbc      	ldr	r3, [pc, #752]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010ed0:	49bd      	ldr	r1, [pc, #756]	; (80111c8 <HAL_RCC_OscConfig+0x688>)
 8010ed2:	400a      	ands	r2, r1
 8010ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010ed6:	f7fe fcd7 	bl	800f888 <HAL_GetTick>
 8010eda:	0003      	movs	r3, r0
 8010edc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8010ede:	e008      	b.n	8010ef2 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010ee0:	f7fe fcd2 	bl	800f888 <HAL_GetTick>
 8010ee4:	0002      	movs	r2, r0
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	1ad3      	subs	r3, r2, r3
 8010eea:	2b02      	cmp	r3, #2
 8010eec:	d901      	bls.n	8010ef2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8010eee:	2303      	movs	r3, #3
 8010ef0:	e1eb      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8010ef2:	4bb3      	ldr	r3, [pc, #716]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	2380      	movs	r3, #128	; 0x80
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	4013      	ands	r3, r2
 8010efc:	d1f0      	bne.n	8010ee0 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2208      	movs	r2, #8
 8010f04:	4013      	ands	r3, r2
 8010f06:	d036      	beq.n	8010f76 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	695b      	ldr	r3, [r3, #20]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d019      	beq.n	8010f44 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010f10:	4bab      	ldr	r3, [pc, #684]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f14:	4baa      	ldr	r3, [pc, #680]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010f16:	2101      	movs	r1, #1
 8010f18:	430a      	orrs	r2, r1
 8010f1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010f1c:	f7fe fcb4 	bl	800f888 <HAL_GetTick>
 8010f20:	0003      	movs	r3, r0
 8010f22:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010f24:	e008      	b.n	8010f38 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010f26:	f7fe fcaf 	bl	800f888 <HAL_GetTick>
 8010f2a:	0002      	movs	r2, r0
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	2b02      	cmp	r3, #2
 8010f32:	d901      	bls.n	8010f38 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8010f34:	2303      	movs	r3, #3
 8010f36:	e1c8      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010f38:	4ba1      	ldr	r3, [pc, #644]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f3c:	2202      	movs	r2, #2
 8010f3e:	4013      	ands	r3, r2
 8010f40:	d0f1      	beq.n	8010f26 <HAL_RCC_OscConfig+0x3e6>
 8010f42:	e018      	b.n	8010f76 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010f44:	4b9e      	ldr	r3, [pc, #632]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010f46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f48:	4b9d      	ldr	r3, [pc, #628]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010f4a:	2101      	movs	r1, #1
 8010f4c:	438a      	bics	r2, r1
 8010f4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010f50:	f7fe fc9a 	bl	800f888 <HAL_GetTick>
 8010f54:	0003      	movs	r3, r0
 8010f56:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010f58:	e008      	b.n	8010f6c <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010f5a:	f7fe fc95 	bl	800f888 <HAL_GetTick>
 8010f5e:	0002      	movs	r2, r0
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	1ad3      	subs	r3, r2, r3
 8010f64:	2b02      	cmp	r3, #2
 8010f66:	d901      	bls.n	8010f6c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8010f68:	2303      	movs	r3, #3
 8010f6a:	e1ae      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010f6c:	4b94      	ldr	r3, [pc, #592]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f70:	2202      	movs	r2, #2
 8010f72:	4013      	ands	r3, r2
 8010f74:	d1f1      	bne.n	8010f5a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	2204      	movs	r2, #4
 8010f7c:	4013      	ands	r3, r2
 8010f7e:	d100      	bne.n	8010f82 <HAL_RCC_OscConfig+0x442>
 8010f80:	e0ae      	b.n	80110e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010f82:	2023      	movs	r0, #35	; 0x23
 8010f84:	183b      	adds	r3, r7, r0
 8010f86:	2200      	movs	r2, #0
 8010f88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010f8a:	4b8d      	ldr	r3, [pc, #564]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f8e:	2380      	movs	r3, #128	; 0x80
 8010f90:	055b      	lsls	r3, r3, #21
 8010f92:	4013      	ands	r3, r2
 8010f94:	d109      	bne.n	8010faa <HAL_RCC_OscConfig+0x46a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010f96:	4b8a      	ldr	r3, [pc, #552]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f9a:	4b89      	ldr	r3, [pc, #548]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010f9c:	2180      	movs	r1, #128	; 0x80
 8010f9e:	0549      	lsls	r1, r1, #21
 8010fa0:	430a      	orrs	r2, r1
 8010fa2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8010fa4:	183b      	adds	r3, r7, r0
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010faa:	4b88      	ldr	r3, [pc, #544]	; (80111cc <HAL_RCC_OscConfig+0x68c>)
 8010fac:	681a      	ldr	r2, [r3, #0]
 8010fae:	2380      	movs	r3, #128	; 0x80
 8010fb0:	005b      	lsls	r3, r3, #1
 8010fb2:	4013      	ands	r3, r2
 8010fb4:	d11a      	bne.n	8010fec <HAL_RCC_OscConfig+0x4ac>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010fb6:	4b85      	ldr	r3, [pc, #532]	; (80111cc <HAL_RCC_OscConfig+0x68c>)
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	4b84      	ldr	r3, [pc, #528]	; (80111cc <HAL_RCC_OscConfig+0x68c>)
 8010fbc:	2180      	movs	r1, #128	; 0x80
 8010fbe:	0049      	lsls	r1, r1, #1
 8010fc0:	430a      	orrs	r2, r1
 8010fc2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010fc4:	f7fe fc60 	bl	800f888 <HAL_GetTick>
 8010fc8:	0003      	movs	r3, r0
 8010fca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010fcc:	e008      	b.n	8010fe0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010fce:	f7fe fc5b 	bl	800f888 <HAL_GetTick>
 8010fd2:	0002      	movs	r2, r0
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	1ad3      	subs	r3, r2, r3
 8010fd8:	2b64      	cmp	r3, #100	; 0x64
 8010fda:	d901      	bls.n	8010fe0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8010fdc:	2303      	movs	r3, #3
 8010fde:	e174      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010fe0:	4b7a      	ldr	r3, [pc, #488]	; (80111cc <HAL_RCC_OscConfig+0x68c>)
 8010fe2:	681a      	ldr	r2, [r3, #0]
 8010fe4:	2380      	movs	r3, #128	; 0x80
 8010fe6:	005b      	lsls	r3, r3, #1
 8010fe8:	4013      	ands	r3, r2
 8010fea:	d0f0      	beq.n	8010fce <HAL_RCC_OscConfig+0x48e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	689a      	ldr	r2, [r3, #8]
 8010ff0:	2380      	movs	r3, #128	; 0x80
 8010ff2:	005b      	lsls	r3, r3, #1
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d107      	bne.n	8011008 <HAL_RCC_OscConfig+0x4c8>
 8010ff8:	4b71      	ldr	r3, [pc, #452]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ffc:	4b70      	ldr	r3, [pc, #448]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8010ffe:	2180      	movs	r1, #128	; 0x80
 8011000:	0049      	lsls	r1, r1, #1
 8011002:	430a      	orrs	r2, r1
 8011004:	651a      	str	r2, [r3, #80]	; 0x50
 8011006:	e031      	b.n	801106c <HAL_RCC_OscConfig+0x52c>
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	689b      	ldr	r3, [r3, #8]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d10c      	bne.n	801102a <HAL_RCC_OscConfig+0x4ea>
 8011010:	4b6b      	ldr	r3, [pc, #428]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011014:	4b6a      	ldr	r3, [pc, #424]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011016:	496c      	ldr	r1, [pc, #432]	; (80111c8 <HAL_RCC_OscConfig+0x688>)
 8011018:	400a      	ands	r2, r1
 801101a:	651a      	str	r2, [r3, #80]	; 0x50
 801101c:	4b68      	ldr	r3, [pc, #416]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 801101e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011020:	4b67      	ldr	r3, [pc, #412]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011022:	496b      	ldr	r1, [pc, #428]	; (80111d0 <HAL_RCC_OscConfig+0x690>)
 8011024:	400a      	ands	r2, r1
 8011026:	651a      	str	r2, [r3, #80]	; 0x50
 8011028:	e020      	b.n	801106c <HAL_RCC_OscConfig+0x52c>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	689a      	ldr	r2, [r3, #8]
 801102e:	23a0      	movs	r3, #160	; 0xa0
 8011030:	00db      	lsls	r3, r3, #3
 8011032:	429a      	cmp	r2, r3
 8011034:	d10e      	bne.n	8011054 <HAL_RCC_OscConfig+0x514>
 8011036:	4b62      	ldr	r3, [pc, #392]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801103a:	4b61      	ldr	r3, [pc, #388]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 801103c:	2180      	movs	r1, #128	; 0x80
 801103e:	00c9      	lsls	r1, r1, #3
 8011040:	430a      	orrs	r2, r1
 8011042:	651a      	str	r2, [r3, #80]	; 0x50
 8011044:	4b5e      	ldr	r3, [pc, #376]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011048:	4b5d      	ldr	r3, [pc, #372]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 801104a:	2180      	movs	r1, #128	; 0x80
 801104c:	0049      	lsls	r1, r1, #1
 801104e:	430a      	orrs	r2, r1
 8011050:	651a      	str	r2, [r3, #80]	; 0x50
 8011052:	e00b      	b.n	801106c <HAL_RCC_OscConfig+0x52c>
 8011054:	4b5a      	ldr	r3, [pc, #360]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011058:	4b59      	ldr	r3, [pc, #356]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 801105a:	495b      	ldr	r1, [pc, #364]	; (80111c8 <HAL_RCC_OscConfig+0x688>)
 801105c:	400a      	ands	r2, r1
 801105e:	651a      	str	r2, [r3, #80]	; 0x50
 8011060:	4b57      	ldr	r3, [pc, #348]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011064:	4b56      	ldr	r3, [pc, #344]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011066:	495a      	ldr	r1, [pc, #360]	; (80111d0 <HAL_RCC_OscConfig+0x690>)
 8011068:	400a      	ands	r2, r1
 801106a:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	689b      	ldr	r3, [r3, #8]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d015      	beq.n	80110a0 <HAL_RCC_OscConfig+0x560>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011074:	f7fe fc08 	bl	800f888 <HAL_GetTick>
 8011078:	0003      	movs	r3, r0
 801107a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801107c:	e009      	b.n	8011092 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801107e:	f7fe fc03 	bl	800f888 <HAL_GetTick>
 8011082:	0002      	movs	r2, r0
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	4a52      	ldr	r2, [pc, #328]	; (80111d4 <HAL_RCC_OscConfig+0x694>)
 801108a:	4293      	cmp	r3, r2
 801108c:	d901      	bls.n	8011092 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 801108e:	2303      	movs	r3, #3
 8011090:	e11b      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011092:	4b4b      	ldr	r3, [pc, #300]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011096:	2380      	movs	r3, #128	; 0x80
 8011098:	009b      	lsls	r3, r3, #2
 801109a:	4013      	ands	r3, r2
 801109c:	d0ef      	beq.n	801107e <HAL_RCC_OscConfig+0x53e>
 801109e:	e014      	b.n	80110ca <HAL_RCC_OscConfig+0x58a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80110a0:	f7fe fbf2 	bl	800f888 <HAL_GetTick>
 80110a4:	0003      	movs	r3, r0
 80110a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80110a8:	e009      	b.n	80110be <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110aa:	f7fe fbed 	bl	800f888 <HAL_GetTick>
 80110ae:	0002      	movs	r2, r0
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	1ad3      	subs	r3, r2, r3
 80110b4:	4a47      	ldr	r2, [pc, #284]	; (80111d4 <HAL_RCC_OscConfig+0x694>)
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d901      	bls.n	80110be <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80110ba:	2303      	movs	r3, #3
 80110bc:	e105      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80110be:	4b40      	ldr	r3, [pc, #256]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 80110c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110c2:	2380      	movs	r3, #128	; 0x80
 80110c4:	009b      	lsls	r3, r3, #2
 80110c6:	4013      	ands	r3, r2
 80110c8:	d1ef      	bne.n	80110aa <HAL_RCC_OscConfig+0x56a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80110ca:	2323      	movs	r3, #35	; 0x23
 80110cc:	18fb      	adds	r3, r7, r3
 80110ce:	781b      	ldrb	r3, [r3, #0]
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d105      	bne.n	80110e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80110d4:	4b3a      	ldr	r3, [pc, #232]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 80110d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110d8:	4b39      	ldr	r3, [pc, #228]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 80110da:	493f      	ldr	r1, [pc, #252]	; (80111d8 <HAL_RCC_OscConfig+0x698>)
 80110dc:	400a      	ands	r2, r1
 80110de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	2220      	movs	r2, #32
 80110e6:	4013      	ands	r3, r2
 80110e8:	d049      	beq.n	801117e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	699b      	ldr	r3, [r3, #24]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d026      	beq.n	8011140 <HAL_RCC_OscConfig+0x600>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80110f2:	4b33      	ldr	r3, [pc, #204]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 80110f4:	689a      	ldr	r2, [r3, #8]
 80110f6:	4b32      	ldr	r3, [pc, #200]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 80110f8:	2101      	movs	r1, #1
 80110fa:	430a      	orrs	r2, r1
 80110fc:	609a      	str	r2, [r3, #8]
 80110fe:	4b30      	ldr	r3, [pc, #192]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011102:	4b2f      	ldr	r3, [pc, #188]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011104:	2101      	movs	r1, #1
 8011106:	430a      	orrs	r2, r1
 8011108:	635a      	str	r2, [r3, #52]	; 0x34
 801110a:	4b34      	ldr	r3, [pc, #208]	; (80111dc <HAL_RCC_OscConfig+0x69c>)
 801110c:	6a1a      	ldr	r2, [r3, #32]
 801110e:	4b33      	ldr	r3, [pc, #204]	; (80111dc <HAL_RCC_OscConfig+0x69c>)
 8011110:	2180      	movs	r1, #128	; 0x80
 8011112:	0189      	lsls	r1, r1, #6
 8011114:	430a      	orrs	r2, r1
 8011116:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011118:	f7fe fbb6 	bl	800f888 <HAL_GetTick>
 801111c:	0003      	movs	r3, r0
 801111e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011120:	e008      	b.n	8011134 <HAL_RCC_OscConfig+0x5f4>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011122:	f7fe fbb1 	bl	800f888 <HAL_GetTick>
 8011126:	0002      	movs	r2, r0
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	1ad3      	subs	r3, r2, r3
 801112c:	2b02      	cmp	r3, #2
 801112e:	d901      	bls.n	8011134 <HAL_RCC_OscConfig+0x5f4>
          {
            return HAL_TIMEOUT;
 8011130:	2303      	movs	r3, #3
 8011132:	e0ca      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011134:	4b22      	ldr	r3, [pc, #136]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011136:	689b      	ldr	r3, [r3, #8]
 8011138:	2202      	movs	r2, #2
 801113a:	4013      	ands	r3, r2
 801113c:	d0f1      	beq.n	8011122 <HAL_RCC_OscConfig+0x5e2>
 801113e:	e01e      	b.n	801117e <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8011140:	4b1f      	ldr	r3, [pc, #124]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011142:	689a      	ldr	r2, [r3, #8]
 8011144:	4b1e      	ldr	r3, [pc, #120]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011146:	2101      	movs	r1, #1
 8011148:	438a      	bics	r2, r1
 801114a:	609a      	str	r2, [r3, #8]
 801114c:	4b23      	ldr	r3, [pc, #140]	; (80111dc <HAL_RCC_OscConfig+0x69c>)
 801114e:	6a1a      	ldr	r2, [r3, #32]
 8011150:	4b22      	ldr	r3, [pc, #136]	; (80111dc <HAL_RCC_OscConfig+0x69c>)
 8011152:	4923      	ldr	r1, [pc, #140]	; (80111e0 <HAL_RCC_OscConfig+0x6a0>)
 8011154:	400a      	ands	r2, r1
 8011156:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011158:	f7fe fb96 	bl	800f888 <HAL_GetTick>
 801115c:	0003      	movs	r3, r0
 801115e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011160:	e008      	b.n	8011174 <HAL_RCC_OscConfig+0x634>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011162:	f7fe fb91 	bl	800f888 <HAL_GetTick>
 8011166:	0002      	movs	r2, r0
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	1ad3      	subs	r3, r2, r3
 801116c:	2b02      	cmp	r3, #2
 801116e:	d901      	bls.n	8011174 <HAL_RCC_OscConfig+0x634>
          {
            return HAL_TIMEOUT;
 8011170:	2303      	movs	r3, #3
 8011172:	e0aa      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011174:	4b12      	ldr	r3, [pc, #72]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 8011176:	689b      	ldr	r3, [r3, #8]
 8011178:	2202      	movs	r2, #2
 801117a:	4013      	ands	r3, r2
 801117c:	d1f1      	bne.n	8011162 <HAL_RCC_OscConfig+0x622>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011182:	2b00      	cmp	r3, #0
 8011184:	d100      	bne.n	8011188 <HAL_RCC_OscConfig+0x648>
 8011186:	e09f      	b.n	80112c8 <HAL_RCC_OscConfig+0x788>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	2b0c      	cmp	r3, #12
 801118c:	d100      	bne.n	8011190 <HAL_RCC_OscConfig+0x650>
 801118e:	e078      	b.n	8011282 <HAL_RCC_OscConfig+0x742>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011194:	2b02      	cmp	r3, #2
 8011196:	d159      	bne.n	801124c <HAL_RCC_OscConfig+0x70c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011198:	4b09      	ldr	r3, [pc, #36]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 801119a:	681a      	ldr	r2, [r3, #0]
 801119c:	4b08      	ldr	r3, [pc, #32]	; (80111c0 <HAL_RCC_OscConfig+0x680>)
 801119e:	4911      	ldr	r1, [pc, #68]	; (80111e4 <HAL_RCC_OscConfig+0x6a4>)
 80111a0:	400a      	ands	r2, r1
 80111a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80111a4:	f7fe fb70 	bl	800f888 <HAL_GetTick>
 80111a8:	0003      	movs	r3, r0
 80111aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80111ac:	e01c      	b.n	80111e8 <HAL_RCC_OscConfig+0x6a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80111ae:	f7fe fb6b 	bl	800f888 <HAL_GetTick>
 80111b2:	0002      	movs	r2, r0
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	1ad3      	subs	r3, r2, r3
 80111b8:	2b02      	cmp	r3, #2
 80111ba:	d915      	bls.n	80111e8 <HAL_RCC_OscConfig+0x6a8>
          {
            return HAL_TIMEOUT;
 80111bc:	2303      	movs	r3, #3
 80111be:	e084      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
 80111c0:	40021000 	.word	0x40021000
 80111c4:	ffff1fff 	.word	0xffff1fff
 80111c8:	fffffeff 	.word	0xfffffeff
 80111cc:	40007000 	.word	0x40007000
 80111d0:	fffffbff 	.word	0xfffffbff
 80111d4:	00001388 	.word	0x00001388
 80111d8:	efffffff 	.word	0xefffffff
 80111dc:	40010000 	.word	0x40010000
 80111e0:	ffffdfff 	.word	0xffffdfff
 80111e4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80111e8:	4b3a      	ldr	r3, [pc, #232]	; (80112d4 <HAL_RCC_OscConfig+0x794>)
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	2380      	movs	r3, #128	; 0x80
 80111ee:	049b      	lsls	r3, r3, #18
 80111f0:	4013      	ands	r3, r2
 80111f2:	d1dc      	bne.n	80111ae <HAL_RCC_OscConfig+0x66e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80111f4:	4b37      	ldr	r3, [pc, #220]	; (80112d4 <HAL_RCC_OscConfig+0x794>)
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	4a37      	ldr	r2, [pc, #220]	; (80112d8 <HAL_RCC_OscConfig+0x798>)
 80111fa:	4013      	ands	r3, r2
 80111fc:	0019      	movs	r1, r3
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011206:	431a      	orrs	r2, r3
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801120c:	431a      	orrs	r2, r3
 801120e:	4b31      	ldr	r3, [pc, #196]	; (80112d4 <HAL_RCC_OscConfig+0x794>)
 8011210:	430a      	orrs	r2, r1
 8011212:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011214:	4b2f      	ldr	r3, [pc, #188]	; (80112d4 <HAL_RCC_OscConfig+0x794>)
 8011216:	681a      	ldr	r2, [r3, #0]
 8011218:	4b2e      	ldr	r3, [pc, #184]	; (80112d4 <HAL_RCC_OscConfig+0x794>)
 801121a:	2180      	movs	r1, #128	; 0x80
 801121c:	0449      	lsls	r1, r1, #17
 801121e:	430a      	orrs	r2, r1
 8011220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011222:	f7fe fb31 	bl	800f888 <HAL_GetTick>
 8011226:	0003      	movs	r3, r0
 8011228:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801122a:	e008      	b.n	801123e <HAL_RCC_OscConfig+0x6fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801122c:	f7fe fb2c 	bl	800f888 <HAL_GetTick>
 8011230:	0002      	movs	r2, r0
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	1ad3      	subs	r3, r2, r3
 8011236:	2b02      	cmp	r3, #2
 8011238:	d901      	bls.n	801123e <HAL_RCC_OscConfig+0x6fe>
          {
            return HAL_TIMEOUT;
 801123a:	2303      	movs	r3, #3
 801123c:	e045      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801123e:	4b25      	ldr	r3, [pc, #148]	; (80112d4 <HAL_RCC_OscConfig+0x794>)
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	2380      	movs	r3, #128	; 0x80
 8011244:	049b      	lsls	r3, r3, #18
 8011246:	4013      	ands	r3, r2
 8011248:	d0f0      	beq.n	801122c <HAL_RCC_OscConfig+0x6ec>
 801124a:	e03d      	b.n	80112c8 <HAL_RCC_OscConfig+0x788>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801124c:	4b21      	ldr	r3, [pc, #132]	; (80112d4 <HAL_RCC_OscConfig+0x794>)
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	4b20      	ldr	r3, [pc, #128]	; (80112d4 <HAL_RCC_OscConfig+0x794>)
 8011252:	4922      	ldr	r1, [pc, #136]	; (80112dc <HAL_RCC_OscConfig+0x79c>)
 8011254:	400a      	ands	r2, r1
 8011256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011258:	f7fe fb16 	bl	800f888 <HAL_GetTick>
 801125c:	0003      	movs	r3, r0
 801125e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011260:	e008      	b.n	8011274 <HAL_RCC_OscConfig+0x734>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011262:	f7fe fb11 	bl	800f888 <HAL_GetTick>
 8011266:	0002      	movs	r2, r0
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	1ad3      	subs	r3, r2, r3
 801126c:	2b02      	cmp	r3, #2
 801126e:	d901      	bls.n	8011274 <HAL_RCC_OscConfig+0x734>
          {
            return HAL_TIMEOUT;
 8011270:	2303      	movs	r3, #3
 8011272:	e02a      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011274:	4b17      	ldr	r3, [pc, #92]	; (80112d4 <HAL_RCC_OscConfig+0x794>)
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	2380      	movs	r3, #128	; 0x80
 801127a:	049b      	lsls	r3, r3, #18
 801127c:	4013      	ands	r3, r2
 801127e:	d1f0      	bne.n	8011262 <HAL_RCC_OscConfig+0x722>
 8011280:	e022      	b.n	80112c8 <HAL_RCC_OscConfig+0x788>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011286:	2b01      	cmp	r3, #1
 8011288:	d101      	bne.n	801128e <HAL_RCC_OscConfig+0x74e>
      {
        return HAL_ERROR;
 801128a:	2301      	movs	r3, #1
 801128c:	e01d      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801128e:	4b11      	ldr	r3, [pc, #68]	; (80112d4 <HAL_RCC_OscConfig+0x794>)
 8011290:	68db      	ldr	r3, [r3, #12]
 8011292:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011294:	69ba      	ldr	r2, [r7, #24]
 8011296:	2380      	movs	r3, #128	; 0x80
 8011298:	025b      	lsls	r3, r3, #9
 801129a:	401a      	ands	r2, r3
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d10f      	bne.n	80112c4 <HAL_RCC_OscConfig+0x784>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80112a4:	69ba      	ldr	r2, [r7, #24]
 80112a6:	23f0      	movs	r3, #240	; 0xf0
 80112a8:	039b      	lsls	r3, r3, #14
 80112aa:	401a      	ands	r2, r3
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d107      	bne.n	80112c4 <HAL_RCC_OscConfig+0x784>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80112b4:	69ba      	ldr	r2, [r7, #24]
 80112b6:	23c0      	movs	r3, #192	; 0xc0
 80112b8:	041b      	lsls	r3, r3, #16
 80112ba:	401a      	ands	r2, r3
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d001      	beq.n	80112c8 <HAL_RCC_OscConfig+0x788>
        {
          return HAL_ERROR;
 80112c4:	2301      	movs	r3, #1
 80112c6:	e000      	b.n	80112ca <HAL_RCC_OscConfig+0x78a>
        }
      }
    }
  }

  return HAL_OK;
 80112c8:	2300      	movs	r3, #0
}
 80112ca:	0018      	movs	r0, r3
 80112cc:	46bd      	mov	sp, r7
 80112ce:	b00a      	add	sp, #40	; 0x28
 80112d0:	bdb0      	pop	{r4, r5, r7, pc}
 80112d2:	46c0      	nop			; (mov r8, r8)
 80112d4:	40021000 	.word	0x40021000
 80112d8:	ff02ffff 	.word	0xff02ffff
 80112dc:	feffffff 	.word	0xfeffffff

080112e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80112e0:	b5b0      	push	{r4, r5, r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d101      	bne.n	80112f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80112f0:	2301      	movs	r3, #1
 80112f2:	e10d      	b.n	8011510 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80112f4:	4b88      	ldr	r3, [pc, #544]	; (8011518 <HAL_RCC_ClockConfig+0x238>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	2201      	movs	r2, #1
 80112fa:	4013      	ands	r3, r2
 80112fc:	683a      	ldr	r2, [r7, #0]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d911      	bls.n	8011326 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011302:	4b85      	ldr	r3, [pc, #532]	; (8011518 <HAL_RCC_ClockConfig+0x238>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	2201      	movs	r2, #1
 8011308:	4393      	bics	r3, r2
 801130a:	0019      	movs	r1, r3
 801130c:	4b82      	ldr	r3, [pc, #520]	; (8011518 <HAL_RCC_ClockConfig+0x238>)
 801130e:	683a      	ldr	r2, [r7, #0]
 8011310:	430a      	orrs	r2, r1
 8011312:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011314:	4b80      	ldr	r3, [pc, #512]	; (8011518 <HAL_RCC_ClockConfig+0x238>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	2201      	movs	r2, #1
 801131a:	4013      	ands	r3, r2
 801131c:	683a      	ldr	r2, [r7, #0]
 801131e:	429a      	cmp	r2, r3
 8011320:	d001      	beq.n	8011326 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8011322:	2301      	movs	r3, #1
 8011324:	e0f4      	b.n	8011510 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	2202      	movs	r2, #2
 801132c:	4013      	ands	r3, r2
 801132e:	d009      	beq.n	8011344 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011330:	4b7a      	ldr	r3, [pc, #488]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	22f0      	movs	r2, #240	; 0xf0
 8011336:	4393      	bics	r3, r2
 8011338:	0019      	movs	r1, r3
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	689a      	ldr	r2, [r3, #8]
 801133e:	4b77      	ldr	r3, [pc, #476]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 8011340:	430a      	orrs	r2, r1
 8011342:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2201      	movs	r2, #1
 801134a:	4013      	ands	r3, r2
 801134c:	d100      	bne.n	8011350 <HAL_RCC_ClockConfig+0x70>
 801134e:	e089      	b.n	8011464 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	2b02      	cmp	r3, #2
 8011356:	d107      	bne.n	8011368 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011358:	4b70      	ldr	r3, [pc, #448]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 801135a:	681a      	ldr	r2, [r3, #0]
 801135c:	2380      	movs	r3, #128	; 0x80
 801135e:	029b      	lsls	r3, r3, #10
 8011360:	4013      	ands	r3, r2
 8011362:	d120      	bne.n	80113a6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8011364:	2301      	movs	r3, #1
 8011366:	e0d3      	b.n	8011510 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	2b03      	cmp	r3, #3
 801136e:	d107      	bne.n	8011380 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011370:	4b6a      	ldr	r3, [pc, #424]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 8011372:	681a      	ldr	r2, [r3, #0]
 8011374:	2380      	movs	r3, #128	; 0x80
 8011376:	049b      	lsls	r3, r3, #18
 8011378:	4013      	ands	r3, r2
 801137a:	d114      	bne.n	80113a6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 801137c:	2301      	movs	r3, #1
 801137e:	e0c7      	b.n	8011510 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	2b01      	cmp	r3, #1
 8011386:	d106      	bne.n	8011396 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011388:	4b64      	ldr	r3, [pc, #400]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2204      	movs	r2, #4
 801138e:	4013      	ands	r3, r2
 8011390:	d109      	bne.n	80113a6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8011392:	2301      	movs	r3, #1
 8011394:	e0bc      	b.n	8011510 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8011396:	4b61      	ldr	r3, [pc, #388]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 8011398:	681a      	ldr	r2, [r3, #0]
 801139a:	2380      	movs	r3, #128	; 0x80
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	4013      	ands	r3, r2
 80113a0:	d101      	bne.n	80113a6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80113a2:	2301      	movs	r3, #1
 80113a4:	e0b4      	b.n	8011510 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80113a6:	4b5d      	ldr	r3, [pc, #372]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 80113a8:	68db      	ldr	r3, [r3, #12]
 80113aa:	2203      	movs	r2, #3
 80113ac:	4393      	bics	r3, r2
 80113ae:	0019      	movs	r1, r3
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	685a      	ldr	r2, [r3, #4]
 80113b4:	4b59      	ldr	r3, [pc, #356]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 80113b6:	430a      	orrs	r2, r1
 80113b8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80113ba:	f7fe fa65 	bl	800f888 <HAL_GetTick>
 80113be:	0003      	movs	r3, r0
 80113c0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	2b02      	cmp	r3, #2
 80113c8:	d111      	bne.n	80113ee <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80113ca:	e009      	b.n	80113e0 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80113cc:	f7fe fa5c 	bl	800f888 <HAL_GetTick>
 80113d0:	0002      	movs	r2, r0
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	1ad3      	subs	r3, r2, r3
 80113d6:	4a52      	ldr	r2, [pc, #328]	; (8011520 <HAL_RCC_ClockConfig+0x240>)
 80113d8:	4293      	cmp	r3, r2
 80113da:	d901      	bls.n	80113e0 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80113dc:	2303      	movs	r3, #3
 80113de:	e097      	b.n	8011510 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80113e0:	4b4e      	ldr	r3, [pc, #312]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	220c      	movs	r2, #12
 80113e6:	4013      	ands	r3, r2
 80113e8:	2b08      	cmp	r3, #8
 80113ea:	d1ef      	bne.n	80113cc <HAL_RCC_ClockConfig+0xec>
 80113ec:	e03a      	b.n	8011464 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	2b03      	cmp	r3, #3
 80113f4:	d111      	bne.n	801141a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80113f6:	e009      	b.n	801140c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80113f8:	f7fe fa46 	bl	800f888 <HAL_GetTick>
 80113fc:	0002      	movs	r2, r0
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	1ad3      	subs	r3, r2, r3
 8011402:	4a47      	ldr	r2, [pc, #284]	; (8011520 <HAL_RCC_ClockConfig+0x240>)
 8011404:	4293      	cmp	r3, r2
 8011406:	d901      	bls.n	801140c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8011408:	2303      	movs	r3, #3
 801140a:	e081      	b.n	8011510 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801140c:	4b43      	ldr	r3, [pc, #268]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	220c      	movs	r2, #12
 8011412:	4013      	ands	r3, r2
 8011414:	2b0c      	cmp	r3, #12
 8011416:	d1ef      	bne.n	80113f8 <HAL_RCC_ClockConfig+0x118>
 8011418:	e024      	b.n	8011464 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	2b01      	cmp	r3, #1
 8011420:	d11b      	bne.n	801145a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011422:	e009      	b.n	8011438 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011424:	f7fe fa30 	bl	800f888 <HAL_GetTick>
 8011428:	0002      	movs	r2, r0
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	1ad3      	subs	r3, r2, r3
 801142e:	4a3c      	ldr	r2, [pc, #240]	; (8011520 <HAL_RCC_ClockConfig+0x240>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d901      	bls.n	8011438 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8011434:	2303      	movs	r3, #3
 8011436:	e06b      	b.n	8011510 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011438:	4b38      	ldr	r3, [pc, #224]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	220c      	movs	r2, #12
 801143e:	4013      	ands	r3, r2
 8011440:	2b04      	cmp	r3, #4
 8011442:	d1ef      	bne.n	8011424 <HAL_RCC_ClockConfig+0x144>
 8011444:	e00e      	b.n	8011464 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011446:	f7fe fa1f 	bl	800f888 <HAL_GetTick>
 801144a:	0002      	movs	r2, r0
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	1ad3      	subs	r3, r2, r3
 8011450:	4a33      	ldr	r2, [pc, #204]	; (8011520 <HAL_RCC_ClockConfig+0x240>)
 8011452:	4293      	cmp	r3, r2
 8011454:	d901      	bls.n	801145a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8011456:	2303      	movs	r3, #3
 8011458:	e05a      	b.n	8011510 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801145a:	4b30      	ldr	r3, [pc, #192]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	220c      	movs	r2, #12
 8011460:	4013      	ands	r3, r2
 8011462:	d1f0      	bne.n	8011446 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011464:	4b2c      	ldr	r3, [pc, #176]	; (8011518 <HAL_RCC_ClockConfig+0x238>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	2201      	movs	r2, #1
 801146a:	4013      	ands	r3, r2
 801146c:	683a      	ldr	r2, [r7, #0]
 801146e:	429a      	cmp	r2, r3
 8011470:	d211      	bcs.n	8011496 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011472:	4b29      	ldr	r3, [pc, #164]	; (8011518 <HAL_RCC_ClockConfig+0x238>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2201      	movs	r2, #1
 8011478:	4393      	bics	r3, r2
 801147a:	0019      	movs	r1, r3
 801147c:	4b26      	ldr	r3, [pc, #152]	; (8011518 <HAL_RCC_ClockConfig+0x238>)
 801147e:	683a      	ldr	r2, [r7, #0]
 8011480:	430a      	orrs	r2, r1
 8011482:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011484:	4b24      	ldr	r3, [pc, #144]	; (8011518 <HAL_RCC_ClockConfig+0x238>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2201      	movs	r2, #1
 801148a:	4013      	ands	r3, r2
 801148c:	683a      	ldr	r2, [r7, #0]
 801148e:	429a      	cmp	r2, r3
 8011490:	d001      	beq.n	8011496 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8011492:	2301      	movs	r3, #1
 8011494:	e03c      	b.n	8011510 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	2204      	movs	r2, #4
 801149c:	4013      	ands	r3, r2
 801149e:	d009      	beq.n	80114b4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80114a0:	4b1e      	ldr	r3, [pc, #120]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 80114a2:	68db      	ldr	r3, [r3, #12]
 80114a4:	4a1f      	ldr	r2, [pc, #124]	; (8011524 <HAL_RCC_ClockConfig+0x244>)
 80114a6:	4013      	ands	r3, r2
 80114a8:	0019      	movs	r1, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	68da      	ldr	r2, [r3, #12]
 80114ae:	4b1b      	ldr	r3, [pc, #108]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 80114b0:	430a      	orrs	r2, r1
 80114b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	2208      	movs	r2, #8
 80114ba:	4013      	ands	r3, r2
 80114bc:	d00a      	beq.n	80114d4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80114be:	4b17      	ldr	r3, [pc, #92]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 80114c0:	68db      	ldr	r3, [r3, #12]
 80114c2:	4a19      	ldr	r2, [pc, #100]	; (8011528 <HAL_RCC_ClockConfig+0x248>)
 80114c4:	4013      	ands	r3, r2
 80114c6:	0019      	movs	r1, r3
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	691b      	ldr	r3, [r3, #16]
 80114cc:	00da      	lsls	r2, r3, #3
 80114ce:	4b13      	ldr	r3, [pc, #76]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 80114d0:	430a      	orrs	r2, r1
 80114d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80114d4:	f000 f82e 	bl	8011534 <HAL_RCC_GetSysClockFreq>
 80114d8:	0001      	movs	r1, r0
 80114da:	4b10      	ldr	r3, [pc, #64]	; (801151c <HAL_RCC_ClockConfig+0x23c>)
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	091b      	lsrs	r3, r3, #4
 80114e0:	220f      	movs	r2, #15
 80114e2:	4013      	ands	r3, r2
 80114e4:	4a11      	ldr	r2, [pc, #68]	; (801152c <HAL_RCC_ClockConfig+0x24c>)
 80114e6:	5cd3      	ldrb	r3, [r2, r3]
 80114e8:	000a      	movs	r2, r1
 80114ea:	40da      	lsrs	r2, r3
 80114ec:	4b10      	ldr	r3, [pc, #64]	; (8011530 <HAL_RCC_ClockConfig+0x250>)
 80114ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80114f0:	250b      	movs	r5, #11
 80114f2:	197c      	adds	r4, r7, r5
 80114f4:	2000      	movs	r0, #0
 80114f6:	f7fe f981 	bl	800f7fc <HAL_InitTick>
 80114fa:	0003      	movs	r3, r0
 80114fc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80114fe:	002a      	movs	r2, r5
 8011500:	18bb      	adds	r3, r7, r2
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d002      	beq.n	801150e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8011508:	18bb      	adds	r3, r7, r2
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	e000      	b.n	8011510 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 801150e:	2300      	movs	r3, #0
}
 8011510:	0018      	movs	r0, r3
 8011512:	46bd      	mov	sp, r7
 8011514:	b004      	add	sp, #16
 8011516:	bdb0      	pop	{r4, r5, r7, pc}
 8011518:	40022000 	.word	0x40022000
 801151c:	40021000 	.word	0x40021000
 8011520:	00001388 	.word	0x00001388
 8011524:	fffff8ff 	.word	0xfffff8ff
 8011528:	ffffc7ff 	.word	0xffffc7ff
 801152c:	080162f8 	.word	0x080162f8
 8011530:	200000d8 	.word	0x200000d8

08011534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b086      	sub	sp, #24
 8011538:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801153a:	4b3c      	ldr	r3, [pc, #240]	; (801162c <HAL_RCC_GetSysClockFreq+0xf8>)
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	220c      	movs	r2, #12
 8011544:	4013      	ands	r3, r2
 8011546:	2b0c      	cmp	r3, #12
 8011548:	d013      	beq.n	8011572 <HAL_RCC_GetSysClockFreq+0x3e>
 801154a:	d85c      	bhi.n	8011606 <HAL_RCC_GetSysClockFreq+0xd2>
 801154c:	2b04      	cmp	r3, #4
 801154e:	d002      	beq.n	8011556 <HAL_RCC_GetSysClockFreq+0x22>
 8011550:	2b08      	cmp	r3, #8
 8011552:	d00b      	beq.n	801156c <HAL_RCC_GetSysClockFreq+0x38>
 8011554:	e057      	b.n	8011606 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8011556:	4b35      	ldr	r3, [pc, #212]	; (801162c <HAL_RCC_GetSysClockFreq+0xf8>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2210      	movs	r2, #16
 801155c:	4013      	ands	r3, r2
 801155e:	d002      	beq.n	8011566 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8011560:	4b33      	ldr	r3, [pc, #204]	; (8011630 <HAL_RCC_GetSysClockFreq+0xfc>)
 8011562:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8011564:	e05d      	b.n	8011622 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8011566:	4b33      	ldr	r3, [pc, #204]	; (8011634 <HAL_RCC_GetSysClockFreq+0x100>)
 8011568:	613b      	str	r3, [r7, #16]
      break;
 801156a:	e05a      	b.n	8011622 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801156c:	4b32      	ldr	r3, [pc, #200]	; (8011638 <HAL_RCC_GetSysClockFreq+0x104>)
 801156e:	613b      	str	r3, [r7, #16]
      break;
 8011570:	e057      	b.n	8011622 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	0c9b      	lsrs	r3, r3, #18
 8011576:	220f      	movs	r2, #15
 8011578:	4013      	ands	r3, r2
 801157a:	4a30      	ldr	r2, [pc, #192]	; (801163c <HAL_RCC_GetSysClockFreq+0x108>)
 801157c:	5cd3      	ldrb	r3, [r2, r3]
 801157e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	0d9b      	lsrs	r3, r3, #22
 8011584:	2203      	movs	r2, #3
 8011586:	4013      	ands	r3, r2
 8011588:	3301      	adds	r3, #1
 801158a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801158c:	4b27      	ldr	r3, [pc, #156]	; (801162c <HAL_RCC_GetSysClockFreq+0xf8>)
 801158e:	68da      	ldr	r2, [r3, #12]
 8011590:	2380      	movs	r3, #128	; 0x80
 8011592:	025b      	lsls	r3, r3, #9
 8011594:	4013      	ands	r3, r2
 8011596:	d00f      	beq.n	80115b8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8011598:	68b9      	ldr	r1, [r7, #8]
 801159a:	000a      	movs	r2, r1
 801159c:	0152      	lsls	r2, r2, #5
 801159e:	1a52      	subs	r2, r2, r1
 80115a0:	0193      	lsls	r3, r2, #6
 80115a2:	1a9b      	subs	r3, r3, r2
 80115a4:	00db      	lsls	r3, r3, #3
 80115a6:	185b      	adds	r3, r3, r1
 80115a8:	025b      	lsls	r3, r3, #9
 80115aa:	6879      	ldr	r1, [r7, #4]
 80115ac:	0018      	movs	r0, r3
 80115ae:	f7ee fdc7 	bl	8000140 <__udivsi3>
 80115b2:	0003      	movs	r3, r0
 80115b4:	617b      	str	r3, [r7, #20]
 80115b6:	e023      	b.n	8011600 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80115b8:	4b1c      	ldr	r3, [pc, #112]	; (801162c <HAL_RCC_GetSysClockFreq+0xf8>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	2210      	movs	r2, #16
 80115be:	4013      	ands	r3, r2
 80115c0:	d00f      	beq.n	80115e2 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80115c2:	68b9      	ldr	r1, [r7, #8]
 80115c4:	000a      	movs	r2, r1
 80115c6:	0152      	lsls	r2, r2, #5
 80115c8:	1a52      	subs	r2, r2, r1
 80115ca:	0193      	lsls	r3, r2, #6
 80115cc:	1a9b      	subs	r3, r3, r2
 80115ce:	00db      	lsls	r3, r3, #3
 80115d0:	185b      	adds	r3, r3, r1
 80115d2:	021b      	lsls	r3, r3, #8
 80115d4:	6879      	ldr	r1, [r7, #4]
 80115d6:	0018      	movs	r0, r3
 80115d8:	f7ee fdb2 	bl	8000140 <__udivsi3>
 80115dc:	0003      	movs	r3, r0
 80115de:	617b      	str	r3, [r7, #20]
 80115e0:	e00e      	b.n	8011600 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80115e2:	68b9      	ldr	r1, [r7, #8]
 80115e4:	000a      	movs	r2, r1
 80115e6:	0152      	lsls	r2, r2, #5
 80115e8:	1a52      	subs	r2, r2, r1
 80115ea:	0193      	lsls	r3, r2, #6
 80115ec:	1a9b      	subs	r3, r3, r2
 80115ee:	00db      	lsls	r3, r3, #3
 80115f0:	185b      	adds	r3, r3, r1
 80115f2:	029b      	lsls	r3, r3, #10
 80115f4:	6879      	ldr	r1, [r7, #4]
 80115f6:	0018      	movs	r0, r3
 80115f8:	f7ee fda2 	bl	8000140 <__udivsi3>
 80115fc:	0003      	movs	r3, r0
 80115fe:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	613b      	str	r3, [r7, #16]
      break;
 8011604:	e00d      	b.n	8011622 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8011606:	4b09      	ldr	r3, [pc, #36]	; (801162c <HAL_RCC_GetSysClockFreq+0xf8>)
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	0b5b      	lsrs	r3, r3, #13
 801160c:	2207      	movs	r2, #7
 801160e:	4013      	ands	r3, r2
 8011610:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	3301      	adds	r3, #1
 8011616:	2280      	movs	r2, #128	; 0x80
 8011618:	0212      	lsls	r2, r2, #8
 801161a:	409a      	lsls	r2, r3
 801161c:	0013      	movs	r3, r2
 801161e:	613b      	str	r3, [r7, #16]
      break;
 8011620:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8011622:	693b      	ldr	r3, [r7, #16]
}
 8011624:	0018      	movs	r0, r3
 8011626:	46bd      	mov	sp, r7
 8011628:	b006      	add	sp, #24
 801162a:	bd80      	pop	{r7, pc}
 801162c:	40021000 	.word	0x40021000
 8011630:	003d0900 	.word	0x003d0900
 8011634:	00f42400 	.word	0x00f42400
 8011638:	007a1200 	.word	0x007a1200
 801163c:	08016310 	.word	0x08016310

08011640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011644:	4b02      	ldr	r3, [pc, #8]	; (8011650 <HAL_RCC_GetHCLKFreq+0x10>)
 8011646:	681b      	ldr	r3, [r3, #0]
}
 8011648:	0018      	movs	r0, r3
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	46c0      	nop			; (mov r8, r8)
 8011650:	200000d8 	.word	0x200000d8

08011654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8011658:	f7ff fff2 	bl	8011640 <HAL_RCC_GetHCLKFreq>
 801165c:	0001      	movs	r1, r0
 801165e:	4b06      	ldr	r3, [pc, #24]	; (8011678 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	0a1b      	lsrs	r3, r3, #8
 8011664:	2207      	movs	r2, #7
 8011666:	4013      	ands	r3, r2
 8011668:	4a04      	ldr	r2, [pc, #16]	; (801167c <HAL_RCC_GetPCLK1Freq+0x28>)
 801166a:	5cd3      	ldrb	r3, [r2, r3]
 801166c:	40d9      	lsrs	r1, r3
 801166e:	000b      	movs	r3, r1
}
 8011670:	0018      	movs	r0, r3
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	46c0      	nop			; (mov r8, r8)
 8011678:	40021000 	.word	0x40021000
 801167c:	08016308 	.word	0x08016308

08011680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8011684:	f7ff ffdc 	bl	8011640 <HAL_RCC_GetHCLKFreq>
 8011688:	0001      	movs	r1, r0
 801168a:	4b06      	ldr	r3, [pc, #24]	; (80116a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801168c:	68db      	ldr	r3, [r3, #12]
 801168e:	0adb      	lsrs	r3, r3, #11
 8011690:	2207      	movs	r2, #7
 8011692:	4013      	ands	r3, r2
 8011694:	4a04      	ldr	r2, [pc, #16]	; (80116a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011696:	5cd3      	ldrb	r3, [r2, r3]
 8011698:	40d9      	lsrs	r1, r3
 801169a:	000b      	movs	r3, r1
}
 801169c:	0018      	movs	r0, r3
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	46c0      	nop			; (mov r8, r8)
 80116a4:	40021000 	.word	0x40021000
 80116a8:	08016308 	.word	0x08016308

080116ac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b086      	sub	sp, #24
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	2220      	movs	r2, #32
 80116ba:	4013      	ands	r3, r2
 80116bc:	d106      	bne.n	80116cc <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	2380      	movs	r3, #128	; 0x80
 80116c4:	011b      	lsls	r3, r3, #4
 80116c6:	4013      	ands	r3, r2
 80116c8:	d100      	bne.n	80116cc <HAL_RCCEx_PeriphCLKConfig+0x20>
 80116ca:	e0dc      	b.n	8011886 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80116cc:	2017      	movs	r0, #23
 80116ce:	183b      	adds	r3, r7, r0
 80116d0:	2200      	movs	r2, #0
 80116d2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80116d4:	4ba3      	ldr	r3, [pc, #652]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80116d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116d8:	2380      	movs	r3, #128	; 0x80
 80116da:	055b      	lsls	r3, r3, #21
 80116dc:	4013      	ands	r3, r2
 80116de:	d109      	bne.n	80116f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80116e0:	4ba0      	ldr	r3, [pc, #640]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80116e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116e4:	4b9f      	ldr	r3, [pc, #636]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80116e6:	2180      	movs	r1, #128	; 0x80
 80116e8:	0549      	lsls	r1, r1, #21
 80116ea:	430a      	orrs	r2, r1
 80116ec:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80116ee:	183b      	adds	r3, r7, r0
 80116f0:	2201      	movs	r2, #1
 80116f2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80116f4:	4b9c      	ldr	r3, [pc, #624]	; (8011968 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	2380      	movs	r3, #128	; 0x80
 80116fa:	005b      	lsls	r3, r3, #1
 80116fc:	4013      	ands	r3, r2
 80116fe:	d11a      	bne.n	8011736 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011700:	4b99      	ldr	r3, [pc, #612]	; (8011968 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8011702:	681a      	ldr	r2, [r3, #0]
 8011704:	4b98      	ldr	r3, [pc, #608]	; (8011968 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8011706:	2180      	movs	r1, #128	; 0x80
 8011708:	0049      	lsls	r1, r1, #1
 801170a:	430a      	orrs	r2, r1
 801170c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801170e:	f7fe f8bb 	bl	800f888 <HAL_GetTick>
 8011712:	0003      	movs	r3, r0
 8011714:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011716:	e008      	b.n	801172a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011718:	f7fe f8b6 	bl	800f888 <HAL_GetTick>
 801171c:	0002      	movs	r2, r0
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	1ad3      	subs	r3, r2, r3
 8011722:	2b64      	cmp	r3, #100	; 0x64
 8011724:	d901      	bls.n	801172a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8011726:	2303      	movs	r3, #3
 8011728:	e118      	b.n	801195c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801172a:	4b8f      	ldr	r3, [pc, #572]	; (8011968 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801172c:	681a      	ldr	r2, [r3, #0]
 801172e:	2380      	movs	r3, #128	; 0x80
 8011730:	005b      	lsls	r3, r3, #1
 8011732:	4013      	ands	r3, r2
 8011734:	d0f0      	beq.n	8011718 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8011736:	4b8b      	ldr	r3, [pc, #556]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	23c0      	movs	r3, #192	; 0xc0
 801173c:	039b      	lsls	r3, r3, #14
 801173e:	4013      	ands	r3, r2
 8011740:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	685a      	ldr	r2, [r3, #4]
 8011746:	23c0      	movs	r3, #192	; 0xc0
 8011748:	039b      	lsls	r3, r3, #14
 801174a:	4013      	ands	r3, r2
 801174c:	68fa      	ldr	r2, [r7, #12]
 801174e:	429a      	cmp	r2, r3
 8011750:	d107      	bne.n	8011762 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	689a      	ldr	r2, [r3, #8]
 8011756:	23c0      	movs	r3, #192	; 0xc0
 8011758:	039b      	lsls	r3, r3, #14
 801175a:	4013      	ands	r3, r2
 801175c:	68fa      	ldr	r2, [r7, #12]
 801175e:	429a      	cmp	r2, r3
 8011760:	d013      	beq.n	801178a <HAL_RCCEx_PeriphCLKConfig+0xde>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	685a      	ldr	r2, [r3, #4]
 8011766:	23c0      	movs	r3, #192	; 0xc0
 8011768:	029b      	lsls	r3, r3, #10
 801176a:	401a      	ands	r2, r3
 801176c:	23c0      	movs	r3, #192	; 0xc0
 801176e:	029b      	lsls	r3, r3, #10
 8011770:	429a      	cmp	r2, r3
 8011772:	d10a      	bne.n	801178a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011774:	4b7b      	ldr	r3, [pc, #492]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	2380      	movs	r3, #128	; 0x80
 801177a:	029b      	lsls	r3, r3, #10
 801177c:	401a      	ands	r2, r3
 801177e:	2380      	movs	r3, #128	; 0x80
 8011780:	029b      	lsls	r3, r3, #10
 8011782:	429a      	cmp	r2, r3
 8011784:	d101      	bne.n	801178a <HAL_RCCEx_PeriphCLKConfig+0xde>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8011786:	2301      	movs	r3, #1
 8011788:	e0e8      	b.n	801195c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801178a:	4b76      	ldr	r3, [pc, #472]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 801178c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801178e:	23c0      	movs	r3, #192	; 0xc0
 8011790:	029b      	lsls	r3, r3, #10
 8011792:	4013      	ands	r3, r2
 8011794:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d049      	beq.n	8011830 <HAL_RCCEx_PeriphCLKConfig+0x184>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	685a      	ldr	r2, [r3, #4]
 80117a0:	23c0      	movs	r3, #192	; 0xc0
 80117a2:	029b      	lsls	r3, r3, #10
 80117a4:	4013      	ands	r3, r2
 80117a6:	68fa      	ldr	r2, [r7, #12]
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d004      	beq.n	80117b6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	2220      	movs	r2, #32
 80117b2:	4013      	ands	r3, r2
 80117b4:	d10d      	bne.n	80117d2 <HAL_RCCEx_PeriphCLKConfig+0x126>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	689a      	ldr	r2, [r3, #8]
 80117ba:	23c0      	movs	r3, #192	; 0xc0
 80117bc:	029b      	lsls	r3, r3, #10
 80117be:	4013      	ands	r3, r2
 80117c0:	68fa      	ldr	r2, [r7, #12]
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d034      	beq.n	8011830 <HAL_RCCEx_PeriphCLKConfig+0x184>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681a      	ldr	r2, [r3, #0]
 80117ca:	2380      	movs	r3, #128	; 0x80
 80117cc:	011b      	lsls	r3, r3, #4
 80117ce:	4013      	ands	r3, r2
 80117d0:	d02e      	beq.n	8011830 <HAL_RCCEx_PeriphCLKConfig+0x184>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80117d2:	4b64      	ldr	r3, [pc, #400]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80117d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117d6:	4a65      	ldr	r2, [pc, #404]	; (801196c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80117d8:	4013      	ands	r3, r2
 80117da:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80117dc:	4b61      	ldr	r3, [pc, #388]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80117de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80117e0:	4b60      	ldr	r3, [pc, #384]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80117e2:	2180      	movs	r1, #128	; 0x80
 80117e4:	0309      	lsls	r1, r1, #12
 80117e6:	430a      	orrs	r2, r1
 80117e8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80117ea:	4b5e      	ldr	r3, [pc, #376]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80117ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80117ee:	4b5d      	ldr	r3, [pc, #372]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80117f0:	495f      	ldr	r1, [pc, #380]	; (8011970 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80117f2:	400a      	ands	r2, r1
 80117f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80117f6:	4b5b      	ldr	r3, [pc, #364]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80117f8:	68fa      	ldr	r2, [r7, #12]
 80117fa:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80117fc:	68fa      	ldr	r2, [r7, #12]
 80117fe:	2380      	movs	r3, #128	; 0x80
 8011800:	005b      	lsls	r3, r3, #1
 8011802:	4013      	ands	r3, r2
 8011804:	d014      	beq.n	8011830 <HAL_RCCEx_PeriphCLKConfig+0x184>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011806:	f7fe f83f 	bl	800f888 <HAL_GetTick>
 801180a:	0003      	movs	r3, r0
 801180c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801180e:	e009      	b.n	8011824 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011810:	f7fe f83a 	bl	800f888 <HAL_GetTick>
 8011814:	0002      	movs	r2, r0
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	1ad3      	subs	r3, r2, r3
 801181a:	4a56      	ldr	r2, [pc, #344]	; (8011974 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 801181c:	4293      	cmp	r3, r2
 801181e:	d901      	bls.n	8011824 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            return HAL_TIMEOUT;
 8011820:	2303      	movs	r3, #3
 8011822:	e09b      	b.n	801195c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011824:	4b4f      	ldr	r3, [pc, #316]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8011826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011828:	2380      	movs	r3, #128	; 0x80
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	4013      	ands	r3, r2
 801182e:	d0ef      	beq.n	8011810 <HAL_RCCEx_PeriphCLKConfig+0x164>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	685a      	ldr	r2, [r3, #4]
 8011834:	23c0      	movs	r3, #192	; 0xc0
 8011836:	029b      	lsls	r3, r3, #10
 8011838:	401a      	ands	r2, r3
 801183a:	23c0      	movs	r3, #192	; 0xc0
 801183c:	029b      	lsls	r3, r3, #10
 801183e:	429a      	cmp	r2, r3
 8011840:	d10c      	bne.n	801185c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8011842:	4b48      	ldr	r3, [pc, #288]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	4a4c      	ldr	r2, [pc, #304]	; (8011978 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8011848:	4013      	ands	r3, r2
 801184a:	0019      	movs	r1, r3
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	685a      	ldr	r2, [r3, #4]
 8011850:	23c0      	movs	r3, #192	; 0xc0
 8011852:	039b      	lsls	r3, r3, #14
 8011854:	401a      	ands	r2, r3
 8011856:	4b43      	ldr	r3, [pc, #268]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8011858:	430a      	orrs	r2, r1
 801185a:	601a      	str	r2, [r3, #0]
 801185c:	4b41      	ldr	r3, [pc, #260]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 801185e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	685a      	ldr	r2, [r3, #4]
 8011864:	23c0      	movs	r3, #192	; 0xc0
 8011866:	029b      	lsls	r3, r3, #10
 8011868:	401a      	ands	r2, r3
 801186a:	4b3e      	ldr	r3, [pc, #248]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 801186c:	430a      	orrs	r2, r1
 801186e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8011870:	2317      	movs	r3, #23
 8011872:	18fb      	adds	r3, r7, r3
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	2b01      	cmp	r3, #1
 8011878:	d105      	bne.n	8011886 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801187a:	4b3a      	ldr	r3, [pc, #232]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 801187c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801187e:	4b39      	ldr	r3, [pc, #228]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8011880:	493e      	ldr	r1, [pc, #248]	; (801197c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8011882:	400a      	ands	r2, r1
 8011884:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	2201      	movs	r2, #1
 801188c:	4013      	ands	r3, r2
 801188e:	d009      	beq.n	80118a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011890:	4b34      	ldr	r3, [pc, #208]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8011892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011894:	2203      	movs	r2, #3
 8011896:	4393      	bics	r3, r2
 8011898:	0019      	movs	r1, r3
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	68da      	ldr	r2, [r3, #12]
 801189e:	4b31      	ldr	r3, [pc, #196]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80118a0:	430a      	orrs	r2, r1
 80118a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	2202      	movs	r2, #2
 80118aa:	4013      	ands	r3, r2
 80118ac:	d009      	beq.n	80118c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80118ae:	4b2d      	ldr	r3, [pc, #180]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80118b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118b2:	220c      	movs	r2, #12
 80118b4:	4393      	bics	r3, r2
 80118b6:	0019      	movs	r1, r3
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	691a      	ldr	r2, [r3, #16]
 80118bc:	4b29      	ldr	r3, [pc, #164]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80118be:	430a      	orrs	r2, r1
 80118c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	2204      	movs	r2, #4
 80118c8:	4013      	ands	r3, r2
 80118ca:	d009      	beq.n	80118e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80118cc:	4b25      	ldr	r3, [pc, #148]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80118ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118d0:	4a2b      	ldr	r2, [pc, #172]	; (8011980 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80118d2:	4013      	ands	r3, r2
 80118d4:	0019      	movs	r1, r3
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	695a      	ldr	r2, [r3, #20]
 80118da:	4b22      	ldr	r3, [pc, #136]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80118dc:	430a      	orrs	r2, r1
 80118de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2208      	movs	r2, #8
 80118e6:	4013      	ands	r3, r2
 80118e8:	d009      	beq.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80118ea:	4b1e      	ldr	r3, [pc, #120]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80118ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118ee:	4a25      	ldr	r2, [pc, #148]	; (8011984 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80118f0:	4013      	ands	r3, r2
 80118f2:	0019      	movs	r1, r3
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	699a      	ldr	r2, [r3, #24]
 80118f8:	4b1a      	ldr	r3, [pc, #104]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80118fa:	430a      	orrs	r2, r1
 80118fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681a      	ldr	r2, [r3, #0]
 8011902:	2380      	movs	r3, #128	; 0x80
 8011904:	005b      	lsls	r3, r3, #1
 8011906:	4013      	ands	r3, r2
 8011908:	d009      	beq.n	801191e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801190a:	4b16      	ldr	r3, [pc, #88]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 801190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801190e:	4a17      	ldr	r2, [pc, #92]	; (801196c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8011910:	4013      	ands	r3, r2
 8011912:	0019      	movs	r1, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	69da      	ldr	r2, [r3, #28]
 8011918:	4b12      	ldr	r3, [pc, #72]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 801191a:	430a      	orrs	r2, r1
 801191c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	2240      	movs	r2, #64	; 0x40
 8011924:	4013      	ands	r3, r2
 8011926:	d009      	beq.n	801193c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011928:	4b0e      	ldr	r3, [pc, #56]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 801192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801192c:	4a16      	ldr	r2, [pc, #88]	; (8011988 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 801192e:	4013      	ands	r3, r2
 8011930:	0019      	movs	r1, r3
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011936:	4b0b      	ldr	r3, [pc, #44]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8011938:	430a      	orrs	r2, r1
 801193a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2280      	movs	r2, #128	; 0x80
 8011942:	4013      	ands	r3, r2
 8011944:	d009      	beq.n	801195a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8011946:	4b07      	ldr	r3, [pc, #28]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8011948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801194a:	4a10      	ldr	r2, [pc, #64]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 801194c:	4013      	ands	r3, r2
 801194e:	0019      	movs	r1, r3
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6a1a      	ldr	r2, [r3, #32]
 8011954:	4b03      	ldr	r3, [pc, #12]	; (8011964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8011956:	430a      	orrs	r2, r1
 8011958:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 801195a:	2300      	movs	r3, #0
}
 801195c:	0018      	movs	r0, r3
 801195e:	46bd      	mov	sp, r7
 8011960:	b006      	add	sp, #24
 8011962:	bd80      	pop	{r7, pc}
 8011964:	40021000 	.word	0x40021000
 8011968:	40007000 	.word	0x40007000
 801196c:	fffcffff 	.word	0xfffcffff
 8011970:	fff7ffff 	.word	0xfff7ffff
 8011974:	00001388 	.word	0x00001388
 8011978:	ffcfffff 	.word	0xffcfffff
 801197c:	efffffff 	.word	0xefffffff
 8011980:	fffff3ff 	.word	0xfffff3ff
 8011984:	ffffcfff 	.word	0xffffcfff
 8011988:	fbffffff 	.word	0xfbffffff
 801198c:	fff3ffff 	.word	0xfff3ffff

08011990 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d101      	bne.n	80119a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 801199e:	2301      	movs	r3, #1
 80119a0:	e01e      	b.n	80119e0 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2239      	movs	r2, #57	; 0x39
 80119a6:	5c9b      	ldrb	r3, [r3, r2]
 80119a8:	b2db      	uxtb	r3, r3
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d107      	bne.n	80119be <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2238      	movs	r2, #56	; 0x38
 80119b2:	2100      	movs	r1, #0
 80119b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	0018      	movs	r0, r3
 80119ba:	f7f4 fbf3 	bl	80061a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2239      	movs	r2, #57	; 0x39
 80119c2:	2102      	movs	r1, #2
 80119c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681a      	ldr	r2, [r3, #0]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	3304      	adds	r3, #4
 80119ce:	0019      	movs	r1, r3
 80119d0:	0010      	movs	r0, r2
 80119d2:	f000 fb8f 	bl	80120f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2239      	movs	r2, #57	; 0x39
 80119da:	2101      	movs	r1, #1
 80119dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80119de:	2300      	movs	r3, #0
}
 80119e0:	0018      	movs	r0, r3
 80119e2:	46bd      	mov	sp, r7
 80119e4:	b002      	add	sp, #8
 80119e6:	bd80      	pop	{r7, pc}

080119e8 <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2239      	movs	r2, #57	; 0x39
 80119f4:	2102      	movs	r1, #2
 80119f6:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	6a1b      	ldr	r3, [r3, #32]
 80119fe:	4a0e      	ldr	r2, [pc, #56]	; (8011a38 <HAL_TIM_OC_DeInit+0x50>)
 8011a00:	4013      	ands	r3, r2
 8011a02:	d107      	bne.n	8011a14 <HAL_TIM_OC_DeInit+0x2c>
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2101      	movs	r1, #1
 8011a10:	438a      	bics	r2, r1
 8011a12:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	0018      	movs	r0, r3
 8011a18:	f7f4 fbfa 	bl	8006210 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2239      	movs	r2, #57	; 0x39
 8011a20:	2100      	movs	r1, #0
 8011a22:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2238      	movs	r2, #56	; 0x38
 8011a28:	2100      	movs	r1, #0
 8011a2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011a2c:	2300      	movs	r3, #0
}
 8011a2e:	0018      	movs	r0, r3
 8011a30:	46bd      	mov	sp, r7
 8011a32:	b002      	add	sp, #8
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	46c0      	nop			; (mov r8, r8)
 8011a38:	00001111 	.word	0x00001111

08011a3c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b084      	sub	sp, #16
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	2b0c      	cmp	r3, #12
 8011a4a:	d02a      	beq.n	8011aa2 <HAL_TIM_OC_Start_IT+0x66>
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	2b0c      	cmp	r3, #12
 8011a50:	d830      	bhi.n	8011ab4 <HAL_TIM_OC_Start_IT+0x78>
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	2b08      	cmp	r3, #8
 8011a56:	d01b      	beq.n	8011a90 <HAL_TIM_OC_Start_IT+0x54>
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	2b08      	cmp	r3, #8
 8011a5c:	d82a      	bhi.n	8011ab4 <HAL_TIM_OC_Start_IT+0x78>
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d003      	beq.n	8011a6c <HAL_TIM_OC_Start_IT+0x30>
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	2b04      	cmp	r3, #4
 8011a68:	d009      	beq.n	8011a7e <HAL_TIM_OC_Start_IT+0x42>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8011a6a:	e023      	b.n	8011ab4 <HAL_TIM_OC_Start_IT+0x78>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	68da      	ldr	r2, [r3, #12]
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	2102      	movs	r1, #2
 8011a78:	430a      	orrs	r2, r1
 8011a7a:	60da      	str	r2, [r3, #12]
      break;
 8011a7c:	e01b      	b.n	8011ab6 <HAL_TIM_OC_Start_IT+0x7a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	68da      	ldr	r2, [r3, #12]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	2104      	movs	r1, #4
 8011a8a:	430a      	orrs	r2, r1
 8011a8c:	60da      	str	r2, [r3, #12]
      break;
 8011a8e:	e012      	b.n	8011ab6 <HAL_TIM_OC_Start_IT+0x7a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	68da      	ldr	r2, [r3, #12]
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	2108      	movs	r1, #8
 8011a9c:	430a      	orrs	r2, r1
 8011a9e:	60da      	str	r2, [r3, #12]
      break;
 8011aa0:	e009      	b.n	8011ab6 <HAL_TIM_OC_Start_IT+0x7a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	68da      	ldr	r2, [r3, #12]
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	2110      	movs	r1, #16
 8011aae:	430a      	orrs	r2, r1
 8011ab0:	60da      	str	r2, [r3, #12]
      break;
 8011ab2:	e000      	b.n	8011ab6 <HAL_TIM_OC_Start_IT+0x7a>
      break;
 8011ab4:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	6839      	ldr	r1, [r7, #0]
 8011abc:	2201      	movs	r2, #1
 8011abe:	0018      	movs	r0, r3
 8011ac0:	f000 fc7a 	bl	80123b8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	689b      	ldr	r3, [r3, #8]
 8011aca:	2207      	movs	r2, #7
 8011acc:	4013      	ands	r3, r2
 8011ace:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	2b06      	cmp	r3, #6
 8011ad4:	d007      	beq.n	8011ae6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    __HAL_TIM_ENABLE(htim);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2101      	movs	r1, #1
 8011ae2:	430a      	orrs	r2, r1
 8011ae4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011ae6:	2300      	movs	r3, #0
}
 8011ae8:	0018      	movs	r0, r3
 8011aea:	46bd      	mov	sp, r7
 8011aec:	b004      	add	sp, #16
 8011aee:	bd80      	pop	{r7, pc}

08011af0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	2b0c      	cmp	r3, #12
 8011afe:	d02a      	beq.n	8011b56 <HAL_TIM_OC_Stop_IT+0x66>
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	2b0c      	cmp	r3, #12
 8011b04:	d830      	bhi.n	8011b68 <HAL_TIM_OC_Stop_IT+0x78>
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	2b08      	cmp	r3, #8
 8011b0a:	d01b      	beq.n	8011b44 <HAL_TIM_OC_Stop_IT+0x54>
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	2b08      	cmp	r3, #8
 8011b10:	d82a      	bhi.n	8011b68 <HAL_TIM_OC_Stop_IT+0x78>
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d003      	beq.n	8011b20 <HAL_TIM_OC_Stop_IT+0x30>
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	2b04      	cmp	r3, #4
 8011b1c:	d009      	beq.n	8011b32 <HAL_TIM_OC_Stop_IT+0x42>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8011b1e:	e023      	b.n	8011b68 <HAL_TIM_OC_Stop_IT+0x78>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	68da      	ldr	r2, [r3, #12]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2102      	movs	r1, #2
 8011b2c:	438a      	bics	r2, r1
 8011b2e:	60da      	str	r2, [r3, #12]
      break;
 8011b30:	e01b      	b.n	8011b6a <HAL_TIM_OC_Stop_IT+0x7a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	68da      	ldr	r2, [r3, #12]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	2104      	movs	r1, #4
 8011b3e:	438a      	bics	r2, r1
 8011b40:	60da      	str	r2, [r3, #12]
      break;
 8011b42:	e012      	b.n	8011b6a <HAL_TIM_OC_Stop_IT+0x7a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	68da      	ldr	r2, [r3, #12]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	2108      	movs	r1, #8
 8011b50:	438a      	bics	r2, r1
 8011b52:	60da      	str	r2, [r3, #12]
      break;
 8011b54:	e009      	b.n	8011b6a <HAL_TIM_OC_Stop_IT+0x7a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	68da      	ldr	r2, [r3, #12]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	2110      	movs	r1, #16
 8011b62:	438a      	bics	r2, r1
 8011b64:	60da      	str	r2, [r3, #12]
      break;
 8011b66:	e000      	b.n	8011b6a <HAL_TIM_OC_Stop_IT+0x7a>
      break;
 8011b68:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	6839      	ldr	r1, [r7, #0]
 8011b70:	2200      	movs	r2, #0
 8011b72:	0018      	movs	r0, r3
 8011b74:	f000 fc20 	bl	80123b8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	6a1b      	ldr	r3, [r3, #32]
 8011b7e:	4a08      	ldr	r2, [pc, #32]	; (8011ba0 <HAL_TIM_OC_Stop_IT+0xb0>)
 8011b80:	4013      	ands	r3, r2
 8011b82:	d107      	bne.n	8011b94 <HAL_TIM_OC_Stop_IT+0xa4>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	681a      	ldr	r2, [r3, #0]
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	2101      	movs	r1, #1
 8011b90:	438a      	bics	r2, r1
 8011b92:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011b94:	2300      	movs	r3, #0
}
 8011b96:	0018      	movs	r0, r3
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	b002      	add	sp, #8
 8011b9c:	bd80      	pop	{r7, pc}
 8011b9e:	46c0      	nop			; (mov r8, r8)
 8011ba0:	00001111 	.word	0x00001111

08011ba4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d101      	bne.n	8011bb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	e01e      	b.n	8011bf4 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2239      	movs	r2, #57	; 0x39
 8011bba:	5c9b      	ldrb	r3, [r3, r2]
 8011bbc:	b2db      	uxtb	r3, r3
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d107      	bne.n	8011bd2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2238      	movs	r2, #56	; 0x38
 8011bc6:	2100      	movs	r1, #0
 8011bc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	0018      	movs	r0, r3
 8011bce:	f7f4 fab9 	bl	8006144 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2239      	movs	r2, #57	; 0x39
 8011bd6:	2102      	movs	r1, #2
 8011bd8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681a      	ldr	r2, [r3, #0]
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	3304      	adds	r3, #4
 8011be2:	0019      	movs	r1, r3
 8011be4:	0010      	movs	r0, r2
 8011be6:	f000 fa85 	bl	80120f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2239      	movs	r2, #57	; 0x39
 8011bee:	2101      	movs	r1, #1
 8011bf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011bf2:	2300      	movs	r3, #0
}
 8011bf4:	0018      	movs	r0, r3
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	b002      	add	sp, #8
 8011bfa:	bd80      	pop	{r7, pc}

08011bfc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	2b0c      	cmp	r3, #12
 8011c0a:	d02a      	beq.n	8011c62 <HAL_TIM_PWM_Start_IT+0x66>
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	2b0c      	cmp	r3, #12
 8011c10:	d830      	bhi.n	8011c74 <HAL_TIM_PWM_Start_IT+0x78>
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	2b08      	cmp	r3, #8
 8011c16:	d01b      	beq.n	8011c50 <HAL_TIM_PWM_Start_IT+0x54>
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	2b08      	cmp	r3, #8
 8011c1c:	d82a      	bhi.n	8011c74 <HAL_TIM_PWM_Start_IT+0x78>
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d003      	beq.n	8011c2c <HAL_TIM_PWM_Start_IT+0x30>
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	2b04      	cmp	r3, #4
 8011c28:	d009      	beq.n	8011c3e <HAL_TIM_PWM_Start_IT+0x42>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8011c2a:	e023      	b.n	8011c74 <HAL_TIM_PWM_Start_IT+0x78>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	68da      	ldr	r2, [r3, #12]
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	2102      	movs	r1, #2
 8011c38:	430a      	orrs	r2, r1
 8011c3a:	60da      	str	r2, [r3, #12]
      break;
 8011c3c:	e01b      	b.n	8011c76 <HAL_TIM_PWM_Start_IT+0x7a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	68da      	ldr	r2, [r3, #12]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	2104      	movs	r1, #4
 8011c4a:	430a      	orrs	r2, r1
 8011c4c:	60da      	str	r2, [r3, #12]
      break;
 8011c4e:	e012      	b.n	8011c76 <HAL_TIM_PWM_Start_IT+0x7a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	68da      	ldr	r2, [r3, #12]
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	2108      	movs	r1, #8
 8011c5c:	430a      	orrs	r2, r1
 8011c5e:	60da      	str	r2, [r3, #12]
      break;
 8011c60:	e009      	b.n	8011c76 <HAL_TIM_PWM_Start_IT+0x7a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	68da      	ldr	r2, [r3, #12]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	2110      	movs	r1, #16
 8011c6e:	430a      	orrs	r2, r1
 8011c70:	60da      	str	r2, [r3, #12]
      break;
 8011c72:	e000      	b.n	8011c76 <HAL_TIM_PWM_Start_IT+0x7a>
      break;
 8011c74:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	6839      	ldr	r1, [r7, #0]
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	0018      	movs	r0, r3
 8011c80:	f000 fb9a 	bl	80123b8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	689b      	ldr	r3, [r3, #8]
 8011c8a:	2207      	movs	r2, #7
 8011c8c:	4013      	ands	r3, r2
 8011c8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	2b06      	cmp	r3, #6
 8011c94:	d007      	beq.n	8011ca6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    __HAL_TIM_ENABLE(htim);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	2101      	movs	r1, #1
 8011ca2:	430a      	orrs	r2, r1
 8011ca4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011ca6:	2300      	movs	r3, #0
}
 8011ca8:	0018      	movs	r0, r3
 8011caa:	46bd      	mov	sp, r7
 8011cac:	b004      	add	sp, #16
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	691b      	ldr	r3, [r3, #16]
 8011cbe:	2202      	movs	r2, #2
 8011cc0:	4013      	ands	r3, r2
 8011cc2:	2b02      	cmp	r3, #2
 8011cc4:	d124      	bne.n	8011d10 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	68db      	ldr	r3, [r3, #12]
 8011ccc:	2202      	movs	r2, #2
 8011cce:	4013      	ands	r3, r2
 8011cd0:	2b02      	cmp	r3, #2
 8011cd2:	d11d      	bne.n	8011d10 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2203      	movs	r2, #3
 8011cda:	4252      	negs	r2, r2
 8011cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2201      	movs	r2, #1
 8011ce2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	699b      	ldr	r3, [r3, #24]
 8011cea:	2203      	movs	r2, #3
 8011cec:	4013      	ands	r3, r2
 8011cee:	d004      	beq.n	8011cfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	0018      	movs	r0, r3
 8011cf4:	f000 f9e6 	bl	80120c4 <HAL_TIM_IC_CaptureCallback>
 8011cf8:	e007      	b.n	8011d0a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	0018      	movs	r0, r3
 8011cfe:	f7f4 faa7 	bl	8006250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	0018      	movs	r0, r3
 8011d06:	f000 f9e5 	bl	80120d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	691b      	ldr	r3, [r3, #16]
 8011d16:	2204      	movs	r2, #4
 8011d18:	4013      	ands	r3, r2
 8011d1a:	2b04      	cmp	r3, #4
 8011d1c:	d125      	bne.n	8011d6a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	2204      	movs	r2, #4
 8011d26:	4013      	ands	r3, r2
 8011d28:	2b04      	cmp	r3, #4
 8011d2a:	d11e      	bne.n	8011d6a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2205      	movs	r2, #5
 8011d32:	4252      	negs	r2, r2
 8011d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2202      	movs	r2, #2
 8011d3a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	699a      	ldr	r2, [r3, #24]
 8011d42:	23c0      	movs	r3, #192	; 0xc0
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	4013      	ands	r3, r2
 8011d48:	d004      	beq.n	8011d54 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	0018      	movs	r0, r3
 8011d4e:	f000 f9b9 	bl	80120c4 <HAL_TIM_IC_CaptureCallback>
 8011d52:	e007      	b.n	8011d64 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	0018      	movs	r0, r3
 8011d58:	f7f4 fa7a 	bl	8006250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	0018      	movs	r0, r3
 8011d60:	f000 f9b8 	bl	80120d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2200      	movs	r2, #0
 8011d68:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	691b      	ldr	r3, [r3, #16]
 8011d70:	2208      	movs	r2, #8
 8011d72:	4013      	ands	r3, r2
 8011d74:	2b08      	cmp	r3, #8
 8011d76:	d124      	bne.n	8011dc2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	2208      	movs	r2, #8
 8011d80:	4013      	ands	r3, r2
 8011d82:	2b08      	cmp	r3, #8
 8011d84:	d11d      	bne.n	8011dc2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	2209      	movs	r2, #9
 8011d8c:	4252      	negs	r2, r2
 8011d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2204      	movs	r2, #4
 8011d94:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	69db      	ldr	r3, [r3, #28]
 8011d9c:	2203      	movs	r2, #3
 8011d9e:	4013      	ands	r3, r2
 8011da0:	d004      	beq.n	8011dac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	0018      	movs	r0, r3
 8011da6:	f000 f98d 	bl	80120c4 <HAL_TIM_IC_CaptureCallback>
 8011daa:	e007      	b.n	8011dbc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	0018      	movs	r0, r3
 8011db0:	f7f4 fa4e 	bl	8006250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	0018      	movs	r0, r3
 8011db8:	f000 f98c 	bl	80120d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	691b      	ldr	r3, [r3, #16]
 8011dc8:	2210      	movs	r2, #16
 8011dca:	4013      	ands	r3, r2
 8011dcc:	2b10      	cmp	r3, #16
 8011dce:	d125      	bne.n	8011e1c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	68db      	ldr	r3, [r3, #12]
 8011dd6:	2210      	movs	r2, #16
 8011dd8:	4013      	ands	r3, r2
 8011dda:	2b10      	cmp	r3, #16
 8011ddc:	d11e      	bne.n	8011e1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	2211      	movs	r2, #17
 8011de4:	4252      	negs	r2, r2
 8011de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2208      	movs	r2, #8
 8011dec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	69da      	ldr	r2, [r3, #28]
 8011df4:	23c0      	movs	r3, #192	; 0xc0
 8011df6:	009b      	lsls	r3, r3, #2
 8011df8:	4013      	ands	r3, r2
 8011dfa:	d004      	beq.n	8011e06 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	0018      	movs	r0, r3
 8011e00:	f000 f960 	bl	80120c4 <HAL_TIM_IC_CaptureCallback>
 8011e04:	e007      	b.n	8011e16 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	0018      	movs	r0, r3
 8011e0a:	f7f4 fa21 	bl	8006250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	0018      	movs	r0, r3
 8011e12:	f000 f95f 	bl	80120d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2200      	movs	r2, #0
 8011e1a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	691b      	ldr	r3, [r3, #16]
 8011e22:	2201      	movs	r2, #1
 8011e24:	4013      	ands	r3, r2
 8011e26:	2b01      	cmp	r3, #1
 8011e28:	d10f      	bne.n	8011e4a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	68db      	ldr	r3, [r3, #12]
 8011e30:	2201      	movs	r2, #1
 8011e32:	4013      	ands	r3, r2
 8011e34:	2b01      	cmp	r3, #1
 8011e36:	d108      	bne.n	8011e4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2202      	movs	r2, #2
 8011e3e:	4252      	negs	r2, r2
 8011e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	0018      	movs	r0, r3
 8011e46:	f000 f935 	bl	80120b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	691b      	ldr	r3, [r3, #16]
 8011e50:	2240      	movs	r2, #64	; 0x40
 8011e52:	4013      	ands	r3, r2
 8011e54:	2b40      	cmp	r3, #64	; 0x40
 8011e56:	d10f      	bne.n	8011e78 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	2240      	movs	r2, #64	; 0x40
 8011e60:	4013      	ands	r3, r2
 8011e62:	2b40      	cmp	r3, #64	; 0x40
 8011e64:	d108      	bne.n	8011e78 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2241      	movs	r2, #65	; 0x41
 8011e6c:	4252      	negs	r2, r2
 8011e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	0018      	movs	r0, r3
 8011e74:	f000 f936 	bl	80120e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011e78:	46c0      	nop			; (mov r8, r8)
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	b002      	add	sp, #8
 8011e7e:	bd80      	pop	{r7, pc}

08011e80 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b084      	sub	sp, #16
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	60f8      	str	r0, [r7, #12]
 8011e88:	60b9      	str	r1, [r7, #8]
 8011e8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	2238      	movs	r2, #56	; 0x38
 8011e90:	5c9b      	ldrb	r3, [r3, r2]
 8011e92:	2b01      	cmp	r3, #1
 8011e94:	d101      	bne.n	8011e9a <HAL_TIM_OC_ConfigChannel+0x1a>
 8011e96:	2302      	movs	r3, #2
 8011e98:	e044      	b.n	8011f24 <HAL_TIM_OC_ConfigChannel+0xa4>
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	2238      	movs	r2, #56	; 0x38
 8011e9e:	2101      	movs	r1, #1
 8011ea0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2239      	movs	r2, #57	; 0x39
 8011ea6:	2102      	movs	r1, #2
 8011ea8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2b0c      	cmp	r3, #12
 8011eae:	d027      	beq.n	8011f00 <HAL_TIM_OC_ConfigChannel+0x80>
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2b0c      	cmp	r3, #12
 8011eb4:	d82c      	bhi.n	8011f10 <HAL_TIM_OC_ConfigChannel+0x90>
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2b08      	cmp	r3, #8
 8011eba:	d019      	beq.n	8011ef0 <HAL_TIM_OC_ConfigChannel+0x70>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2b08      	cmp	r3, #8
 8011ec0:	d826      	bhi.n	8011f10 <HAL_TIM_OC_ConfigChannel+0x90>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d003      	beq.n	8011ed0 <HAL_TIM_OC_ConfigChannel+0x50>
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2b04      	cmp	r3, #4
 8011ecc:	d008      	beq.n	8011ee0 <HAL_TIM_OC_ConfigChannel+0x60>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8011ece:	e01f      	b.n	8011f10 <HAL_TIM_OC_ConfigChannel+0x90>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	68ba      	ldr	r2, [r7, #8]
 8011ed6:	0011      	movs	r1, r2
 8011ed8:	0018      	movs	r0, r3
 8011eda:	f000 f969 	bl	80121b0 <TIM_OC1_SetConfig>
      break;
 8011ede:	e018      	b.n	8011f12 <HAL_TIM_OC_ConfigChannel+0x92>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	68ba      	ldr	r2, [r7, #8]
 8011ee6:	0011      	movs	r1, r2
 8011ee8:	0018      	movs	r0, r3
 8011eea:	f000 f99d 	bl	8012228 <TIM_OC2_SetConfig>
      break;
 8011eee:	e010      	b.n	8011f12 <HAL_TIM_OC_ConfigChannel+0x92>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	68ba      	ldr	r2, [r7, #8]
 8011ef6:	0011      	movs	r1, r2
 8011ef8:	0018      	movs	r0, r3
 8011efa:	f000 f9d7 	bl	80122ac <TIM_OC3_SetConfig>
      break;
 8011efe:	e008      	b.n	8011f12 <HAL_TIM_OC_ConfigChannel+0x92>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	68ba      	ldr	r2, [r7, #8]
 8011f06:	0011      	movs	r1, r2
 8011f08:	0018      	movs	r0, r3
 8011f0a:	f000 fa0f 	bl	801232c <TIM_OC4_SetConfig>
      break;
 8011f0e:	e000      	b.n	8011f12 <HAL_TIM_OC_ConfigChannel+0x92>
      break;
 8011f10:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	2239      	movs	r2, #57	; 0x39
 8011f16:	2101      	movs	r1, #1
 8011f18:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	2238      	movs	r2, #56	; 0x38
 8011f1e:	2100      	movs	r1, #0
 8011f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011f22:	2300      	movs	r3, #0
}
 8011f24:	0018      	movs	r0, r3
 8011f26:	46bd      	mov	sp, r7
 8011f28:	b004      	add	sp, #16
 8011f2a:	bd80      	pop	{r7, pc}

08011f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	60f8      	str	r0, [r7, #12]
 8011f34:	60b9      	str	r1, [r7, #8]
 8011f36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	2238      	movs	r2, #56	; 0x38
 8011f3c:	5c9b      	ldrb	r3, [r3, r2]
 8011f3e:	2b01      	cmp	r3, #1
 8011f40:	d101      	bne.n	8011f46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8011f42:	2302      	movs	r3, #2
 8011f44:	e0af      	b.n	80120a6 <HAL_TIM_PWM_ConfigChannel+0x17a>
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	2238      	movs	r2, #56	; 0x38
 8011f4a:	2101      	movs	r1, #1
 8011f4c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	2239      	movs	r2, #57	; 0x39
 8011f52:	2102      	movs	r1, #2
 8011f54:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2b0c      	cmp	r3, #12
 8011f5a:	d100      	bne.n	8011f5e <HAL_TIM_PWM_ConfigChannel+0x32>
 8011f5c:	e076      	b.n	801204c <HAL_TIM_PWM_ConfigChannel+0x120>
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2b0c      	cmp	r3, #12
 8011f62:	d900      	bls.n	8011f66 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8011f64:	e095      	b.n	8012092 <HAL_TIM_PWM_ConfigChannel+0x166>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2b08      	cmp	r3, #8
 8011f6a:	d04e      	beq.n	801200a <HAL_TIM_PWM_ConfigChannel+0xde>
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2b08      	cmp	r3, #8
 8011f70:	d900      	bls.n	8011f74 <HAL_TIM_PWM_ConfigChannel+0x48>
 8011f72:	e08e      	b.n	8012092 <HAL_TIM_PWM_ConfigChannel+0x166>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d003      	beq.n	8011f82 <HAL_TIM_PWM_ConfigChannel+0x56>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2b04      	cmp	r3, #4
 8011f7e:	d021      	beq.n	8011fc4 <HAL_TIM_PWM_ConfigChannel+0x98>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8011f80:	e087      	b.n	8012092 <HAL_TIM_PWM_ConfigChannel+0x166>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	68ba      	ldr	r2, [r7, #8]
 8011f88:	0011      	movs	r1, r2
 8011f8a:	0018      	movs	r0, r3
 8011f8c:	f000 f910 	bl	80121b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	699a      	ldr	r2, [r3, #24]
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	2108      	movs	r1, #8
 8011f9c:	430a      	orrs	r2, r1
 8011f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	699a      	ldr	r2, [r3, #24]
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	2104      	movs	r1, #4
 8011fac:	438a      	bics	r2, r1
 8011fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	6999      	ldr	r1, [r3, #24]
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	68da      	ldr	r2, [r3, #12]
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	430a      	orrs	r2, r1
 8011fc0:	619a      	str	r2, [r3, #24]
      break;
 8011fc2:	e067      	b.n	8012094 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	68ba      	ldr	r2, [r7, #8]
 8011fca:	0011      	movs	r1, r2
 8011fcc:	0018      	movs	r0, r3
 8011fce:	f000 f92b 	bl	8012228 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	699a      	ldr	r2, [r3, #24]
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2180      	movs	r1, #128	; 0x80
 8011fde:	0109      	lsls	r1, r1, #4
 8011fe0:	430a      	orrs	r2, r1
 8011fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	699a      	ldr	r2, [r3, #24]
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	4930      	ldr	r1, [pc, #192]	; (80120b0 <HAL_TIM_PWM_ConfigChannel+0x184>)
 8011ff0:	400a      	ands	r2, r1
 8011ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	6999      	ldr	r1, [r3, #24]
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	68db      	ldr	r3, [r3, #12]
 8011ffe:	021a      	lsls	r2, r3, #8
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	430a      	orrs	r2, r1
 8012006:	619a      	str	r2, [r3, #24]
      break;
 8012008:	e044      	b.n	8012094 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	68ba      	ldr	r2, [r7, #8]
 8012010:	0011      	movs	r1, r2
 8012012:	0018      	movs	r0, r3
 8012014:	f000 f94a 	bl	80122ac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	69da      	ldr	r2, [r3, #28]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	2108      	movs	r1, #8
 8012024:	430a      	orrs	r2, r1
 8012026:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	69da      	ldr	r2, [r3, #28]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	2104      	movs	r1, #4
 8012034:	438a      	bics	r2, r1
 8012036:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	69d9      	ldr	r1, [r3, #28]
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	68da      	ldr	r2, [r3, #12]
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	430a      	orrs	r2, r1
 8012048:	61da      	str	r2, [r3, #28]
      break;
 801204a:	e023      	b.n	8012094 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	68ba      	ldr	r2, [r7, #8]
 8012052:	0011      	movs	r1, r2
 8012054:	0018      	movs	r0, r3
 8012056:	f000 f969 	bl	801232c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	69da      	ldr	r2, [r3, #28]
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	2180      	movs	r1, #128	; 0x80
 8012066:	0109      	lsls	r1, r1, #4
 8012068:	430a      	orrs	r2, r1
 801206a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	69da      	ldr	r2, [r3, #28]
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	490e      	ldr	r1, [pc, #56]	; (80120b0 <HAL_TIM_PWM_ConfigChannel+0x184>)
 8012078:	400a      	ands	r2, r1
 801207a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	69d9      	ldr	r1, [r3, #28]
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	68db      	ldr	r3, [r3, #12]
 8012086:	021a      	lsls	r2, r3, #8
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	430a      	orrs	r2, r1
 801208e:	61da      	str	r2, [r3, #28]
      break;
 8012090:	e000      	b.n	8012094 <HAL_TIM_PWM_ConfigChannel+0x168>
      break;
 8012092:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2239      	movs	r2, #57	; 0x39
 8012098:	2101      	movs	r1, #1
 801209a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	2238      	movs	r2, #56	; 0x38
 80120a0:	2100      	movs	r1, #0
 80120a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80120a4:	2300      	movs	r3, #0
}
 80120a6:	0018      	movs	r0, r3
 80120a8:	46bd      	mov	sp, r7
 80120aa:	b004      	add	sp, #16
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	46c0      	nop			; (mov r8, r8)
 80120b0:	fffffbff 	.word	0xfffffbff

080120b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80120bc:	46c0      	nop			; (mov r8, r8)
 80120be:	46bd      	mov	sp, r7
 80120c0:	b002      	add	sp, #8
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80120cc:	46c0      	nop			; (mov r8, r8)
 80120ce:	46bd      	mov	sp, r7
 80120d0:	b002      	add	sp, #8
 80120d2:	bd80      	pop	{r7, pc}

080120d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80120dc:	46c0      	nop			; (mov r8, r8)
 80120de:	46bd      	mov	sp, r7
 80120e0:	b002      	add	sp, #8
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80120ec:	46c0      	nop			; (mov r8, r8)
 80120ee:	46bd      	mov	sp, r7
 80120f0:	b002      	add	sp, #8
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b084      	sub	sp, #16
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	2380      	movs	r3, #128	; 0x80
 8012108:	05db      	lsls	r3, r3, #23
 801210a:	429a      	cmp	r2, r3
 801210c:	d00b      	beq.n	8012126 <TIM_Base_SetConfig+0x32>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	4a23      	ldr	r2, [pc, #140]	; (80121a0 <TIM_Base_SetConfig+0xac>)
 8012112:	4293      	cmp	r3, r2
 8012114:	d007      	beq.n	8012126 <TIM_Base_SetConfig+0x32>
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	4a22      	ldr	r2, [pc, #136]	; (80121a4 <TIM_Base_SetConfig+0xb0>)
 801211a:	4293      	cmp	r3, r2
 801211c:	d003      	beq.n	8012126 <TIM_Base_SetConfig+0x32>
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	4a21      	ldr	r2, [pc, #132]	; (80121a8 <TIM_Base_SetConfig+0xb4>)
 8012122:	4293      	cmp	r3, r2
 8012124:	d108      	bne.n	8012138 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2270      	movs	r2, #112	; 0x70
 801212a:	4393      	bics	r3, r2
 801212c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	68fa      	ldr	r2, [r7, #12]
 8012134:	4313      	orrs	r3, r2
 8012136:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012138:	687a      	ldr	r2, [r7, #4]
 801213a:	2380      	movs	r3, #128	; 0x80
 801213c:	05db      	lsls	r3, r3, #23
 801213e:	429a      	cmp	r2, r3
 8012140:	d00b      	beq.n	801215a <TIM_Base_SetConfig+0x66>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	4a16      	ldr	r2, [pc, #88]	; (80121a0 <TIM_Base_SetConfig+0xac>)
 8012146:	4293      	cmp	r3, r2
 8012148:	d007      	beq.n	801215a <TIM_Base_SetConfig+0x66>
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	4a15      	ldr	r2, [pc, #84]	; (80121a4 <TIM_Base_SetConfig+0xb0>)
 801214e:	4293      	cmp	r3, r2
 8012150:	d003      	beq.n	801215a <TIM_Base_SetConfig+0x66>
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	4a14      	ldr	r2, [pc, #80]	; (80121a8 <TIM_Base_SetConfig+0xb4>)
 8012156:	4293      	cmp	r3, r2
 8012158:	d108      	bne.n	801216c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	4a13      	ldr	r2, [pc, #76]	; (80121ac <TIM_Base_SetConfig+0xb8>)
 801215e:	4013      	ands	r3, r2
 8012160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	68db      	ldr	r3, [r3, #12]
 8012166:	68fa      	ldr	r2, [r7, #12]
 8012168:	4313      	orrs	r3, r2
 801216a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	2280      	movs	r2, #128	; 0x80
 8012170:	4393      	bics	r3, r2
 8012172:	001a      	movs	r2, r3
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	691b      	ldr	r3, [r3, #16]
 8012178:	4313      	orrs	r3, r2
 801217a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	68fa      	ldr	r2, [r7, #12]
 8012180:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	689a      	ldr	r2, [r3, #8]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	681a      	ldr	r2, [r3, #0]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2201      	movs	r2, #1
 8012196:	615a      	str	r2, [r3, #20]
}
 8012198:	46c0      	nop			; (mov r8, r8)
 801219a:	46bd      	mov	sp, r7
 801219c:	b004      	add	sp, #16
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	40000400 	.word	0x40000400
 80121a4:	40010800 	.word	0x40010800
 80121a8:	40011400 	.word	0x40011400
 80121ac:	fffffcff 	.word	0xfffffcff

080121b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b086      	sub	sp, #24
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6a1b      	ldr	r3, [r3, #32]
 80121be:	2201      	movs	r2, #1
 80121c0:	4393      	bics	r3, r2
 80121c2:	001a      	movs	r2, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6a1b      	ldr	r3, [r3, #32]
 80121cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	699b      	ldr	r3, [r3, #24]
 80121d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2270      	movs	r2, #112	; 0x70
 80121de:	4393      	bics	r3, r2
 80121e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	2203      	movs	r2, #3
 80121e6:	4393      	bics	r3, r2
 80121e8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	68fa      	ldr	r2, [r7, #12]
 80121f0:	4313      	orrs	r3, r2
 80121f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	2202      	movs	r2, #2
 80121f8:	4393      	bics	r3, r2
 80121fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	689b      	ldr	r3, [r3, #8]
 8012200:	697a      	ldr	r2, [r7, #20]
 8012202:	4313      	orrs	r3, r2
 8012204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	693a      	ldr	r2, [r7, #16]
 801220a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	68fa      	ldr	r2, [r7, #12]
 8012210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	685a      	ldr	r2, [r3, #4]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	697a      	ldr	r2, [r7, #20]
 801221e:	621a      	str	r2, [r3, #32]
}
 8012220:	46c0      	nop			; (mov r8, r8)
 8012222:	46bd      	mov	sp, r7
 8012224:	b006      	add	sp, #24
 8012226:	bd80      	pop	{r7, pc}

08012228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b086      	sub	sp, #24
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6a1b      	ldr	r3, [r3, #32]
 8012236:	2210      	movs	r2, #16
 8012238:	4393      	bics	r3, r2
 801223a:	001a      	movs	r2, r3
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	6a1b      	ldr	r3, [r3, #32]
 8012244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	685b      	ldr	r3, [r3, #4]
 801224a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	699b      	ldr	r3, [r3, #24]
 8012250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	4a13      	ldr	r2, [pc, #76]	; (80122a4 <TIM_OC2_SetConfig+0x7c>)
 8012256:	4013      	ands	r3, r2
 8012258:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	4a12      	ldr	r2, [pc, #72]	; (80122a8 <TIM_OC2_SetConfig+0x80>)
 801225e:	4013      	ands	r3, r2
 8012260:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	021b      	lsls	r3, r3, #8
 8012268:	68fa      	ldr	r2, [r7, #12]
 801226a:	4313      	orrs	r3, r2
 801226c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	2220      	movs	r2, #32
 8012272:	4393      	bics	r3, r2
 8012274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	689b      	ldr	r3, [r3, #8]
 801227a:	011b      	lsls	r3, r3, #4
 801227c:	697a      	ldr	r2, [r7, #20]
 801227e:	4313      	orrs	r3, r2
 8012280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	693a      	ldr	r2, [r7, #16]
 8012286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	68fa      	ldr	r2, [r7, #12]
 801228c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	685a      	ldr	r2, [r3, #4]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	697a      	ldr	r2, [r7, #20]
 801229a:	621a      	str	r2, [r3, #32]
}
 801229c:	46c0      	nop			; (mov r8, r8)
 801229e:	46bd      	mov	sp, r7
 80122a0:	b006      	add	sp, #24
 80122a2:	bd80      	pop	{r7, pc}
 80122a4:	ffff8fff 	.word	0xffff8fff
 80122a8:	fffffcff 	.word	0xfffffcff

080122ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b086      	sub	sp, #24
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
 80122b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6a1b      	ldr	r3, [r3, #32]
 80122ba:	4a1a      	ldr	r2, [pc, #104]	; (8012324 <TIM_OC3_SetConfig+0x78>)
 80122bc:	401a      	ands	r2, r3
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	6a1b      	ldr	r3, [r3, #32]
 80122c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	69db      	ldr	r3, [r3, #28]
 80122d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2270      	movs	r2, #112	; 0x70
 80122d8:	4393      	bics	r3, r2
 80122da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2203      	movs	r2, #3
 80122e0:	4393      	bics	r3, r2
 80122e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	68fa      	ldr	r2, [r7, #12]
 80122ea:	4313      	orrs	r3, r2
 80122ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	4a0d      	ldr	r2, [pc, #52]	; (8012328 <TIM_OC3_SetConfig+0x7c>)
 80122f2:	4013      	ands	r3, r2
 80122f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	689b      	ldr	r3, [r3, #8]
 80122fa:	021b      	lsls	r3, r3, #8
 80122fc:	697a      	ldr	r2, [r7, #20]
 80122fe:	4313      	orrs	r3, r2
 8012300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	693a      	ldr	r2, [r7, #16]
 8012306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	68fa      	ldr	r2, [r7, #12]
 801230c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	685a      	ldr	r2, [r3, #4]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	697a      	ldr	r2, [r7, #20]
 801231a:	621a      	str	r2, [r3, #32]
}
 801231c:	46c0      	nop			; (mov r8, r8)
 801231e:	46bd      	mov	sp, r7
 8012320:	b006      	add	sp, #24
 8012322:	bd80      	pop	{r7, pc}
 8012324:	fffffeff 	.word	0xfffffeff
 8012328:	fffffdff 	.word	0xfffffdff

0801232c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b086      	sub	sp, #24
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6a1b      	ldr	r3, [r3, #32]
 801233a:	4a1b      	ldr	r2, [pc, #108]	; (80123a8 <TIM_OC4_SetConfig+0x7c>)
 801233c:	401a      	ands	r2, r3
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6a1b      	ldr	r3, [r3, #32]
 8012346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	69db      	ldr	r3, [r3, #28]
 8012352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	4a15      	ldr	r2, [pc, #84]	; (80123ac <TIM_OC4_SetConfig+0x80>)
 8012358:	4013      	ands	r3, r2
 801235a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	4a14      	ldr	r2, [pc, #80]	; (80123b0 <TIM_OC4_SetConfig+0x84>)
 8012360:	4013      	ands	r3, r2
 8012362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	021b      	lsls	r3, r3, #8
 801236a:	68fa      	ldr	r2, [r7, #12]
 801236c:	4313      	orrs	r3, r2
 801236e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	4a10      	ldr	r2, [pc, #64]	; (80123b4 <TIM_OC4_SetConfig+0x88>)
 8012374:	4013      	ands	r3, r2
 8012376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	689b      	ldr	r3, [r3, #8]
 801237c:	031b      	lsls	r3, r3, #12
 801237e:	697a      	ldr	r2, [r7, #20]
 8012380:	4313      	orrs	r3, r2
 8012382:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	693a      	ldr	r2, [r7, #16]
 8012388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	68fa      	ldr	r2, [r7, #12]
 801238e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	685a      	ldr	r2, [r3, #4]
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	697a      	ldr	r2, [r7, #20]
 801239c:	621a      	str	r2, [r3, #32]
}
 801239e:	46c0      	nop			; (mov r8, r8)
 80123a0:	46bd      	mov	sp, r7
 80123a2:	b006      	add	sp, #24
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	46c0      	nop			; (mov r8, r8)
 80123a8:	ffffefff 	.word	0xffffefff
 80123ac:	ffff8fff 	.word	0xffff8fff
 80123b0:	fffffcff 	.word	0xfffffcff
 80123b4:	ffffdfff 	.word	0xffffdfff

080123b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b086      	sub	sp, #24
 80123bc:	af00      	add	r7, sp, #0
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	221f      	movs	r2, #31
 80123c8:	4013      	ands	r3, r2
 80123ca:	2201      	movs	r2, #1
 80123cc:	409a      	lsls	r2, r3
 80123ce:	0013      	movs	r3, r2
 80123d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	6a1b      	ldr	r3, [r3, #32]
 80123d6:	697a      	ldr	r2, [r7, #20]
 80123d8:	43d2      	mvns	r2, r2
 80123da:	401a      	ands	r2, r3
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	6a1a      	ldr	r2, [r3, #32]
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	211f      	movs	r1, #31
 80123e8:	400b      	ands	r3, r1
 80123ea:	6879      	ldr	r1, [r7, #4]
 80123ec:	4099      	lsls	r1, r3
 80123ee:	000b      	movs	r3, r1
 80123f0:	431a      	orrs	r2, r3
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	621a      	str	r2, [r3, #32]
}
 80123f6:	46c0      	nop			; (mov r8, r8)
 80123f8:	46bd      	mov	sp, r7
 80123fa:	b006      	add	sp, #24
 80123fc:	bd80      	pop	{r7, pc}

080123fe <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80123fe:	b580      	push	{r7, lr}
 8012400:	b084      	sub	sp, #16
 8012402:	af00      	add	r7, sp, #0
 8012404:	6078      	str	r0, [r7, #4]
 8012406:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2238      	movs	r2, #56	; 0x38
 801240c:	5c9b      	ldrb	r3, [r3, r2]
 801240e:	2b01      	cmp	r3, #1
 8012410:	d101      	bne.n	8012416 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012412:	2302      	movs	r3, #2
 8012414:	e032      	b.n	801247c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2238      	movs	r2, #56	; 0x38
 801241a:	2101      	movs	r1, #1
 801241c:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2239      	movs	r2, #57	; 0x39
 8012422:	2102      	movs	r1, #2
 8012424:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	689b      	ldr	r3, [r3, #8]
 8012434:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	2270      	movs	r2, #112	; 0x70
 801243a:	4393      	bics	r3, r2
 801243c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	68fa      	ldr	r2, [r7, #12]
 8012444:	4313      	orrs	r3, r2
 8012446:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	2280      	movs	r2, #128	; 0x80
 801244c:	4393      	bics	r3, r2
 801244e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	685b      	ldr	r3, [r3, #4]
 8012454:	68ba      	ldr	r2, [r7, #8]
 8012456:	4313      	orrs	r3, r2
 8012458:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	68fa      	ldr	r2, [r7, #12]
 8012460:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	68ba      	ldr	r2, [r7, #8]
 8012468:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2239      	movs	r2, #57	; 0x39
 801246e:	2101      	movs	r1, #1
 8012470:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2238      	movs	r2, #56	; 0x38
 8012476:	2100      	movs	r1, #0
 8012478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801247a:	2300      	movs	r3, #0
}
 801247c:	0018      	movs	r0, r3
 801247e:	46bd      	mov	sp, r7
 8012480:	b004      	add	sp, #16
 8012482:	bd80      	pop	{r7, pc}

08012484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d101      	bne.n	8012496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012492:	2301      	movs	r3, #1
 8012494:	e044      	b.n	8012520 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801249a:	2b00      	cmp	r3, #0
 801249c:	d107      	bne.n	80124ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2270      	movs	r2, #112	; 0x70
 80124a2:	2100      	movs	r1, #0
 80124a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	0018      	movs	r0, r3
 80124aa:	f7f4 f88f 	bl	80065cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	2224      	movs	r2, #36	; 0x24
 80124b2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	681a      	ldr	r2, [r3, #0]
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	2101      	movs	r1, #1
 80124c0:	438a      	bics	r2, r1
 80124c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	0018      	movs	r0, r3
 80124c8:	f000 fac4 	bl	8012a54 <UART_SetConfig>
 80124cc:	0003      	movs	r3, r0
 80124ce:	2b01      	cmp	r3, #1
 80124d0:	d101      	bne.n	80124d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80124d2:	2301      	movs	r3, #1
 80124d4:	e024      	b.n	8012520 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d003      	beq.n	80124e6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	0018      	movs	r0, r3
 80124e2:	f000 fded 	bl	80130c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	685a      	ldr	r2, [r3, #4]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	490d      	ldr	r1, [pc, #52]	; (8012528 <HAL_UART_Init+0xa4>)
 80124f2:	400a      	ands	r2, r1
 80124f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	689a      	ldr	r2, [r3, #8]
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	212a      	movs	r1, #42	; 0x2a
 8012502:	438a      	bics	r2, r1
 8012504:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	2101      	movs	r1, #1
 8012512:	430a      	orrs	r2, r1
 8012514:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	0018      	movs	r0, r3
 801251a:	f000 fe85 	bl	8013228 <UART_CheckIdleState>
 801251e:	0003      	movs	r3, r0
}
 8012520:	0018      	movs	r0, r3
 8012522:	46bd      	mov	sp, r7
 8012524:	b002      	add	sp, #8
 8012526:	bd80      	pop	{r7, pc}
 8012528:	ffffb7ff 	.word	0xffffb7ff

0801252c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b08a      	sub	sp, #40	; 0x28
 8012530:	af02      	add	r7, sp, #8
 8012532:	60f8      	str	r0, [r7, #12]
 8012534:	60b9      	str	r1, [r7, #8]
 8012536:	603b      	str	r3, [r7, #0]
 8012538:	1dbb      	adds	r3, r7, #6
 801253a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012540:	2b20      	cmp	r3, #32
 8012542:	d000      	beq.n	8012546 <HAL_UART_Transmit+0x1a>
 8012544:	e094      	b.n	8012670 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8012546:	68bb      	ldr	r3, [r7, #8]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d003      	beq.n	8012554 <HAL_UART_Transmit+0x28>
 801254c:	1dbb      	adds	r3, r7, #6
 801254e:	881b      	ldrh	r3, [r3, #0]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d101      	bne.n	8012558 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8012554:	2301      	movs	r3, #1
 8012556:	e08c      	b.n	8012672 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	689a      	ldr	r2, [r3, #8]
 801255c:	2380      	movs	r3, #128	; 0x80
 801255e:	015b      	lsls	r3, r3, #5
 8012560:	429a      	cmp	r2, r3
 8012562:	d109      	bne.n	8012578 <HAL_UART_Transmit+0x4c>
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	691b      	ldr	r3, [r3, #16]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d105      	bne.n	8012578 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	2201      	movs	r2, #1
 8012570:	4013      	ands	r3, r2
 8012572:	d001      	beq.n	8012578 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8012574:	2301      	movs	r3, #1
 8012576:	e07c      	b.n	8012672 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	2270      	movs	r2, #112	; 0x70
 801257c:	5c9b      	ldrb	r3, [r3, r2]
 801257e:	2b01      	cmp	r3, #1
 8012580:	d101      	bne.n	8012586 <HAL_UART_Transmit+0x5a>
 8012582:	2302      	movs	r3, #2
 8012584:	e075      	b.n	8012672 <HAL_UART_Transmit+0x146>
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	2270      	movs	r2, #112	; 0x70
 801258a:	2101      	movs	r1, #1
 801258c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2200      	movs	r2, #0
 8012592:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	2221      	movs	r2, #33	; 0x21
 8012598:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 801259a:	f7fd f975 	bl	800f888 <HAL_GetTick>
 801259e:	0003      	movs	r3, r0
 80125a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	1dba      	adds	r2, r7, #6
 80125a6:	2150      	movs	r1, #80	; 0x50
 80125a8:	8812      	ldrh	r2, [r2, #0]
 80125aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	1dba      	adds	r2, r7, #6
 80125b0:	2152      	movs	r1, #82	; 0x52
 80125b2:	8812      	ldrh	r2, [r2, #0]
 80125b4:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	689a      	ldr	r2, [r3, #8]
 80125ba:	2380      	movs	r3, #128	; 0x80
 80125bc:	015b      	lsls	r3, r3, #5
 80125be:	429a      	cmp	r2, r3
 80125c0:	d108      	bne.n	80125d4 <HAL_UART_Transmit+0xa8>
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	691b      	ldr	r3, [r3, #16]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d104      	bne.n	80125d4 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80125ca:	2300      	movs	r3, #0
 80125cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	61bb      	str	r3, [r7, #24]
 80125d2:	e003      	b.n	80125dc <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80125d8:	2300      	movs	r3, #0
 80125da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80125dc:	e02c      	b.n	8012638 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80125de:	697a      	ldr	r2, [r7, #20]
 80125e0:	68f8      	ldr	r0, [r7, #12]
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	9300      	str	r3, [sp, #0]
 80125e6:	0013      	movs	r3, r2
 80125e8:	2200      	movs	r2, #0
 80125ea:	2180      	movs	r1, #128	; 0x80
 80125ec:	f000 fe60 	bl	80132b0 <UART_WaitOnFlagUntilTimeout>
 80125f0:	1e03      	subs	r3, r0, #0
 80125f2:	d001      	beq.n	80125f8 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80125f4:	2303      	movs	r3, #3
 80125f6:	e03c      	b.n	8012672 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 80125f8:	69fb      	ldr	r3, [r7, #28]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d10b      	bne.n	8012616 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80125fe:	69bb      	ldr	r3, [r7, #24]
 8012600:	881b      	ldrh	r3, [r3, #0]
 8012602:	001a      	movs	r2, r3
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	05d2      	lsls	r2, r2, #23
 801260a:	0dd2      	lsrs	r2, r2, #23
 801260c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	3302      	adds	r3, #2
 8012612:	61bb      	str	r3, [r7, #24]
 8012614:	e007      	b.n	8012626 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012616:	69fb      	ldr	r3, [r7, #28]
 8012618:	781a      	ldrb	r2, [r3, #0]
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012620:	69fb      	ldr	r3, [r7, #28]
 8012622:	3301      	adds	r3, #1
 8012624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	2252      	movs	r2, #82	; 0x52
 801262a:	5a9b      	ldrh	r3, [r3, r2]
 801262c:	b29b      	uxth	r3, r3
 801262e:	3b01      	subs	r3, #1
 8012630:	b299      	uxth	r1, r3
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	2252      	movs	r2, #82	; 0x52
 8012636:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2252      	movs	r2, #82	; 0x52
 801263c:	5a9b      	ldrh	r3, [r3, r2]
 801263e:	b29b      	uxth	r3, r3
 8012640:	2b00      	cmp	r3, #0
 8012642:	d1cc      	bne.n	80125de <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012644:	697a      	ldr	r2, [r7, #20]
 8012646:	68f8      	ldr	r0, [r7, #12]
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	9300      	str	r3, [sp, #0]
 801264c:	0013      	movs	r3, r2
 801264e:	2200      	movs	r2, #0
 8012650:	2140      	movs	r1, #64	; 0x40
 8012652:	f000 fe2d 	bl	80132b0 <UART_WaitOnFlagUntilTimeout>
 8012656:	1e03      	subs	r3, r0, #0
 8012658:	d001      	beq.n	801265e <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 801265a:	2303      	movs	r3, #3
 801265c:	e009      	b.n	8012672 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	2220      	movs	r2, #32
 8012662:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2270      	movs	r2, #112	; 0x70
 8012668:	2100      	movs	r1, #0
 801266a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801266c:	2300      	movs	r3, #0
 801266e:	e000      	b.n	8012672 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8012670:	2302      	movs	r3, #2
  }
}
 8012672:	0018      	movs	r0, r3
 8012674:	46bd      	mov	sp, r7
 8012676:	b008      	add	sp, #32
 8012678:	bd80      	pop	{r7, pc}
	...

0801267c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b084      	sub	sp, #16
 8012680:	af00      	add	r7, sp, #0
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	60b9      	str	r1, [r7, #8]
 8012686:	1dbb      	adds	r3, r7, #6
 8012688:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801268e:	2b20      	cmp	r3, #32
 8012690:	d000      	beq.n	8012694 <HAL_UART_Receive_IT+0x18>
 8012692:	e09f      	b.n	80127d4 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d003      	beq.n	80126a2 <HAL_UART_Receive_IT+0x26>
 801269a:	1dbb      	adds	r3, r7, #6
 801269c:	881b      	ldrh	r3, [r3, #0]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d101      	bne.n	80126a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80126a2:	2301      	movs	r3, #1
 80126a4:	e097      	b.n	80127d6 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	689a      	ldr	r2, [r3, #8]
 80126aa:	2380      	movs	r3, #128	; 0x80
 80126ac:	015b      	lsls	r3, r3, #5
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d109      	bne.n	80126c6 <HAL_UART_Receive_IT+0x4a>
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	691b      	ldr	r3, [r3, #16]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d105      	bne.n	80126c6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	2201      	movs	r2, #1
 80126be:	4013      	ands	r3, r2
 80126c0:	d001      	beq.n	80126c6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80126c2:	2301      	movs	r3, #1
 80126c4:	e087      	b.n	80127d6 <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	2270      	movs	r2, #112	; 0x70
 80126ca:	5c9b      	ldrb	r3, [r3, r2]
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d101      	bne.n	80126d4 <HAL_UART_Receive_IT+0x58>
 80126d0:	2302      	movs	r3, #2
 80126d2:	e080      	b.n	80127d6 <HAL_UART_Receive_IT+0x15a>
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	2270      	movs	r2, #112	; 0x70
 80126d8:	2101      	movs	r1, #1
 80126da:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	68ba      	ldr	r2, [r7, #8]
 80126e0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	1dba      	adds	r2, r7, #6
 80126e6:	2158      	movs	r1, #88	; 0x58
 80126e8:	8812      	ldrh	r2, [r2, #0]
 80126ea:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	1dba      	adds	r2, r7, #6
 80126f0:	215a      	movs	r1, #90	; 0x5a
 80126f2:	8812      	ldrh	r2, [r2, #0]
 80126f4:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	2200      	movs	r2, #0
 80126fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	689a      	ldr	r2, [r3, #8]
 8012700:	2380      	movs	r3, #128	; 0x80
 8012702:	015b      	lsls	r3, r3, #5
 8012704:	429a      	cmp	r2, r3
 8012706:	d10d      	bne.n	8012724 <HAL_UART_Receive_IT+0xa8>
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	691b      	ldr	r3, [r3, #16]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d104      	bne.n	801271a <HAL_UART_Receive_IT+0x9e>
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	225c      	movs	r2, #92	; 0x5c
 8012714:	4932      	ldr	r1, [pc, #200]	; (80127e0 <HAL_UART_Receive_IT+0x164>)
 8012716:	5299      	strh	r1, [r3, r2]
 8012718:	e02e      	b.n	8012778 <HAL_UART_Receive_IT+0xfc>
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	225c      	movs	r2, #92	; 0x5c
 801271e:	21ff      	movs	r1, #255	; 0xff
 8012720:	5299      	strh	r1, [r3, r2]
 8012722:	e029      	b.n	8012778 <HAL_UART_Receive_IT+0xfc>
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	689b      	ldr	r3, [r3, #8]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d10d      	bne.n	8012748 <HAL_UART_Receive_IT+0xcc>
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	691b      	ldr	r3, [r3, #16]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d104      	bne.n	801273e <HAL_UART_Receive_IT+0xc2>
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	225c      	movs	r2, #92	; 0x5c
 8012738:	21ff      	movs	r1, #255	; 0xff
 801273a:	5299      	strh	r1, [r3, r2]
 801273c:	e01c      	b.n	8012778 <HAL_UART_Receive_IT+0xfc>
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	225c      	movs	r2, #92	; 0x5c
 8012742:	217f      	movs	r1, #127	; 0x7f
 8012744:	5299      	strh	r1, [r3, r2]
 8012746:	e017      	b.n	8012778 <HAL_UART_Receive_IT+0xfc>
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	689a      	ldr	r2, [r3, #8]
 801274c:	2380      	movs	r3, #128	; 0x80
 801274e:	055b      	lsls	r3, r3, #21
 8012750:	429a      	cmp	r2, r3
 8012752:	d10d      	bne.n	8012770 <HAL_UART_Receive_IT+0xf4>
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	691b      	ldr	r3, [r3, #16]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d104      	bne.n	8012766 <HAL_UART_Receive_IT+0xea>
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	225c      	movs	r2, #92	; 0x5c
 8012760:	217f      	movs	r1, #127	; 0x7f
 8012762:	5299      	strh	r1, [r3, r2]
 8012764:	e008      	b.n	8012778 <HAL_UART_Receive_IT+0xfc>
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	225c      	movs	r2, #92	; 0x5c
 801276a:	213f      	movs	r1, #63	; 0x3f
 801276c:	5299      	strh	r1, [r3, r2]
 801276e:	e003      	b.n	8012778 <HAL_UART_Receive_IT+0xfc>
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	225c      	movs	r2, #92	; 0x5c
 8012774:	2100      	movs	r1, #0
 8012776:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2200      	movs	r2, #0
 801277c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2222      	movs	r2, #34	; 0x22
 8012782:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	689a      	ldr	r2, [r3, #8]
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	2101      	movs	r1, #1
 8012790:	430a      	orrs	r2, r1
 8012792:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	689a      	ldr	r2, [r3, #8]
 8012798:	2380      	movs	r3, #128	; 0x80
 801279a:	015b      	lsls	r3, r3, #5
 801279c:	429a      	cmp	r2, r3
 801279e:	d107      	bne.n	80127b0 <HAL_UART_Receive_IT+0x134>
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	691b      	ldr	r3, [r3, #16]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d103      	bne.n	80127b0 <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	4a0e      	ldr	r2, [pc, #56]	; (80127e4 <HAL_UART_Receive_IT+0x168>)
 80127ac:	661a      	str	r2, [r3, #96]	; 0x60
 80127ae:	e002      	b.n	80127b6 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	4a0d      	ldr	r2, [pc, #52]	; (80127e8 <HAL_UART_Receive_IT+0x16c>)
 80127b4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	2270      	movs	r2, #112	; 0x70
 80127ba:	2100      	movs	r1, #0
 80127bc:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	681a      	ldr	r2, [r3, #0]
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	2190      	movs	r1, #144	; 0x90
 80127ca:	0049      	lsls	r1, r1, #1
 80127cc:	430a      	orrs	r2, r1
 80127ce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80127d0:	2300      	movs	r3, #0
 80127d2:	e000      	b.n	80127d6 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 80127d4:	2302      	movs	r3, #2
  }
}
 80127d6:	0018      	movs	r0, r3
 80127d8:	46bd      	mov	sp, r7
 80127da:	b004      	add	sp, #16
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	46c0      	nop			; (mov r8, r8)
 80127e0:	000001ff 	.word	0x000001ff
 80127e4:	080134a1 	.word	0x080134a1
 80127e8:	080133e9 	.word	0x080133e9

080127ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b088      	sub	sp, #32
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	69db      	ldr	r3, [r3, #28]
 80127fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	689b      	ldr	r3, [r3, #8]
 801280a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 801280c:	69fb      	ldr	r3, [r7, #28]
 801280e:	220f      	movs	r2, #15
 8012810:	4013      	ands	r3, r2
 8012812:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d112      	bne.n	8012840 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	2220      	movs	r2, #32
 801281e:	4013      	ands	r3, r2
 8012820:	d00e      	beq.n	8012840 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012822:	69bb      	ldr	r3, [r7, #24]
 8012824:	2220      	movs	r2, #32
 8012826:	4013      	ands	r3, r2
 8012828:	d00a      	beq.n	8012840 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801282e:	2b00      	cmp	r3, #0
 8012830:	d100      	bne.n	8012834 <HAL_UART_IRQHandler+0x48>
 8012832:	e0f5      	b.n	8012a20 <HAL_UART_IRQHandler+0x234>
      {
        huart->RxISR(huart);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012838:	687a      	ldr	r2, [r7, #4]
 801283a:	0010      	movs	r0, r2
 801283c:	4798      	blx	r3
      }
      return;
 801283e:	e0ef      	b.n	8012a20 <HAL_UART_IRQHandler+0x234>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012840:	693b      	ldr	r3, [r7, #16]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d100      	bne.n	8012848 <HAL_UART_IRQHandler+0x5c>
 8012846:	e0b8      	b.n	80129ba <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8012848:	697b      	ldr	r3, [r7, #20]
 801284a:	2201      	movs	r2, #1
 801284c:	4013      	ands	r3, r2
 801284e:	d105      	bne.n	801285c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8012850:	69ba      	ldr	r2, [r7, #24]
 8012852:	2390      	movs	r3, #144	; 0x90
 8012854:	005b      	lsls	r3, r3, #1
 8012856:	4013      	ands	r3, r2
 8012858:	d100      	bne.n	801285c <HAL_UART_IRQHandler+0x70>
 801285a:	e0ae      	b.n	80129ba <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	2201      	movs	r2, #1
 8012860:	4013      	ands	r3, r2
 8012862:	d00e      	beq.n	8012882 <HAL_UART_IRQHandler+0x96>
 8012864:	69ba      	ldr	r2, [r7, #24]
 8012866:	2380      	movs	r3, #128	; 0x80
 8012868:	005b      	lsls	r3, r3, #1
 801286a:	4013      	ands	r3, r2
 801286c:	d009      	beq.n	8012882 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	2201      	movs	r2, #1
 8012874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801287a:	2201      	movs	r2, #1
 801287c:	431a      	orrs	r2, r3
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012882:	69fb      	ldr	r3, [r7, #28]
 8012884:	2202      	movs	r2, #2
 8012886:	4013      	ands	r3, r2
 8012888:	d00d      	beq.n	80128a6 <HAL_UART_IRQHandler+0xba>
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	2201      	movs	r2, #1
 801288e:	4013      	ands	r3, r2
 8012890:	d009      	beq.n	80128a6 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2202      	movs	r2, #2
 8012898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801289e:	2204      	movs	r2, #4
 80128a0:	431a      	orrs	r2, r3
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80128a6:	69fb      	ldr	r3, [r7, #28]
 80128a8:	2204      	movs	r2, #4
 80128aa:	4013      	ands	r3, r2
 80128ac:	d00d      	beq.n	80128ca <HAL_UART_IRQHandler+0xde>
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	2201      	movs	r2, #1
 80128b2:	4013      	ands	r3, r2
 80128b4:	d009      	beq.n	80128ca <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	2204      	movs	r2, #4
 80128bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128c2:	2202      	movs	r2, #2
 80128c4:	431a      	orrs	r2, r3
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80128ca:	69fb      	ldr	r3, [r7, #28]
 80128cc:	2208      	movs	r2, #8
 80128ce:	4013      	ands	r3, r2
 80128d0:	d011      	beq.n	80128f6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80128d2:	69bb      	ldr	r3, [r7, #24]
 80128d4:	2220      	movs	r2, #32
 80128d6:	4013      	ands	r3, r2
 80128d8:	d103      	bne.n	80128e2 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	2201      	movs	r2, #1
 80128de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80128e0:	d009      	beq.n	80128f6 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	2208      	movs	r2, #8
 80128e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128ee:	2208      	movs	r2, #8
 80128f0:	431a      	orrs	r2, r3
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d100      	bne.n	8012900 <HAL_UART_IRQHandler+0x114>
 80128fe:	e091      	b.n	8012a24 <HAL_UART_IRQHandler+0x238>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	2220      	movs	r2, #32
 8012904:	4013      	ands	r3, r2
 8012906:	d00c      	beq.n	8012922 <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012908:	69bb      	ldr	r3, [r7, #24]
 801290a:	2220      	movs	r2, #32
 801290c:	4013      	ands	r3, r2
 801290e:	d008      	beq.n	8012922 <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012914:	2b00      	cmp	r3, #0
 8012916:	d004      	beq.n	8012922 <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801291c:	687a      	ldr	r2, [r7, #4]
 801291e:	0010      	movs	r0, r2
 8012920:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012926:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	689b      	ldr	r3, [r3, #8]
 801292e:	2240      	movs	r2, #64	; 0x40
 8012930:	4013      	ands	r3, r2
 8012932:	2b40      	cmp	r3, #64	; 0x40
 8012934:	d003      	beq.n	801293e <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	2208      	movs	r2, #8
 801293a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801293c:	d033      	beq.n	80129a6 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	0018      	movs	r0, r3
 8012942:	f000 fcff 	bl	8013344 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	689b      	ldr	r3, [r3, #8]
 801294c:	2240      	movs	r2, #64	; 0x40
 801294e:	4013      	ands	r3, r2
 8012950:	2b40      	cmp	r3, #64	; 0x40
 8012952:	d123      	bne.n	801299c <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	689a      	ldr	r2, [r3, #8]
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	2140      	movs	r1, #64	; 0x40
 8012960:	438a      	bics	r2, r1
 8012962:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012968:	2b00      	cmp	r3, #0
 801296a:	d012      	beq.n	8012992 <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012970:	4a2f      	ldr	r2, [pc, #188]	; (8012a30 <HAL_UART_IRQHandler+0x244>)
 8012972:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012978:	0018      	movs	r0, r3
 801297a:	f7fd f8dd 	bl	800fb38 <HAL_DMA_Abort_IT>
 801297e:	1e03      	subs	r3, r0, #0
 8012980:	d019      	beq.n	80129b6 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801298c:	0018      	movs	r0, r3
 801298e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012990:	e011      	b.n	80129b6 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	0018      	movs	r0, r3
 8012996:	f000 f855 	bl	8012a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801299a:	e00c      	b.n	80129b6 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	0018      	movs	r0, r3
 80129a0:	f000 f850 	bl	8012a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80129a4:	e007      	b.n	80129b6 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	0018      	movs	r0, r3
 80129aa:	f000 f84b 	bl	8012a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2200      	movs	r2, #0
 80129b2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80129b4:	e036      	b.n	8012a24 <HAL_UART_IRQHandler+0x238>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80129b6:	46c0      	nop			; (mov r8, r8)
    return;
 80129b8:	e034      	b.n	8012a24 <HAL_UART_IRQHandler+0x238>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80129ba:	69fa      	ldr	r2, [r7, #28]
 80129bc:	2380      	movs	r3, #128	; 0x80
 80129be:	035b      	lsls	r3, r3, #13
 80129c0:	4013      	ands	r3, r2
 80129c2:	d00e      	beq.n	80129e2 <HAL_UART_IRQHandler+0x1f6>
 80129c4:	697a      	ldr	r2, [r7, #20]
 80129c6:	2380      	movs	r3, #128	; 0x80
 80129c8:	03db      	lsls	r3, r3, #15
 80129ca:	4013      	ands	r3, r2
 80129cc:	d009      	beq.n	80129e2 <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	2280      	movs	r2, #128	; 0x80
 80129d4:	0352      	lsls	r2, r2, #13
 80129d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	0018      	movs	r0, r3
 80129dc:	f000 fdbc 	bl	8013558 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80129e0:	e023      	b.n	8012a2a <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80129e2:	69fb      	ldr	r3, [r7, #28]
 80129e4:	2280      	movs	r2, #128	; 0x80
 80129e6:	4013      	ands	r3, r2
 80129e8:	d00d      	beq.n	8012a06 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80129ea:	69bb      	ldr	r3, [r7, #24]
 80129ec:	2280      	movs	r2, #128	; 0x80
 80129ee:	4013      	ands	r3, r2
 80129f0:	d009      	beq.n	8012a06 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d016      	beq.n	8012a28 <HAL_UART_IRQHandler+0x23c>
    {
      huart->TxISR(huart);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	0010      	movs	r0, r2
 8012a02:	4798      	blx	r3
    }
    return;
 8012a04:	e010      	b.n	8012a28 <HAL_UART_IRQHandler+0x23c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012a06:	69fb      	ldr	r3, [r7, #28]
 8012a08:	2240      	movs	r2, #64	; 0x40
 8012a0a:	4013      	ands	r3, r2
 8012a0c:	d00d      	beq.n	8012a2a <HAL_UART_IRQHandler+0x23e>
 8012a0e:	69bb      	ldr	r3, [r7, #24]
 8012a10:	2240      	movs	r2, #64	; 0x40
 8012a12:	4013      	ands	r3, r2
 8012a14:	d009      	beq.n	8012a2a <HAL_UART_IRQHandler+0x23e>
  {
    UART_EndTransmit_IT(huart);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	0018      	movs	r0, r3
 8012a1a:	f000 fcca 	bl	80133b2 <UART_EndTransmit_IT>
    return;
 8012a1e:	e004      	b.n	8012a2a <HAL_UART_IRQHandler+0x23e>
      return;
 8012a20:	46c0      	nop			; (mov r8, r8)
 8012a22:	e002      	b.n	8012a2a <HAL_UART_IRQHandler+0x23e>
    return;
 8012a24:	46c0      	nop			; (mov r8, r8)
 8012a26:	e000      	b.n	8012a2a <HAL_UART_IRQHandler+0x23e>
    return;
 8012a28:	46c0      	nop			; (mov r8, r8)
  }

}
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	b008      	add	sp, #32
 8012a2e:	bd80      	pop	{r7, pc}
 8012a30:	08013385 	.word	0x08013385

08012a34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012a3c:	46c0      	nop			; (mov r8, r8)
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	b002      	add	sp, #8
 8012a42:	bd80      	pop	{r7, pc}

08012a44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b082      	sub	sp, #8
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012a4c:	46c0      	nop			; (mov r8, r8)
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	b002      	add	sp, #8
 8012a52:	bd80      	pop	{r7, pc}

08012a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012a54:	b5b0      	push	{r4, r5, r7, lr}
 8012a56:	b08e      	sub	sp, #56	; 0x38
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8012a5c:	231b      	movs	r3, #27
 8012a5e:	2218      	movs	r2, #24
 8012a60:	4694      	mov	ip, r2
 8012a62:	44bc      	add	ip, r7
 8012a64:	4463      	add	r3, ip
 8012a66:	2210      	movs	r2, #16
 8012a68:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a6e:	2313      	movs	r3, #19
 8012a70:	2218      	movs	r2, #24
 8012a72:	4694      	mov	ip, r2
 8012a74:	44bc      	add	ip, r7
 8012a76:	4463      	add	r3, ip
 8012a78:	2200      	movs	r2, #0
 8012a7a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012a80:	69fb      	ldr	r3, [r7, #28]
 8012a82:	689a      	ldr	r2, [r3, #8]
 8012a84:	69fb      	ldr	r3, [r7, #28]
 8012a86:	691b      	ldr	r3, [r3, #16]
 8012a88:	431a      	orrs	r2, r3
 8012a8a:	69fb      	ldr	r3, [r7, #28]
 8012a8c:	695b      	ldr	r3, [r3, #20]
 8012a8e:	431a      	orrs	r2, r3
 8012a90:	69fb      	ldr	r3, [r7, #28]
 8012a92:	69db      	ldr	r3, [r3, #28]
 8012a94:	4313      	orrs	r3, r2
 8012a96:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012a98:	69fb      	ldr	r3, [r7, #28]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	4ab0      	ldr	r2, [pc, #704]	; (8012d60 <UART_SetConfig+0x30c>)
 8012aa0:	4013      	ands	r3, r2
 8012aa2:	0019      	movs	r1, r3
 8012aa4:	69fb      	ldr	r3, [r7, #28]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012aaa:	430a      	orrs	r2, r1
 8012aac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012aae:	69fb      	ldr	r3, [r7, #28]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	685b      	ldr	r3, [r3, #4]
 8012ab4:	4aab      	ldr	r2, [pc, #684]	; (8012d64 <UART_SetConfig+0x310>)
 8012ab6:	4013      	ands	r3, r2
 8012ab8:	0019      	movs	r1, r3
 8012aba:	69fb      	ldr	r3, [r7, #28]
 8012abc:	68da      	ldr	r2, [r3, #12]
 8012abe:	69fb      	ldr	r3, [r7, #28]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	430a      	orrs	r2, r1
 8012ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	699b      	ldr	r3, [r3, #24]
 8012aca:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012acc:	69fb      	ldr	r3, [r7, #28]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	4aa5      	ldr	r2, [pc, #660]	; (8012d68 <UART_SetConfig+0x314>)
 8012ad2:	4293      	cmp	r3, r2
 8012ad4:	d004      	beq.n	8012ae0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	6a1b      	ldr	r3, [r3, #32]
 8012ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012adc:	4313      	orrs	r3, r2
 8012ade:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	689b      	ldr	r3, [r3, #8]
 8012ae6:	4aa1      	ldr	r2, [pc, #644]	; (8012d6c <UART_SetConfig+0x318>)
 8012ae8:	4013      	ands	r3, r2
 8012aea:	0019      	movs	r1, r3
 8012aec:	69fb      	ldr	r3, [r7, #28]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012af2:	430a      	orrs	r2, r1
 8012af4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012af6:	69fb      	ldr	r3, [r7, #28]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	4a9d      	ldr	r2, [pc, #628]	; (8012d70 <UART_SetConfig+0x31c>)
 8012afc:	4293      	cmp	r3, r2
 8012afe:	d136      	bne.n	8012b6e <UART_SetConfig+0x11a>
 8012b00:	4b9c      	ldr	r3, [pc, #624]	; (8012d74 <UART_SetConfig+0x320>)
 8012b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b04:	2203      	movs	r2, #3
 8012b06:	4013      	ands	r3, r2
 8012b08:	2b03      	cmp	r3, #3
 8012b0a:	d020      	beq.n	8012b4e <UART_SetConfig+0xfa>
 8012b0c:	d827      	bhi.n	8012b5e <UART_SetConfig+0x10a>
 8012b0e:	2b02      	cmp	r3, #2
 8012b10:	d00d      	beq.n	8012b2e <UART_SetConfig+0xda>
 8012b12:	d824      	bhi.n	8012b5e <UART_SetConfig+0x10a>
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d002      	beq.n	8012b1e <UART_SetConfig+0xca>
 8012b18:	2b01      	cmp	r3, #1
 8012b1a:	d010      	beq.n	8012b3e <UART_SetConfig+0xea>
 8012b1c:	e01f      	b.n	8012b5e <UART_SetConfig+0x10a>
 8012b1e:	231b      	movs	r3, #27
 8012b20:	2218      	movs	r2, #24
 8012b22:	4694      	mov	ip, r2
 8012b24:	44bc      	add	ip, r7
 8012b26:	4463      	add	r3, ip
 8012b28:	2201      	movs	r2, #1
 8012b2a:	701a      	strb	r2, [r3, #0]
 8012b2c:	e0c5      	b.n	8012cba <UART_SetConfig+0x266>
 8012b2e:	231b      	movs	r3, #27
 8012b30:	2218      	movs	r2, #24
 8012b32:	4694      	mov	ip, r2
 8012b34:	44bc      	add	ip, r7
 8012b36:	4463      	add	r3, ip
 8012b38:	2202      	movs	r2, #2
 8012b3a:	701a      	strb	r2, [r3, #0]
 8012b3c:	e0bd      	b.n	8012cba <UART_SetConfig+0x266>
 8012b3e:	231b      	movs	r3, #27
 8012b40:	2218      	movs	r2, #24
 8012b42:	4694      	mov	ip, r2
 8012b44:	44bc      	add	ip, r7
 8012b46:	4463      	add	r3, ip
 8012b48:	2204      	movs	r2, #4
 8012b4a:	701a      	strb	r2, [r3, #0]
 8012b4c:	e0b5      	b.n	8012cba <UART_SetConfig+0x266>
 8012b4e:	231b      	movs	r3, #27
 8012b50:	2218      	movs	r2, #24
 8012b52:	4694      	mov	ip, r2
 8012b54:	44bc      	add	ip, r7
 8012b56:	4463      	add	r3, ip
 8012b58:	2208      	movs	r2, #8
 8012b5a:	701a      	strb	r2, [r3, #0]
 8012b5c:	e0ad      	b.n	8012cba <UART_SetConfig+0x266>
 8012b5e:	231b      	movs	r3, #27
 8012b60:	2218      	movs	r2, #24
 8012b62:	4694      	mov	ip, r2
 8012b64:	44bc      	add	ip, r7
 8012b66:	4463      	add	r3, ip
 8012b68:	2210      	movs	r2, #16
 8012b6a:	701a      	strb	r2, [r3, #0]
 8012b6c:	e0a5      	b.n	8012cba <UART_SetConfig+0x266>
 8012b6e:	69fb      	ldr	r3, [r7, #28]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	4a81      	ldr	r2, [pc, #516]	; (8012d78 <UART_SetConfig+0x324>)
 8012b74:	4293      	cmp	r3, r2
 8012b76:	d136      	bne.n	8012be6 <UART_SetConfig+0x192>
 8012b78:	4b7e      	ldr	r3, [pc, #504]	; (8012d74 <UART_SetConfig+0x320>)
 8012b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b7c:	220c      	movs	r2, #12
 8012b7e:	4013      	ands	r3, r2
 8012b80:	2b0c      	cmp	r3, #12
 8012b82:	d020      	beq.n	8012bc6 <UART_SetConfig+0x172>
 8012b84:	d827      	bhi.n	8012bd6 <UART_SetConfig+0x182>
 8012b86:	2b08      	cmp	r3, #8
 8012b88:	d00d      	beq.n	8012ba6 <UART_SetConfig+0x152>
 8012b8a:	d824      	bhi.n	8012bd6 <UART_SetConfig+0x182>
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d002      	beq.n	8012b96 <UART_SetConfig+0x142>
 8012b90:	2b04      	cmp	r3, #4
 8012b92:	d010      	beq.n	8012bb6 <UART_SetConfig+0x162>
 8012b94:	e01f      	b.n	8012bd6 <UART_SetConfig+0x182>
 8012b96:	231b      	movs	r3, #27
 8012b98:	2218      	movs	r2, #24
 8012b9a:	4694      	mov	ip, r2
 8012b9c:	44bc      	add	ip, r7
 8012b9e:	4463      	add	r3, ip
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	701a      	strb	r2, [r3, #0]
 8012ba4:	e089      	b.n	8012cba <UART_SetConfig+0x266>
 8012ba6:	231b      	movs	r3, #27
 8012ba8:	2218      	movs	r2, #24
 8012baa:	4694      	mov	ip, r2
 8012bac:	44bc      	add	ip, r7
 8012bae:	4463      	add	r3, ip
 8012bb0:	2202      	movs	r2, #2
 8012bb2:	701a      	strb	r2, [r3, #0]
 8012bb4:	e081      	b.n	8012cba <UART_SetConfig+0x266>
 8012bb6:	231b      	movs	r3, #27
 8012bb8:	2218      	movs	r2, #24
 8012bba:	4694      	mov	ip, r2
 8012bbc:	44bc      	add	ip, r7
 8012bbe:	4463      	add	r3, ip
 8012bc0:	2204      	movs	r2, #4
 8012bc2:	701a      	strb	r2, [r3, #0]
 8012bc4:	e079      	b.n	8012cba <UART_SetConfig+0x266>
 8012bc6:	231b      	movs	r3, #27
 8012bc8:	2218      	movs	r2, #24
 8012bca:	4694      	mov	ip, r2
 8012bcc:	44bc      	add	ip, r7
 8012bce:	4463      	add	r3, ip
 8012bd0:	2208      	movs	r2, #8
 8012bd2:	701a      	strb	r2, [r3, #0]
 8012bd4:	e071      	b.n	8012cba <UART_SetConfig+0x266>
 8012bd6:	231b      	movs	r3, #27
 8012bd8:	2218      	movs	r2, #24
 8012bda:	4694      	mov	ip, r2
 8012bdc:	44bc      	add	ip, r7
 8012bde:	4463      	add	r3, ip
 8012be0:	2210      	movs	r2, #16
 8012be2:	701a      	strb	r2, [r3, #0]
 8012be4:	e069      	b.n	8012cba <UART_SetConfig+0x266>
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	4a64      	ldr	r2, [pc, #400]	; (8012d7c <UART_SetConfig+0x328>)
 8012bec:	4293      	cmp	r3, r2
 8012bee:	d107      	bne.n	8012c00 <UART_SetConfig+0x1ac>
 8012bf0:	231b      	movs	r3, #27
 8012bf2:	2218      	movs	r2, #24
 8012bf4:	4694      	mov	ip, r2
 8012bf6:	44bc      	add	ip, r7
 8012bf8:	4463      	add	r3, ip
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	701a      	strb	r2, [r3, #0]
 8012bfe:	e05c      	b.n	8012cba <UART_SetConfig+0x266>
 8012c00:	69fb      	ldr	r3, [r7, #28]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	4a5e      	ldr	r2, [pc, #376]	; (8012d80 <UART_SetConfig+0x32c>)
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d107      	bne.n	8012c1a <UART_SetConfig+0x1c6>
 8012c0a:	231b      	movs	r3, #27
 8012c0c:	2218      	movs	r2, #24
 8012c0e:	4694      	mov	ip, r2
 8012c10:	44bc      	add	ip, r7
 8012c12:	4463      	add	r3, ip
 8012c14:	2200      	movs	r2, #0
 8012c16:	701a      	strb	r2, [r3, #0]
 8012c18:	e04f      	b.n	8012cba <UART_SetConfig+0x266>
 8012c1a:	69fb      	ldr	r3, [r7, #28]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	4a52      	ldr	r2, [pc, #328]	; (8012d68 <UART_SetConfig+0x314>)
 8012c20:	4293      	cmp	r3, r2
 8012c22:	d143      	bne.n	8012cac <UART_SetConfig+0x258>
 8012c24:	4b53      	ldr	r3, [pc, #332]	; (8012d74 <UART_SetConfig+0x320>)
 8012c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012c28:	23c0      	movs	r3, #192	; 0xc0
 8012c2a:	011b      	lsls	r3, r3, #4
 8012c2c:	4013      	ands	r3, r2
 8012c2e:	22c0      	movs	r2, #192	; 0xc0
 8012c30:	0112      	lsls	r2, r2, #4
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d02a      	beq.n	8012c8c <UART_SetConfig+0x238>
 8012c36:	22c0      	movs	r2, #192	; 0xc0
 8012c38:	0112      	lsls	r2, r2, #4
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d82e      	bhi.n	8012c9c <UART_SetConfig+0x248>
 8012c3e:	2280      	movs	r2, #128	; 0x80
 8012c40:	0112      	lsls	r2, r2, #4
 8012c42:	4293      	cmp	r3, r2
 8012c44:	d012      	beq.n	8012c6c <UART_SetConfig+0x218>
 8012c46:	2280      	movs	r2, #128	; 0x80
 8012c48:	0112      	lsls	r2, r2, #4
 8012c4a:	4293      	cmp	r3, r2
 8012c4c:	d826      	bhi.n	8012c9c <UART_SetConfig+0x248>
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d004      	beq.n	8012c5c <UART_SetConfig+0x208>
 8012c52:	2280      	movs	r2, #128	; 0x80
 8012c54:	00d2      	lsls	r2, r2, #3
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d010      	beq.n	8012c7c <UART_SetConfig+0x228>
 8012c5a:	e01f      	b.n	8012c9c <UART_SetConfig+0x248>
 8012c5c:	231b      	movs	r3, #27
 8012c5e:	2218      	movs	r2, #24
 8012c60:	4694      	mov	ip, r2
 8012c62:	44bc      	add	ip, r7
 8012c64:	4463      	add	r3, ip
 8012c66:	2200      	movs	r2, #0
 8012c68:	701a      	strb	r2, [r3, #0]
 8012c6a:	e026      	b.n	8012cba <UART_SetConfig+0x266>
 8012c6c:	231b      	movs	r3, #27
 8012c6e:	2218      	movs	r2, #24
 8012c70:	4694      	mov	ip, r2
 8012c72:	44bc      	add	ip, r7
 8012c74:	4463      	add	r3, ip
 8012c76:	2202      	movs	r2, #2
 8012c78:	701a      	strb	r2, [r3, #0]
 8012c7a:	e01e      	b.n	8012cba <UART_SetConfig+0x266>
 8012c7c:	231b      	movs	r3, #27
 8012c7e:	2218      	movs	r2, #24
 8012c80:	4694      	mov	ip, r2
 8012c82:	44bc      	add	ip, r7
 8012c84:	4463      	add	r3, ip
 8012c86:	2204      	movs	r2, #4
 8012c88:	701a      	strb	r2, [r3, #0]
 8012c8a:	e016      	b.n	8012cba <UART_SetConfig+0x266>
 8012c8c:	231b      	movs	r3, #27
 8012c8e:	2218      	movs	r2, #24
 8012c90:	4694      	mov	ip, r2
 8012c92:	44bc      	add	ip, r7
 8012c94:	4463      	add	r3, ip
 8012c96:	2208      	movs	r2, #8
 8012c98:	701a      	strb	r2, [r3, #0]
 8012c9a:	e00e      	b.n	8012cba <UART_SetConfig+0x266>
 8012c9c:	231b      	movs	r3, #27
 8012c9e:	2218      	movs	r2, #24
 8012ca0:	4694      	mov	ip, r2
 8012ca2:	44bc      	add	ip, r7
 8012ca4:	4463      	add	r3, ip
 8012ca6:	2210      	movs	r2, #16
 8012ca8:	701a      	strb	r2, [r3, #0]
 8012caa:	e006      	b.n	8012cba <UART_SetConfig+0x266>
 8012cac:	231b      	movs	r3, #27
 8012cae:	2218      	movs	r2, #24
 8012cb0:	4694      	mov	ip, r2
 8012cb2:	44bc      	add	ip, r7
 8012cb4:	4463      	add	r3, ip
 8012cb6:	2210      	movs	r2, #16
 8012cb8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012cba:	69fb      	ldr	r3, [r7, #28]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	4a2a      	ldr	r2, [pc, #168]	; (8012d68 <UART_SetConfig+0x314>)
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d000      	beq.n	8012cc6 <UART_SetConfig+0x272>
 8012cc4:	e09d      	b.n	8012e02 <UART_SetConfig+0x3ae>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012cc6:	231b      	movs	r3, #27
 8012cc8:	2218      	movs	r2, #24
 8012cca:	4694      	mov	ip, r2
 8012ccc:	44bc      	add	ip, r7
 8012cce:	4463      	add	r3, ip
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	2b08      	cmp	r3, #8
 8012cd4:	d01d      	beq.n	8012d12 <UART_SetConfig+0x2be>
 8012cd6:	dc20      	bgt.n	8012d1a <UART_SetConfig+0x2c6>
 8012cd8:	2b04      	cmp	r3, #4
 8012cda:	d015      	beq.n	8012d08 <UART_SetConfig+0x2b4>
 8012cdc:	dc1d      	bgt.n	8012d1a <UART_SetConfig+0x2c6>
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d002      	beq.n	8012ce8 <UART_SetConfig+0x294>
 8012ce2:	2b02      	cmp	r3, #2
 8012ce4:	d005      	beq.n	8012cf2 <UART_SetConfig+0x29e>
 8012ce6:	e018      	b.n	8012d1a <UART_SetConfig+0x2c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8012ce8:	f7fe fcb4 	bl	8011654 <HAL_RCC_GetPCLK1Freq>
 8012cec:	0003      	movs	r3, r0
 8012cee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012cf0:	e01b      	b.n	8012d2a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012cf2:	4b20      	ldr	r3, [pc, #128]	; (8012d74 <UART_SetConfig+0x320>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	2210      	movs	r2, #16
 8012cf8:	4013      	ands	r3, r2
 8012cfa:	d002      	beq.n	8012d02 <UART_SetConfig+0x2ae>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8012cfc:	4b21      	ldr	r3, [pc, #132]	; (8012d84 <UART_SetConfig+0x330>)
 8012cfe:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8012d00:	e013      	b.n	8012d2a <UART_SetConfig+0x2d6>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8012d02:	4b21      	ldr	r3, [pc, #132]	; (8012d88 <UART_SetConfig+0x334>)
 8012d04:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012d06:	e010      	b.n	8012d2a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8012d08:	f7fe fc14 	bl	8011534 <HAL_RCC_GetSysClockFreq>
 8012d0c:	0003      	movs	r3, r0
 8012d0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012d10:	e00b      	b.n	8012d2a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8012d12:	2380      	movs	r3, #128	; 0x80
 8012d14:	021b      	lsls	r3, r3, #8
 8012d16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012d18:	e007      	b.n	8012d2a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8012d1a:	2313      	movs	r3, #19
 8012d1c:	2218      	movs	r2, #24
 8012d1e:	4694      	mov	ip, r2
 8012d20:	44bc      	add	ip, r7
 8012d22:	4463      	add	r3, ip
 8012d24:	2201      	movs	r2, #1
 8012d26:	701a      	strb	r2, [r3, #0]
        break;
 8012d28:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8012d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d100      	bne.n	8012d32 <UART_SetConfig+0x2de>
 8012d30:	e1a8      	b.n	8013084 <UART_SetConfig+0x630>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012d32:	69fb      	ldr	r3, [r7, #28]
 8012d34:	685a      	ldr	r2, [r3, #4]
 8012d36:	0013      	movs	r3, r2
 8012d38:	005b      	lsls	r3, r3, #1
 8012d3a:	189b      	adds	r3, r3, r2
 8012d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d305      	bcc.n	8012d4e <UART_SetConfig+0x2fa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	685b      	ldr	r3, [r3, #4]
 8012d46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d91e      	bls.n	8012d8c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8012d4e:	2313      	movs	r3, #19
 8012d50:	2218      	movs	r2, #24
 8012d52:	4694      	mov	ip, r2
 8012d54:	44bc      	add	ip, r7
 8012d56:	4463      	add	r3, ip
 8012d58:	2201      	movs	r2, #1
 8012d5a:	701a      	strb	r2, [r3, #0]
 8012d5c:	e192      	b.n	8013084 <UART_SetConfig+0x630>
 8012d5e:	46c0      	nop			; (mov r8, r8)
 8012d60:	efff69f3 	.word	0xefff69f3
 8012d64:	ffffcfff 	.word	0xffffcfff
 8012d68:	40004800 	.word	0x40004800
 8012d6c:	fffff4ff 	.word	0xfffff4ff
 8012d70:	40013800 	.word	0x40013800
 8012d74:	40021000 	.word	0x40021000
 8012d78:	40004400 	.word	0x40004400
 8012d7c:	40004c00 	.word	0x40004c00
 8012d80:	40005000 	.word	0x40005000
 8012d84:	003d0900 	.word	0x003d0900
 8012d88:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8012d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8e:	613b      	str	r3, [r7, #16]
 8012d90:	2300      	movs	r3, #0
 8012d92:	617b      	str	r3, [r7, #20]
 8012d94:	6939      	ldr	r1, [r7, #16]
 8012d96:	697a      	ldr	r2, [r7, #20]
 8012d98:	000b      	movs	r3, r1
 8012d9a:	0e1b      	lsrs	r3, r3, #24
 8012d9c:	0010      	movs	r0, r2
 8012d9e:	0205      	lsls	r5, r0, #8
 8012da0:	431d      	orrs	r5, r3
 8012da2:	000b      	movs	r3, r1
 8012da4:	021c      	lsls	r4, r3, #8
 8012da6:	69fb      	ldr	r3, [r7, #28]
 8012da8:	685b      	ldr	r3, [r3, #4]
 8012daa:	085b      	lsrs	r3, r3, #1
 8012dac:	60bb      	str	r3, [r7, #8]
 8012dae:	2300      	movs	r3, #0
 8012db0:	60fb      	str	r3, [r7, #12]
 8012db2:	68b8      	ldr	r0, [r7, #8]
 8012db4:	68f9      	ldr	r1, [r7, #12]
 8012db6:	1900      	adds	r0, r0, r4
 8012db8:	4169      	adcs	r1, r5
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	603b      	str	r3, [r7, #0]
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	607b      	str	r3, [r7, #4]
 8012dc4:	683a      	ldr	r2, [r7, #0]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f7ed fb6e 	bl	80004a8 <__aeabi_uldivmod>
 8012dcc:	0002      	movs	r2, r0
 8012dce:	000b      	movs	r3, r1
 8012dd0:	0013      	movs	r3, r2
 8012dd2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012dd6:	23c0      	movs	r3, #192	; 0xc0
 8012dd8:	009b      	lsls	r3, r3, #2
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d309      	bcc.n	8012df2 <UART_SetConfig+0x39e>
 8012dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012de0:	2380      	movs	r3, #128	; 0x80
 8012de2:	035b      	lsls	r3, r3, #13
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d204      	bcs.n	8012df2 <UART_SetConfig+0x39e>
        {
          huart->Instance->BRR = usartdiv;
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012dee:	60da      	str	r2, [r3, #12]
 8012df0:	e148      	b.n	8013084 <UART_SetConfig+0x630>
        }
        else
        {
          ret = HAL_ERROR;
 8012df2:	2313      	movs	r3, #19
 8012df4:	2218      	movs	r2, #24
 8012df6:	4694      	mov	ip, r2
 8012df8:	44bc      	add	ip, r7
 8012dfa:	4463      	add	r3, ip
 8012dfc:	2201      	movs	r2, #1
 8012dfe:	701a      	strb	r2, [r3, #0]
 8012e00:	e140      	b.n	8013084 <UART_SetConfig+0x630>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012e02:	69fb      	ldr	r3, [r7, #28]
 8012e04:	69da      	ldr	r2, [r3, #28]
 8012e06:	2380      	movs	r3, #128	; 0x80
 8012e08:	021b      	lsls	r3, r3, #8
 8012e0a:	429a      	cmp	r2, r3
 8012e0c:	d000      	beq.n	8012e10 <UART_SetConfig+0x3bc>
 8012e0e:	e0aa      	b.n	8012f66 <UART_SetConfig+0x512>
  {
    switch (clocksource)
 8012e10:	231b      	movs	r3, #27
 8012e12:	2218      	movs	r2, #24
 8012e14:	4694      	mov	ip, r2
 8012e16:	44bc      	add	ip, r7
 8012e18:	4463      	add	r3, ip
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	2b08      	cmp	r3, #8
 8012e1e:	d86d      	bhi.n	8012efc <UART_SetConfig+0x4a8>
 8012e20:	009a      	lsls	r2, r3, #2
 8012e22:	4ba0      	ldr	r3, [pc, #640]	; (80130a4 <UART_SetConfig+0x650>)
 8012e24:	18d3      	adds	r3, r2, r3
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012e2a:	f7fe fc13 	bl	8011654 <HAL_RCC_GetPCLK1Freq>
 8012e2e:	0003      	movs	r3, r0
 8012e30:	005a      	lsls	r2, r3, #1
 8012e32:	69fb      	ldr	r3, [r7, #28]
 8012e34:	685b      	ldr	r3, [r3, #4]
 8012e36:	085b      	lsrs	r3, r3, #1
 8012e38:	18d2      	adds	r2, r2, r3
 8012e3a:	69fb      	ldr	r3, [r7, #28]
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	0019      	movs	r1, r3
 8012e40:	0010      	movs	r0, r2
 8012e42:	f7ed f97d 	bl	8000140 <__udivsi3>
 8012e46:	0003      	movs	r3, r0
 8012e48:	b29b      	uxth	r3, r3
 8012e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012e4c:	e05e      	b.n	8012f0c <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8012e4e:	f7fe fc17 	bl	8011680 <HAL_RCC_GetPCLK2Freq>
 8012e52:	0003      	movs	r3, r0
 8012e54:	005a      	lsls	r2, r3, #1
 8012e56:	69fb      	ldr	r3, [r7, #28]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	085b      	lsrs	r3, r3, #1
 8012e5c:	18d2      	adds	r2, r2, r3
 8012e5e:	69fb      	ldr	r3, [r7, #28]
 8012e60:	685b      	ldr	r3, [r3, #4]
 8012e62:	0019      	movs	r1, r3
 8012e64:	0010      	movs	r0, r2
 8012e66:	f7ed f96b 	bl	8000140 <__udivsi3>
 8012e6a:	0003      	movs	r3, r0
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012e70:	e04c      	b.n	8012f0c <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012e72:	4b8d      	ldr	r3, [pc, #564]	; (80130a8 <UART_SetConfig+0x654>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2210      	movs	r2, #16
 8012e78:	4013      	ands	r3, r2
 8012e7a:	d00e      	beq.n	8012e9a <UART_SetConfig+0x446>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8012e7c:	69fb      	ldr	r3, [r7, #28]
 8012e7e:	685b      	ldr	r3, [r3, #4]
 8012e80:	085b      	lsrs	r3, r3, #1
 8012e82:	4a8a      	ldr	r2, [pc, #552]	; (80130ac <UART_SetConfig+0x658>)
 8012e84:	189a      	adds	r2, r3, r2
 8012e86:	69fb      	ldr	r3, [r7, #28]
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	0019      	movs	r1, r3
 8012e8c:	0010      	movs	r0, r2
 8012e8e:	f7ed f957 	bl	8000140 <__udivsi3>
 8012e92:	0003      	movs	r3, r0
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8012e98:	e038      	b.n	8012f0c <UART_SetConfig+0x4b8>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	085b      	lsrs	r3, r3, #1
 8012ea0:	4a83      	ldr	r2, [pc, #524]	; (80130b0 <UART_SetConfig+0x65c>)
 8012ea2:	189a      	adds	r2, r3, r2
 8012ea4:	69fb      	ldr	r3, [r7, #28]
 8012ea6:	685b      	ldr	r3, [r3, #4]
 8012ea8:	0019      	movs	r1, r3
 8012eaa:	0010      	movs	r0, r2
 8012eac:	f7ed f948 	bl	8000140 <__udivsi3>
 8012eb0:	0003      	movs	r3, r0
 8012eb2:	b29b      	uxth	r3, r3
 8012eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012eb6:	e029      	b.n	8012f0c <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012eb8:	f7fe fb3c 	bl	8011534 <HAL_RCC_GetSysClockFreq>
 8012ebc:	0003      	movs	r3, r0
 8012ebe:	005a      	lsls	r2, r3, #1
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	685b      	ldr	r3, [r3, #4]
 8012ec4:	085b      	lsrs	r3, r3, #1
 8012ec6:	18d2      	adds	r2, r2, r3
 8012ec8:	69fb      	ldr	r3, [r7, #28]
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	0019      	movs	r1, r3
 8012ece:	0010      	movs	r0, r2
 8012ed0:	f7ed f936 	bl	8000140 <__udivsi3>
 8012ed4:	0003      	movs	r3, r0
 8012ed6:	b29b      	uxth	r3, r3
 8012ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012eda:	e017      	b.n	8012f0c <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012edc:	69fb      	ldr	r3, [r7, #28]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	085b      	lsrs	r3, r3, #1
 8012ee2:	2280      	movs	r2, #128	; 0x80
 8012ee4:	0252      	lsls	r2, r2, #9
 8012ee6:	189a      	adds	r2, r3, r2
 8012ee8:	69fb      	ldr	r3, [r7, #28]
 8012eea:	685b      	ldr	r3, [r3, #4]
 8012eec:	0019      	movs	r1, r3
 8012eee:	0010      	movs	r0, r2
 8012ef0:	f7ed f926 	bl	8000140 <__udivsi3>
 8012ef4:	0003      	movs	r3, r0
 8012ef6:	b29b      	uxth	r3, r3
 8012ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012efa:	e007      	b.n	8012f0c <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8012efc:	2313      	movs	r3, #19
 8012efe:	2218      	movs	r2, #24
 8012f00:	4694      	mov	ip, r2
 8012f02:	44bc      	add	ip, r7
 8012f04:	4463      	add	r3, ip
 8012f06:	2201      	movs	r2, #1
 8012f08:	701a      	strb	r2, [r3, #0]
        break;
 8012f0a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f0e:	2b0f      	cmp	r3, #15
 8012f10:	d921      	bls.n	8012f56 <UART_SetConfig+0x502>
 8012f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f14:	2380      	movs	r3, #128	; 0x80
 8012f16:	025b      	lsls	r3, r3, #9
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d21c      	bcs.n	8012f56 <UART_SetConfig+0x502>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f1e:	b29a      	uxth	r2, r3
 8012f20:	200a      	movs	r0, #10
 8012f22:	2418      	movs	r4, #24
 8012f24:	193b      	adds	r3, r7, r4
 8012f26:	181b      	adds	r3, r3, r0
 8012f28:	210f      	movs	r1, #15
 8012f2a:	438a      	bics	r2, r1
 8012f2c:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f30:	085b      	lsrs	r3, r3, #1
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	2207      	movs	r2, #7
 8012f36:	4013      	ands	r3, r2
 8012f38:	b299      	uxth	r1, r3
 8012f3a:	193b      	adds	r3, r7, r4
 8012f3c:	181b      	adds	r3, r3, r0
 8012f3e:	193a      	adds	r2, r7, r4
 8012f40:	1812      	adds	r2, r2, r0
 8012f42:	8812      	ldrh	r2, [r2, #0]
 8012f44:	430a      	orrs	r2, r1
 8012f46:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	193a      	adds	r2, r7, r4
 8012f4e:	1812      	adds	r2, r2, r0
 8012f50:	8812      	ldrh	r2, [r2, #0]
 8012f52:	60da      	str	r2, [r3, #12]
 8012f54:	e096      	b.n	8013084 <UART_SetConfig+0x630>
    }
    else
    {
      ret = HAL_ERROR;
 8012f56:	2313      	movs	r3, #19
 8012f58:	2218      	movs	r2, #24
 8012f5a:	4694      	mov	ip, r2
 8012f5c:	44bc      	add	ip, r7
 8012f5e:	4463      	add	r3, ip
 8012f60:	2201      	movs	r2, #1
 8012f62:	701a      	strb	r2, [r3, #0]
 8012f64:	e08e      	b.n	8013084 <UART_SetConfig+0x630>
    }
  }
  else
  {
    switch (clocksource)
 8012f66:	231b      	movs	r3, #27
 8012f68:	2218      	movs	r2, #24
 8012f6a:	4694      	mov	ip, r2
 8012f6c:	44bc      	add	ip, r7
 8012f6e:	4463      	add	r3, ip
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	2b08      	cmp	r3, #8
 8012f74:	d86a      	bhi.n	801304c <UART_SetConfig+0x5f8>
 8012f76:	009a      	lsls	r2, r3, #2
 8012f78:	4b4e      	ldr	r3, [pc, #312]	; (80130b4 <UART_SetConfig+0x660>)
 8012f7a:	18d3      	adds	r3, r2, r3
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012f80:	f7fe fb68 	bl	8011654 <HAL_RCC_GetPCLK1Freq>
 8012f84:	0002      	movs	r2, r0
 8012f86:	69fb      	ldr	r3, [r7, #28]
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	085b      	lsrs	r3, r3, #1
 8012f8c:	18d2      	adds	r2, r2, r3
 8012f8e:	69fb      	ldr	r3, [r7, #28]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	0019      	movs	r1, r3
 8012f94:	0010      	movs	r0, r2
 8012f96:	f7ed f8d3 	bl	8000140 <__udivsi3>
 8012f9a:	0003      	movs	r3, r0
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012fa0:	e05c      	b.n	801305c <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8012fa2:	f7fe fb6d 	bl	8011680 <HAL_RCC_GetPCLK2Freq>
 8012fa6:	0002      	movs	r2, r0
 8012fa8:	69fb      	ldr	r3, [r7, #28]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	085b      	lsrs	r3, r3, #1
 8012fae:	18d2      	adds	r2, r2, r3
 8012fb0:	69fb      	ldr	r3, [r7, #28]
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	0019      	movs	r1, r3
 8012fb6:	0010      	movs	r0, r2
 8012fb8:	f7ed f8c2 	bl	8000140 <__udivsi3>
 8012fbc:	0003      	movs	r3, r0
 8012fbe:	b29b      	uxth	r3, r3
 8012fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012fc2:	e04b      	b.n	801305c <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012fc4:	4b38      	ldr	r3, [pc, #224]	; (80130a8 <UART_SetConfig+0x654>)
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	2210      	movs	r2, #16
 8012fca:	4013      	ands	r3, r2
 8012fcc:	d00e      	beq.n	8012fec <UART_SetConfig+0x598>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8012fce:	69fb      	ldr	r3, [r7, #28]
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	085b      	lsrs	r3, r3, #1
 8012fd4:	4a38      	ldr	r2, [pc, #224]	; (80130b8 <UART_SetConfig+0x664>)
 8012fd6:	189a      	adds	r2, r3, r2
 8012fd8:	69fb      	ldr	r3, [r7, #28]
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	0019      	movs	r1, r3
 8012fde:	0010      	movs	r0, r2
 8012fe0:	f7ed f8ae 	bl	8000140 <__udivsi3>
 8012fe4:	0003      	movs	r3, r0
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8012fea:	e037      	b.n	801305c <UART_SetConfig+0x608>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8012fec:	69fb      	ldr	r3, [r7, #28]
 8012fee:	685b      	ldr	r3, [r3, #4]
 8012ff0:	085b      	lsrs	r3, r3, #1
 8012ff2:	4a32      	ldr	r2, [pc, #200]	; (80130bc <UART_SetConfig+0x668>)
 8012ff4:	189a      	adds	r2, r3, r2
 8012ff6:	69fb      	ldr	r3, [r7, #28]
 8012ff8:	685b      	ldr	r3, [r3, #4]
 8012ffa:	0019      	movs	r1, r3
 8012ffc:	0010      	movs	r0, r2
 8012ffe:	f7ed f89f 	bl	8000140 <__udivsi3>
 8013002:	0003      	movs	r3, r0
 8013004:	b29b      	uxth	r3, r3
 8013006:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8013008:	e028      	b.n	801305c <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801300a:	f7fe fa93 	bl	8011534 <HAL_RCC_GetSysClockFreq>
 801300e:	0002      	movs	r2, r0
 8013010:	69fb      	ldr	r3, [r7, #28]
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	085b      	lsrs	r3, r3, #1
 8013016:	18d2      	adds	r2, r2, r3
 8013018:	69fb      	ldr	r3, [r7, #28]
 801301a:	685b      	ldr	r3, [r3, #4]
 801301c:	0019      	movs	r1, r3
 801301e:	0010      	movs	r0, r2
 8013020:	f7ed f88e 	bl	8000140 <__udivsi3>
 8013024:	0003      	movs	r3, r0
 8013026:	b29b      	uxth	r3, r3
 8013028:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801302a:	e017      	b.n	801305c <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 801302c:	69fb      	ldr	r3, [r7, #28]
 801302e:	685b      	ldr	r3, [r3, #4]
 8013030:	085b      	lsrs	r3, r3, #1
 8013032:	2280      	movs	r2, #128	; 0x80
 8013034:	0212      	lsls	r2, r2, #8
 8013036:	189a      	adds	r2, r3, r2
 8013038:	69fb      	ldr	r3, [r7, #28]
 801303a:	685b      	ldr	r3, [r3, #4]
 801303c:	0019      	movs	r1, r3
 801303e:	0010      	movs	r0, r2
 8013040:	f7ed f87e 	bl	8000140 <__udivsi3>
 8013044:	0003      	movs	r3, r0
 8013046:	b29b      	uxth	r3, r3
 8013048:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801304a:	e007      	b.n	801305c <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 801304c:	2313      	movs	r3, #19
 801304e:	2218      	movs	r2, #24
 8013050:	4694      	mov	ip, r2
 8013052:	44bc      	add	ip, r7
 8013054:	4463      	add	r3, ip
 8013056:	2201      	movs	r2, #1
 8013058:	701a      	strb	r2, [r3, #0]
        break;
 801305a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801305e:	2b0f      	cmp	r3, #15
 8013060:	d909      	bls.n	8013076 <UART_SetConfig+0x622>
 8013062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013064:	2380      	movs	r3, #128	; 0x80
 8013066:	025b      	lsls	r3, r3, #9
 8013068:	429a      	cmp	r2, r3
 801306a:	d204      	bcs.n	8013076 <UART_SetConfig+0x622>
    {
      huart->Instance->BRR = usartdiv;
 801306c:	69fb      	ldr	r3, [r7, #28]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013072:	60da      	str	r2, [r3, #12]
 8013074:	e006      	b.n	8013084 <UART_SetConfig+0x630>
    }
    else
    {
      ret = HAL_ERROR;
 8013076:	2313      	movs	r3, #19
 8013078:	2218      	movs	r2, #24
 801307a:	4694      	mov	ip, r2
 801307c:	44bc      	add	ip, r7
 801307e:	4463      	add	r3, ip
 8013080:	2201      	movs	r2, #1
 8013082:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013084:	69fb      	ldr	r3, [r7, #28]
 8013086:	2200      	movs	r2, #0
 8013088:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 801308a:	69fb      	ldr	r3, [r7, #28]
 801308c:	2200      	movs	r2, #0
 801308e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8013090:	2313      	movs	r3, #19
 8013092:	2218      	movs	r2, #24
 8013094:	4694      	mov	ip, r2
 8013096:	44bc      	add	ip, r7
 8013098:	4463      	add	r3, ip
 801309a:	781b      	ldrb	r3, [r3, #0]
}
 801309c:	0018      	movs	r0, r3
 801309e:	46bd      	mov	sp, r7
 80130a0:	b00e      	add	sp, #56	; 0x38
 80130a2:	bdb0      	pop	{r4, r5, r7, pc}
 80130a4:	080165f4 	.word	0x080165f4
 80130a8:	40021000 	.word	0x40021000
 80130ac:	007a1200 	.word	0x007a1200
 80130b0:	01e84800 	.word	0x01e84800
 80130b4:	08016618 	.word	0x08016618
 80130b8:	003d0900 	.word	0x003d0900
 80130bc:	00f42400 	.word	0x00f42400

080130c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130cc:	2201      	movs	r2, #1
 80130ce:	4013      	ands	r3, r2
 80130d0:	d00b      	beq.n	80130ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	685b      	ldr	r3, [r3, #4]
 80130d8:	4a4a      	ldr	r2, [pc, #296]	; (8013204 <UART_AdvFeatureConfig+0x144>)
 80130da:	4013      	ands	r3, r2
 80130dc:	0019      	movs	r1, r3
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	430a      	orrs	r2, r1
 80130e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ee:	2202      	movs	r2, #2
 80130f0:	4013      	ands	r3, r2
 80130f2:	d00b      	beq.n	801310c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	685b      	ldr	r3, [r3, #4]
 80130fa:	4a43      	ldr	r2, [pc, #268]	; (8013208 <UART_AdvFeatureConfig+0x148>)
 80130fc:	4013      	ands	r3, r2
 80130fe:	0019      	movs	r1, r3
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	430a      	orrs	r2, r1
 801310a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013110:	2204      	movs	r2, #4
 8013112:	4013      	ands	r3, r2
 8013114:	d00b      	beq.n	801312e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	685b      	ldr	r3, [r3, #4]
 801311c:	4a3b      	ldr	r2, [pc, #236]	; (801320c <UART_AdvFeatureConfig+0x14c>)
 801311e:	4013      	ands	r3, r2
 8013120:	0019      	movs	r1, r3
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	430a      	orrs	r2, r1
 801312c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013132:	2208      	movs	r2, #8
 8013134:	4013      	ands	r3, r2
 8013136:	d00b      	beq.n	8013150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	4a34      	ldr	r2, [pc, #208]	; (8013210 <UART_AdvFeatureConfig+0x150>)
 8013140:	4013      	ands	r3, r2
 8013142:	0019      	movs	r1, r3
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	430a      	orrs	r2, r1
 801314e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013154:	2210      	movs	r2, #16
 8013156:	4013      	ands	r3, r2
 8013158:	d00b      	beq.n	8013172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	689b      	ldr	r3, [r3, #8]
 8013160:	4a2c      	ldr	r2, [pc, #176]	; (8013214 <UART_AdvFeatureConfig+0x154>)
 8013162:	4013      	ands	r3, r2
 8013164:	0019      	movs	r1, r3
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	430a      	orrs	r2, r1
 8013170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013176:	2220      	movs	r2, #32
 8013178:	4013      	ands	r3, r2
 801317a:	d00b      	beq.n	8013194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	689b      	ldr	r3, [r3, #8]
 8013182:	4a25      	ldr	r2, [pc, #148]	; (8013218 <UART_AdvFeatureConfig+0x158>)
 8013184:	4013      	ands	r3, r2
 8013186:	0019      	movs	r1, r3
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	430a      	orrs	r2, r1
 8013192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013198:	2240      	movs	r2, #64	; 0x40
 801319a:	4013      	ands	r3, r2
 801319c:	d01d      	beq.n	80131da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	685b      	ldr	r3, [r3, #4]
 80131a4:	4a1d      	ldr	r2, [pc, #116]	; (801321c <UART_AdvFeatureConfig+0x15c>)
 80131a6:	4013      	ands	r3, r2
 80131a8:	0019      	movs	r1, r3
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	430a      	orrs	r2, r1
 80131b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80131ba:	2380      	movs	r3, #128	; 0x80
 80131bc:	035b      	lsls	r3, r3, #13
 80131be:	429a      	cmp	r2, r3
 80131c0:	d10b      	bne.n	80131da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	4a15      	ldr	r2, [pc, #84]	; (8013220 <UART_AdvFeatureConfig+0x160>)
 80131ca:	4013      	ands	r3, r2
 80131cc:	0019      	movs	r1, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	430a      	orrs	r2, r1
 80131d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131de:	2280      	movs	r2, #128	; 0x80
 80131e0:	4013      	ands	r3, r2
 80131e2:	d00b      	beq.n	80131fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	4a0e      	ldr	r2, [pc, #56]	; (8013224 <UART_AdvFeatureConfig+0x164>)
 80131ec:	4013      	ands	r3, r2
 80131ee:	0019      	movs	r1, r3
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	430a      	orrs	r2, r1
 80131fa:	605a      	str	r2, [r3, #4]
  }
}
 80131fc:	46c0      	nop			; (mov r8, r8)
 80131fe:	46bd      	mov	sp, r7
 8013200:	b002      	add	sp, #8
 8013202:	bd80      	pop	{r7, pc}
 8013204:	fffdffff 	.word	0xfffdffff
 8013208:	fffeffff 	.word	0xfffeffff
 801320c:	fffbffff 	.word	0xfffbffff
 8013210:	ffff7fff 	.word	0xffff7fff
 8013214:	ffffefff 	.word	0xffffefff
 8013218:	ffffdfff 	.word	0xffffdfff
 801321c:	ffefffff 	.word	0xffefffff
 8013220:	ff9fffff 	.word	0xff9fffff
 8013224:	fff7ffff 	.word	0xfff7ffff

08013228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b086      	sub	sp, #24
 801322c:	af02      	add	r7, sp, #8
 801322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2200      	movs	r2, #0
 8013234:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8013236:	f7fc fb27 	bl	800f888 <HAL_GetTick>
 801323a:	0003      	movs	r3, r0
 801323c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	2208      	movs	r2, #8
 8013246:	4013      	ands	r3, r2
 8013248:	2b08      	cmp	r3, #8
 801324a:	d10c      	bne.n	8013266 <UART_CheckIdleState+0x3e>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2280      	movs	r2, #128	; 0x80
 8013250:	0391      	lsls	r1, r2, #14
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	4a15      	ldr	r2, [pc, #84]	; (80132ac <UART_CheckIdleState+0x84>)
 8013256:	9200      	str	r2, [sp, #0]
 8013258:	2200      	movs	r2, #0
 801325a:	f000 f829 	bl	80132b0 <UART_WaitOnFlagUntilTimeout>
 801325e:	1e03      	subs	r3, r0, #0
 8013260:	d001      	beq.n	8013266 <UART_CheckIdleState+0x3e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013262:	2303      	movs	r3, #3
 8013264:	e01e      	b.n	80132a4 <UART_CheckIdleState+0x7c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	2204      	movs	r2, #4
 801326e:	4013      	ands	r3, r2
 8013270:	2b04      	cmp	r3, #4
 8013272:	d10c      	bne.n	801328e <UART_CheckIdleState+0x66>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	2280      	movs	r2, #128	; 0x80
 8013278:	03d1      	lsls	r1, r2, #15
 801327a:	6878      	ldr	r0, [r7, #4]
 801327c:	4a0b      	ldr	r2, [pc, #44]	; (80132ac <UART_CheckIdleState+0x84>)
 801327e:	9200      	str	r2, [sp, #0]
 8013280:	2200      	movs	r2, #0
 8013282:	f000 f815 	bl	80132b0 <UART_WaitOnFlagUntilTimeout>
 8013286:	1e03      	subs	r3, r0, #0
 8013288:	d001      	beq.n	801328e <UART_CheckIdleState+0x66>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801328a:	2303      	movs	r3, #3
 801328c:	e00a      	b.n	80132a4 <UART_CheckIdleState+0x7c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2220      	movs	r2, #32
 8013292:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2220      	movs	r2, #32
 8013298:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	2270      	movs	r2, #112	; 0x70
 801329e:	2100      	movs	r1, #0
 80132a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80132a2:	2300      	movs	r3, #0
}
 80132a4:	0018      	movs	r0, r3
 80132a6:	46bd      	mov	sp, r7
 80132a8:	b004      	add	sp, #16
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	01ffffff 	.word	0x01ffffff

080132b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b084      	sub	sp, #16
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	60b9      	str	r1, [r7, #8]
 80132ba:	603b      	str	r3, [r7, #0]
 80132bc:	1dfb      	adds	r3, r7, #7
 80132be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80132c0:	e029      	b.n	8013316 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80132c2:	69bb      	ldr	r3, [r7, #24]
 80132c4:	3301      	adds	r3, #1
 80132c6:	d026      	beq.n	8013316 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80132c8:	f7fc fade 	bl	800f888 <HAL_GetTick>
 80132cc:	0002      	movs	r2, r0
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	1ad3      	subs	r3, r2, r3
 80132d2:	69ba      	ldr	r2, [r7, #24]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d302      	bcc.n	80132de <UART_WaitOnFlagUntilTimeout+0x2e>
 80132d8:	69bb      	ldr	r3, [r7, #24]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d11b      	bne.n	8013316 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	4915      	ldr	r1, [pc, #84]	; (8013340 <UART_WaitOnFlagUntilTimeout+0x90>)
 80132ea:	400a      	ands	r2, r1
 80132ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	689a      	ldr	r2, [r3, #8]
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	2101      	movs	r1, #1
 80132fa:	438a      	bics	r2, r1
 80132fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2220      	movs	r2, #32
 8013302:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	2220      	movs	r2, #32
 8013308:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	2270      	movs	r2, #112	; 0x70
 801330e:	2100      	movs	r1, #0
 8013310:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8013312:	2303      	movs	r3, #3
 8013314:	e00f      	b.n	8013336 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	69db      	ldr	r3, [r3, #28]
 801331c:	68ba      	ldr	r2, [r7, #8]
 801331e:	4013      	ands	r3, r2
 8013320:	68ba      	ldr	r2, [r7, #8]
 8013322:	1ad3      	subs	r3, r2, r3
 8013324:	425a      	negs	r2, r3
 8013326:	4153      	adcs	r3, r2
 8013328:	b2db      	uxtb	r3, r3
 801332a:	001a      	movs	r2, r3
 801332c:	1dfb      	adds	r3, r7, #7
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	429a      	cmp	r2, r3
 8013332:	d0c6      	beq.n	80132c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013334:	2300      	movs	r3, #0
}
 8013336:	0018      	movs	r0, r3
 8013338:	46bd      	mov	sp, r7
 801333a:	b004      	add	sp, #16
 801333c:	bd80      	pop	{r7, pc}
 801333e:	46c0      	nop			; (mov r8, r8)
 8013340:	fffffe5f 	.word	0xfffffe5f

08013344 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	681a      	ldr	r2, [r3, #0]
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	490a      	ldr	r1, [pc, #40]	; (8013380 <UART_EndRxTransfer+0x3c>)
 8013358:	400a      	ands	r2, r1
 801335a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	689a      	ldr	r2, [r3, #8]
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	2101      	movs	r1, #1
 8013368:	438a      	bics	r2, r1
 801336a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2220      	movs	r2, #32
 8013370:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	2200      	movs	r2, #0
 8013376:	661a      	str	r2, [r3, #96]	; 0x60
}
 8013378:	46c0      	nop			; (mov r8, r8)
 801337a:	46bd      	mov	sp, r7
 801337c:	b002      	add	sp, #8
 801337e:	bd80      	pop	{r7, pc}
 8013380:	fffffedf 	.word	0xfffffedf

08013384 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b084      	sub	sp, #16
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013390:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	225a      	movs	r2, #90	; 0x5a
 8013396:	2100      	movs	r1, #0
 8013398:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	2252      	movs	r2, #82	; 0x52
 801339e:	2100      	movs	r1, #0
 80133a0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	0018      	movs	r0, r3
 80133a6:	f7ff fb4d 	bl	8012a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80133aa:	46c0      	nop			; (mov r8, r8)
 80133ac:	46bd      	mov	sp, r7
 80133ae:	b004      	add	sp, #16
 80133b0:	bd80      	pop	{r7, pc}

080133b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80133b2:	b580      	push	{r7, lr}
 80133b4:	b082      	sub	sp, #8
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	681a      	ldr	r2, [r3, #0]
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	2140      	movs	r1, #64	; 0x40
 80133c6:	438a      	bics	r2, r1
 80133c8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2220      	movs	r2, #32
 80133ce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2200      	movs	r2, #0
 80133d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	0018      	movs	r0, r3
 80133da:	f7ff fb2b 	bl	8012a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80133de:	46c0      	nop			; (mov r8, r8)
 80133e0:	46bd      	mov	sp, r7
 80133e2:	b002      	add	sp, #8
 80133e4:	bd80      	pop	{r7, pc}
	...

080133e8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b084      	sub	sp, #16
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80133f0:	200e      	movs	r0, #14
 80133f2:	183b      	adds	r3, r7, r0
 80133f4:	687a      	ldr	r2, [r7, #4]
 80133f6:	215c      	movs	r1, #92	; 0x5c
 80133f8:	5a52      	ldrh	r2, [r2, r1]
 80133fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013400:	2b22      	cmp	r3, #34	; 0x22
 8013402:	d13f      	bne.n	8013484 <UART_RxISR_8BIT+0x9c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801340a:	210c      	movs	r1, #12
 801340c:	187b      	adds	r3, r7, r1
 801340e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013410:	187b      	adds	r3, r7, r1
 8013412:	881b      	ldrh	r3, [r3, #0]
 8013414:	b2da      	uxtb	r2, r3
 8013416:	183b      	adds	r3, r7, r0
 8013418:	881b      	ldrh	r3, [r3, #0]
 801341a:	b2d9      	uxtb	r1, r3
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013420:	400a      	ands	r2, r1
 8013422:	b2d2      	uxtb	r2, r2
 8013424:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801342a:	1c5a      	adds	r2, r3, #1
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	225a      	movs	r2, #90	; 0x5a
 8013434:	5a9b      	ldrh	r3, [r3, r2]
 8013436:	b29b      	uxth	r3, r3
 8013438:	3b01      	subs	r3, #1
 801343a:	b299      	uxth	r1, r3
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	225a      	movs	r2, #90	; 0x5a
 8013440:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	225a      	movs	r2, #90	; 0x5a
 8013446:	5a9b      	ldrh	r3, [r3, r2]
 8013448:	b29b      	uxth	r3, r3
 801344a:	2b00      	cmp	r3, #0
 801344c:	d122      	bne.n	8013494 <UART_RxISR_8BIT+0xac>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	681a      	ldr	r2, [r3, #0]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	4910      	ldr	r1, [pc, #64]	; (801349c <UART_RxISR_8BIT+0xb4>)
 801345a:	400a      	ands	r2, r1
 801345c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	689a      	ldr	r2, [r3, #8]
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	2101      	movs	r1, #1
 801346a:	438a      	bics	r2, r1
 801346c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	2220      	movs	r2, #32
 8013472:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2200      	movs	r2, #0
 8013478:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	0018      	movs	r0, r3
 801347e:	f7f1 fe89 	bl	8005194 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013482:	e007      	b.n	8013494 <UART_RxISR_8BIT+0xac>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	699a      	ldr	r2, [r3, #24]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	2108      	movs	r1, #8
 8013490:	430a      	orrs	r2, r1
 8013492:	619a      	str	r2, [r3, #24]
}
 8013494:	46c0      	nop			; (mov r8, r8)
 8013496:	46bd      	mov	sp, r7
 8013498:	b004      	add	sp, #16
 801349a:	bd80      	pop	{r7, pc}
 801349c:	fffffedf 	.word	0xfffffedf

080134a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80134a8:	200e      	movs	r0, #14
 80134aa:	183b      	adds	r3, r7, r0
 80134ac:	687a      	ldr	r2, [r7, #4]
 80134ae:	215c      	movs	r1, #92	; 0x5c
 80134b0:	5a52      	ldrh	r2, [r2, r1]
 80134b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80134b8:	2b22      	cmp	r3, #34	; 0x22
 80134ba:	d13f      	bne.n	801353c <UART_RxISR_16BIT+0x9c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134c2:	210c      	movs	r1, #12
 80134c4:	187b      	adds	r3, r7, r1
 80134c6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134cc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80134ce:	187b      	adds	r3, r7, r1
 80134d0:	183a      	adds	r2, r7, r0
 80134d2:	881b      	ldrh	r3, [r3, #0]
 80134d4:	8812      	ldrh	r2, [r2, #0]
 80134d6:	4013      	ands	r3, r2
 80134d8:	b29a      	uxth	r2, r3
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134e2:	1c9a      	adds	r2, r3, #2
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	225a      	movs	r2, #90	; 0x5a
 80134ec:	5a9b      	ldrh	r3, [r3, r2]
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	3b01      	subs	r3, #1
 80134f2:	b299      	uxth	r1, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	225a      	movs	r2, #90	; 0x5a
 80134f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	225a      	movs	r2, #90	; 0x5a
 80134fe:	5a9b      	ldrh	r3, [r3, r2]
 8013500:	b29b      	uxth	r3, r3
 8013502:	2b00      	cmp	r3, #0
 8013504:	d122      	bne.n	801354c <UART_RxISR_16BIT+0xac>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	681a      	ldr	r2, [r3, #0]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	4910      	ldr	r1, [pc, #64]	; (8013554 <UART_RxISR_16BIT+0xb4>)
 8013512:	400a      	ands	r2, r1
 8013514:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	689a      	ldr	r2, [r3, #8]
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	2101      	movs	r1, #1
 8013522:	438a      	bics	r2, r1
 8013524:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2220      	movs	r2, #32
 801352a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2200      	movs	r2, #0
 8013530:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	0018      	movs	r0, r3
 8013536:	f7f1 fe2d 	bl	8005194 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801353a:	e007      	b.n	801354c <UART_RxISR_16BIT+0xac>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	699a      	ldr	r2, [r3, #24]
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	2108      	movs	r1, #8
 8013548:	430a      	orrs	r2, r1
 801354a:	619a      	str	r2, [r3, #24]
}
 801354c:	46c0      	nop			; (mov r8, r8)
 801354e:	46bd      	mov	sp, r7
 8013550:	b004      	add	sp, #16
 8013552:	bd80      	pop	{r7, pc}
 8013554:	fffffedf 	.word	0xfffffedf

08013558 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013560:	46c0      	nop			; (mov r8, r8)
 8013562:	46bd      	mov	sp, r7
 8013564:	b002      	add	sp, #8
 8013566:	bd80      	pop	{r7, pc}

08013568 <__errno>:
 8013568:	4b01      	ldr	r3, [pc, #4]	; (8013570 <__errno+0x8>)
 801356a:	6818      	ldr	r0, [r3, #0]
 801356c:	4770      	bx	lr
 801356e:	46c0      	nop			; (mov r8, r8)
 8013570:	20000268 	.word	0x20000268

08013574 <__libc_init_array>:
 8013574:	b570      	push	{r4, r5, r6, lr}
 8013576:	2600      	movs	r6, #0
 8013578:	4d0c      	ldr	r5, [pc, #48]	; (80135ac <__libc_init_array+0x38>)
 801357a:	4c0d      	ldr	r4, [pc, #52]	; (80135b0 <__libc_init_array+0x3c>)
 801357c:	1b64      	subs	r4, r4, r5
 801357e:	10a4      	asrs	r4, r4, #2
 8013580:	42a6      	cmp	r6, r4
 8013582:	d109      	bne.n	8013598 <__libc_init_array+0x24>
 8013584:	2600      	movs	r6, #0
 8013586:	f002 fdbf 	bl	8016108 <_init>
 801358a:	4d0a      	ldr	r5, [pc, #40]	; (80135b4 <__libc_init_array+0x40>)
 801358c:	4c0a      	ldr	r4, [pc, #40]	; (80135b8 <__libc_init_array+0x44>)
 801358e:	1b64      	subs	r4, r4, r5
 8013590:	10a4      	asrs	r4, r4, #2
 8013592:	42a6      	cmp	r6, r4
 8013594:	d105      	bne.n	80135a2 <__libc_init_array+0x2e>
 8013596:	bd70      	pop	{r4, r5, r6, pc}
 8013598:	00b3      	lsls	r3, r6, #2
 801359a:	58eb      	ldr	r3, [r5, r3]
 801359c:	4798      	blx	r3
 801359e:	3601      	adds	r6, #1
 80135a0:	e7ee      	b.n	8013580 <__libc_init_array+0xc>
 80135a2:	00b3      	lsls	r3, r6, #2
 80135a4:	58eb      	ldr	r3, [r5, r3]
 80135a6:	4798      	blx	r3
 80135a8:	3601      	adds	r6, #1
 80135aa:	e7f2      	b.n	8013592 <__libc_init_array+0x1e>
 80135ac:	08016a24 	.word	0x08016a24
 80135b0:	08016a24 	.word	0x08016a24
 80135b4:	08016a24 	.word	0x08016a24
 80135b8:	08016a28 	.word	0x08016a28

080135bc <memcpy>:
 80135bc:	2300      	movs	r3, #0
 80135be:	b510      	push	{r4, lr}
 80135c0:	429a      	cmp	r2, r3
 80135c2:	d100      	bne.n	80135c6 <memcpy+0xa>
 80135c4:	bd10      	pop	{r4, pc}
 80135c6:	5ccc      	ldrb	r4, [r1, r3]
 80135c8:	54c4      	strb	r4, [r0, r3]
 80135ca:	3301      	adds	r3, #1
 80135cc:	e7f8      	b.n	80135c0 <memcpy+0x4>

080135ce <memset>:
 80135ce:	0003      	movs	r3, r0
 80135d0:	1882      	adds	r2, r0, r2
 80135d2:	4293      	cmp	r3, r2
 80135d4:	d100      	bne.n	80135d8 <memset+0xa>
 80135d6:	4770      	bx	lr
 80135d8:	7019      	strb	r1, [r3, #0]
 80135da:	3301      	adds	r3, #1
 80135dc:	e7f9      	b.n	80135d2 <memset+0x4>

080135de <__cvt>:
 80135de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135e0:	001e      	movs	r6, r3
 80135e2:	2300      	movs	r3, #0
 80135e4:	0014      	movs	r4, r2
 80135e6:	b08b      	sub	sp, #44	; 0x2c
 80135e8:	429e      	cmp	r6, r3
 80135ea:	da04      	bge.n	80135f6 <__cvt+0x18>
 80135ec:	2180      	movs	r1, #128	; 0x80
 80135ee:	0609      	lsls	r1, r1, #24
 80135f0:	1873      	adds	r3, r6, r1
 80135f2:	001e      	movs	r6, r3
 80135f4:	232d      	movs	r3, #45	; 0x2d
 80135f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80135f8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80135fa:	7013      	strb	r3, [r2, #0]
 80135fc:	2320      	movs	r3, #32
 80135fe:	2203      	movs	r2, #3
 8013600:	439f      	bics	r7, r3
 8013602:	2f46      	cmp	r7, #70	; 0x46
 8013604:	d007      	beq.n	8013616 <__cvt+0x38>
 8013606:	003b      	movs	r3, r7
 8013608:	3b45      	subs	r3, #69	; 0x45
 801360a:	4259      	negs	r1, r3
 801360c:	414b      	adcs	r3, r1
 801360e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013610:	3a01      	subs	r2, #1
 8013612:	18cb      	adds	r3, r1, r3
 8013614:	9310      	str	r3, [sp, #64]	; 0x40
 8013616:	ab09      	add	r3, sp, #36	; 0x24
 8013618:	9304      	str	r3, [sp, #16]
 801361a:	ab08      	add	r3, sp, #32
 801361c:	9303      	str	r3, [sp, #12]
 801361e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013620:	9200      	str	r2, [sp, #0]
 8013622:	9302      	str	r3, [sp, #8]
 8013624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013626:	0022      	movs	r2, r4
 8013628:	9301      	str	r3, [sp, #4]
 801362a:	0033      	movs	r3, r6
 801362c:	f000 fcf2 	bl	8014014 <_dtoa_r>
 8013630:	0005      	movs	r5, r0
 8013632:	2f47      	cmp	r7, #71	; 0x47
 8013634:	d102      	bne.n	801363c <__cvt+0x5e>
 8013636:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013638:	07db      	lsls	r3, r3, #31
 801363a:	d528      	bpl.n	801368e <__cvt+0xb0>
 801363c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801363e:	18eb      	adds	r3, r5, r3
 8013640:	9307      	str	r3, [sp, #28]
 8013642:	2f46      	cmp	r7, #70	; 0x46
 8013644:	d114      	bne.n	8013670 <__cvt+0x92>
 8013646:	782b      	ldrb	r3, [r5, #0]
 8013648:	2b30      	cmp	r3, #48	; 0x30
 801364a:	d10c      	bne.n	8013666 <__cvt+0x88>
 801364c:	2200      	movs	r2, #0
 801364e:	2300      	movs	r3, #0
 8013650:	0020      	movs	r0, r4
 8013652:	0031      	movs	r1, r6
 8013654:	f7ec fefa 	bl	800044c <__aeabi_dcmpeq>
 8013658:	2800      	cmp	r0, #0
 801365a:	d104      	bne.n	8013666 <__cvt+0x88>
 801365c:	2301      	movs	r3, #1
 801365e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013660:	1a9b      	subs	r3, r3, r2
 8013662:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013664:	6013      	str	r3, [r2, #0]
 8013666:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013668:	9a07      	ldr	r2, [sp, #28]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	18d3      	adds	r3, r2, r3
 801366e:	9307      	str	r3, [sp, #28]
 8013670:	2200      	movs	r2, #0
 8013672:	2300      	movs	r3, #0
 8013674:	0020      	movs	r0, r4
 8013676:	0031      	movs	r1, r6
 8013678:	f7ec fee8 	bl	800044c <__aeabi_dcmpeq>
 801367c:	2800      	cmp	r0, #0
 801367e:	d001      	beq.n	8013684 <__cvt+0xa6>
 8013680:	9b07      	ldr	r3, [sp, #28]
 8013682:	9309      	str	r3, [sp, #36]	; 0x24
 8013684:	2230      	movs	r2, #48	; 0x30
 8013686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013688:	9907      	ldr	r1, [sp, #28]
 801368a:	428b      	cmp	r3, r1
 801368c:	d306      	bcc.n	801369c <__cvt+0xbe>
 801368e:	0028      	movs	r0, r5
 8013690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013692:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013694:	1b5b      	subs	r3, r3, r5
 8013696:	6013      	str	r3, [r2, #0]
 8013698:	b00b      	add	sp, #44	; 0x2c
 801369a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801369c:	1c59      	adds	r1, r3, #1
 801369e:	9109      	str	r1, [sp, #36]	; 0x24
 80136a0:	701a      	strb	r2, [r3, #0]
 80136a2:	e7f0      	b.n	8013686 <__cvt+0xa8>

080136a4 <__exponent>:
 80136a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136a6:	1c83      	adds	r3, r0, #2
 80136a8:	b087      	sub	sp, #28
 80136aa:	9303      	str	r3, [sp, #12]
 80136ac:	0005      	movs	r5, r0
 80136ae:	000c      	movs	r4, r1
 80136b0:	232b      	movs	r3, #43	; 0x2b
 80136b2:	7002      	strb	r2, [r0, #0]
 80136b4:	2900      	cmp	r1, #0
 80136b6:	da01      	bge.n	80136bc <__exponent+0x18>
 80136b8:	424c      	negs	r4, r1
 80136ba:	3302      	adds	r3, #2
 80136bc:	706b      	strb	r3, [r5, #1]
 80136be:	2c09      	cmp	r4, #9
 80136c0:	dd31      	ble.n	8013726 <__exponent+0x82>
 80136c2:	270a      	movs	r7, #10
 80136c4:	ab04      	add	r3, sp, #16
 80136c6:	1dde      	adds	r6, r3, #7
 80136c8:	0020      	movs	r0, r4
 80136ca:	0039      	movs	r1, r7
 80136cc:	9601      	str	r6, [sp, #4]
 80136ce:	f7ec fea7 	bl	8000420 <__aeabi_idivmod>
 80136d2:	3e01      	subs	r6, #1
 80136d4:	3130      	adds	r1, #48	; 0x30
 80136d6:	0020      	movs	r0, r4
 80136d8:	7031      	strb	r1, [r6, #0]
 80136da:	0039      	movs	r1, r7
 80136dc:	9402      	str	r4, [sp, #8]
 80136de:	f7ec fdb9 	bl	8000254 <__divsi3>
 80136e2:	9b02      	ldr	r3, [sp, #8]
 80136e4:	0004      	movs	r4, r0
 80136e6:	2b63      	cmp	r3, #99	; 0x63
 80136e8:	dcee      	bgt.n	80136c8 <__exponent+0x24>
 80136ea:	9b01      	ldr	r3, [sp, #4]
 80136ec:	3430      	adds	r4, #48	; 0x30
 80136ee:	1e9a      	subs	r2, r3, #2
 80136f0:	0013      	movs	r3, r2
 80136f2:	9903      	ldr	r1, [sp, #12]
 80136f4:	7014      	strb	r4, [r2, #0]
 80136f6:	a804      	add	r0, sp, #16
 80136f8:	3007      	adds	r0, #7
 80136fa:	4298      	cmp	r0, r3
 80136fc:	d80e      	bhi.n	801371c <__exponent+0x78>
 80136fe:	ab04      	add	r3, sp, #16
 8013700:	3307      	adds	r3, #7
 8013702:	2000      	movs	r0, #0
 8013704:	429a      	cmp	r2, r3
 8013706:	d804      	bhi.n	8013712 <__exponent+0x6e>
 8013708:	ab04      	add	r3, sp, #16
 801370a:	3009      	adds	r0, #9
 801370c:	18c0      	adds	r0, r0, r3
 801370e:	9b01      	ldr	r3, [sp, #4]
 8013710:	1ac0      	subs	r0, r0, r3
 8013712:	9b03      	ldr	r3, [sp, #12]
 8013714:	1818      	adds	r0, r3, r0
 8013716:	1b40      	subs	r0, r0, r5
 8013718:	b007      	add	sp, #28
 801371a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801371c:	7818      	ldrb	r0, [r3, #0]
 801371e:	3301      	adds	r3, #1
 8013720:	7008      	strb	r0, [r1, #0]
 8013722:	3101      	adds	r1, #1
 8013724:	e7e7      	b.n	80136f6 <__exponent+0x52>
 8013726:	2330      	movs	r3, #48	; 0x30
 8013728:	18e4      	adds	r4, r4, r3
 801372a:	70ab      	strb	r3, [r5, #2]
 801372c:	1d28      	adds	r0, r5, #4
 801372e:	70ec      	strb	r4, [r5, #3]
 8013730:	e7f1      	b.n	8013716 <__exponent+0x72>
	...

08013734 <_printf_float>:
 8013734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013736:	b095      	sub	sp, #84	; 0x54
 8013738:	000c      	movs	r4, r1
 801373a:	9208      	str	r2, [sp, #32]
 801373c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801373e:	9309      	str	r3, [sp, #36]	; 0x24
 8013740:	0007      	movs	r7, r0
 8013742:	f001 fa85 	bl	8014c50 <_localeconv_r>
 8013746:	6803      	ldr	r3, [r0, #0]
 8013748:	0018      	movs	r0, r3
 801374a:	930b      	str	r3, [sp, #44]	; 0x2c
 801374c:	f7ec fcdc 	bl	8000108 <strlen>
 8013750:	2300      	movs	r3, #0
 8013752:	9312      	str	r3, [sp, #72]	; 0x48
 8013754:	7e23      	ldrb	r3, [r4, #24]
 8013756:	2207      	movs	r2, #7
 8013758:	001e      	movs	r6, r3
 801375a:	6823      	ldr	r3, [r4, #0]
 801375c:	900d      	str	r0, [sp, #52]	; 0x34
 801375e:	930c      	str	r3, [sp, #48]	; 0x30
 8013760:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013762:	682b      	ldr	r3, [r5, #0]
 8013764:	05c9      	lsls	r1, r1, #23
 8013766:	d547      	bpl.n	80137f8 <_printf_float+0xc4>
 8013768:	189b      	adds	r3, r3, r2
 801376a:	4393      	bics	r3, r2
 801376c:	001a      	movs	r2, r3
 801376e:	3208      	adds	r2, #8
 8013770:	602a      	str	r2, [r5, #0]
 8013772:	681a      	ldr	r2, [r3, #0]
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	64a2      	str	r2, [r4, #72]	; 0x48
 8013778:	64e3      	str	r3, [r4, #76]	; 0x4c
 801377a:	2201      	movs	r2, #1
 801377c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801377e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8013780:	930a      	str	r3, [sp, #40]	; 0x28
 8013782:	006b      	lsls	r3, r5, #1
 8013784:	085b      	lsrs	r3, r3, #1
 8013786:	930e      	str	r3, [sp, #56]	; 0x38
 8013788:	980a      	ldr	r0, [sp, #40]	; 0x28
 801378a:	4ba8      	ldr	r3, [pc, #672]	; (8013a2c <_printf_float+0x2f8>)
 801378c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801378e:	4252      	negs	r2, r2
 8013790:	f7ef f9fa 	bl	8002b88 <__aeabi_dcmpun>
 8013794:	2800      	cmp	r0, #0
 8013796:	d131      	bne.n	80137fc <_printf_float+0xc8>
 8013798:	2201      	movs	r2, #1
 801379a:	4ba4      	ldr	r3, [pc, #656]	; (8013a2c <_printf_float+0x2f8>)
 801379c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801379e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80137a0:	4252      	negs	r2, r2
 80137a2:	f7ec fe63 	bl	800046c <__aeabi_dcmple>
 80137a6:	2800      	cmp	r0, #0
 80137a8:	d128      	bne.n	80137fc <_printf_float+0xc8>
 80137aa:	2200      	movs	r2, #0
 80137ac:	2300      	movs	r3, #0
 80137ae:	0029      	movs	r1, r5
 80137b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80137b2:	f7ec fe51 	bl	8000458 <__aeabi_dcmplt>
 80137b6:	2800      	cmp	r0, #0
 80137b8:	d003      	beq.n	80137c2 <_printf_float+0x8e>
 80137ba:	0023      	movs	r3, r4
 80137bc:	222d      	movs	r2, #45	; 0x2d
 80137be:	3343      	adds	r3, #67	; 0x43
 80137c0:	701a      	strb	r2, [r3, #0]
 80137c2:	4d9b      	ldr	r5, [pc, #620]	; (8013a30 <_printf_float+0x2fc>)
 80137c4:	2e47      	cmp	r6, #71	; 0x47
 80137c6:	d900      	bls.n	80137ca <_printf_float+0x96>
 80137c8:	4d9a      	ldr	r5, [pc, #616]	; (8013a34 <_printf_float+0x300>)
 80137ca:	2303      	movs	r3, #3
 80137cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137ce:	6123      	str	r3, [r4, #16]
 80137d0:	3301      	adds	r3, #1
 80137d2:	439a      	bics	r2, r3
 80137d4:	2300      	movs	r3, #0
 80137d6:	6022      	str	r2, [r4, #0]
 80137d8:	930a      	str	r3, [sp, #40]	; 0x28
 80137da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137dc:	0021      	movs	r1, r4
 80137de:	9300      	str	r3, [sp, #0]
 80137e0:	0038      	movs	r0, r7
 80137e2:	9b08      	ldr	r3, [sp, #32]
 80137e4:	aa13      	add	r2, sp, #76	; 0x4c
 80137e6:	f000 f9f3 	bl	8013bd0 <_printf_common>
 80137ea:	1c43      	adds	r3, r0, #1
 80137ec:	d000      	beq.n	80137f0 <_printf_float+0xbc>
 80137ee:	e09e      	b.n	801392e <_printf_float+0x1fa>
 80137f0:	2001      	movs	r0, #1
 80137f2:	4240      	negs	r0, r0
 80137f4:	b015      	add	sp, #84	; 0x54
 80137f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137f8:	3307      	adds	r3, #7
 80137fa:	e7b6      	b.n	801376a <_printf_float+0x36>
 80137fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137fe:	002b      	movs	r3, r5
 8013800:	0010      	movs	r0, r2
 8013802:	0029      	movs	r1, r5
 8013804:	f7ef f9c0 	bl	8002b88 <__aeabi_dcmpun>
 8013808:	2800      	cmp	r0, #0
 801380a:	d00a      	beq.n	8013822 <_printf_float+0xee>
 801380c:	2d00      	cmp	r5, #0
 801380e:	da03      	bge.n	8013818 <_printf_float+0xe4>
 8013810:	0023      	movs	r3, r4
 8013812:	222d      	movs	r2, #45	; 0x2d
 8013814:	3343      	adds	r3, #67	; 0x43
 8013816:	701a      	strb	r2, [r3, #0]
 8013818:	4d87      	ldr	r5, [pc, #540]	; (8013a38 <_printf_float+0x304>)
 801381a:	2e47      	cmp	r6, #71	; 0x47
 801381c:	d9d5      	bls.n	80137ca <_printf_float+0x96>
 801381e:	4d87      	ldr	r5, [pc, #540]	; (8013a3c <_printf_float+0x308>)
 8013820:	e7d3      	b.n	80137ca <_printf_float+0x96>
 8013822:	2220      	movs	r2, #32
 8013824:	0031      	movs	r1, r6
 8013826:	6863      	ldr	r3, [r4, #4]
 8013828:	4391      	bics	r1, r2
 801382a:	910e      	str	r1, [sp, #56]	; 0x38
 801382c:	1c5a      	adds	r2, r3, #1
 801382e:	d147      	bne.n	80138c0 <_printf_float+0x18c>
 8013830:	3307      	adds	r3, #7
 8013832:	6063      	str	r3, [r4, #4]
 8013834:	2380      	movs	r3, #128	; 0x80
 8013836:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013838:	00db      	lsls	r3, r3, #3
 801383a:	4313      	orrs	r3, r2
 801383c:	2200      	movs	r2, #0
 801383e:	9206      	str	r2, [sp, #24]
 8013840:	aa12      	add	r2, sp, #72	; 0x48
 8013842:	9205      	str	r2, [sp, #20]
 8013844:	aa11      	add	r2, sp, #68	; 0x44
 8013846:	9203      	str	r2, [sp, #12]
 8013848:	2223      	movs	r2, #35	; 0x23
 801384a:	a908      	add	r1, sp, #32
 801384c:	6023      	str	r3, [r4, #0]
 801384e:	9301      	str	r3, [sp, #4]
 8013850:	6863      	ldr	r3, [r4, #4]
 8013852:	1852      	adds	r2, r2, r1
 8013854:	9202      	str	r2, [sp, #8]
 8013856:	9300      	str	r3, [sp, #0]
 8013858:	0038      	movs	r0, r7
 801385a:	002b      	movs	r3, r5
 801385c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801385e:	9604      	str	r6, [sp, #16]
 8013860:	f7ff febd 	bl	80135de <__cvt>
 8013864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013866:	0005      	movs	r5, r0
 8013868:	9911      	ldr	r1, [sp, #68]	; 0x44
 801386a:	2b47      	cmp	r3, #71	; 0x47
 801386c:	d108      	bne.n	8013880 <_printf_float+0x14c>
 801386e:	1ccb      	adds	r3, r1, #3
 8013870:	db02      	blt.n	8013878 <_printf_float+0x144>
 8013872:	6863      	ldr	r3, [r4, #4]
 8013874:	4299      	cmp	r1, r3
 8013876:	dd46      	ble.n	8013906 <_printf_float+0x1d2>
 8013878:	0033      	movs	r3, r6
 801387a:	3b02      	subs	r3, #2
 801387c:	b2db      	uxtb	r3, r3
 801387e:	001e      	movs	r6, r3
 8013880:	2e65      	cmp	r6, #101	; 0x65
 8013882:	d824      	bhi.n	80138ce <_printf_float+0x19a>
 8013884:	0020      	movs	r0, r4
 8013886:	0032      	movs	r2, r6
 8013888:	3901      	subs	r1, #1
 801388a:	3050      	adds	r0, #80	; 0x50
 801388c:	9111      	str	r1, [sp, #68]	; 0x44
 801388e:	f7ff ff09 	bl	80136a4 <__exponent>
 8013892:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013894:	900a      	str	r0, [sp, #40]	; 0x28
 8013896:	1813      	adds	r3, r2, r0
 8013898:	6123      	str	r3, [r4, #16]
 801389a:	2a01      	cmp	r2, #1
 801389c:	dc02      	bgt.n	80138a4 <_printf_float+0x170>
 801389e:	6822      	ldr	r2, [r4, #0]
 80138a0:	07d2      	lsls	r2, r2, #31
 80138a2:	d501      	bpl.n	80138a8 <_printf_float+0x174>
 80138a4:	3301      	adds	r3, #1
 80138a6:	6123      	str	r3, [r4, #16]
 80138a8:	2323      	movs	r3, #35	; 0x23
 80138aa:	aa08      	add	r2, sp, #32
 80138ac:	189b      	adds	r3, r3, r2
 80138ae:	781b      	ldrb	r3, [r3, #0]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d100      	bne.n	80138b6 <_printf_float+0x182>
 80138b4:	e791      	b.n	80137da <_printf_float+0xa6>
 80138b6:	0023      	movs	r3, r4
 80138b8:	222d      	movs	r2, #45	; 0x2d
 80138ba:	3343      	adds	r3, #67	; 0x43
 80138bc:	701a      	strb	r2, [r3, #0]
 80138be:	e78c      	b.n	80137da <_printf_float+0xa6>
 80138c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80138c2:	2a47      	cmp	r2, #71	; 0x47
 80138c4:	d1b6      	bne.n	8013834 <_printf_float+0x100>
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d1b4      	bne.n	8013834 <_printf_float+0x100>
 80138ca:	3301      	adds	r3, #1
 80138cc:	e7b1      	b.n	8013832 <_printf_float+0xfe>
 80138ce:	2e66      	cmp	r6, #102	; 0x66
 80138d0:	d11b      	bne.n	801390a <_printf_float+0x1d6>
 80138d2:	6863      	ldr	r3, [r4, #4]
 80138d4:	2900      	cmp	r1, #0
 80138d6:	dd0d      	ble.n	80138f4 <_printf_float+0x1c0>
 80138d8:	6121      	str	r1, [r4, #16]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d102      	bne.n	80138e4 <_printf_float+0x1b0>
 80138de:	6822      	ldr	r2, [r4, #0]
 80138e0:	07d2      	lsls	r2, r2, #31
 80138e2:	d502      	bpl.n	80138ea <_printf_float+0x1b6>
 80138e4:	3301      	adds	r3, #1
 80138e6:	1859      	adds	r1, r3, r1
 80138e8:	6121      	str	r1, [r4, #16]
 80138ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80138ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80138ee:	2300      	movs	r3, #0
 80138f0:	930a      	str	r3, [sp, #40]	; 0x28
 80138f2:	e7d9      	b.n	80138a8 <_printf_float+0x174>
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d103      	bne.n	8013900 <_printf_float+0x1cc>
 80138f8:	2201      	movs	r2, #1
 80138fa:	6821      	ldr	r1, [r4, #0]
 80138fc:	4211      	tst	r1, r2
 80138fe:	d000      	beq.n	8013902 <_printf_float+0x1ce>
 8013900:	1c9a      	adds	r2, r3, #2
 8013902:	6122      	str	r2, [r4, #16]
 8013904:	e7f1      	b.n	80138ea <_printf_float+0x1b6>
 8013906:	2367      	movs	r3, #103	; 0x67
 8013908:	001e      	movs	r6, r3
 801390a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801390c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801390e:	4293      	cmp	r3, r2
 8013910:	db06      	blt.n	8013920 <_printf_float+0x1ec>
 8013912:	6822      	ldr	r2, [r4, #0]
 8013914:	6123      	str	r3, [r4, #16]
 8013916:	07d2      	lsls	r2, r2, #31
 8013918:	d5e7      	bpl.n	80138ea <_printf_float+0x1b6>
 801391a:	3301      	adds	r3, #1
 801391c:	6123      	str	r3, [r4, #16]
 801391e:	e7e4      	b.n	80138ea <_printf_float+0x1b6>
 8013920:	2101      	movs	r1, #1
 8013922:	2b00      	cmp	r3, #0
 8013924:	dc01      	bgt.n	801392a <_printf_float+0x1f6>
 8013926:	1849      	adds	r1, r1, r1
 8013928:	1ac9      	subs	r1, r1, r3
 801392a:	1852      	adds	r2, r2, r1
 801392c:	e7e9      	b.n	8013902 <_printf_float+0x1ce>
 801392e:	6822      	ldr	r2, [r4, #0]
 8013930:	0553      	lsls	r3, r2, #21
 8013932:	d408      	bmi.n	8013946 <_printf_float+0x212>
 8013934:	6923      	ldr	r3, [r4, #16]
 8013936:	002a      	movs	r2, r5
 8013938:	0038      	movs	r0, r7
 801393a:	9908      	ldr	r1, [sp, #32]
 801393c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801393e:	47a8      	blx	r5
 8013940:	1c43      	adds	r3, r0, #1
 8013942:	d129      	bne.n	8013998 <_printf_float+0x264>
 8013944:	e754      	b.n	80137f0 <_printf_float+0xbc>
 8013946:	2e65      	cmp	r6, #101	; 0x65
 8013948:	d800      	bhi.n	801394c <_printf_float+0x218>
 801394a:	e0ec      	b.n	8013b26 <_printf_float+0x3f2>
 801394c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801394e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8013950:	2200      	movs	r2, #0
 8013952:	2300      	movs	r3, #0
 8013954:	f7ec fd7a 	bl	800044c <__aeabi_dcmpeq>
 8013958:	2800      	cmp	r0, #0
 801395a:	d034      	beq.n	80139c6 <_printf_float+0x292>
 801395c:	2301      	movs	r3, #1
 801395e:	0038      	movs	r0, r7
 8013960:	4a37      	ldr	r2, [pc, #220]	; (8013a40 <_printf_float+0x30c>)
 8013962:	9908      	ldr	r1, [sp, #32]
 8013964:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013966:	47a8      	blx	r5
 8013968:	1c43      	adds	r3, r0, #1
 801396a:	d100      	bne.n	801396e <_printf_float+0x23a>
 801396c:	e740      	b.n	80137f0 <_printf_float+0xbc>
 801396e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013970:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013972:	4293      	cmp	r3, r2
 8013974:	db02      	blt.n	801397c <_printf_float+0x248>
 8013976:	6823      	ldr	r3, [r4, #0]
 8013978:	07db      	lsls	r3, r3, #31
 801397a:	d50d      	bpl.n	8013998 <_printf_float+0x264>
 801397c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801397e:	0038      	movs	r0, r7
 8013980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013982:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013984:	9908      	ldr	r1, [sp, #32]
 8013986:	47a8      	blx	r5
 8013988:	2500      	movs	r5, #0
 801398a:	1c43      	adds	r3, r0, #1
 801398c:	d100      	bne.n	8013990 <_printf_float+0x25c>
 801398e:	e72f      	b.n	80137f0 <_printf_float+0xbc>
 8013990:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013992:	3b01      	subs	r3, #1
 8013994:	42ab      	cmp	r3, r5
 8013996:	dc0a      	bgt.n	80139ae <_printf_float+0x27a>
 8013998:	6823      	ldr	r3, [r4, #0]
 801399a:	079b      	lsls	r3, r3, #30
 801399c:	d500      	bpl.n	80139a0 <_printf_float+0x26c>
 801399e:	e114      	b.n	8013bca <_printf_float+0x496>
 80139a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80139a2:	68e0      	ldr	r0, [r4, #12]
 80139a4:	4298      	cmp	r0, r3
 80139a6:	db00      	blt.n	80139aa <_printf_float+0x276>
 80139a8:	e724      	b.n	80137f4 <_printf_float+0xc0>
 80139aa:	0018      	movs	r0, r3
 80139ac:	e722      	b.n	80137f4 <_printf_float+0xc0>
 80139ae:	0022      	movs	r2, r4
 80139b0:	2301      	movs	r3, #1
 80139b2:	0038      	movs	r0, r7
 80139b4:	9908      	ldr	r1, [sp, #32]
 80139b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80139b8:	321a      	adds	r2, #26
 80139ba:	47b0      	blx	r6
 80139bc:	1c43      	adds	r3, r0, #1
 80139be:	d100      	bne.n	80139c2 <_printf_float+0x28e>
 80139c0:	e716      	b.n	80137f0 <_printf_float+0xbc>
 80139c2:	3501      	adds	r5, #1
 80139c4:	e7e4      	b.n	8013990 <_printf_float+0x25c>
 80139c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	dc3b      	bgt.n	8013a44 <_printf_float+0x310>
 80139cc:	2301      	movs	r3, #1
 80139ce:	0038      	movs	r0, r7
 80139d0:	4a1b      	ldr	r2, [pc, #108]	; (8013a40 <_printf_float+0x30c>)
 80139d2:	9908      	ldr	r1, [sp, #32]
 80139d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80139d6:	47b0      	blx	r6
 80139d8:	1c43      	adds	r3, r0, #1
 80139da:	d100      	bne.n	80139de <_printf_float+0x2aa>
 80139dc:	e708      	b.n	80137f0 <_printf_float+0xbc>
 80139de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80139e2:	4313      	orrs	r3, r2
 80139e4:	d102      	bne.n	80139ec <_printf_float+0x2b8>
 80139e6:	6823      	ldr	r3, [r4, #0]
 80139e8:	07db      	lsls	r3, r3, #31
 80139ea:	d5d5      	bpl.n	8013998 <_printf_float+0x264>
 80139ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139ee:	0038      	movs	r0, r7
 80139f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80139f2:	9908      	ldr	r1, [sp, #32]
 80139f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80139f6:	47b0      	blx	r6
 80139f8:	1c43      	adds	r3, r0, #1
 80139fa:	d100      	bne.n	80139fe <_printf_float+0x2ca>
 80139fc:	e6f8      	b.n	80137f0 <_printf_float+0xbc>
 80139fe:	2300      	movs	r3, #0
 8013a00:	930a      	str	r3, [sp, #40]	; 0x28
 8013a02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a06:	425b      	negs	r3, r3
 8013a08:	4293      	cmp	r3, r2
 8013a0a:	dc01      	bgt.n	8013a10 <_printf_float+0x2dc>
 8013a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a0e:	e792      	b.n	8013936 <_printf_float+0x202>
 8013a10:	0022      	movs	r2, r4
 8013a12:	2301      	movs	r3, #1
 8013a14:	0038      	movs	r0, r7
 8013a16:	9908      	ldr	r1, [sp, #32]
 8013a18:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013a1a:	321a      	adds	r2, #26
 8013a1c:	47b0      	blx	r6
 8013a1e:	1c43      	adds	r3, r0, #1
 8013a20:	d100      	bne.n	8013a24 <_printf_float+0x2f0>
 8013a22:	e6e5      	b.n	80137f0 <_printf_float+0xbc>
 8013a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a26:	3301      	adds	r3, #1
 8013a28:	e7ea      	b.n	8013a00 <_printf_float+0x2cc>
 8013a2a:	46c0      	nop			; (mov r8, r8)
 8013a2c:	7fefffff 	.word	0x7fefffff
 8013a30:	08016640 	.word	0x08016640
 8013a34:	08016644 	.word	0x08016644
 8013a38:	08016648 	.word	0x08016648
 8013a3c:	0801664c 	.word	0x0801664c
 8013a40:	08016650 	.word	0x08016650
 8013a44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013a48:	920a      	str	r2, [sp, #40]	; 0x28
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	dd00      	ble.n	8013a50 <_printf_float+0x31c>
 8013a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8013a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	dc3d      	bgt.n	8013ad2 <_printf_float+0x39e>
 8013a56:	2300      	movs	r3, #0
 8013a58:	930e      	str	r3, [sp, #56]	; 0x38
 8013a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a5c:	43db      	mvns	r3, r3
 8013a5e:	17db      	asrs	r3, r3, #31
 8013a60:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013a64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a66:	930c      	str	r3, [sp, #48]	; 0x30
 8013a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a6a:	4013      	ands	r3, r2
 8013a6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a6e:	1ad3      	subs	r3, r2, r3
 8013a70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a72:	4293      	cmp	r3, r2
 8013a74:	dc36      	bgt.n	8013ae4 <_printf_float+0x3b0>
 8013a76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013a78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a7a:	4293      	cmp	r3, r2
 8013a7c:	db40      	blt.n	8013b00 <_printf_float+0x3cc>
 8013a7e:	6823      	ldr	r3, [r4, #0]
 8013a80:	07db      	lsls	r3, r3, #31
 8013a82:	d43d      	bmi.n	8013b00 <_printf_float+0x3cc>
 8013a84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a88:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013a8a:	1ad3      	subs	r3, r2, r3
 8013a8c:	1a52      	subs	r2, r2, r1
 8013a8e:	920a      	str	r2, [sp, #40]	; 0x28
 8013a90:	429a      	cmp	r2, r3
 8013a92:	dd00      	ble.n	8013a96 <_printf_float+0x362>
 8013a94:	930a      	str	r3, [sp, #40]	; 0x28
 8013a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	dc3a      	bgt.n	8013b12 <_printf_float+0x3de>
 8013a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a9e:	2500      	movs	r5, #0
 8013aa0:	43db      	mvns	r3, r3
 8013aa2:	17db      	asrs	r3, r3, #31
 8013aa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8013aa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013aaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013aac:	1a9b      	subs	r3, r3, r2
 8013aae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ab0:	400a      	ands	r2, r1
 8013ab2:	1a9b      	subs	r3, r3, r2
 8013ab4:	42ab      	cmp	r3, r5
 8013ab6:	dc00      	bgt.n	8013aba <_printf_float+0x386>
 8013ab8:	e76e      	b.n	8013998 <_printf_float+0x264>
 8013aba:	0022      	movs	r2, r4
 8013abc:	2301      	movs	r3, #1
 8013abe:	0038      	movs	r0, r7
 8013ac0:	9908      	ldr	r1, [sp, #32]
 8013ac2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013ac4:	321a      	adds	r2, #26
 8013ac6:	47b0      	blx	r6
 8013ac8:	1c43      	adds	r3, r0, #1
 8013aca:	d100      	bne.n	8013ace <_printf_float+0x39a>
 8013acc:	e690      	b.n	80137f0 <_printf_float+0xbc>
 8013ace:	3501      	adds	r5, #1
 8013ad0:	e7e9      	b.n	8013aa6 <_printf_float+0x372>
 8013ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ad4:	002a      	movs	r2, r5
 8013ad6:	0038      	movs	r0, r7
 8013ad8:	9908      	ldr	r1, [sp, #32]
 8013ada:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013adc:	47b0      	blx	r6
 8013ade:	1c43      	adds	r3, r0, #1
 8013ae0:	d1b9      	bne.n	8013a56 <_printf_float+0x322>
 8013ae2:	e685      	b.n	80137f0 <_printf_float+0xbc>
 8013ae4:	0022      	movs	r2, r4
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	0038      	movs	r0, r7
 8013aea:	9908      	ldr	r1, [sp, #32]
 8013aec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013aee:	321a      	adds	r2, #26
 8013af0:	47b0      	blx	r6
 8013af2:	1c43      	adds	r3, r0, #1
 8013af4:	d100      	bne.n	8013af8 <_printf_float+0x3c4>
 8013af6:	e67b      	b.n	80137f0 <_printf_float+0xbc>
 8013af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013afa:	3301      	adds	r3, #1
 8013afc:	930e      	str	r3, [sp, #56]	; 0x38
 8013afe:	e7b0      	b.n	8013a62 <_printf_float+0x32e>
 8013b00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b02:	0038      	movs	r0, r7
 8013b04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b06:	9908      	ldr	r1, [sp, #32]
 8013b08:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013b0a:	47b0      	blx	r6
 8013b0c:	1c43      	adds	r3, r0, #1
 8013b0e:	d1b9      	bne.n	8013a84 <_printf_float+0x350>
 8013b10:	e66e      	b.n	80137f0 <_printf_float+0xbc>
 8013b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b14:	0038      	movs	r0, r7
 8013b16:	18ea      	adds	r2, r5, r3
 8013b18:	9908      	ldr	r1, [sp, #32]
 8013b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013b1e:	47a8      	blx	r5
 8013b20:	1c43      	adds	r3, r0, #1
 8013b22:	d1bb      	bne.n	8013a9c <_printf_float+0x368>
 8013b24:	e664      	b.n	80137f0 <_printf_float+0xbc>
 8013b26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b28:	2b01      	cmp	r3, #1
 8013b2a:	dc02      	bgt.n	8013b32 <_printf_float+0x3fe>
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	421a      	tst	r2, r3
 8013b30:	d038      	beq.n	8013ba4 <_printf_float+0x470>
 8013b32:	2301      	movs	r3, #1
 8013b34:	002a      	movs	r2, r5
 8013b36:	0038      	movs	r0, r7
 8013b38:	9908      	ldr	r1, [sp, #32]
 8013b3a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013b3c:	47b0      	blx	r6
 8013b3e:	1c43      	adds	r3, r0, #1
 8013b40:	d100      	bne.n	8013b44 <_printf_float+0x410>
 8013b42:	e655      	b.n	80137f0 <_printf_float+0xbc>
 8013b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b46:	0038      	movs	r0, r7
 8013b48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b4a:	9908      	ldr	r1, [sp, #32]
 8013b4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013b4e:	47b0      	blx	r6
 8013b50:	1c43      	adds	r3, r0, #1
 8013b52:	d100      	bne.n	8013b56 <_printf_float+0x422>
 8013b54:	e64c      	b.n	80137f0 <_printf_float+0xbc>
 8013b56:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013b58:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	f7ec fc75 	bl	800044c <__aeabi_dcmpeq>
 8013b62:	2800      	cmp	r0, #0
 8013b64:	d11c      	bne.n	8013ba0 <_printf_float+0x46c>
 8013b66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b68:	1c6a      	adds	r2, r5, #1
 8013b6a:	3b01      	subs	r3, #1
 8013b6c:	0038      	movs	r0, r7
 8013b6e:	9908      	ldr	r1, [sp, #32]
 8013b70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013b72:	47a8      	blx	r5
 8013b74:	1c43      	adds	r3, r0, #1
 8013b76:	d10f      	bne.n	8013b98 <_printf_float+0x464>
 8013b78:	e63a      	b.n	80137f0 <_printf_float+0xbc>
 8013b7a:	0022      	movs	r2, r4
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	0038      	movs	r0, r7
 8013b80:	9908      	ldr	r1, [sp, #32]
 8013b82:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013b84:	321a      	adds	r2, #26
 8013b86:	47b0      	blx	r6
 8013b88:	1c43      	adds	r3, r0, #1
 8013b8a:	d100      	bne.n	8013b8e <_printf_float+0x45a>
 8013b8c:	e630      	b.n	80137f0 <_printf_float+0xbc>
 8013b8e:	3501      	adds	r5, #1
 8013b90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b92:	3b01      	subs	r3, #1
 8013b94:	42ab      	cmp	r3, r5
 8013b96:	dcf0      	bgt.n	8013b7a <_printf_float+0x446>
 8013b98:	0022      	movs	r2, r4
 8013b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b9c:	3250      	adds	r2, #80	; 0x50
 8013b9e:	e6cb      	b.n	8013938 <_printf_float+0x204>
 8013ba0:	2500      	movs	r5, #0
 8013ba2:	e7f5      	b.n	8013b90 <_printf_float+0x45c>
 8013ba4:	002a      	movs	r2, r5
 8013ba6:	e7e1      	b.n	8013b6c <_printf_float+0x438>
 8013ba8:	0022      	movs	r2, r4
 8013baa:	2301      	movs	r3, #1
 8013bac:	0038      	movs	r0, r7
 8013bae:	9908      	ldr	r1, [sp, #32]
 8013bb0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013bb2:	3219      	adds	r2, #25
 8013bb4:	47b0      	blx	r6
 8013bb6:	1c43      	adds	r3, r0, #1
 8013bb8:	d100      	bne.n	8013bbc <_printf_float+0x488>
 8013bba:	e619      	b.n	80137f0 <_printf_float+0xbc>
 8013bbc:	3501      	adds	r5, #1
 8013bbe:	68e3      	ldr	r3, [r4, #12]
 8013bc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013bc2:	1a9b      	subs	r3, r3, r2
 8013bc4:	42ab      	cmp	r3, r5
 8013bc6:	dcef      	bgt.n	8013ba8 <_printf_float+0x474>
 8013bc8:	e6ea      	b.n	80139a0 <_printf_float+0x26c>
 8013bca:	2500      	movs	r5, #0
 8013bcc:	e7f7      	b.n	8013bbe <_printf_float+0x48a>
 8013bce:	46c0      	nop			; (mov r8, r8)

08013bd0 <_printf_common>:
 8013bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bd2:	0015      	movs	r5, r2
 8013bd4:	9301      	str	r3, [sp, #4]
 8013bd6:	688a      	ldr	r2, [r1, #8]
 8013bd8:	690b      	ldr	r3, [r1, #16]
 8013bda:	000c      	movs	r4, r1
 8013bdc:	9000      	str	r0, [sp, #0]
 8013bde:	4293      	cmp	r3, r2
 8013be0:	da00      	bge.n	8013be4 <_printf_common+0x14>
 8013be2:	0013      	movs	r3, r2
 8013be4:	0022      	movs	r2, r4
 8013be6:	602b      	str	r3, [r5, #0]
 8013be8:	3243      	adds	r2, #67	; 0x43
 8013bea:	7812      	ldrb	r2, [r2, #0]
 8013bec:	2a00      	cmp	r2, #0
 8013bee:	d001      	beq.n	8013bf4 <_printf_common+0x24>
 8013bf0:	3301      	adds	r3, #1
 8013bf2:	602b      	str	r3, [r5, #0]
 8013bf4:	6823      	ldr	r3, [r4, #0]
 8013bf6:	069b      	lsls	r3, r3, #26
 8013bf8:	d502      	bpl.n	8013c00 <_printf_common+0x30>
 8013bfa:	682b      	ldr	r3, [r5, #0]
 8013bfc:	3302      	adds	r3, #2
 8013bfe:	602b      	str	r3, [r5, #0]
 8013c00:	6822      	ldr	r2, [r4, #0]
 8013c02:	2306      	movs	r3, #6
 8013c04:	0017      	movs	r7, r2
 8013c06:	401f      	ands	r7, r3
 8013c08:	421a      	tst	r2, r3
 8013c0a:	d027      	beq.n	8013c5c <_printf_common+0x8c>
 8013c0c:	0023      	movs	r3, r4
 8013c0e:	3343      	adds	r3, #67	; 0x43
 8013c10:	781b      	ldrb	r3, [r3, #0]
 8013c12:	1e5a      	subs	r2, r3, #1
 8013c14:	4193      	sbcs	r3, r2
 8013c16:	6822      	ldr	r2, [r4, #0]
 8013c18:	0692      	lsls	r2, r2, #26
 8013c1a:	d430      	bmi.n	8013c7e <_printf_common+0xae>
 8013c1c:	0022      	movs	r2, r4
 8013c1e:	9901      	ldr	r1, [sp, #4]
 8013c20:	9800      	ldr	r0, [sp, #0]
 8013c22:	9e08      	ldr	r6, [sp, #32]
 8013c24:	3243      	adds	r2, #67	; 0x43
 8013c26:	47b0      	blx	r6
 8013c28:	1c43      	adds	r3, r0, #1
 8013c2a:	d025      	beq.n	8013c78 <_printf_common+0xa8>
 8013c2c:	2306      	movs	r3, #6
 8013c2e:	6820      	ldr	r0, [r4, #0]
 8013c30:	682a      	ldr	r2, [r5, #0]
 8013c32:	68e1      	ldr	r1, [r4, #12]
 8013c34:	2500      	movs	r5, #0
 8013c36:	4003      	ands	r3, r0
 8013c38:	2b04      	cmp	r3, #4
 8013c3a:	d103      	bne.n	8013c44 <_printf_common+0x74>
 8013c3c:	1a8d      	subs	r5, r1, r2
 8013c3e:	43eb      	mvns	r3, r5
 8013c40:	17db      	asrs	r3, r3, #31
 8013c42:	401d      	ands	r5, r3
 8013c44:	68a3      	ldr	r3, [r4, #8]
 8013c46:	6922      	ldr	r2, [r4, #16]
 8013c48:	4293      	cmp	r3, r2
 8013c4a:	dd01      	ble.n	8013c50 <_printf_common+0x80>
 8013c4c:	1a9b      	subs	r3, r3, r2
 8013c4e:	18ed      	adds	r5, r5, r3
 8013c50:	2700      	movs	r7, #0
 8013c52:	42bd      	cmp	r5, r7
 8013c54:	d120      	bne.n	8013c98 <_printf_common+0xc8>
 8013c56:	2000      	movs	r0, #0
 8013c58:	e010      	b.n	8013c7c <_printf_common+0xac>
 8013c5a:	3701      	adds	r7, #1
 8013c5c:	68e3      	ldr	r3, [r4, #12]
 8013c5e:	682a      	ldr	r2, [r5, #0]
 8013c60:	1a9b      	subs	r3, r3, r2
 8013c62:	42bb      	cmp	r3, r7
 8013c64:	ddd2      	ble.n	8013c0c <_printf_common+0x3c>
 8013c66:	0022      	movs	r2, r4
 8013c68:	2301      	movs	r3, #1
 8013c6a:	9901      	ldr	r1, [sp, #4]
 8013c6c:	9800      	ldr	r0, [sp, #0]
 8013c6e:	9e08      	ldr	r6, [sp, #32]
 8013c70:	3219      	adds	r2, #25
 8013c72:	47b0      	blx	r6
 8013c74:	1c43      	adds	r3, r0, #1
 8013c76:	d1f0      	bne.n	8013c5a <_printf_common+0x8a>
 8013c78:	2001      	movs	r0, #1
 8013c7a:	4240      	negs	r0, r0
 8013c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013c7e:	2030      	movs	r0, #48	; 0x30
 8013c80:	18e1      	adds	r1, r4, r3
 8013c82:	3143      	adds	r1, #67	; 0x43
 8013c84:	7008      	strb	r0, [r1, #0]
 8013c86:	0021      	movs	r1, r4
 8013c88:	1c5a      	adds	r2, r3, #1
 8013c8a:	3145      	adds	r1, #69	; 0x45
 8013c8c:	7809      	ldrb	r1, [r1, #0]
 8013c8e:	18a2      	adds	r2, r4, r2
 8013c90:	3243      	adds	r2, #67	; 0x43
 8013c92:	3302      	adds	r3, #2
 8013c94:	7011      	strb	r1, [r2, #0]
 8013c96:	e7c1      	b.n	8013c1c <_printf_common+0x4c>
 8013c98:	0022      	movs	r2, r4
 8013c9a:	2301      	movs	r3, #1
 8013c9c:	9901      	ldr	r1, [sp, #4]
 8013c9e:	9800      	ldr	r0, [sp, #0]
 8013ca0:	9e08      	ldr	r6, [sp, #32]
 8013ca2:	321a      	adds	r2, #26
 8013ca4:	47b0      	blx	r6
 8013ca6:	1c43      	adds	r3, r0, #1
 8013ca8:	d0e6      	beq.n	8013c78 <_printf_common+0xa8>
 8013caa:	3701      	adds	r7, #1
 8013cac:	e7d1      	b.n	8013c52 <_printf_common+0x82>
	...

08013cb0 <_printf_i>:
 8013cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cb2:	b08b      	sub	sp, #44	; 0x2c
 8013cb4:	9206      	str	r2, [sp, #24]
 8013cb6:	000a      	movs	r2, r1
 8013cb8:	3243      	adds	r2, #67	; 0x43
 8013cba:	9307      	str	r3, [sp, #28]
 8013cbc:	9005      	str	r0, [sp, #20]
 8013cbe:	9204      	str	r2, [sp, #16]
 8013cc0:	7e0a      	ldrb	r2, [r1, #24]
 8013cc2:	000c      	movs	r4, r1
 8013cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013cc6:	2a78      	cmp	r2, #120	; 0x78
 8013cc8:	d806      	bhi.n	8013cd8 <_printf_i+0x28>
 8013cca:	2a62      	cmp	r2, #98	; 0x62
 8013ccc:	d808      	bhi.n	8013ce0 <_printf_i+0x30>
 8013cce:	2a00      	cmp	r2, #0
 8013cd0:	d100      	bne.n	8013cd4 <_printf_i+0x24>
 8013cd2:	e0c0      	b.n	8013e56 <_printf_i+0x1a6>
 8013cd4:	2a58      	cmp	r2, #88	; 0x58
 8013cd6:	d052      	beq.n	8013d7e <_printf_i+0xce>
 8013cd8:	0026      	movs	r6, r4
 8013cda:	3642      	adds	r6, #66	; 0x42
 8013cdc:	7032      	strb	r2, [r6, #0]
 8013cde:	e022      	b.n	8013d26 <_printf_i+0x76>
 8013ce0:	0010      	movs	r0, r2
 8013ce2:	3863      	subs	r0, #99	; 0x63
 8013ce4:	2815      	cmp	r0, #21
 8013ce6:	d8f7      	bhi.n	8013cd8 <_printf_i+0x28>
 8013ce8:	f7ec fa20 	bl	800012c <__gnu_thumb1_case_shi>
 8013cec:	001f0016 	.word	0x001f0016
 8013cf0:	fff6fff6 	.word	0xfff6fff6
 8013cf4:	fff6fff6 	.word	0xfff6fff6
 8013cf8:	fff6001f 	.word	0xfff6001f
 8013cfc:	fff6fff6 	.word	0xfff6fff6
 8013d00:	00a8fff6 	.word	0x00a8fff6
 8013d04:	009a0036 	.word	0x009a0036
 8013d08:	fff6fff6 	.word	0xfff6fff6
 8013d0c:	fff600b9 	.word	0xfff600b9
 8013d10:	fff60036 	.word	0xfff60036
 8013d14:	009efff6 	.word	0x009efff6
 8013d18:	0026      	movs	r6, r4
 8013d1a:	681a      	ldr	r2, [r3, #0]
 8013d1c:	3642      	adds	r6, #66	; 0x42
 8013d1e:	1d11      	adds	r1, r2, #4
 8013d20:	6019      	str	r1, [r3, #0]
 8013d22:	6813      	ldr	r3, [r2, #0]
 8013d24:	7033      	strb	r3, [r6, #0]
 8013d26:	2301      	movs	r3, #1
 8013d28:	e0a7      	b.n	8013e7a <_printf_i+0x1ca>
 8013d2a:	6808      	ldr	r0, [r1, #0]
 8013d2c:	6819      	ldr	r1, [r3, #0]
 8013d2e:	1d0a      	adds	r2, r1, #4
 8013d30:	0605      	lsls	r5, r0, #24
 8013d32:	d50b      	bpl.n	8013d4c <_printf_i+0x9c>
 8013d34:	680d      	ldr	r5, [r1, #0]
 8013d36:	601a      	str	r2, [r3, #0]
 8013d38:	2d00      	cmp	r5, #0
 8013d3a:	da03      	bge.n	8013d44 <_printf_i+0x94>
 8013d3c:	232d      	movs	r3, #45	; 0x2d
 8013d3e:	9a04      	ldr	r2, [sp, #16]
 8013d40:	426d      	negs	r5, r5
 8013d42:	7013      	strb	r3, [r2, #0]
 8013d44:	4b61      	ldr	r3, [pc, #388]	; (8013ecc <_printf_i+0x21c>)
 8013d46:	270a      	movs	r7, #10
 8013d48:	9303      	str	r3, [sp, #12]
 8013d4a:	e032      	b.n	8013db2 <_printf_i+0x102>
 8013d4c:	680d      	ldr	r5, [r1, #0]
 8013d4e:	601a      	str	r2, [r3, #0]
 8013d50:	0641      	lsls	r1, r0, #25
 8013d52:	d5f1      	bpl.n	8013d38 <_printf_i+0x88>
 8013d54:	b22d      	sxth	r5, r5
 8013d56:	e7ef      	b.n	8013d38 <_printf_i+0x88>
 8013d58:	680d      	ldr	r5, [r1, #0]
 8013d5a:	6819      	ldr	r1, [r3, #0]
 8013d5c:	1d08      	adds	r0, r1, #4
 8013d5e:	6018      	str	r0, [r3, #0]
 8013d60:	062e      	lsls	r6, r5, #24
 8013d62:	d501      	bpl.n	8013d68 <_printf_i+0xb8>
 8013d64:	680d      	ldr	r5, [r1, #0]
 8013d66:	e003      	b.n	8013d70 <_printf_i+0xc0>
 8013d68:	066d      	lsls	r5, r5, #25
 8013d6a:	d5fb      	bpl.n	8013d64 <_printf_i+0xb4>
 8013d6c:	680d      	ldr	r5, [r1, #0]
 8013d6e:	b2ad      	uxth	r5, r5
 8013d70:	4b56      	ldr	r3, [pc, #344]	; (8013ecc <_printf_i+0x21c>)
 8013d72:	270a      	movs	r7, #10
 8013d74:	9303      	str	r3, [sp, #12]
 8013d76:	2a6f      	cmp	r2, #111	; 0x6f
 8013d78:	d117      	bne.n	8013daa <_printf_i+0xfa>
 8013d7a:	2708      	movs	r7, #8
 8013d7c:	e015      	b.n	8013daa <_printf_i+0xfa>
 8013d7e:	3145      	adds	r1, #69	; 0x45
 8013d80:	700a      	strb	r2, [r1, #0]
 8013d82:	4a52      	ldr	r2, [pc, #328]	; (8013ecc <_printf_i+0x21c>)
 8013d84:	9203      	str	r2, [sp, #12]
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	6821      	ldr	r1, [r4, #0]
 8013d8a:	ca20      	ldmia	r2!, {r5}
 8013d8c:	601a      	str	r2, [r3, #0]
 8013d8e:	0608      	lsls	r0, r1, #24
 8013d90:	d550      	bpl.n	8013e34 <_printf_i+0x184>
 8013d92:	07cb      	lsls	r3, r1, #31
 8013d94:	d502      	bpl.n	8013d9c <_printf_i+0xec>
 8013d96:	2320      	movs	r3, #32
 8013d98:	4319      	orrs	r1, r3
 8013d9a:	6021      	str	r1, [r4, #0]
 8013d9c:	2710      	movs	r7, #16
 8013d9e:	2d00      	cmp	r5, #0
 8013da0:	d103      	bne.n	8013daa <_printf_i+0xfa>
 8013da2:	2320      	movs	r3, #32
 8013da4:	6822      	ldr	r2, [r4, #0]
 8013da6:	439a      	bics	r2, r3
 8013da8:	6022      	str	r2, [r4, #0]
 8013daa:	0023      	movs	r3, r4
 8013dac:	2200      	movs	r2, #0
 8013dae:	3343      	adds	r3, #67	; 0x43
 8013db0:	701a      	strb	r2, [r3, #0]
 8013db2:	6863      	ldr	r3, [r4, #4]
 8013db4:	60a3      	str	r3, [r4, #8]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	db03      	blt.n	8013dc2 <_printf_i+0x112>
 8013dba:	2204      	movs	r2, #4
 8013dbc:	6821      	ldr	r1, [r4, #0]
 8013dbe:	4391      	bics	r1, r2
 8013dc0:	6021      	str	r1, [r4, #0]
 8013dc2:	2d00      	cmp	r5, #0
 8013dc4:	d102      	bne.n	8013dcc <_printf_i+0x11c>
 8013dc6:	9e04      	ldr	r6, [sp, #16]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d00c      	beq.n	8013de6 <_printf_i+0x136>
 8013dcc:	9e04      	ldr	r6, [sp, #16]
 8013dce:	0028      	movs	r0, r5
 8013dd0:	0039      	movs	r1, r7
 8013dd2:	f7ec fa3b 	bl	800024c <__aeabi_uidivmod>
 8013dd6:	9b03      	ldr	r3, [sp, #12]
 8013dd8:	3e01      	subs	r6, #1
 8013dda:	5c5b      	ldrb	r3, [r3, r1]
 8013ddc:	7033      	strb	r3, [r6, #0]
 8013dde:	002b      	movs	r3, r5
 8013de0:	0005      	movs	r5, r0
 8013de2:	429f      	cmp	r7, r3
 8013de4:	d9f3      	bls.n	8013dce <_printf_i+0x11e>
 8013de6:	2f08      	cmp	r7, #8
 8013de8:	d109      	bne.n	8013dfe <_printf_i+0x14e>
 8013dea:	6823      	ldr	r3, [r4, #0]
 8013dec:	07db      	lsls	r3, r3, #31
 8013dee:	d506      	bpl.n	8013dfe <_printf_i+0x14e>
 8013df0:	6863      	ldr	r3, [r4, #4]
 8013df2:	6922      	ldr	r2, [r4, #16]
 8013df4:	4293      	cmp	r3, r2
 8013df6:	dc02      	bgt.n	8013dfe <_printf_i+0x14e>
 8013df8:	2330      	movs	r3, #48	; 0x30
 8013dfa:	3e01      	subs	r6, #1
 8013dfc:	7033      	strb	r3, [r6, #0]
 8013dfe:	9b04      	ldr	r3, [sp, #16]
 8013e00:	1b9b      	subs	r3, r3, r6
 8013e02:	6123      	str	r3, [r4, #16]
 8013e04:	9b07      	ldr	r3, [sp, #28]
 8013e06:	0021      	movs	r1, r4
 8013e08:	9300      	str	r3, [sp, #0]
 8013e0a:	9805      	ldr	r0, [sp, #20]
 8013e0c:	9b06      	ldr	r3, [sp, #24]
 8013e0e:	aa09      	add	r2, sp, #36	; 0x24
 8013e10:	f7ff fede 	bl	8013bd0 <_printf_common>
 8013e14:	1c43      	adds	r3, r0, #1
 8013e16:	d135      	bne.n	8013e84 <_printf_i+0x1d4>
 8013e18:	2001      	movs	r0, #1
 8013e1a:	4240      	negs	r0, r0
 8013e1c:	b00b      	add	sp, #44	; 0x2c
 8013e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e20:	2220      	movs	r2, #32
 8013e22:	6809      	ldr	r1, [r1, #0]
 8013e24:	430a      	orrs	r2, r1
 8013e26:	6022      	str	r2, [r4, #0]
 8013e28:	0022      	movs	r2, r4
 8013e2a:	2178      	movs	r1, #120	; 0x78
 8013e2c:	3245      	adds	r2, #69	; 0x45
 8013e2e:	7011      	strb	r1, [r2, #0]
 8013e30:	4a27      	ldr	r2, [pc, #156]	; (8013ed0 <_printf_i+0x220>)
 8013e32:	e7a7      	b.n	8013d84 <_printf_i+0xd4>
 8013e34:	0648      	lsls	r0, r1, #25
 8013e36:	d5ac      	bpl.n	8013d92 <_printf_i+0xe2>
 8013e38:	b2ad      	uxth	r5, r5
 8013e3a:	e7aa      	b.n	8013d92 <_printf_i+0xe2>
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	680d      	ldr	r5, [r1, #0]
 8013e40:	1d10      	adds	r0, r2, #4
 8013e42:	6949      	ldr	r1, [r1, #20]
 8013e44:	6018      	str	r0, [r3, #0]
 8013e46:	6813      	ldr	r3, [r2, #0]
 8013e48:	062e      	lsls	r6, r5, #24
 8013e4a:	d501      	bpl.n	8013e50 <_printf_i+0x1a0>
 8013e4c:	6019      	str	r1, [r3, #0]
 8013e4e:	e002      	b.n	8013e56 <_printf_i+0x1a6>
 8013e50:	066d      	lsls	r5, r5, #25
 8013e52:	d5fb      	bpl.n	8013e4c <_printf_i+0x19c>
 8013e54:	8019      	strh	r1, [r3, #0]
 8013e56:	2300      	movs	r3, #0
 8013e58:	9e04      	ldr	r6, [sp, #16]
 8013e5a:	6123      	str	r3, [r4, #16]
 8013e5c:	e7d2      	b.n	8013e04 <_printf_i+0x154>
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	1d11      	adds	r1, r2, #4
 8013e62:	6019      	str	r1, [r3, #0]
 8013e64:	6816      	ldr	r6, [r2, #0]
 8013e66:	2100      	movs	r1, #0
 8013e68:	0030      	movs	r0, r6
 8013e6a:	6862      	ldr	r2, [r4, #4]
 8013e6c:	f000 fefe 	bl	8014c6c <memchr>
 8013e70:	2800      	cmp	r0, #0
 8013e72:	d001      	beq.n	8013e78 <_printf_i+0x1c8>
 8013e74:	1b80      	subs	r0, r0, r6
 8013e76:	6060      	str	r0, [r4, #4]
 8013e78:	6863      	ldr	r3, [r4, #4]
 8013e7a:	6123      	str	r3, [r4, #16]
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	9a04      	ldr	r2, [sp, #16]
 8013e80:	7013      	strb	r3, [r2, #0]
 8013e82:	e7bf      	b.n	8013e04 <_printf_i+0x154>
 8013e84:	6923      	ldr	r3, [r4, #16]
 8013e86:	0032      	movs	r2, r6
 8013e88:	9906      	ldr	r1, [sp, #24]
 8013e8a:	9805      	ldr	r0, [sp, #20]
 8013e8c:	9d07      	ldr	r5, [sp, #28]
 8013e8e:	47a8      	blx	r5
 8013e90:	1c43      	adds	r3, r0, #1
 8013e92:	d0c1      	beq.n	8013e18 <_printf_i+0x168>
 8013e94:	6823      	ldr	r3, [r4, #0]
 8013e96:	079b      	lsls	r3, r3, #30
 8013e98:	d415      	bmi.n	8013ec6 <_printf_i+0x216>
 8013e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e9c:	68e0      	ldr	r0, [r4, #12]
 8013e9e:	4298      	cmp	r0, r3
 8013ea0:	dabc      	bge.n	8013e1c <_printf_i+0x16c>
 8013ea2:	0018      	movs	r0, r3
 8013ea4:	e7ba      	b.n	8013e1c <_printf_i+0x16c>
 8013ea6:	0022      	movs	r2, r4
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	9906      	ldr	r1, [sp, #24]
 8013eac:	9805      	ldr	r0, [sp, #20]
 8013eae:	9e07      	ldr	r6, [sp, #28]
 8013eb0:	3219      	adds	r2, #25
 8013eb2:	47b0      	blx	r6
 8013eb4:	1c43      	adds	r3, r0, #1
 8013eb6:	d0af      	beq.n	8013e18 <_printf_i+0x168>
 8013eb8:	3501      	adds	r5, #1
 8013eba:	68e3      	ldr	r3, [r4, #12]
 8013ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ebe:	1a9b      	subs	r3, r3, r2
 8013ec0:	42ab      	cmp	r3, r5
 8013ec2:	dcf0      	bgt.n	8013ea6 <_printf_i+0x1f6>
 8013ec4:	e7e9      	b.n	8013e9a <_printf_i+0x1ea>
 8013ec6:	2500      	movs	r5, #0
 8013ec8:	e7f7      	b.n	8013eba <_printf_i+0x20a>
 8013eca:	46c0      	nop			; (mov r8, r8)
 8013ecc:	08016652 	.word	0x08016652
 8013ed0:	08016663 	.word	0x08016663

08013ed4 <strncpy>:
 8013ed4:	0003      	movs	r3, r0
 8013ed6:	b530      	push	{r4, r5, lr}
 8013ed8:	001d      	movs	r5, r3
 8013eda:	2a00      	cmp	r2, #0
 8013edc:	d006      	beq.n	8013eec <strncpy+0x18>
 8013ede:	780c      	ldrb	r4, [r1, #0]
 8013ee0:	3a01      	subs	r2, #1
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	702c      	strb	r4, [r5, #0]
 8013ee6:	3101      	adds	r1, #1
 8013ee8:	2c00      	cmp	r4, #0
 8013eea:	d1f5      	bne.n	8013ed8 <strncpy+0x4>
 8013eec:	2100      	movs	r1, #0
 8013eee:	189a      	adds	r2, r3, r2
 8013ef0:	4293      	cmp	r3, r2
 8013ef2:	d100      	bne.n	8013ef6 <strncpy+0x22>
 8013ef4:	bd30      	pop	{r4, r5, pc}
 8013ef6:	7019      	strb	r1, [r3, #0]
 8013ef8:	3301      	adds	r3, #1
 8013efa:	e7f9      	b.n	8013ef0 <strncpy+0x1c>

08013efc <quorem>:
 8013efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013efe:	0006      	movs	r6, r0
 8013f00:	690d      	ldr	r5, [r1, #16]
 8013f02:	6933      	ldr	r3, [r6, #16]
 8013f04:	b087      	sub	sp, #28
 8013f06:	2000      	movs	r0, #0
 8013f08:	9102      	str	r1, [sp, #8]
 8013f0a:	42ab      	cmp	r3, r5
 8013f0c:	db6b      	blt.n	8013fe6 <quorem+0xea>
 8013f0e:	000b      	movs	r3, r1
 8013f10:	3d01      	subs	r5, #1
 8013f12:	00ac      	lsls	r4, r5, #2
 8013f14:	3314      	adds	r3, #20
 8013f16:	9305      	str	r3, [sp, #20]
 8013f18:	191b      	adds	r3, r3, r4
 8013f1a:	9303      	str	r3, [sp, #12]
 8013f1c:	0033      	movs	r3, r6
 8013f1e:	3314      	adds	r3, #20
 8013f20:	9301      	str	r3, [sp, #4]
 8013f22:	191c      	adds	r4, r3, r4
 8013f24:	9b03      	ldr	r3, [sp, #12]
 8013f26:	6827      	ldr	r7, [r4, #0]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	0038      	movs	r0, r7
 8013f2c:	9300      	str	r3, [sp, #0]
 8013f2e:	3301      	adds	r3, #1
 8013f30:	0019      	movs	r1, r3
 8013f32:	9304      	str	r3, [sp, #16]
 8013f34:	f7ec f904 	bl	8000140 <__udivsi3>
 8013f38:	9b04      	ldr	r3, [sp, #16]
 8013f3a:	9000      	str	r0, [sp, #0]
 8013f3c:	429f      	cmp	r7, r3
 8013f3e:	d329      	bcc.n	8013f94 <quorem+0x98>
 8013f40:	2300      	movs	r3, #0
 8013f42:	469c      	mov	ip, r3
 8013f44:	9801      	ldr	r0, [sp, #4]
 8013f46:	9f05      	ldr	r7, [sp, #20]
 8013f48:	9304      	str	r3, [sp, #16]
 8013f4a:	cf08      	ldmia	r7!, {r3}
 8013f4c:	9a00      	ldr	r2, [sp, #0]
 8013f4e:	b299      	uxth	r1, r3
 8013f50:	4351      	muls	r1, r2
 8013f52:	0c1b      	lsrs	r3, r3, #16
 8013f54:	4353      	muls	r3, r2
 8013f56:	4461      	add	r1, ip
 8013f58:	0c0a      	lsrs	r2, r1, #16
 8013f5a:	189b      	adds	r3, r3, r2
 8013f5c:	0c1a      	lsrs	r2, r3, #16
 8013f5e:	9305      	str	r3, [sp, #20]
 8013f60:	6803      	ldr	r3, [r0, #0]
 8013f62:	4694      	mov	ip, r2
 8013f64:	b29a      	uxth	r2, r3
 8013f66:	9b04      	ldr	r3, [sp, #16]
 8013f68:	b289      	uxth	r1, r1
 8013f6a:	18d2      	adds	r2, r2, r3
 8013f6c:	6803      	ldr	r3, [r0, #0]
 8013f6e:	1a52      	subs	r2, r2, r1
 8013f70:	0c19      	lsrs	r1, r3, #16
 8013f72:	466b      	mov	r3, sp
 8013f74:	8a9b      	ldrh	r3, [r3, #20]
 8013f76:	1acb      	subs	r3, r1, r3
 8013f78:	1411      	asrs	r1, r2, #16
 8013f7a:	185b      	adds	r3, r3, r1
 8013f7c:	1419      	asrs	r1, r3, #16
 8013f7e:	b292      	uxth	r2, r2
 8013f80:	041b      	lsls	r3, r3, #16
 8013f82:	431a      	orrs	r2, r3
 8013f84:	9b03      	ldr	r3, [sp, #12]
 8013f86:	9104      	str	r1, [sp, #16]
 8013f88:	c004      	stmia	r0!, {r2}
 8013f8a:	42bb      	cmp	r3, r7
 8013f8c:	d2dd      	bcs.n	8013f4a <quorem+0x4e>
 8013f8e:	6823      	ldr	r3, [r4, #0]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d02e      	beq.n	8013ff2 <quorem+0xf6>
 8013f94:	0030      	movs	r0, r6
 8013f96:	9902      	ldr	r1, [sp, #8]
 8013f98:	f001 f8fa 	bl	8015190 <__mcmp>
 8013f9c:	2800      	cmp	r0, #0
 8013f9e:	db21      	blt.n	8013fe4 <quorem+0xe8>
 8013fa0:	0030      	movs	r0, r6
 8013fa2:	2400      	movs	r4, #0
 8013fa4:	9b00      	ldr	r3, [sp, #0]
 8013fa6:	9902      	ldr	r1, [sp, #8]
 8013fa8:	3301      	adds	r3, #1
 8013faa:	9300      	str	r3, [sp, #0]
 8013fac:	3014      	adds	r0, #20
 8013fae:	3114      	adds	r1, #20
 8013fb0:	6802      	ldr	r2, [r0, #0]
 8013fb2:	c908      	ldmia	r1!, {r3}
 8013fb4:	b292      	uxth	r2, r2
 8013fb6:	1914      	adds	r4, r2, r4
 8013fb8:	b29a      	uxth	r2, r3
 8013fba:	1aa2      	subs	r2, r4, r2
 8013fbc:	6804      	ldr	r4, [r0, #0]
 8013fbe:	0c1b      	lsrs	r3, r3, #16
 8013fc0:	0c24      	lsrs	r4, r4, #16
 8013fc2:	1ae3      	subs	r3, r4, r3
 8013fc4:	1414      	asrs	r4, r2, #16
 8013fc6:	191b      	adds	r3, r3, r4
 8013fc8:	141c      	asrs	r4, r3, #16
 8013fca:	b292      	uxth	r2, r2
 8013fcc:	041b      	lsls	r3, r3, #16
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	c008      	stmia	r0!, {r3}
 8013fd2:	9b03      	ldr	r3, [sp, #12]
 8013fd4:	428b      	cmp	r3, r1
 8013fd6:	d2eb      	bcs.n	8013fb0 <quorem+0xb4>
 8013fd8:	9a01      	ldr	r2, [sp, #4]
 8013fda:	00ab      	lsls	r3, r5, #2
 8013fdc:	18d3      	adds	r3, r2, r3
 8013fde:	681a      	ldr	r2, [r3, #0]
 8013fe0:	2a00      	cmp	r2, #0
 8013fe2:	d010      	beq.n	8014006 <quorem+0x10a>
 8013fe4:	9800      	ldr	r0, [sp, #0]
 8013fe6:	b007      	add	sp, #28
 8013fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fea:	6823      	ldr	r3, [r4, #0]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d104      	bne.n	8013ffa <quorem+0xfe>
 8013ff0:	3d01      	subs	r5, #1
 8013ff2:	9b01      	ldr	r3, [sp, #4]
 8013ff4:	3c04      	subs	r4, #4
 8013ff6:	42a3      	cmp	r3, r4
 8013ff8:	d3f7      	bcc.n	8013fea <quorem+0xee>
 8013ffa:	6135      	str	r5, [r6, #16]
 8013ffc:	e7ca      	b.n	8013f94 <quorem+0x98>
 8013ffe:	681a      	ldr	r2, [r3, #0]
 8014000:	2a00      	cmp	r2, #0
 8014002:	d104      	bne.n	801400e <quorem+0x112>
 8014004:	3d01      	subs	r5, #1
 8014006:	9a01      	ldr	r2, [sp, #4]
 8014008:	3b04      	subs	r3, #4
 801400a:	429a      	cmp	r2, r3
 801400c:	d3f7      	bcc.n	8013ffe <quorem+0x102>
 801400e:	6135      	str	r5, [r6, #16]
 8014010:	e7e8      	b.n	8013fe4 <quorem+0xe8>
	...

08014014 <_dtoa_r>:
 8014014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014016:	b09d      	sub	sp, #116	; 0x74
 8014018:	9202      	str	r2, [sp, #8]
 801401a:	9303      	str	r3, [sp, #12]
 801401c:	9b02      	ldr	r3, [sp, #8]
 801401e:	9c03      	ldr	r4, [sp, #12]
 8014020:	930a      	str	r3, [sp, #40]	; 0x28
 8014022:	940b      	str	r4, [sp, #44]	; 0x2c
 8014024:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014026:	0007      	movs	r7, r0
 8014028:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801402a:	2c00      	cmp	r4, #0
 801402c:	d10e      	bne.n	801404c <_dtoa_r+0x38>
 801402e:	2010      	movs	r0, #16
 8014030:	f000 fe12 	bl	8014c58 <malloc>
 8014034:	1e02      	subs	r2, r0, #0
 8014036:	6278      	str	r0, [r7, #36]	; 0x24
 8014038:	d104      	bne.n	8014044 <_dtoa_r+0x30>
 801403a:	21ea      	movs	r1, #234	; 0xea
 801403c:	4bc0      	ldr	r3, [pc, #768]	; (8014340 <_dtoa_r+0x32c>)
 801403e:	48c1      	ldr	r0, [pc, #772]	; (8014344 <_dtoa_r+0x330>)
 8014040:	f001 fa86 	bl	8015550 <__assert_func>
 8014044:	6044      	str	r4, [r0, #4]
 8014046:	6084      	str	r4, [r0, #8]
 8014048:	6004      	str	r4, [r0, #0]
 801404a:	60c4      	str	r4, [r0, #12]
 801404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801404e:	6819      	ldr	r1, [r3, #0]
 8014050:	2900      	cmp	r1, #0
 8014052:	d00a      	beq.n	801406a <_dtoa_r+0x56>
 8014054:	685a      	ldr	r2, [r3, #4]
 8014056:	2301      	movs	r3, #1
 8014058:	4093      	lsls	r3, r2
 801405a:	604a      	str	r2, [r1, #4]
 801405c:	608b      	str	r3, [r1, #8]
 801405e:	0038      	movs	r0, r7
 8014060:	f000 fe54 	bl	8014d0c <_Bfree>
 8014064:	2200      	movs	r2, #0
 8014066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014068:	601a      	str	r2, [r3, #0]
 801406a:	9b03      	ldr	r3, [sp, #12]
 801406c:	2b00      	cmp	r3, #0
 801406e:	da21      	bge.n	80140b4 <_dtoa_r+0xa0>
 8014070:	2301      	movs	r3, #1
 8014072:	602b      	str	r3, [r5, #0]
 8014074:	9b03      	ldr	r3, [sp, #12]
 8014076:	005b      	lsls	r3, r3, #1
 8014078:	085b      	lsrs	r3, r3, #1
 801407a:	930b      	str	r3, [sp, #44]	; 0x2c
 801407c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801407e:	4bb2      	ldr	r3, [pc, #712]	; (8014348 <_dtoa_r+0x334>)
 8014080:	002a      	movs	r2, r5
 8014082:	9318      	str	r3, [sp, #96]	; 0x60
 8014084:	401a      	ands	r2, r3
 8014086:	429a      	cmp	r2, r3
 8014088:	d117      	bne.n	80140ba <_dtoa_r+0xa6>
 801408a:	4bb0      	ldr	r3, [pc, #704]	; (801434c <_dtoa_r+0x338>)
 801408c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801408e:	0328      	lsls	r0, r5, #12
 8014090:	6013      	str	r3, [r2, #0]
 8014092:	9b02      	ldr	r3, [sp, #8]
 8014094:	0b00      	lsrs	r0, r0, #12
 8014096:	4318      	orrs	r0, r3
 8014098:	d101      	bne.n	801409e <_dtoa_r+0x8a>
 801409a:	f000 fdc3 	bl	8014c24 <_dtoa_r+0xc10>
 801409e:	48ac      	ldr	r0, [pc, #688]	; (8014350 <_dtoa_r+0x33c>)
 80140a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80140a2:	9005      	str	r0, [sp, #20]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d002      	beq.n	80140ae <_dtoa_r+0x9a>
 80140a8:	4baa      	ldr	r3, [pc, #680]	; (8014354 <_dtoa_r+0x340>)
 80140aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80140ac:	6013      	str	r3, [r2, #0]
 80140ae:	9805      	ldr	r0, [sp, #20]
 80140b0:	b01d      	add	sp, #116	; 0x74
 80140b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140b4:	2300      	movs	r3, #0
 80140b6:	602b      	str	r3, [r5, #0]
 80140b8:	e7e0      	b.n	801407c <_dtoa_r+0x68>
 80140ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80140be:	9312      	str	r3, [sp, #72]	; 0x48
 80140c0:	9413      	str	r4, [sp, #76]	; 0x4c
 80140c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80140c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80140c6:	2200      	movs	r2, #0
 80140c8:	2300      	movs	r3, #0
 80140ca:	f7ec f9bf 	bl	800044c <__aeabi_dcmpeq>
 80140ce:	1e04      	subs	r4, r0, #0
 80140d0:	d00b      	beq.n	80140ea <_dtoa_r+0xd6>
 80140d2:	2301      	movs	r3, #1
 80140d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80140d6:	6013      	str	r3, [r2, #0]
 80140d8:	4b9f      	ldr	r3, [pc, #636]	; (8014358 <_dtoa_r+0x344>)
 80140da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80140dc:	9305      	str	r3, [sp, #20]
 80140de:	2a00      	cmp	r2, #0
 80140e0:	d0e5      	beq.n	80140ae <_dtoa_r+0x9a>
 80140e2:	4a9e      	ldr	r2, [pc, #632]	; (801435c <_dtoa_r+0x348>)
 80140e4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80140e6:	600a      	str	r2, [r1, #0]
 80140e8:	e7e1      	b.n	80140ae <_dtoa_r+0x9a>
 80140ea:	ab1a      	add	r3, sp, #104	; 0x68
 80140ec:	9301      	str	r3, [sp, #4]
 80140ee:	ab1b      	add	r3, sp, #108	; 0x6c
 80140f0:	9300      	str	r3, [sp, #0]
 80140f2:	0038      	movs	r0, r7
 80140f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80140f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80140f8:	f001 f8fe 	bl	80152f8 <__d2b>
 80140fc:	006e      	lsls	r6, r5, #1
 80140fe:	9004      	str	r0, [sp, #16]
 8014100:	0d76      	lsrs	r6, r6, #21
 8014102:	d100      	bne.n	8014106 <_dtoa_r+0xf2>
 8014104:	e07c      	b.n	8014200 <_dtoa_r+0x1ec>
 8014106:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014108:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801410a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801410c:	4a94      	ldr	r2, [pc, #592]	; (8014360 <_dtoa_r+0x34c>)
 801410e:	031b      	lsls	r3, r3, #12
 8014110:	0b1b      	lsrs	r3, r3, #12
 8014112:	431a      	orrs	r2, r3
 8014114:	0011      	movs	r1, r2
 8014116:	4b93      	ldr	r3, [pc, #588]	; (8014364 <_dtoa_r+0x350>)
 8014118:	9416      	str	r4, [sp, #88]	; 0x58
 801411a:	18f6      	adds	r6, r6, r3
 801411c:	2200      	movs	r2, #0
 801411e:	4b92      	ldr	r3, [pc, #584]	; (8014368 <_dtoa_r+0x354>)
 8014120:	f7ee f9a0 	bl	8002464 <__aeabi_dsub>
 8014124:	4a91      	ldr	r2, [pc, #580]	; (801436c <_dtoa_r+0x358>)
 8014126:	4b92      	ldr	r3, [pc, #584]	; (8014370 <_dtoa_r+0x35c>)
 8014128:	f7ed ff30 	bl	8001f8c <__aeabi_dmul>
 801412c:	4a91      	ldr	r2, [pc, #580]	; (8014374 <_dtoa_r+0x360>)
 801412e:	4b92      	ldr	r3, [pc, #584]	; (8014378 <_dtoa_r+0x364>)
 8014130:	f7ec ffbc 	bl	80010ac <__aeabi_dadd>
 8014134:	0004      	movs	r4, r0
 8014136:	0030      	movs	r0, r6
 8014138:	000d      	movs	r5, r1
 801413a:	f7ee fd79 	bl	8002c30 <__aeabi_i2d>
 801413e:	4a8f      	ldr	r2, [pc, #572]	; (801437c <_dtoa_r+0x368>)
 8014140:	4b8f      	ldr	r3, [pc, #572]	; (8014380 <_dtoa_r+0x36c>)
 8014142:	f7ed ff23 	bl	8001f8c <__aeabi_dmul>
 8014146:	0002      	movs	r2, r0
 8014148:	000b      	movs	r3, r1
 801414a:	0020      	movs	r0, r4
 801414c:	0029      	movs	r1, r5
 801414e:	f7ec ffad 	bl	80010ac <__aeabi_dadd>
 8014152:	0004      	movs	r4, r0
 8014154:	000d      	movs	r5, r1
 8014156:	f7ee fd35 	bl	8002bc4 <__aeabi_d2iz>
 801415a:	2200      	movs	r2, #0
 801415c:	9002      	str	r0, [sp, #8]
 801415e:	2300      	movs	r3, #0
 8014160:	0020      	movs	r0, r4
 8014162:	0029      	movs	r1, r5
 8014164:	f7ec f978 	bl	8000458 <__aeabi_dcmplt>
 8014168:	2800      	cmp	r0, #0
 801416a:	d00b      	beq.n	8014184 <_dtoa_r+0x170>
 801416c:	9802      	ldr	r0, [sp, #8]
 801416e:	f7ee fd5f 	bl	8002c30 <__aeabi_i2d>
 8014172:	002b      	movs	r3, r5
 8014174:	0022      	movs	r2, r4
 8014176:	f7ec f969 	bl	800044c <__aeabi_dcmpeq>
 801417a:	4243      	negs	r3, r0
 801417c:	4158      	adcs	r0, r3
 801417e:	9b02      	ldr	r3, [sp, #8]
 8014180:	1a1b      	subs	r3, r3, r0
 8014182:	9302      	str	r3, [sp, #8]
 8014184:	2301      	movs	r3, #1
 8014186:	9315      	str	r3, [sp, #84]	; 0x54
 8014188:	9b02      	ldr	r3, [sp, #8]
 801418a:	2b16      	cmp	r3, #22
 801418c:	d80f      	bhi.n	80141ae <_dtoa_r+0x19a>
 801418e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014190:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014192:	00da      	lsls	r2, r3, #3
 8014194:	4b7b      	ldr	r3, [pc, #492]	; (8014384 <_dtoa_r+0x370>)
 8014196:	189b      	adds	r3, r3, r2
 8014198:	681a      	ldr	r2, [r3, #0]
 801419a:	685b      	ldr	r3, [r3, #4]
 801419c:	f7ec f95c 	bl	8000458 <__aeabi_dcmplt>
 80141a0:	2800      	cmp	r0, #0
 80141a2:	d049      	beq.n	8014238 <_dtoa_r+0x224>
 80141a4:	9b02      	ldr	r3, [sp, #8]
 80141a6:	3b01      	subs	r3, #1
 80141a8:	9302      	str	r3, [sp, #8]
 80141aa:	2300      	movs	r3, #0
 80141ac:	9315      	str	r3, [sp, #84]	; 0x54
 80141ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80141b0:	1b9e      	subs	r6, r3, r6
 80141b2:	2300      	movs	r3, #0
 80141b4:	9308      	str	r3, [sp, #32]
 80141b6:	0033      	movs	r3, r6
 80141b8:	3b01      	subs	r3, #1
 80141ba:	930d      	str	r3, [sp, #52]	; 0x34
 80141bc:	d504      	bpl.n	80141c8 <_dtoa_r+0x1b4>
 80141be:	2301      	movs	r3, #1
 80141c0:	1b9b      	subs	r3, r3, r6
 80141c2:	9308      	str	r3, [sp, #32]
 80141c4:	2300      	movs	r3, #0
 80141c6:	930d      	str	r3, [sp, #52]	; 0x34
 80141c8:	9b02      	ldr	r3, [sp, #8]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	db36      	blt.n	801423c <_dtoa_r+0x228>
 80141ce:	9a02      	ldr	r2, [sp, #8]
 80141d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141d2:	4694      	mov	ip, r2
 80141d4:	4463      	add	r3, ip
 80141d6:	930d      	str	r3, [sp, #52]	; 0x34
 80141d8:	2300      	movs	r3, #0
 80141da:	9214      	str	r2, [sp, #80]	; 0x50
 80141dc:	930e      	str	r3, [sp, #56]	; 0x38
 80141de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80141e0:	2401      	movs	r4, #1
 80141e2:	2b09      	cmp	r3, #9
 80141e4:	d862      	bhi.n	80142ac <_dtoa_r+0x298>
 80141e6:	2b05      	cmp	r3, #5
 80141e8:	dd02      	ble.n	80141f0 <_dtoa_r+0x1dc>
 80141ea:	2400      	movs	r4, #0
 80141ec:	3b04      	subs	r3, #4
 80141ee:	9322      	str	r3, [sp, #136]	; 0x88
 80141f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80141f2:	1e98      	subs	r0, r3, #2
 80141f4:	2803      	cmp	r0, #3
 80141f6:	d862      	bhi.n	80142be <_dtoa_r+0x2aa>
 80141f8:	f7eb ff8e 	bl	8000118 <__gnu_thumb1_case_uqi>
 80141fc:	56343629 	.word	0x56343629
 8014200:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014202:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014204:	189e      	adds	r6, r3, r2
 8014206:	4b60      	ldr	r3, [pc, #384]	; (8014388 <_dtoa_r+0x374>)
 8014208:	18f2      	adds	r2, r6, r3
 801420a:	2a20      	cmp	r2, #32
 801420c:	dd0f      	ble.n	801422e <_dtoa_r+0x21a>
 801420e:	2340      	movs	r3, #64	; 0x40
 8014210:	1a9b      	subs	r3, r3, r2
 8014212:	409d      	lsls	r5, r3
 8014214:	4b5d      	ldr	r3, [pc, #372]	; (801438c <_dtoa_r+0x378>)
 8014216:	9802      	ldr	r0, [sp, #8]
 8014218:	18f3      	adds	r3, r6, r3
 801421a:	40d8      	lsrs	r0, r3
 801421c:	4328      	orrs	r0, r5
 801421e:	f7ee fd37 	bl	8002c90 <__aeabi_ui2d>
 8014222:	2301      	movs	r3, #1
 8014224:	4c5a      	ldr	r4, [pc, #360]	; (8014390 <_dtoa_r+0x37c>)
 8014226:	3e01      	subs	r6, #1
 8014228:	1909      	adds	r1, r1, r4
 801422a:	9316      	str	r3, [sp, #88]	; 0x58
 801422c:	e776      	b.n	801411c <_dtoa_r+0x108>
 801422e:	2320      	movs	r3, #32
 8014230:	9802      	ldr	r0, [sp, #8]
 8014232:	1a9b      	subs	r3, r3, r2
 8014234:	4098      	lsls	r0, r3
 8014236:	e7f2      	b.n	801421e <_dtoa_r+0x20a>
 8014238:	9015      	str	r0, [sp, #84]	; 0x54
 801423a:	e7b8      	b.n	80141ae <_dtoa_r+0x19a>
 801423c:	9b08      	ldr	r3, [sp, #32]
 801423e:	9a02      	ldr	r2, [sp, #8]
 8014240:	1a9b      	subs	r3, r3, r2
 8014242:	9308      	str	r3, [sp, #32]
 8014244:	4253      	negs	r3, r2
 8014246:	930e      	str	r3, [sp, #56]	; 0x38
 8014248:	2300      	movs	r3, #0
 801424a:	9314      	str	r3, [sp, #80]	; 0x50
 801424c:	e7c7      	b.n	80141de <_dtoa_r+0x1ca>
 801424e:	2300      	movs	r3, #0
 8014250:	930f      	str	r3, [sp, #60]	; 0x3c
 8014252:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014254:	2b00      	cmp	r3, #0
 8014256:	dc36      	bgt.n	80142c6 <_dtoa_r+0x2b2>
 8014258:	2301      	movs	r3, #1
 801425a:	001a      	movs	r2, r3
 801425c:	930c      	str	r3, [sp, #48]	; 0x30
 801425e:	9306      	str	r3, [sp, #24]
 8014260:	9223      	str	r2, [sp, #140]	; 0x8c
 8014262:	e00d      	b.n	8014280 <_dtoa_r+0x26c>
 8014264:	2301      	movs	r3, #1
 8014266:	e7f3      	b.n	8014250 <_dtoa_r+0x23c>
 8014268:	2300      	movs	r3, #0
 801426a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801426c:	930f      	str	r3, [sp, #60]	; 0x3c
 801426e:	4694      	mov	ip, r2
 8014270:	9b02      	ldr	r3, [sp, #8]
 8014272:	4463      	add	r3, ip
 8014274:	930c      	str	r3, [sp, #48]	; 0x30
 8014276:	3301      	adds	r3, #1
 8014278:	9306      	str	r3, [sp, #24]
 801427a:	2b00      	cmp	r3, #0
 801427c:	dc00      	bgt.n	8014280 <_dtoa_r+0x26c>
 801427e:	2301      	movs	r3, #1
 8014280:	2200      	movs	r2, #0
 8014282:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014284:	6042      	str	r2, [r0, #4]
 8014286:	3204      	adds	r2, #4
 8014288:	0015      	movs	r5, r2
 801428a:	3514      	adds	r5, #20
 801428c:	6841      	ldr	r1, [r0, #4]
 801428e:	429d      	cmp	r5, r3
 8014290:	d91d      	bls.n	80142ce <_dtoa_r+0x2ba>
 8014292:	0038      	movs	r0, r7
 8014294:	f000 fcf6 	bl	8014c84 <_Balloc>
 8014298:	9005      	str	r0, [sp, #20]
 801429a:	2800      	cmp	r0, #0
 801429c:	d11b      	bne.n	80142d6 <_dtoa_r+0x2c2>
 801429e:	21d5      	movs	r1, #213	; 0xd5
 80142a0:	0002      	movs	r2, r0
 80142a2:	4b3c      	ldr	r3, [pc, #240]	; (8014394 <_dtoa_r+0x380>)
 80142a4:	0049      	lsls	r1, r1, #1
 80142a6:	e6ca      	b.n	801403e <_dtoa_r+0x2a>
 80142a8:	2301      	movs	r3, #1
 80142aa:	e7de      	b.n	801426a <_dtoa_r+0x256>
 80142ac:	2300      	movs	r3, #0
 80142ae:	940f      	str	r4, [sp, #60]	; 0x3c
 80142b0:	9322      	str	r3, [sp, #136]	; 0x88
 80142b2:	3b01      	subs	r3, #1
 80142b4:	930c      	str	r3, [sp, #48]	; 0x30
 80142b6:	9306      	str	r3, [sp, #24]
 80142b8:	2200      	movs	r2, #0
 80142ba:	3313      	adds	r3, #19
 80142bc:	e7d0      	b.n	8014260 <_dtoa_r+0x24c>
 80142be:	2301      	movs	r3, #1
 80142c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80142c2:	3b02      	subs	r3, #2
 80142c4:	e7f6      	b.n	80142b4 <_dtoa_r+0x2a0>
 80142c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80142c8:	930c      	str	r3, [sp, #48]	; 0x30
 80142ca:	9306      	str	r3, [sp, #24]
 80142cc:	e7d8      	b.n	8014280 <_dtoa_r+0x26c>
 80142ce:	3101      	adds	r1, #1
 80142d0:	6041      	str	r1, [r0, #4]
 80142d2:	0052      	lsls	r2, r2, #1
 80142d4:	e7d8      	b.n	8014288 <_dtoa_r+0x274>
 80142d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d8:	9a05      	ldr	r2, [sp, #20]
 80142da:	601a      	str	r2, [r3, #0]
 80142dc:	9b06      	ldr	r3, [sp, #24]
 80142de:	2b0e      	cmp	r3, #14
 80142e0:	d900      	bls.n	80142e4 <_dtoa_r+0x2d0>
 80142e2:	e0eb      	b.n	80144bc <_dtoa_r+0x4a8>
 80142e4:	2c00      	cmp	r4, #0
 80142e6:	d100      	bne.n	80142ea <_dtoa_r+0x2d6>
 80142e8:	e0e8      	b.n	80144bc <_dtoa_r+0x4a8>
 80142ea:	9b02      	ldr	r3, [sp, #8]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	dd68      	ble.n	80143c2 <_dtoa_r+0x3ae>
 80142f0:	001a      	movs	r2, r3
 80142f2:	210f      	movs	r1, #15
 80142f4:	4b23      	ldr	r3, [pc, #140]	; (8014384 <_dtoa_r+0x370>)
 80142f6:	400a      	ands	r2, r1
 80142f8:	00d2      	lsls	r2, r2, #3
 80142fa:	189b      	adds	r3, r3, r2
 80142fc:	681d      	ldr	r5, [r3, #0]
 80142fe:	685e      	ldr	r6, [r3, #4]
 8014300:	9b02      	ldr	r3, [sp, #8]
 8014302:	111c      	asrs	r4, r3, #4
 8014304:	2302      	movs	r3, #2
 8014306:	9310      	str	r3, [sp, #64]	; 0x40
 8014308:	9b02      	ldr	r3, [sp, #8]
 801430a:	05db      	lsls	r3, r3, #23
 801430c:	d50b      	bpl.n	8014326 <_dtoa_r+0x312>
 801430e:	4b22      	ldr	r3, [pc, #136]	; (8014398 <_dtoa_r+0x384>)
 8014310:	400c      	ands	r4, r1
 8014312:	6a1a      	ldr	r2, [r3, #32]
 8014314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014316:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014318:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801431a:	f7ed fa31 	bl	8001780 <__aeabi_ddiv>
 801431e:	2303      	movs	r3, #3
 8014320:	900a      	str	r0, [sp, #40]	; 0x28
 8014322:	910b      	str	r1, [sp, #44]	; 0x2c
 8014324:	9310      	str	r3, [sp, #64]	; 0x40
 8014326:	4b1c      	ldr	r3, [pc, #112]	; (8014398 <_dtoa_r+0x384>)
 8014328:	9307      	str	r3, [sp, #28]
 801432a:	2c00      	cmp	r4, #0
 801432c:	d136      	bne.n	801439c <_dtoa_r+0x388>
 801432e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014332:	002a      	movs	r2, r5
 8014334:	0033      	movs	r3, r6
 8014336:	f7ed fa23 	bl	8001780 <__aeabi_ddiv>
 801433a:	900a      	str	r0, [sp, #40]	; 0x28
 801433c:	910b      	str	r1, [sp, #44]	; 0x2c
 801433e:	e05c      	b.n	80143fa <_dtoa_r+0x3e6>
 8014340:	08016681 	.word	0x08016681
 8014344:	08016698 	.word	0x08016698
 8014348:	7ff00000 	.word	0x7ff00000
 801434c:	0000270f 	.word	0x0000270f
 8014350:	0801667d 	.word	0x0801667d
 8014354:	08016680 	.word	0x08016680
 8014358:	08016650 	.word	0x08016650
 801435c:	08016651 	.word	0x08016651
 8014360:	3ff00000 	.word	0x3ff00000
 8014364:	fffffc01 	.word	0xfffffc01
 8014368:	3ff80000 	.word	0x3ff80000
 801436c:	636f4361 	.word	0x636f4361
 8014370:	3fd287a7 	.word	0x3fd287a7
 8014374:	8b60c8b3 	.word	0x8b60c8b3
 8014378:	3fc68a28 	.word	0x3fc68a28
 801437c:	509f79fb 	.word	0x509f79fb
 8014380:	3fd34413 	.word	0x3fd34413
 8014384:	08016790 	.word	0x08016790
 8014388:	00000432 	.word	0x00000432
 801438c:	00000412 	.word	0x00000412
 8014390:	fe100000 	.word	0xfe100000
 8014394:	080166f7 	.word	0x080166f7
 8014398:	08016768 	.word	0x08016768
 801439c:	2301      	movs	r3, #1
 801439e:	421c      	tst	r4, r3
 80143a0:	d00b      	beq.n	80143ba <_dtoa_r+0x3a6>
 80143a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80143a4:	0028      	movs	r0, r5
 80143a6:	3301      	adds	r3, #1
 80143a8:	9310      	str	r3, [sp, #64]	; 0x40
 80143aa:	9b07      	ldr	r3, [sp, #28]
 80143ac:	0031      	movs	r1, r6
 80143ae:	681a      	ldr	r2, [r3, #0]
 80143b0:	685b      	ldr	r3, [r3, #4]
 80143b2:	f7ed fdeb 	bl	8001f8c <__aeabi_dmul>
 80143b6:	0005      	movs	r5, r0
 80143b8:	000e      	movs	r6, r1
 80143ba:	9b07      	ldr	r3, [sp, #28]
 80143bc:	1064      	asrs	r4, r4, #1
 80143be:	3308      	adds	r3, #8
 80143c0:	e7b2      	b.n	8014328 <_dtoa_r+0x314>
 80143c2:	2302      	movs	r3, #2
 80143c4:	9310      	str	r3, [sp, #64]	; 0x40
 80143c6:	9b02      	ldr	r3, [sp, #8]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d016      	beq.n	80143fa <_dtoa_r+0x3e6>
 80143cc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80143ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80143d0:	425c      	negs	r4, r3
 80143d2:	230f      	movs	r3, #15
 80143d4:	4ab5      	ldr	r2, [pc, #724]	; (80146ac <_dtoa_r+0x698>)
 80143d6:	4023      	ands	r3, r4
 80143d8:	00db      	lsls	r3, r3, #3
 80143da:	18d3      	adds	r3, r2, r3
 80143dc:	681a      	ldr	r2, [r3, #0]
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	f7ed fdd4 	bl	8001f8c <__aeabi_dmul>
 80143e4:	2601      	movs	r6, #1
 80143e6:	2300      	movs	r3, #0
 80143e8:	900a      	str	r0, [sp, #40]	; 0x28
 80143ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80143ec:	4db0      	ldr	r5, [pc, #704]	; (80146b0 <_dtoa_r+0x69c>)
 80143ee:	1124      	asrs	r4, r4, #4
 80143f0:	2c00      	cmp	r4, #0
 80143f2:	d000      	beq.n	80143f6 <_dtoa_r+0x3e2>
 80143f4:	e094      	b.n	8014520 <_dtoa_r+0x50c>
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d19f      	bne.n	801433a <_dtoa_r+0x326>
 80143fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d100      	bne.n	8014402 <_dtoa_r+0x3ee>
 8014400:	e09b      	b.n	801453a <_dtoa_r+0x526>
 8014402:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014404:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014406:	2200      	movs	r2, #0
 8014408:	0020      	movs	r0, r4
 801440a:	0029      	movs	r1, r5
 801440c:	4ba9      	ldr	r3, [pc, #676]	; (80146b4 <_dtoa_r+0x6a0>)
 801440e:	f7ec f823 	bl	8000458 <__aeabi_dcmplt>
 8014412:	2800      	cmp	r0, #0
 8014414:	d100      	bne.n	8014418 <_dtoa_r+0x404>
 8014416:	e090      	b.n	801453a <_dtoa_r+0x526>
 8014418:	9b06      	ldr	r3, [sp, #24]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d100      	bne.n	8014420 <_dtoa_r+0x40c>
 801441e:	e08c      	b.n	801453a <_dtoa_r+0x526>
 8014420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014422:	2b00      	cmp	r3, #0
 8014424:	dd46      	ble.n	80144b4 <_dtoa_r+0x4a0>
 8014426:	9b02      	ldr	r3, [sp, #8]
 8014428:	2200      	movs	r2, #0
 801442a:	0020      	movs	r0, r4
 801442c:	0029      	movs	r1, r5
 801442e:	1e5e      	subs	r6, r3, #1
 8014430:	4ba1      	ldr	r3, [pc, #644]	; (80146b8 <_dtoa_r+0x6a4>)
 8014432:	f7ed fdab 	bl	8001f8c <__aeabi_dmul>
 8014436:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014438:	900a      	str	r0, [sp, #40]	; 0x28
 801443a:	910b      	str	r1, [sp, #44]	; 0x2c
 801443c:	3301      	adds	r3, #1
 801443e:	9310      	str	r3, [sp, #64]	; 0x40
 8014440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014442:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014444:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014446:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014448:	9307      	str	r3, [sp, #28]
 801444a:	f7ee fbf1 	bl	8002c30 <__aeabi_i2d>
 801444e:	0022      	movs	r2, r4
 8014450:	002b      	movs	r3, r5
 8014452:	f7ed fd9b 	bl	8001f8c <__aeabi_dmul>
 8014456:	2200      	movs	r2, #0
 8014458:	4b98      	ldr	r3, [pc, #608]	; (80146bc <_dtoa_r+0x6a8>)
 801445a:	f7ec fe27 	bl	80010ac <__aeabi_dadd>
 801445e:	9010      	str	r0, [sp, #64]	; 0x40
 8014460:	9111      	str	r1, [sp, #68]	; 0x44
 8014462:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014464:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014466:	920a      	str	r2, [sp, #40]	; 0x28
 8014468:	930b      	str	r3, [sp, #44]	; 0x2c
 801446a:	4a95      	ldr	r2, [pc, #596]	; (80146c0 <_dtoa_r+0x6ac>)
 801446c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801446e:	4694      	mov	ip, r2
 8014470:	4463      	add	r3, ip
 8014472:	9317      	str	r3, [sp, #92]	; 0x5c
 8014474:	930b      	str	r3, [sp, #44]	; 0x2c
 8014476:	9b07      	ldr	r3, [sp, #28]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d161      	bne.n	8014540 <_dtoa_r+0x52c>
 801447c:	2200      	movs	r2, #0
 801447e:	0020      	movs	r0, r4
 8014480:	0029      	movs	r1, r5
 8014482:	4b90      	ldr	r3, [pc, #576]	; (80146c4 <_dtoa_r+0x6b0>)
 8014484:	f7ed ffee 	bl	8002464 <__aeabi_dsub>
 8014488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801448a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801448c:	0004      	movs	r4, r0
 801448e:	000d      	movs	r5, r1
 8014490:	f7eb fff6 	bl	8000480 <__aeabi_dcmpgt>
 8014494:	2800      	cmp	r0, #0
 8014496:	d000      	beq.n	801449a <_dtoa_r+0x486>
 8014498:	e2b5      	b.n	8014a06 <_dtoa_r+0x9f2>
 801449a:	488b      	ldr	r0, [pc, #556]	; (80146c8 <_dtoa_r+0x6b4>)
 801449c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801449e:	4684      	mov	ip, r0
 80144a0:	4461      	add	r1, ip
 80144a2:	000b      	movs	r3, r1
 80144a4:	0020      	movs	r0, r4
 80144a6:	0029      	movs	r1, r5
 80144a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144aa:	f7eb ffd5 	bl	8000458 <__aeabi_dcmplt>
 80144ae:	2800      	cmp	r0, #0
 80144b0:	d000      	beq.n	80144b4 <_dtoa_r+0x4a0>
 80144b2:	e2a5      	b.n	8014a00 <_dtoa_r+0x9ec>
 80144b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80144b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80144b8:	930a      	str	r3, [sp, #40]	; 0x28
 80144ba:	940b      	str	r4, [sp, #44]	; 0x2c
 80144bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144be:	2b00      	cmp	r3, #0
 80144c0:	da00      	bge.n	80144c4 <_dtoa_r+0x4b0>
 80144c2:	e171      	b.n	80147a8 <_dtoa_r+0x794>
 80144c4:	9a02      	ldr	r2, [sp, #8]
 80144c6:	2a0e      	cmp	r2, #14
 80144c8:	dd00      	ble.n	80144cc <_dtoa_r+0x4b8>
 80144ca:	e16d      	b.n	80147a8 <_dtoa_r+0x794>
 80144cc:	4b77      	ldr	r3, [pc, #476]	; (80146ac <_dtoa_r+0x698>)
 80144ce:	00d2      	lsls	r2, r2, #3
 80144d0:	189b      	adds	r3, r3, r2
 80144d2:	685c      	ldr	r4, [r3, #4]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	9308      	str	r3, [sp, #32]
 80144d8:	9409      	str	r4, [sp, #36]	; 0x24
 80144da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80144dc:	2b00      	cmp	r3, #0
 80144de:	db00      	blt.n	80144e2 <_dtoa_r+0x4ce>
 80144e0:	e0f6      	b.n	80146d0 <_dtoa_r+0x6bc>
 80144e2:	9b06      	ldr	r3, [sp, #24]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	dd00      	ble.n	80144ea <_dtoa_r+0x4d6>
 80144e8:	e0f2      	b.n	80146d0 <_dtoa_r+0x6bc>
 80144ea:	d000      	beq.n	80144ee <_dtoa_r+0x4da>
 80144ec:	e288      	b.n	8014a00 <_dtoa_r+0x9ec>
 80144ee:	9808      	ldr	r0, [sp, #32]
 80144f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80144f2:	2200      	movs	r2, #0
 80144f4:	4b73      	ldr	r3, [pc, #460]	; (80146c4 <_dtoa_r+0x6b0>)
 80144f6:	f7ed fd49 	bl	8001f8c <__aeabi_dmul>
 80144fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144fe:	f7eb ffc9 	bl	8000494 <__aeabi_dcmpge>
 8014502:	9e06      	ldr	r6, [sp, #24]
 8014504:	0035      	movs	r5, r6
 8014506:	2800      	cmp	r0, #0
 8014508:	d000      	beq.n	801450c <_dtoa_r+0x4f8>
 801450a:	e25f      	b.n	80149cc <_dtoa_r+0x9b8>
 801450c:	9b05      	ldr	r3, [sp, #20]
 801450e:	9a05      	ldr	r2, [sp, #20]
 8014510:	3301      	adds	r3, #1
 8014512:	9307      	str	r3, [sp, #28]
 8014514:	2331      	movs	r3, #49	; 0x31
 8014516:	7013      	strb	r3, [r2, #0]
 8014518:	9b02      	ldr	r3, [sp, #8]
 801451a:	3301      	adds	r3, #1
 801451c:	9302      	str	r3, [sp, #8]
 801451e:	e25a      	b.n	80149d6 <_dtoa_r+0x9c2>
 8014520:	4234      	tst	r4, r6
 8014522:	d007      	beq.n	8014534 <_dtoa_r+0x520>
 8014524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014526:	3301      	adds	r3, #1
 8014528:	9310      	str	r3, [sp, #64]	; 0x40
 801452a:	682a      	ldr	r2, [r5, #0]
 801452c:	686b      	ldr	r3, [r5, #4]
 801452e:	f7ed fd2d 	bl	8001f8c <__aeabi_dmul>
 8014532:	0033      	movs	r3, r6
 8014534:	1064      	asrs	r4, r4, #1
 8014536:	3508      	adds	r5, #8
 8014538:	e75a      	b.n	80143f0 <_dtoa_r+0x3dc>
 801453a:	9e02      	ldr	r6, [sp, #8]
 801453c:	9b06      	ldr	r3, [sp, #24]
 801453e:	e780      	b.n	8014442 <_dtoa_r+0x42e>
 8014540:	9b07      	ldr	r3, [sp, #28]
 8014542:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014544:	1e5a      	subs	r2, r3, #1
 8014546:	4b59      	ldr	r3, [pc, #356]	; (80146ac <_dtoa_r+0x698>)
 8014548:	00d2      	lsls	r2, r2, #3
 801454a:	189b      	adds	r3, r3, r2
 801454c:	681a      	ldr	r2, [r3, #0]
 801454e:	685b      	ldr	r3, [r3, #4]
 8014550:	2900      	cmp	r1, #0
 8014552:	d051      	beq.n	80145f8 <_dtoa_r+0x5e4>
 8014554:	2000      	movs	r0, #0
 8014556:	495d      	ldr	r1, [pc, #372]	; (80146cc <_dtoa_r+0x6b8>)
 8014558:	f7ed f912 	bl	8001780 <__aeabi_ddiv>
 801455c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801455e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014560:	f7ed ff80 	bl	8002464 <__aeabi_dsub>
 8014564:	9a05      	ldr	r2, [sp, #20]
 8014566:	9b05      	ldr	r3, [sp, #20]
 8014568:	4694      	mov	ip, r2
 801456a:	9310      	str	r3, [sp, #64]	; 0x40
 801456c:	9b07      	ldr	r3, [sp, #28]
 801456e:	900a      	str	r0, [sp, #40]	; 0x28
 8014570:	910b      	str	r1, [sp, #44]	; 0x2c
 8014572:	4463      	add	r3, ip
 8014574:	9319      	str	r3, [sp, #100]	; 0x64
 8014576:	0029      	movs	r1, r5
 8014578:	0020      	movs	r0, r4
 801457a:	f7ee fb23 	bl	8002bc4 <__aeabi_d2iz>
 801457e:	9017      	str	r0, [sp, #92]	; 0x5c
 8014580:	f7ee fb56 	bl	8002c30 <__aeabi_i2d>
 8014584:	0002      	movs	r2, r0
 8014586:	000b      	movs	r3, r1
 8014588:	0020      	movs	r0, r4
 801458a:	0029      	movs	r1, r5
 801458c:	f7ed ff6a 	bl	8002464 <__aeabi_dsub>
 8014590:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014592:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014594:	3301      	adds	r3, #1
 8014596:	9307      	str	r3, [sp, #28]
 8014598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801459a:	0004      	movs	r4, r0
 801459c:	3330      	adds	r3, #48	; 0x30
 801459e:	7013      	strb	r3, [r2, #0]
 80145a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145a4:	000d      	movs	r5, r1
 80145a6:	f7eb ff57 	bl	8000458 <__aeabi_dcmplt>
 80145aa:	2800      	cmp	r0, #0
 80145ac:	d175      	bne.n	801469a <_dtoa_r+0x686>
 80145ae:	0022      	movs	r2, r4
 80145b0:	002b      	movs	r3, r5
 80145b2:	2000      	movs	r0, #0
 80145b4:	493f      	ldr	r1, [pc, #252]	; (80146b4 <_dtoa_r+0x6a0>)
 80145b6:	f7ed ff55 	bl	8002464 <__aeabi_dsub>
 80145ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145be:	f7eb ff4b 	bl	8000458 <__aeabi_dcmplt>
 80145c2:	2800      	cmp	r0, #0
 80145c4:	d000      	beq.n	80145c8 <_dtoa_r+0x5b4>
 80145c6:	e0d1      	b.n	801476c <_dtoa_r+0x758>
 80145c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80145ca:	9a07      	ldr	r2, [sp, #28]
 80145cc:	4293      	cmp	r3, r2
 80145ce:	d100      	bne.n	80145d2 <_dtoa_r+0x5be>
 80145d0:	e770      	b.n	80144b4 <_dtoa_r+0x4a0>
 80145d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80145d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80145d6:	2200      	movs	r2, #0
 80145d8:	4b37      	ldr	r3, [pc, #220]	; (80146b8 <_dtoa_r+0x6a4>)
 80145da:	f7ed fcd7 	bl	8001f8c <__aeabi_dmul>
 80145de:	4b36      	ldr	r3, [pc, #216]	; (80146b8 <_dtoa_r+0x6a4>)
 80145e0:	900a      	str	r0, [sp, #40]	; 0x28
 80145e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80145e4:	2200      	movs	r2, #0
 80145e6:	0020      	movs	r0, r4
 80145e8:	0029      	movs	r1, r5
 80145ea:	f7ed fccf 	bl	8001f8c <__aeabi_dmul>
 80145ee:	9b07      	ldr	r3, [sp, #28]
 80145f0:	0004      	movs	r4, r0
 80145f2:	000d      	movs	r5, r1
 80145f4:	9310      	str	r3, [sp, #64]	; 0x40
 80145f6:	e7be      	b.n	8014576 <_dtoa_r+0x562>
 80145f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80145fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80145fc:	f7ed fcc6 	bl	8001f8c <__aeabi_dmul>
 8014600:	9a05      	ldr	r2, [sp, #20]
 8014602:	9b05      	ldr	r3, [sp, #20]
 8014604:	4694      	mov	ip, r2
 8014606:	930a      	str	r3, [sp, #40]	; 0x28
 8014608:	9b07      	ldr	r3, [sp, #28]
 801460a:	9010      	str	r0, [sp, #64]	; 0x40
 801460c:	9111      	str	r1, [sp, #68]	; 0x44
 801460e:	4463      	add	r3, ip
 8014610:	9319      	str	r3, [sp, #100]	; 0x64
 8014612:	0029      	movs	r1, r5
 8014614:	0020      	movs	r0, r4
 8014616:	f7ee fad5 	bl	8002bc4 <__aeabi_d2iz>
 801461a:	9017      	str	r0, [sp, #92]	; 0x5c
 801461c:	f7ee fb08 	bl	8002c30 <__aeabi_i2d>
 8014620:	0002      	movs	r2, r0
 8014622:	000b      	movs	r3, r1
 8014624:	0020      	movs	r0, r4
 8014626:	0029      	movs	r1, r5
 8014628:	f7ed ff1c 	bl	8002464 <__aeabi_dsub>
 801462c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801462e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014630:	3330      	adds	r3, #48	; 0x30
 8014632:	7013      	strb	r3, [r2, #0]
 8014634:	0013      	movs	r3, r2
 8014636:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014638:	3301      	adds	r3, #1
 801463a:	0004      	movs	r4, r0
 801463c:	000d      	movs	r5, r1
 801463e:	930a      	str	r3, [sp, #40]	; 0x28
 8014640:	4293      	cmp	r3, r2
 8014642:	d12c      	bne.n	801469e <_dtoa_r+0x68a>
 8014644:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014646:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014648:	9a05      	ldr	r2, [sp, #20]
 801464a:	9b07      	ldr	r3, [sp, #28]
 801464c:	4694      	mov	ip, r2
 801464e:	4463      	add	r3, ip
 8014650:	2200      	movs	r2, #0
 8014652:	9307      	str	r3, [sp, #28]
 8014654:	4b1d      	ldr	r3, [pc, #116]	; (80146cc <_dtoa_r+0x6b8>)
 8014656:	f7ec fd29 	bl	80010ac <__aeabi_dadd>
 801465a:	0002      	movs	r2, r0
 801465c:	000b      	movs	r3, r1
 801465e:	0020      	movs	r0, r4
 8014660:	0029      	movs	r1, r5
 8014662:	f7eb ff0d 	bl	8000480 <__aeabi_dcmpgt>
 8014666:	2800      	cmp	r0, #0
 8014668:	d000      	beq.n	801466c <_dtoa_r+0x658>
 801466a:	e07f      	b.n	801476c <_dtoa_r+0x758>
 801466c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801466e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014670:	2000      	movs	r0, #0
 8014672:	4916      	ldr	r1, [pc, #88]	; (80146cc <_dtoa_r+0x6b8>)
 8014674:	f7ed fef6 	bl	8002464 <__aeabi_dsub>
 8014678:	0002      	movs	r2, r0
 801467a:	000b      	movs	r3, r1
 801467c:	0020      	movs	r0, r4
 801467e:	0029      	movs	r1, r5
 8014680:	f7eb feea 	bl	8000458 <__aeabi_dcmplt>
 8014684:	2800      	cmp	r0, #0
 8014686:	d100      	bne.n	801468a <_dtoa_r+0x676>
 8014688:	e714      	b.n	80144b4 <_dtoa_r+0x4a0>
 801468a:	9b07      	ldr	r3, [sp, #28]
 801468c:	001a      	movs	r2, r3
 801468e:	3a01      	subs	r2, #1
 8014690:	9207      	str	r2, [sp, #28]
 8014692:	7812      	ldrb	r2, [r2, #0]
 8014694:	2a30      	cmp	r2, #48	; 0x30
 8014696:	d0f8      	beq.n	801468a <_dtoa_r+0x676>
 8014698:	9307      	str	r3, [sp, #28]
 801469a:	9602      	str	r6, [sp, #8]
 801469c:	e054      	b.n	8014748 <_dtoa_r+0x734>
 801469e:	2200      	movs	r2, #0
 80146a0:	4b05      	ldr	r3, [pc, #20]	; (80146b8 <_dtoa_r+0x6a4>)
 80146a2:	f7ed fc73 	bl	8001f8c <__aeabi_dmul>
 80146a6:	0004      	movs	r4, r0
 80146a8:	000d      	movs	r5, r1
 80146aa:	e7b2      	b.n	8014612 <_dtoa_r+0x5fe>
 80146ac:	08016790 	.word	0x08016790
 80146b0:	08016768 	.word	0x08016768
 80146b4:	3ff00000 	.word	0x3ff00000
 80146b8:	40240000 	.word	0x40240000
 80146bc:	401c0000 	.word	0x401c0000
 80146c0:	fcc00000 	.word	0xfcc00000
 80146c4:	40140000 	.word	0x40140000
 80146c8:	7cc00000 	.word	0x7cc00000
 80146cc:	3fe00000 	.word	0x3fe00000
 80146d0:	9b06      	ldr	r3, [sp, #24]
 80146d2:	9e05      	ldr	r6, [sp, #20]
 80146d4:	3b01      	subs	r3, #1
 80146d6:	199b      	adds	r3, r3, r6
 80146d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80146da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80146dc:	930a      	str	r3, [sp, #40]	; 0x28
 80146de:	9a08      	ldr	r2, [sp, #32]
 80146e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146e2:	0020      	movs	r0, r4
 80146e4:	0029      	movs	r1, r5
 80146e6:	f7ed f84b 	bl	8001780 <__aeabi_ddiv>
 80146ea:	f7ee fa6b 	bl	8002bc4 <__aeabi_d2iz>
 80146ee:	9006      	str	r0, [sp, #24]
 80146f0:	f7ee fa9e 	bl	8002c30 <__aeabi_i2d>
 80146f4:	9a08      	ldr	r2, [sp, #32]
 80146f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146f8:	f7ed fc48 	bl	8001f8c <__aeabi_dmul>
 80146fc:	0002      	movs	r2, r0
 80146fe:	000b      	movs	r3, r1
 8014700:	0020      	movs	r0, r4
 8014702:	0029      	movs	r1, r5
 8014704:	f7ed feae 	bl	8002464 <__aeabi_dsub>
 8014708:	0033      	movs	r3, r6
 801470a:	9a06      	ldr	r2, [sp, #24]
 801470c:	3601      	adds	r6, #1
 801470e:	3230      	adds	r2, #48	; 0x30
 8014710:	701a      	strb	r2, [r3, #0]
 8014712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014714:	9607      	str	r6, [sp, #28]
 8014716:	429a      	cmp	r2, r3
 8014718:	d139      	bne.n	801478e <_dtoa_r+0x77a>
 801471a:	0002      	movs	r2, r0
 801471c:	000b      	movs	r3, r1
 801471e:	f7ec fcc5 	bl	80010ac <__aeabi_dadd>
 8014722:	9a08      	ldr	r2, [sp, #32]
 8014724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014726:	0004      	movs	r4, r0
 8014728:	000d      	movs	r5, r1
 801472a:	f7eb fea9 	bl	8000480 <__aeabi_dcmpgt>
 801472e:	2800      	cmp	r0, #0
 8014730:	d11b      	bne.n	801476a <_dtoa_r+0x756>
 8014732:	9a08      	ldr	r2, [sp, #32]
 8014734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014736:	0020      	movs	r0, r4
 8014738:	0029      	movs	r1, r5
 801473a:	f7eb fe87 	bl	800044c <__aeabi_dcmpeq>
 801473e:	2800      	cmp	r0, #0
 8014740:	d002      	beq.n	8014748 <_dtoa_r+0x734>
 8014742:	9b06      	ldr	r3, [sp, #24]
 8014744:	07db      	lsls	r3, r3, #31
 8014746:	d410      	bmi.n	801476a <_dtoa_r+0x756>
 8014748:	0038      	movs	r0, r7
 801474a:	9904      	ldr	r1, [sp, #16]
 801474c:	f000 fade 	bl	8014d0c <_Bfree>
 8014750:	2300      	movs	r3, #0
 8014752:	9a07      	ldr	r2, [sp, #28]
 8014754:	9802      	ldr	r0, [sp, #8]
 8014756:	7013      	strb	r3, [r2, #0]
 8014758:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801475a:	3001      	adds	r0, #1
 801475c:	6018      	str	r0, [r3, #0]
 801475e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014760:	2b00      	cmp	r3, #0
 8014762:	d100      	bne.n	8014766 <_dtoa_r+0x752>
 8014764:	e4a3      	b.n	80140ae <_dtoa_r+0x9a>
 8014766:	601a      	str	r2, [r3, #0]
 8014768:	e4a1      	b.n	80140ae <_dtoa_r+0x9a>
 801476a:	9e02      	ldr	r6, [sp, #8]
 801476c:	9b07      	ldr	r3, [sp, #28]
 801476e:	9307      	str	r3, [sp, #28]
 8014770:	3b01      	subs	r3, #1
 8014772:	781a      	ldrb	r2, [r3, #0]
 8014774:	2a39      	cmp	r2, #57	; 0x39
 8014776:	d106      	bne.n	8014786 <_dtoa_r+0x772>
 8014778:	9a05      	ldr	r2, [sp, #20]
 801477a:	429a      	cmp	r2, r3
 801477c:	d1f7      	bne.n	801476e <_dtoa_r+0x75a>
 801477e:	2230      	movs	r2, #48	; 0x30
 8014780:	9905      	ldr	r1, [sp, #20]
 8014782:	3601      	adds	r6, #1
 8014784:	700a      	strb	r2, [r1, #0]
 8014786:	781a      	ldrb	r2, [r3, #0]
 8014788:	3201      	adds	r2, #1
 801478a:	701a      	strb	r2, [r3, #0]
 801478c:	e785      	b.n	801469a <_dtoa_r+0x686>
 801478e:	2200      	movs	r2, #0
 8014790:	4bad      	ldr	r3, [pc, #692]	; (8014a48 <_dtoa_r+0xa34>)
 8014792:	f7ed fbfb 	bl	8001f8c <__aeabi_dmul>
 8014796:	2200      	movs	r2, #0
 8014798:	2300      	movs	r3, #0
 801479a:	0004      	movs	r4, r0
 801479c:	000d      	movs	r5, r1
 801479e:	f7eb fe55 	bl	800044c <__aeabi_dcmpeq>
 80147a2:	2800      	cmp	r0, #0
 80147a4:	d09b      	beq.n	80146de <_dtoa_r+0x6ca>
 80147a6:	e7cf      	b.n	8014748 <_dtoa_r+0x734>
 80147a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80147aa:	2a00      	cmp	r2, #0
 80147ac:	d100      	bne.n	80147b0 <_dtoa_r+0x79c>
 80147ae:	e082      	b.n	80148b6 <_dtoa_r+0x8a2>
 80147b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80147b2:	2a01      	cmp	r2, #1
 80147b4:	dc66      	bgt.n	8014884 <_dtoa_r+0x870>
 80147b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80147b8:	2a00      	cmp	r2, #0
 80147ba:	d05f      	beq.n	801487c <_dtoa_r+0x868>
 80147bc:	4aa3      	ldr	r2, [pc, #652]	; (8014a4c <_dtoa_r+0xa38>)
 80147be:	189b      	adds	r3, r3, r2
 80147c0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80147c2:	9c08      	ldr	r4, [sp, #32]
 80147c4:	9a08      	ldr	r2, [sp, #32]
 80147c6:	2101      	movs	r1, #1
 80147c8:	18d2      	adds	r2, r2, r3
 80147ca:	9208      	str	r2, [sp, #32]
 80147cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80147ce:	0038      	movs	r0, r7
 80147d0:	18d3      	adds	r3, r2, r3
 80147d2:	930d      	str	r3, [sp, #52]	; 0x34
 80147d4:	f000 fb4a 	bl	8014e6c <__i2b>
 80147d8:	0005      	movs	r5, r0
 80147da:	2c00      	cmp	r4, #0
 80147dc:	dd0e      	ble.n	80147fc <_dtoa_r+0x7e8>
 80147de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	dd0b      	ble.n	80147fc <_dtoa_r+0x7e8>
 80147e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80147e6:	0023      	movs	r3, r4
 80147e8:	4294      	cmp	r4, r2
 80147ea:	dd00      	ble.n	80147ee <_dtoa_r+0x7da>
 80147ec:	0013      	movs	r3, r2
 80147ee:	9a08      	ldr	r2, [sp, #32]
 80147f0:	1ae4      	subs	r4, r4, r3
 80147f2:	1ad2      	subs	r2, r2, r3
 80147f4:	9208      	str	r2, [sp, #32]
 80147f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80147f8:	1ad3      	subs	r3, r2, r3
 80147fa:	930d      	str	r3, [sp, #52]	; 0x34
 80147fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d01f      	beq.n	8014842 <_dtoa_r+0x82e>
 8014802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014804:	2b00      	cmp	r3, #0
 8014806:	d05a      	beq.n	80148be <_dtoa_r+0x8aa>
 8014808:	2e00      	cmp	r6, #0
 801480a:	dd11      	ble.n	8014830 <_dtoa_r+0x81c>
 801480c:	0029      	movs	r1, r5
 801480e:	0032      	movs	r2, r6
 8014810:	0038      	movs	r0, r7
 8014812:	f000 fbf1 	bl	8014ff8 <__pow5mult>
 8014816:	9a04      	ldr	r2, [sp, #16]
 8014818:	0001      	movs	r1, r0
 801481a:	0005      	movs	r5, r0
 801481c:	0038      	movs	r0, r7
 801481e:	f000 fb3b 	bl	8014e98 <__multiply>
 8014822:	9904      	ldr	r1, [sp, #16]
 8014824:	9007      	str	r0, [sp, #28]
 8014826:	0038      	movs	r0, r7
 8014828:	f000 fa70 	bl	8014d0c <_Bfree>
 801482c:	9b07      	ldr	r3, [sp, #28]
 801482e:	9304      	str	r3, [sp, #16]
 8014830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014832:	1b9a      	subs	r2, r3, r6
 8014834:	42b3      	cmp	r3, r6
 8014836:	d004      	beq.n	8014842 <_dtoa_r+0x82e>
 8014838:	0038      	movs	r0, r7
 801483a:	9904      	ldr	r1, [sp, #16]
 801483c:	f000 fbdc 	bl	8014ff8 <__pow5mult>
 8014840:	9004      	str	r0, [sp, #16]
 8014842:	2101      	movs	r1, #1
 8014844:	0038      	movs	r0, r7
 8014846:	f000 fb11 	bl	8014e6c <__i2b>
 801484a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801484c:	0006      	movs	r6, r0
 801484e:	2b00      	cmp	r3, #0
 8014850:	dd37      	ble.n	80148c2 <_dtoa_r+0x8ae>
 8014852:	001a      	movs	r2, r3
 8014854:	0001      	movs	r1, r0
 8014856:	0038      	movs	r0, r7
 8014858:	f000 fbce 	bl	8014ff8 <__pow5mult>
 801485c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801485e:	0006      	movs	r6, r0
 8014860:	2b01      	cmp	r3, #1
 8014862:	dd33      	ble.n	80148cc <_dtoa_r+0x8b8>
 8014864:	2300      	movs	r3, #0
 8014866:	9307      	str	r3, [sp, #28]
 8014868:	6933      	ldr	r3, [r6, #16]
 801486a:	3303      	adds	r3, #3
 801486c:	009b      	lsls	r3, r3, #2
 801486e:	18f3      	adds	r3, r6, r3
 8014870:	6858      	ldr	r0, [r3, #4]
 8014872:	f000 fab3 	bl	8014ddc <__hi0bits>
 8014876:	2320      	movs	r3, #32
 8014878:	1a18      	subs	r0, r3, r0
 801487a:	e03f      	b.n	80148fc <_dtoa_r+0x8e8>
 801487c:	2336      	movs	r3, #54	; 0x36
 801487e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014880:	1a9b      	subs	r3, r3, r2
 8014882:	e79d      	b.n	80147c0 <_dtoa_r+0x7ac>
 8014884:	9b06      	ldr	r3, [sp, #24]
 8014886:	1e5e      	subs	r6, r3, #1
 8014888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801488a:	42b3      	cmp	r3, r6
 801488c:	db08      	blt.n	80148a0 <_dtoa_r+0x88c>
 801488e:	1b9e      	subs	r6, r3, r6
 8014890:	9b06      	ldr	r3, [sp, #24]
 8014892:	2b00      	cmp	r3, #0
 8014894:	da0c      	bge.n	80148b0 <_dtoa_r+0x89c>
 8014896:	9b08      	ldr	r3, [sp, #32]
 8014898:	9a06      	ldr	r2, [sp, #24]
 801489a:	1a9c      	subs	r4, r3, r2
 801489c:	2300      	movs	r3, #0
 801489e:	e791      	b.n	80147c4 <_dtoa_r+0x7b0>
 80148a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80148a4:	1af3      	subs	r3, r6, r3
 80148a6:	18d3      	adds	r3, r2, r3
 80148a8:	960e      	str	r6, [sp, #56]	; 0x38
 80148aa:	9314      	str	r3, [sp, #80]	; 0x50
 80148ac:	2600      	movs	r6, #0
 80148ae:	e7ef      	b.n	8014890 <_dtoa_r+0x87c>
 80148b0:	9c08      	ldr	r4, [sp, #32]
 80148b2:	9b06      	ldr	r3, [sp, #24]
 80148b4:	e786      	b.n	80147c4 <_dtoa_r+0x7b0>
 80148b6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80148b8:	9c08      	ldr	r4, [sp, #32]
 80148ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80148bc:	e78d      	b.n	80147da <_dtoa_r+0x7c6>
 80148be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80148c0:	e7ba      	b.n	8014838 <_dtoa_r+0x824>
 80148c2:	2300      	movs	r3, #0
 80148c4:	9307      	str	r3, [sp, #28]
 80148c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80148c8:	2b01      	cmp	r3, #1
 80148ca:	dc13      	bgt.n	80148f4 <_dtoa_r+0x8e0>
 80148cc:	2300      	movs	r3, #0
 80148ce:	9307      	str	r3, [sp, #28]
 80148d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d10e      	bne.n	80148f4 <_dtoa_r+0x8e0>
 80148d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148d8:	031b      	lsls	r3, r3, #12
 80148da:	d10b      	bne.n	80148f4 <_dtoa_r+0x8e0>
 80148dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80148de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80148e0:	4213      	tst	r3, r2
 80148e2:	d007      	beq.n	80148f4 <_dtoa_r+0x8e0>
 80148e4:	9b08      	ldr	r3, [sp, #32]
 80148e6:	3301      	adds	r3, #1
 80148e8:	9308      	str	r3, [sp, #32]
 80148ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148ec:	3301      	adds	r3, #1
 80148ee:	930d      	str	r3, [sp, #52]	; 0x34
 80148f0:	2301      	movs	r3, #1
 80148f2:	9307      	str	r3, [sp, #28]
 80148f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80148f6:	2001      	movs	r0, #1
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d1b5      	bne.n	8014868 <_dtoa_r+0x854>
 80148fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148fe:	221f      	movs	r2, #31
 8014900:	1818      	adds	r0, r3, r0
 8014902:	0003      	movs	r3, r0
 8014904:	4013      	ands	r3, r2
 8014906:	4210      	tst	r0, r2
 8014908:	d046      	beq.n	8014998 <_dtoa_r+0x984>
 801490a:	3201      	adds	r2, #1
 801490c:	1ad2      	subs	r2, r2, r3
 801490e:	2a04      	cmp	r2, #4
 8014910:	dd3f      	ble.n	8014992 <_dtoa_r+0x97e>
 8014912:	221c      	movs	r2, #28
 8014914:	1ad3      	subs	r3, r2, r3
 8014916:	9a08      	ldr	r2, [sp, #32]
 8014918:	18e4      	adds	r4, r4, r3
 801491a:	18d2      	adds	r2, r2, r3
 801491c:	9208      	str	r2, [sp, #32]
 801491e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014920:	18d3      	adds	r3, r2, r3
 8014922:	930d      	str	r3, [sp, #52]	; 0x34
 8014924:	9b08      	ldr	r3, [sp, #32]
 8014926:	2b00      	cmp	r3, #0
 8014928:	dd05      	ble.n	8014936 <_dtoa_r+0x922>
 801492a:	001a      	movs	r2, r3
 801492c:	0038      	movs	r0, r7
 801492e:	9904      	ldr	r1, [sp, #16]
 8014930:	f000 fbbe 	bl	80150b0 <__lshift>
 8014934:	9004      	str	r0, [sp, #16]
 8014936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014938:	2b00      	cmp	r3, #0
 801493a:	dd05      	ble.n	8014948 <_dtoa_r+0x934>
 801493c:	0031      	movs	r1, r6
 801493e:	001a      	movs	r2, r3
 8014940:	0038      	movs	r0, r7
 8014942:	f000 fbb5 	bl	80150b0 <__lshift>
 8014946:	0006      	movs	r6, r0
 8014948:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801494a:	2b00      	cmp	r3, #0
 801494c:	d026      	beq.n	801499c <_dtoa_r+0x988>
 801494e:	0031      	movs	r1, r6
 8014950:	9804      	ldr	r0, [sp, #16]
 8014952:	f000 fc1d 	bl	8015190 <__mcmp>
 8014956:	2800      	cmp	r0, #0
 8014958:	da20      	bge.n	801499c <_dtoa_r+0x988>
 801495a:	9b02      	ldr	r3, [sp, #8]
 801495c:	220a      	movs	r2, #10
 801495e:	3b01      	subs	r3, #1
 8014960:	9302      	str	r3, [sp, #8]
 8014962:	0038      	movs	r0, r7
 8014964:	2300      	movs	r3, #0
 8014966:	9904      	ldr	r1, [sp, #16]
 8014968:	f000 f9f4 	bl	8014d54 <__multadd>
 801496c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801496e:	9004      	str	r0, [sp, #16]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d100      	bne.n	8014976 <_dtoa_r+0x962>
 8014974:	e160      	b.n	8014c38 <_dtoa_r+0xc24>
 8014976:	2300      	movs	r3, #0
 8014978:	0029      	movs	r1, r5
 801497a:	220a      	movs	r2, #10
 801497c:	0038      	movs	r0, r7
 801497e:	f000 f9e9 	bl	8014d54 <__multadd>
 8014982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014984:	0005      	movs	r5, r0
 8014986:	2b00      	cmp	r3, #0
 8014988:	dc47      	bgt.n	8014a1a <_dtoa_r+0xa06>
 801498a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801498c:	2b02      	cmp	r3, #2
 801498e:	dc0d      	bgt.n	80149ac <_dtoa_r+0x998>
 8014990:	e043      	b.n	8014a1a <_dtoa_r+0xa06>
 8014992:	2a04      	cmp	r2, #4
 8014994:	d0c6      	beq.n	8014924 <_dtoa_r+0x910>
 8014996:	0013      	movs	r3, r2
 8014998:	331c      	adds	r3, #28
 801499a:	e7bc      	b.n	8014916 <_dtoa_r+0x902>
 801499c:	9b06      	ldr	r3, [sp, #24]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	dc35      	bgt.n	8014a0e <_dtoa_r+0x9fa>
 80149a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80149a4:	2b02      	cmp	r3, #2
 80149a6:	dd32      	ble.n	8014a0e <_dtoa_r+0x9fa>
 80149a8:	9b06      	ldr	r3, [sp, #24]
 80149aa:	930c      	str	r3, [sp, #48]	; 0x30
 80149ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d10c      	bne.n	80149cc <_dtoa_r+0x9b8>
 80149b2:	0031      	movs	r1, r6
 80149b4:	2205      	movs	r2, #5
 80149b6:	0038      	movs	r0, r7
 80149b8:	f000 f9cc 	bl	8014d54 <__multadd>
 80149bc:	0006      	movs	r6, r0
 80149be:	0001      	movs	r1, r0
 80149c0:	9804      	ldr	r0, [sp, #16]
 80149c2:	f000 fbe5 	bl	8015190 <__mcmp>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	dd00      	ble.n	80149cc <_dtoa_r+0x9b8>
 80149ca:	e59f      	b.n	801450c <_dtoa_r+0x4f8>
 80149cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80149ce:	43db      	mvns	r3, r3
 80149d0:	9302      	str	r3, [sp, #8]
 80149d2:	9b05      	ldr	r3, [sp, #20]
 80149d4:	9307      	str	r3, [sp, #28]
 80149d6:	2400      	movs	r4, #0
 80149d8:	0031      	movs	r1, r6
 80149da:	0038      	movs	r0, r7
 80149dc:	f000 f996 	bl	8014d0c <_Bfree>
 80149e0:	2d00      	cmp	r5, #0
 80149e2:	d100      	bne.n	80149e6 <_dtoa_r+0x9d2>
 80149e4:	e6b0      	b.n	8014748 <_dtoa_r+0x734>
 80149e6:	2c00      	cmp	r4, #0
 80149e8:	d005      	beq.n	80149f6 <_dtoa_r+0x9e2>
 80149ea:	42ac      	cmp	r4, r5
 80149ec:	d003      	beq.n	80149f6 <_dtoa_r+0x9e2>
 80149ee:	0021      	movs	r1, r4
 80149f0:	0038      	movs	r0, r7
 80149f2:	f000 f98b 	bl	8014d0c <_Bfree>
 80149f6:	0029      	movs	r1, r5
 80149f8:	0038      	movs	r0, r7
 80149fa:	f000 f987 	bl	8014d0c <_Bfree>
 80149fe:	e6a3      	b.n	8014748 <_dtoa_r+0x734>
 8014a00:	2600      	movs	r6, #0
 8014a02:	0035      	movs	r5, r6
 8014a04:	e7e2      	b.n	80149cc <_dtoa_r+0x9b8>
 8014a06:	9602      	str	r6, [sp, #8]
 8014a08:	9e07      	ldr	r6, [sp, #28]
 8014a0a:	0035      	movs	r5, r6
 8014a0c:	e57e      	b.n	801450c <_dtoa_r+0x4f8>
 8014a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d100      	bne.n	8014a16 <_dtoa_r+0xa02>
 8014a14:	e0c8      	b.n	8014ba8 <_dtoa_r+0xb94>
 8014a16:	9b06      	ldr	r3, [sp, #24]
 8014a18:	930c      	str	r3, [sp, #48]	; 0x30
 8014a1a:	2c00      	cmp	r4, #0
 8014a1c:	dd05      	ble.n	8014a2a <_dtoa_r+0xa16>
 8014a1e:	0029      	movs	r1, r5
 8014a20:	0022      	movs	r2, r4
 8014a22:	0038      	movs	r0, r7
 8014a24:	f000 fb44 	bl	80150b0 <__lshift>
 8014a28:	0005      	movs	r5, r0
 8014a2a:	9b07      	ldr	r3, [sp, #28]
 8014a2c:	0028      	movs	r0, r5
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d01f      	beq.n	8014a72 <_dtoa_r+0xa5e>
 8014a32:	0038      	movs	r0, r7
 8014a34:	6869      	ldr	r1, [r5, #4]
 8014a36:	f000 f925 	bl	8014c84 <_Balloc>
 8014a3a:	1e04      	subs	r4, r0, #0
 8014a3c:	d10c      	bne.n	8014a58 <_dtoa_r+0xa44>
 8014a3e:	0002      	movs	r2, r0
 8014a40:	4b03      	ldr	r3, [pc, #12]	; (8014a50 <_dtoa_r+0xa3c>)
 8014a42:	4904      	ldr	r1, [pc, #16]	; (8014a54 <_dtoa_r+0xa40>)
 8014a44:	f7ff fafb 	bl	801403e <_dtoa_r+0x2a>
 8014a48:	40240000 	.word	0x40240000
 8014a4c:	00000433 	.word	0x00000433
 8014a50:	080166f7 	.word	0x080166f7
 8014a54:	000002ea 	.word	0x000002ea
 8014a58:	0029      	movs	r1, r5
 8014a5a:	692b      	ldr	r3, [r5, #16]
 8014a5c:	310c      	adds	r1, #12
 8014a5e:	1c9a      	adds	r2, r3, #2
 8014a60:	0092      	lsls	r2, r2, #2
 8014a62:	300c      	adds	r0, #12
 8014a64:	f7fe fdaa 	bl	80135bc <memcpy>
 8014a68:	2201      	movs	r2, #1
 8014a6a:	0021      	movs	r1, r4
 8014a6c:	0038      	movs	r0, r7
 8014a6e:	f000 fb1f 	bl	80150b0 <__lshift>
 8014a72:	002c      	movs	r4, r5
 8014a74:	0005      	movs	r5, r0
 8014a76:	9b05      	ldr	r3, [sp, #20]
 8014a78:	9308      	str	r3, [sp, #32]
 8014a7a:	0031      	movs	r1, r6
 8014a7c:	9804      	ldr	r0, [sp, #16]
 8014a7e:	f7ff fa3d 	bl	8013efc <quorem>
 8014a82:	0003      	movs	r3, r0
 8014a84:	0021      	movs	r1, r4
 8014a86:	3330      	adds	r3, #48	; 0x30
 8014a88:	900e      	str	r0, [sp, #56]	; 0x38
 8014a8a:	9804      	ldr	r0, [sp, #16]
 8014a8c:	9306      	str	r3, [sp, #24]
 8014a8e:	f000 fb7f 	bl	8015190 <__mcmp>
 8014a92:	002a      	movs	r2, r5
 8014a94:	900f      	str	r0, [sp, #60]	; 0x3c
 8014a96:	0031      	movs	r1, r6
 8014a98:	0038      	movs	r0, r7
 8014a9a:	f000 fb95 	bl	80151c8 <__mdiff>
 8014a9e:	68c3      	ldr	r3, [r0, #12]
 8014aa0:	9007      	str	r0, [sp, #28]
 8014aa2:	9310      	str	r3, [sp, #64]	; 0x40
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	930d      	str	r3, [sp, #52]	; 0x34
 8014aa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d104      	bne.n	8014ab8 <_dtoa_r+0xaa4>
 8014aae:	0001      	movs	r1, r0
 8014ab0:	9804      	ldr	r0, [sp, #16]
 8014ab2:	f000 fb6d 	bl	8015190 <__mcmp>
 8014ab6:	900d      	str	r0, [sp, #52]	; 0x34
 8014ab8:	0038      	movs	r0, r7
 8014aba:	9907      	ldr	r1, [sp, #28]
 8014abc:	f000 f926 	bl	8014d0c <_Bfree>
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ac4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ac6:	4018      	ands	r0, r3
 8014ac8:	9b08      	ldr	r3, [sp, #32]
 8014aca:	3301      	adds	r3, #1
 8014acc:	9307      	str	r3, [sp, #28]
 8014ace:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014ad0:	4313      	orrs	r3, r2
 8014ad2:	4303      	orrs	r3, r0
 8014ad4:	d10c      	bne.n	8014af0 <_dtoa_r+0xadc>
 8014ad6:	9b06      	ldr	r3, [sp, #24]
 8014ad8:	2b39      	cmp	r3, #57	; 0x39
 8014ada:	d025      	beq.n	8014b28 <_dtoa_r+0xb14>
 8014adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	dd02      	ble.n	8014ae8 <_dtoa_r+0xad4>
 8014ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ae4:	3331      	adds	r3, #49	; 0x31
 8014ae6:	9306      	str	r3, [sp, #24]
 8014ae8:	9b08      	ldr	r3, [sp, #32]
 8014aea:	9a06      	ldr	r2, [sp, #24]
 8014aec:	701a      	strb	r2, [r3, #0]
 8014aee:	e773      	b.n	80149d8 <_dtoa_r+0x9c4>
 8014af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	db03      	blt.n	8014afe <_dtoa_r+0xaea>
 8014af6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014af8:	4313      	orrs	r3, r2
 8014afa:	4303      	orrs	r3, r0
 8014afc:	d11f      	bne.n	8014b3e <_dtoa_r+0xb2a>
 8014afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	ddf1      	ble.n	8014ae8 <_dtoa_r+0xad4>
 8014b04:	9904      	ldr	r1, [sp, #16]
 8014b06:	2201      	movs	r2, #1
 8014b08:	0038      	movs	r0, r7
 8014b0a:	f000 fad1 	bl	80150b0 <__lshift>
 8014b0e:	0031      	movs	r1, r6
 8014b10:	9004      	str	r0, [sp, #16]
 8014b12:	f000 fb3d 	bl	8015190 <__mcmp>
 8014b16:	2800      	cmp	r0, #0
 8014b18:	dc03      	bgt.n	8014b22 <_dtoa_r+0xb0e>
 8014b1a:	d1e5      	bne.n	8014ae8 <_dtoa_r+0xad4>
 8014b1c:	9b06      	ldr	r3, [sp, #24]
 8014b1e:	07db      	lsls	r3, r3, #31
 8014b20:	d5e2      	bpl.n	8014ae8 <_dtoa_r+0xad4>
 8014b22:	9b06      	ldr	r3, [sp, #24]
 8014b24:	2b39      	cmp	r3, #57	; 0x39
 8014b26:	d1dc      	bne.n	8014ae2 <_dtoa_r+0xace>
 8014b28:	2339      	movs	r3, #57	; 0x39
 8014b2a:	9a08      	ldr	r2, [sp, #32]
 8014b2c:	7013      	strb	r3, [r2, #0]
 8014b2e:	9b07      	ldr	r3, [sp, #28]
 8014b30:	9307      	str	r3, [sp, #28]
 8014b32:	3b01      	subs	r3, #1
 8014b34:	781a      	ldrb	r2, [r3, #0]
 8014b36:	2a39      	cmp	r2, #57	; 0x39
 8014b38:	d06c      	beq.n	8014c14 <_dtoa_r+0xc00>
 8014b3a:	3201      	adds	r2, #1
 8014b3c:	e7d6      	b.n	8014aec <_dtoa_r+0xad8>
 8014b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	dd07      	ble.n	8014b54 <_dtoa_r+0xb40>
 8014b44:	9b06      	ldr	r3, [sp, #24]
 8014b46:	2b39      	cmp	r3, #57	; 0x39
 8014b48:	d0ee      	beq.n	8014b28 <_dtoa_r+0xb14>
 8014b4a:	9b06      	ldr	r3, [sp, #24]
 8014b4c:	9a08      	ldr	r2, [sp, #32]
 8014b4e:	3301      	adds	r3, #1
 8014b50:	7013      	strb	r3, [r2, #0]
 8014b52:	e741      	b.n	80149d8 <_dtoa_r+0x9c4>
 8014b54:	9b08      	ldr	r3, [sp, #32]
 8014b56:	9a06      	ldr	r2, [sp, #24]
 8014b58:	701a      	strb	r2, [r3, #0]
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	9a05      	ldr	r2, [sp, #20]
 8014b5e:	1a9b      	subs	r3, r3, r2
 8014b60:	9a08      	ldr	r2, [sp, #32]
 8014b62:	189b      	adds	r3, r3, r2
 8014b64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d03e      	beq.n	8014be8 <_dtoa_r+0xbd4>
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	220a      	movs	r2, #10
 8014b6e:	9904      	ldr	r1, [sp, #16]
 8014b70:	0038      	movs	r0, r7
 8014b72:	f000 f8ef 	bl	8014d54 <__multadd>
 8014b76:	2300      	movs	r3, #0
 8014b78:	9004      	str	r0, [sp, #16]
 8014b7a:	220a      	movs	r2, #10
 8014b7c:	0021      	movs	r1, r4
 8014b7e:	0038      	movs	r0, r7
 8014b80:	42ac      	cmp	r4, r5
 8014b82:	d106      	bne.n	8014b92 <_dtoa_r+0xb7e>
 8014b84:	f000 f8e6 	bl	8014d54 <__multadd>
 8014b88:	0004      	movs	r4, r0
 8014b8a:	0005      	movs	r5, r0
 8014b8c:	9b07      	ldr	r3, [sp, #28]
 8014b8e:	9308      	str	r3, [sp, #32]
 8014b90:	e773      	b.n	8014a7a <_dtoa_r+0xa66>
 8014b92:	f000 f8df 	bl	8014d54 <__multadd>
 8014b96:	0029      	movs	r1, r5
 8014b98:	0004      	movs	r4, r0
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	220a      	movs	r2, #10
 8014b9e:	0038      	movs	r0, r7
 8014ba0:	f000 f8d8 	bl	8014d54 <__multadd>
 8014ba4:	0005      	movs	r5, r0
 8014ba6:	e7f1      	b.n	8014b8c <_dtoa_r+0xb78>
 8014ba8:	9b06      	ldr	r3, [sp, #24]
 8014baa:	930c      	str	r3, [sp, #48]	; 0x30
 8014bac:	2400      	movs	r4, #0
 8014bae:	0031      	movs	r1, r6
 8014bb0:	9804      	ldr	r0, [sp, #16]
 8014bb2:	f7ff f9a3 	bl	8013efc <quorem>
 8014bb6:	9b05      	ldr	r3, [sp, #20]
 8014bb8:	3030      	adds	r0, #48	; 0x30
 8014bba:	5518      	strb	r0, [r3, r4]
 8014bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bbe:	3401      	adds	r4, #1
 8014bc0:	9006      	str	r0, [sp, #24]
 8014bc2:	42a3      	cmp	r3, r4
 8014bc4:	dd07      	ble.n	8014bd6 <_dtoa_r+0xbc2>
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	220a      	movs	r2, #10
 8014bca:	0038      	movs	r0, r7
 8014bcc:	9904      	ldr	r1, [sp, #16]
 8014bce:	f000 f8c1 	bl	8014d54 <__multadd>
 8014bd2:	9004      	str	r0, [sp, #16]
 8014bd4:	e7eb      	b.n	8014bae <_dtoa_r+0xb9a>
 8014bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bd8:	2001      	movs	r0, #1
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	dd00      	ble.n	8014be0 <_dtoa_r+0xbcc>
 8014bde:	0018      	movs	r0, r3
 8014be0:	2400      	movs	r4, #0
 8014be2:	9b05      	ldr	r3, [sp, #20]
 8014be4:	181b      	adds	r3, r3, r0
 8014be6:	9307      	str	r3, [sp, #28]
 8014be8:	9904      	ldr	r1, [sp, #16]
 8014bea:	2201      	movs	r2, #1
 8014bec:	0038      	movs	r0, r7
 8014bee:	f000 fa5f 	bl	80150b0 <__lshift>
 8014bf2:	0031      	movs	r1, r6
 8014bf4:	9004      	str	r0, [sp, #16]
 8014bf6:	f000 facb 	bl	8015190 <__mcmp>
 8014bfa:	2800      	cmp	r0, #0
 8014bfc:	dc97      	bgt.n	8014b2e <_dtoa_r+0xb1a>
 8014bfe:	d102      	bne.n	8014c06 <_dtoa_r+0xbf2>
 8014c00:	9b06      	ldr	r3, [sp, #24]
 8014c02:	07db      	lsls	r3, r3, #31
 8014c04:	d493      	bmi.n	8014b2e <_dtoa_r+0xb1a>
 8014c06:	9b07      	ldr	r3, [sp, #28]
 8014c08:	9307      	str	r3, [sp, #28]
 8014c0a:	3b01      	subs	r3, #1
 8014c0c:	781a      	ldrb	r2, [r3, #0]
 8014c0e:	2a30      	cmp	r2, #48	; 0x30
 8014c10:	d0fa      	beq.n	8014c08 <_dtoa_r+0xbf4>
 8014c12:	e6e1      	b.n	80149d8 <_dtoa_r+0x9c4>
 8014c14:	9a05      	ldr	r2, [sp, #20]
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d18a      	bne.n	8014b30 <_dtoa_r+0xb1c>
 8014c1a:	9b02      	ldr	r3, [sp, #8]
 8014c1c:	3301      	adds	r3, #1
 8014c1e:	9302      	str	r3, [sp, #8]
 8014c20:	2331      	movs	r3, #49	; 0x31
 8014c22:	e795      	b.n	8014b50 <_dtoa_r+0xb3c>
 8014c24:	4b08      	ldr	r3, [pc, #32]	; (8014c48 <_dtoa_r+0xc34>)
 8014c26:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014c28:	9305      	str	r3, [sp, #20]
 8014c2a:	4b08      	ldr	r3, [pc, #32]	; (8014c4c <_dtoa_r+0xc38>)
 8014c2c:	2a00      	cmp	r2, #0
 8014c2e:	d001      	beq.n	8014c34 <_dtoa_r+0xc20>
 8014c30:	f7ff fa3b 	bl	80140aa <_dtoa_r+0x96>
 8014c34:	f7ff fa3b 	bl	80140ae <_dtoa_r+0x9a>
 8014c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	dcb6      	bgt.n	8014bac <_dtoa_r+0xb98>
 8014c3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014c40:	2b02      	cmp	r3, #2
 8014c42:	dd00      	ble.n	8014c46 <_dtoa_r+0xc32>
 8014c44:	e6b2      	b.n	80149ac <_dtoa_r+0x998>
 8014c46:	e7b1      	b.n	8014bac <_dtoa_r+0xb98>
 8014c48:	08016674 	.word	0x08016674
 8014c4c:	0801667c 	.word	0x0801667c

08014c50 <_localeconv_r>:
 8014c50:	4800      	ldr	r0, [pc, #0]	; (8014c54 <_localeconv_r+0x4>)
 8014c52:	4770      	bx	lr
 8014c54:	200003bc 	.word	0x200003bc

08014c58 <malloc>:
 8014c58:	b510      	push	{r4, lr}
 8014c5a:	4b03      	ldr	r3, [pc, #12]	; (8014c68 <malloc+0x10>)
 8014c5c:	0001      	movs	r1, r0
 8014c5e:	6818      	ldr	r0, [r3, #0]
 8014c60:	f000 fc06 	bl	8015470 <_malloc_r>
 8014c64:	bd10      	pop	{r4, pc}
 8014c66:	46c0      	nop			; (mov r8, r8)
 8014c68:	20000268 	.word	0x20000268

08014c6c <memchr>:
 8014c6c:	b2c9      	uxtb	r1, r1
 8014c6e:	1882      	adds	r2, r0, r2
 8014c70:	4290      	cmp	r0, r2
 8014c72:	d101      	bne.n	8014c78 <memchr+0xc>
 8014c74:	2000      	movs	r0, #0
 8014c76:	4770      	bx	lr
 8014c78:	7803      	ldrb	r3, [r0, #0]
 8014c7a:	428b      	cmp	r3, r1
 8014c7c:	d0fb      	beq.n	8014c76 <memchr+0xa>
 8014c7e:	3001      	adds	r0, #1
 8014c80:	e7f6      	b.n	8014c70 <memchr+0x4>
	...

08014c84 <_Balloc>:
 8014c84:	b570      	push	{r4, r5, r6, lr}
 8014c86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014c88:	0006      	movs	r6, r0
 8014c8a:	000c      	movs	r4, r1
 8014c8c:	2d00      	cmp	r5, #0
 8014c8e:	d10e      	bne.n	8014cae <_Balloc+0x2a>
 8014c90:	2010      	movs	r0, #16
 8014c92:	f7ff ffe1 	bl	8014c58 <malloc>
 8014c96:	1e02      	subs	r2, r0, #0
 8014c98:	6270      	str	r0, [r6, #36]	; 0x24
 8014c9a:	d104      	bne.n	8014ca6 <_Balloc+0x22>
 8014c9c:	2166      	movs	r1, #102	; 0x66
 8014c9e:	4b19      	ldr	r3, [pc, #100]	; (8014d04 <_Balloc+0x80>)
 8014ca0:	4819      	ldr	r0, [pc, #100]	; (8014d08 <_Balloc+0x84>)
 8014ca2:	f000 fc55 	bl	8015550 <__assert_func>
 8014ca6:	6045      	str	r5, [r0, #4]
 8014ca8:	6085      	str	r5, [r0, #8]
 8014caa:	6005      	str	r5, [r0, #0]
 8014cac:	60c5      	str	r5, [r0, #12]
 8014cae:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8014cb0:	68eb      	ldr	r3, [r5, #12]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d013      	beq.n	8014cde <_Balloc+0x5a>
 8014cb6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014cb8:	00a2      	lsls	r2, r4, #2
 8014cba:	68db      	ldr	r3, [r3, #12]
 8014cbc:	189b      	adds	r3, r3, r2
 8014cbe:	6818      	ldr	r0, [r3, #0]
 8014cc0:	2800      	cmp	r0, #0
 8014cc2:	d118      	bne.n	8014cf6 <_Balloc+0x72>
 8014cc4:	2101      	movs	r1, #1
 8014cc6:	000d      	movs	r5, r1
 8014cc8:	40a5      	lsls	r5, r4
 8014cca:	1d6a      	adds	r2, r5, #5
 8014ccc:	0030      	movs	r0, r6
 8014cce:	0092      	lsls	r2, r2, #2
 8014cd0:	f000 fb76 	bl	80153c0 <_calloc_r>
 8014cd4:	2800      	cmp	r0, #0
 8014cd6:	d00c      	beq.n	8014cf2 <_Balloc+0x6e>
 8014cd8:	6044      	str	r4, [r0, #4]
 8014cda:	6085      	str	r5, [r0, #8]
 8014cdc:	e00d      	b.n	8014cfa <_Balloc+0x76>
 8014cde:	2221      	movs	r2, #33	; 0x21
 8014ce0:	2104      	movs	r1, #4
 8014ce2:	0030      	movs	r0, r6
 8014ce4:	f000 fb6c 	bl	80153c0 <_calloc_r>
 8014ce8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014cea:	60e8      	str	r0, [r5, #12]
 8014cec:	68db      	ldr	r3, [r3, #12]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d1e1      	bne.n	8014cb6 <_Balloc+0x32>
 8014cf2:	2000      	movs	r0, #0
 8014cf4:	bd70      	pop	{r4, r5, r6, pc}
 8014cf6:	6802      	ldr	r2, [r0, #0]
 8014cf8:	601a      	str	r2, [r3, #0]
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	6103      	str	r3, [r0, #16]
 8014cfe:	60c3      	str	r3, [r0, #12]
 8014d00:	e7f8      	b.n	8014cf4 <_Balloc+0x70>
 8014d02:	46c0      	nop			; (mov r8, r8)
 8014d04:	08016681 	.word	0x08016681
 8014d08:	08016708 	.word	0x08016708

08014d0c <_Bfree>:
 8014d0c:	b570      	push	{r4, r5, r6, lr}
 8014d0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014d10:	0005      	movs	r5, r0
 8014d12:	000c      	movs	r4, r1
 8014d14:	2e00      	cmp	r6, #0
 8014d16:	d10e      	bne.n	8014d36 <_Bfree+0x2a>
 8014d18:	2010      	movs	r0, #16
 8014d1a:	f7ff ff9d 	bl	8014c58 <malloc>
 8014d1e:	1e02      	subs	r2, r0, #0
 8014d20:	6268      	str	r0, [r5, #36]	; 0x24
 8014d22:	d104      	bne.n	8014d2e <_Bfree+0x22>
 8014d24:	218a      	movs	r1, #138	; 0x8a
 8014d26:	4b09      	ldr	r3, [pc, #36]	; (8014d4c <_Bfree+0x40>)
 8014d28:	4809      	ldr	r0, [pc, #36]	; (8014d50 <_Bfree+0x44>)
 8014d2a:	f000 fc11 	bl	8015550 <__assert_func>
 8014d2e:	6046      	str	r6, [r0, #4]
 8014d30:	6086      	str	r6, [r0, #8]
 8014d32:	6006      	str	r6, [r0, #0]
 8014d34:	60c6      	str	r6, [r0, #12]
 8014d36:	2c00      	cmp	r4, #0
 8014d38:	d007      	beq.n	8014d4a <_Bfree+0x3e>
 8014d3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014d3c:	6862      	ldr	r2, [r4, #4]
 8014d3e:	68db      	ldr	r3, [r3, #12]
 8014d40:	0092      	lsls	r2, r2, #2
 8014d42:	189b      	adds	r3, r3, r2
 8014d44:	681a      	ldr	r2, [r3, #0]
 8014d46:	6022      	str	r2, [r4, #0]
 8014d48:	601c      	str	r4, [r3, #0]
 8014d4a:	bd70      	pop	{r4, r5, r6, pc}
 8014d4c:	08016681 	.word	0x08016681
 8014d50:	08016708 	.word	0x08016708

08014d54 <__multadd>:
 8014d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d56:	000e      	movs	r6, r1
 8014d58:	9001      	str	r0, [sp, #4]
 8014d5a:	000c      	movs	r4, r1
 8014d5c:	001d      	movs	r5, r3
 8014d5e:	2000      	movs	r0, #0
 8014d60:	690f      	ldr	r7, [r1, #16]
 8014d62:	3614      	adds	r6, #20
 8014d64:	6833      	ldr	r3, [r6, #0]
 8014d66:	3001      	adds	r0, #1
 8014d68:	b299      	uxth	r1, r3
 8014d6a:	4351      	muls	r1, r2
 8014d6c:	0c1b      	lsrs	r3, r3, #16
 8014d6e:	4353      	muls	r3, r2
 8014d70:	1949      	adds	r1, r1, r5
 8014d72:	0c0d      	lsrs	r5, r1, #16
 8014d74:	195b      	adds	r3, r3, r5
 8014d76:	0c1d      	lsrs	r5, r3, #16
 8014d78:	b289      	uxth	r1, r1
 8014d7a:	041b      	lsls	r3, r3, #16
 8014d7c:	185b      	adds	r3, r3, r1
 8014d7e:	c608      	stmia	r6!, {r3}
 8014d80:	4287      	cmp	r7, r0
 8014d82:	dcef      	bgt.n	8014d64 <__multadd+0x10>
 8014d84:	2d00      	cmp	r5, #0
 8014d86:	d022      	beq.n	8014dce <__multadd+0x7a>
 8014d88:	68a3      	ldr	r3, [r4, #8]
 8014d8a:	42bb      	cmp	r3, r7
 8014d8c:	dc19      	bgt.n	8014dc2 <__multadd+0x6e>
 8014d8e:	6863      	ldr	r3, [r4, #4]
 8014d90:	9801      	ldr	r0, [sp, #4]
 8014d92:	1c59      	adds	r1, r3, #1
 8014d94:	f7ff ff76 	bl	8014c84 <_Balloc>
 8014d98:	1e06      	subs	r6, r0, #0
 8014d9a:	d105      	bne.n	8014da8 <__multadd+0x54>
 8014d9c:	0002      	movs	r2, r0
 8014d9e:	21b5      	movs	r1, #181	; 0xb5
 8014da0:	4b0c      	ldr	r3, [pc, #48]	; (8014dd4 <__multadd+0x80>)
 8014da2:	480d      	ldr	r0, [pc, #52]	; (8014dd8 <__multadd+0x84>)
 8014da4:	f000 fbd4 	bl	8015550 <__assert_func>
 8014da8:	0021      	movs	r1, r4
 8014daa:	6923      	ldr	r3, [r4, #16]
 8014dac:	310c      	adds	r1, #12
 8014dae:	1c9a      	adds	r2, r3, #2
 8014db0:	0092      	lsls	r2, r2, #2
 8014db2:	300c      	adds	r0, #12
 8014db4:	f7fe fc02 	bl	80135bc <memcpy>
 8014db8:	0021      	movs	r1, r4
 8014dba:	9801      	ldr	r0, [sp, #4]
 8014dbc:	f7ff ffa6 	bl	8014d0c <_Bfree>
 8014dc0:	0034      	movs	r4, r6
 8014dc2:	1d3b      	adds	r3, r7, #4
 8014dc4:	009b      	lsls	r3, r3, #2
 8014dc6:	18e3      	adds	r3, r4, r3
 8014dc8:	605d      	str	r5, [r3, #4]
 8014dca:	1c7b      	adds	r3, r7, #1
 8014dcc:	6123      	str	r3, [r4, #16]
 8014dce:	0020      	movs	r0, r4
 8014dd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014dd2:	46c0      	nop			; (mov r8, r8)
 8014dd4:	080166f7 	.word	0x080166f7
 8014dd8:	08016708 	.word	0x08016708

08014ddc <__hi0bits>:
 8014ddc:	0003      	movs	r3, r0
 8014dde:	0c02      	lsrs	r2, r0, #16
 8014de0:	2000      	movs	r0, #0
 8014de2:	4282      	cmp	r2, r0
 8014de4:	d101      	bne.n	8014dea <__hi0bits+0xe>
 8014de6:	041b      	lsls	r3, r3, #16
 8014de8:	3010      	adds	r0, #16
 8014dea:	0e1a      	lsrs	r2, r3, #24
 8014dec:	d101      	bne.n	8014df2 <__hi0bits+0x16>
 8014dee:	3008      	adds	r0, #8
 8014df0:	021b      	lsls	r3, r3, #8
 8014df2:	0f1a      	lsrs	r2, r3, #28
 8014df4:	d101      	bne.n	8014dfa <__hi0bits+0x1e>
 8014df6:	3004      	adds	r0, #4
 8014df8:	011b      	lsls	r3, r3, #4
 8014dfa:	0f9a      	lsrs	r2, r3, #30
 8014dfc:	d101      	bne.n	8014e02 <__hi0bits+0x26>
 8014dfe:	3002      	adds	r0, #2
 8014e00:	009b      	lsls	r3, r3, #2
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	db03      	blt.n	8014e0e <__hi0bits+0x32>
 8014e06:	3001      	adds	r0, #1
 8014e08:	005b      	lsls	r3, r3, #1
 8014e0a:	d400      	bmi.n	8014e0e <__hi0bits+0x32>
 8014e0c:	2020      	movs	r0, #32
 8014e0e:	4770      	bx	lr

08014e10 <__lo0bits>:
 8014e10:	6803      	ldr	r3, [r0, #0]
 8014e12:	0002      	movs	r2, r0
 8014e14:	2107      	movs	r1, #7
 8014e16:	0018      	movs	r0, r3
 8014e18:	4008      	ands	r0, r1
 8014e1a:	420b      	tst	r3, r1
 8014e1c:	d00d      	beq.n	8014e3a <__lo0bits+0x2a>
 8014e1e:	3906      	subs	r1, #6
 8014e20:	2000      	movs	r0, #0
 8014e22:	420b      	tst	r3, r1
 8014e24:	d105      	bne.n	8014e32 <__lo0bits+0x22>
 8014e26:	3002      	adds	r0, #2
 8014e28:	4203      	tst	r3, r0
 8014e2a:	d003      	beq.n	8014e34 <__lo0bits+0x24>
 8014e2c:	40cb      	lsrs	r3, r1
 8014e2e:	0008      	movs	r0, r1
 8014e30:	6013      	str	r3, [r2, #0]
 8014e32:	4770      	bx	lr
 8014e34:	089b      	lsrs	r3, r3, #2
 8014e36:	6013      	str	r3, [r2, #0]
 8014e38:	e7fb      	b.n	8014e32 <__lo0bits+0x22>
 8014e3a:	b299      	uxth	r1, r3
 8014e3c:	2900      	cmp	r1, #0
 8014e3e:	d101      	bne.n	8014e44 <__lo0bits+0x34>
 8014e40:	2010      	movs	r0, #16
 8014e42:	0c1b      	lsrs	r3, r3, #16
 8014e44:	b2d9      	uxtb	r1, r3
 8014e46:	2900      	cmp	r1, #0
 8014e48:	d101      	bne.n	8014e4e <__lo0bits+0x3e>
 8014e4a:	3008      	adds	r0, #8
 8014e4c:	0a1b      	lsrs	r3, r3, #8
 8014e4e:	0719      	lsls	r1, r3, #28
 8014e50:	d101      	bne.n	8014e56 <__lo0bits+0x46>
 8014e52:	3004      	adds	r0, #4
 8014e54:	091b      	lsrs	r3, r3, #4
 8014e56:	0799      	lsls	r1, r3, #30
 8014e58:	d101      	bne.n	8014e5e <__lo0bits+0x4e>
 8014e5a:	3002      	adds	r0, #2
 8014e5c:	089b      	lsrs	r3, r3, #2
 8014e5e:	07d9      	lsls	r1, r3, #31
 8014e60:	d4e9      	bmi.n	8014e36 <__lo0bits+0x26>
 8014e62:	3001      	adds	r0, #1
 8014e64:	085b      	lsrs	r3, r3, #1
 8014e66:	d1e6      	bne.n	8014e36 <__lo0bits+0x26>
 8014e68:	2020      	movs	r0, #32
 8014e6a:	e7e2      	b.n	8014e32 <__lo0bits+0x22>

08014e6c <__i2b>:
 8014e6c:	b510      	push	{r4, lr}
 8014e6e:	000c      	movs	r4, r1
 8014e70:	2101      	movs	r1, #1
 8014e72:	f7ff ff07 	bl	8014c84 <_Balloc>
 8014e76:	2800      	cmp	r0, #0
 8014e78:	d106      	bne.n	8014e88 <__i2b+0x1c>
 8014e7a:	21a0      	movs	r1, #160	; 0xa0
 8014e7c:	0002      	movs	r2, r0
 8014e7e:	4b04      	ldr	r3, [pc, #16]	; (8014e90 <__i2b+0x24>)
 8014e80:	4804      	ldr	r0, [pc, #16]	; (8014e94 <__i2b+0x28>)
 8014e82:	0049      	lsls	r1, r1, #1
 8014e84:	f000 fb64 	bl	8015550 <__assert_func>
 8014e88:	2301      	movs	r3, #1
 8014e8a:	6144      	str	r4, [r0, #20]
 8014e8c:	6103      	str	r3, [r0, #16]
 8014e8e:	bd10      	pop	{r4, pc}
 8014e90:	080166f7 	.word	0x080166f7
 8014e94:	08016708 	.word	0x08016708

08014e98 <__multiply>:
 8014e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e9a:	690b      	ldr	r3, [r1, #16]
 8014e9c:	0014      	movs	r4, r2
 8014e9e:	6912      	ldr	r2, [r2, #16]
 8014ea0:	000d      	movs	r5, r1
 8014ea2:	b089      	sub	sp, #36	; 0x24
 8014ea4:	4293      	cmp	r3, r2
 8014ea6:	da01      	bge.n	8014eac <__multiply+0x14>
 8014ea8:	0025      	movs	r5, r4
 8014eaa:	000c      	movs	r4, r1
 8014eac:	692f      	ldr	r7, [r5, #16]
 8014eae:	6926      	ldr	r6, [r4, #16]
 8014eb0:	6869      	ldr	r1, [r5, #4]
 8014eb2:	19bb      	adds	r3, r7, r6
 8014eb4:	9302      	str	r3, [sp, #8]
 8014eb6:	68ab      	ldr	r3, [r5, #8]
 8014eb8:	19ba      	adds	r2, r7, r6
 8014eba:	4293      	cmp	r3, r2
 8014ebc:	da00      	bge.n	8014ec0 <__multiply+0x28>
 8014ebe:	3101      	adds	r1, #1
 8014ec0:	f7ff fee0 	bl	8014c84 <_Balloc>
 8014ec4:	9001      	str	r0, [sp, #4]
 8014ec6:	2800      	cmp	r0, #0
 8014ec8:	d106      	bne.n	8014ed8 <__multiply+0x40>
 8014eca:	215e      	movs	r1, #94	; 0x5e
 8014ecc:	0002      	movs	r2, r0
 8014ece:	4b48      	ldr	r3, [pc, #288]	; (8014ff0 <__multiply+0x158>)
 8014ed0:	4848      	ldr	r0, [pc, #288]	; (8014ff4 <__multiply+0x15c>)
 8014ed2:	31ff      	adds	r1, #255	; 0xff
 8014ed4:	f000 fb3c 	bl	8015550 <__assert_func>
 8014ed8:	9b01      	ldr	r3, [sp, #4]
 8014eda:	2200      	movs	r2, #0
 8014edc:	3314      	adds	r3, #20
 8014ede:	469c      	mov	ip, r3
 8014ee0:	19bb      	adds	r3, r7, r6
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	4463      	add	r3, ip
 8014ee6:	9303      	str	r3, [sp, #12]
 8014ee8:	4663      	mov	r3, ip
 8014eea:	9903      	ldr	r1, [sp, #12]
 8014eec:	428b      	cmp	r3, r1
 8014eee:	d32c      	bcc.n	8014f4a <__multiply+0xb2>
 8014ef0:	002b      	movs	r3, r5
 8014ef2:	0022      	movs	r2, r4
 8014ef4:	3314      	adds	r3, #20
 8014ef6:	00bf      	lsls	r7, r7, #2
 8014ef8:	3214      	adds	r2, #20
 8014efa:	9306      	str	r3, [sp, #24]
 8014efc:	00b6      	lsls	r6, r6, #2
 8014efe:	19db      	adds	r3, r3, r7
 8014f00:	9304      	str	r3, [sp, #16]
 8014f02:	1993      	adds	r3, r2, r6
 8014f04:	9307      	str	r3, [sp, #28]
 8014f06:	2304      	movs	r3, #4
 8014f08:	9305      	str	r3, [sp, #20]
 8014f0a:	002b      	movs	r3, r5
 8014f0c:	9904      	ldr	r1, [sp, #16]
 8014f0e:	3315      	adds	r3, #21
 8014f10:	9200      	str	r2, [sp, #0]
 8014f12:	4299      	cmp	r1, r3
 8014f14:	d305      	bcc.n	8014f22 <__multiply+0x8a>
 8014f16:	1b4b      	subs	r3, r1, r5
 8014f18:	3b15      	subs	r3, #21
 8014f1a:	089b      	lsrs	r3, r3, #2
 8014f1c:	3301      	adds	r3, #1
 8014f1e:	009b      	lsls	r3, r3, #2
 8014f20:	9305      	str	r3, [sp, #20]
 8014f22:	9b07      	ldr	r3, [sp, #28]
 8014f24:	9a00      	ldr	r2, [sp, #0]
 8014f26:	429a      	cmp	r2, r3
 8014f28:	d311      	bcc.n	8014f4e <__multiply+0xb6>
 8014f2a:	9b02      	ldr	r3, [sp, #8]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	dd06      	ble.n	8014f3e <__multiply+0xa6>
 8014f30:	9b03      	ldr	r3, [sp, #12]
 8014f32:	3b04      	subs	r3, #4
 8014f34:	9303      	str	r3, [sp, #12]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	9300      	str	r3, [sp, #0]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d054      	beq.n	8014fe8 <__multiply+0x150>
 8014f3e:	9b01      	ldr	r3, [sp, #4]
 8014f40:	9a02      	ldr	r2, [sp, #8]
 8014f42:	0018      	movs	r0, r3
 8014f44:	611a      	str	r2, [r3, #16]
 8014f46:	b009      	add	sp, #36	; 0x24
 8014f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f4a:	c304      	stmia	r3!, {r2}
 8014f4c:	e7cd      	b.n	8014eea <__multiply+0x52>
 8014f4e:	9b00      	ldr	r3, [sp, #0]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	b298      	uxth	r0, r3
 8014f54:	2800      	cmp	r0, #0
 8014f56:	d01c      	beq.n	8014f92 <__multiply+0xfa>
 8014f58:	4667      	mov	r7, ip
 8014f5a:	2400      	movs	r4, #0
 8014f5c:	9e06      	ldr	r6, [sp, #24]
 8014f5e:	ce02      	ldmia	r6!, {r1}
 8014f60:	683a      	ldr	r2, [r7, #0]
 8014f62:	b28b      	uxth	r3, r1
 8014f64:	4343      	muls	r3, r0
 8014f66:	0c09      	lsrs	r1, r1, #16
 8014f68:	4341      	muls	r1, r0
 8014f6a:	b292      	uxth	r2, r2
 8014f6c:	189b      	adds	r3, r3, r2
 8014f6e:	191b      	adds	r3, r3, r4
 8014f70:	000c      	movs	r4, r1
 8014f72:	683a      	ldr	r2, [r7, #0]
 8014f74:	0c11      	lsrs	r1, r2, #16
 8014f76:	1861      	adds	r1, r4, r1
 8014f78:	0c1c      	lsrs	r4, r3, #16
 8014f7a:	1909      	adds	r1, r1, r4
 8014f7c:	0c0c      	lsrs	r4, r1, #16
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	0409      	lsls	r1, r1, #16
 8014f82:	430b      	orrs	r3, r1
 8014f84:	c708      	stmia	r7!, {r3}
 8014f86:	9b04      	ldr	r3, [sp, #16]
 8014f88:	42b3      	cmp	r3, r6
 8014f8a:	d8e8      	bhi.n	8014f5e <__multiply+0xc6>
 8014f8c:	4663      	mov	r3, ip
 8014f8e:	9a05      	ldr	r2, [sp, #20]
 8014f90:	509c      	str	r4, [r3, r2]
 8014f92:	9b00      	ldr	r3, [sp, #0]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	0c1e      	lsrs	r6, r3, #16
 8014f98:	d020      	beq.n	8014fdc <__multiply+0x144>
 8014f9a:	4663      	mov	r3, ip
 8014f9c:	002c      	movs	r4, r5
 8014f9e:	4660      	mov	r0, ip
 8014fa0:	2700      	movs	r7, #0
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	3414      	adds	r4, #20
 8014fa6:	6822      	ldr	r2, [r4, #0]
 8014fa8:	b29b      	uxth	r3, r3
 8014faa:	b291      	uxth	r1, r2
 8014fac:	4371      	muls	r1, r6
 8014fae:	6802      	ldr	r2, [r0, #0]
 8014fb0:	0c12      	lsrs	r2, r2, #16
 8014fb2:	1889      	adds	r1, r1, r2
 8014fb4:	19cf      	adds	r7, r1, r7
 8014fb6:	0439      	lsls	r1, r7, #16
 8014fb8:	430b      	orrs	r3, r1
 8014fba:	6003      	str	r3, [r0, #0]
 8014fbc:	cc02      	ldmia	r4!, {r1}
 8014fbe:	6843      	ldr	r3, [r0, #4]
 8014fc0:	0c09      	lsrs	r1, r1, #16
 8014fc2:	4371      	muls	r1, r6
 8014fc4:	b29b      	uxth	r3, r3
 8014fc6:	0c3f      	lsrs	r7, r7, #16
 8014fc8:	18cb      	adds	r3, r1, r3
 8014fca:	9a04      	ldr	r2, [sp, #16]
 8014fcc:	19db      	adds	r3, r3, r7
 8014fce:	0c1f      	lsrs	r7, r3, #16
 8014fd0:	3004      	adds	r0, #4
 8014fd2:	42a2      	cmp	r2, r4
 8014fd4:	d8e7      	bhi.n	8014fa6 <__multiply+0x10e>
 8014fd6:	4662      	mov	r2, ip
 8014fd8:	9905      	ldr	r1, [sp, #20]
 8014fda:	5053      	str	r3, [r2, r1]
 8014fdc:	9b00      	ldr	r3, [sp, #0]
 8014fde:	3304      	adds	r3, #4
 8014fe0:	9300      	str	r3, [sp, #0]
 8014fe2:	2304      	movs	r3, #4
 8014fe4:	449c      	add	ip, r3
 8014fe6:	e79c      	b.n	8014f22 <__multiply+0x8a>
 8014fe8:	9b02      	ldr	r3, [sp, #8]
 8014fea:	3b01      	subs	r3, #1
 8014fec:	9302      	str	r3, [sp, #8]
 8014fee:	e79c      	b.n	8014f2a <__multiply+0x92>
 8014ff0:	080166f7 	.word	0x080166f7
 8014ff4:	08016708 	.word	0x08016708

08014ff8 <__pow5mult>:
 8014ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ffa:	2303      	movs	r3, #3
 8014ffc:	0015      	movs	r5, r2
 8014ffe:	0007      	movs	r7, r0
 8015000:	000e      	movs	r6, r1
 8015002:	401a      	ands	r2, r3
 8015004:	421d      	tst	r5, r3
 8015006:	d008      	beq.n	801501a <__pow5mult+0x22>
 8015008:	4925      	ldr	r1, [pc, #148]	; (80150a0 <__pow5mult+0xa8>)
 801500a:	3a01      	subs	r2, #1
 801500c:	0092      	lsls	r2, r2, #2
 801500e:	5852      	ldr	r2, [r2, r1]
 8015010:	2300      	movs	r3, #0
 8015012:	0031      	movs	r1, r6
 8015014:	f7ff fe9e 	bl	8014d54 <__multadd>
 8015018:	0006      	movs	r6, r0
 801501a:	10ad      	asrs	r5, r5, #2
 801501c:	d03d      	beq.n	801509a <__pow5mult+0xa2>
 801501e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8015020:	2c00      	cmp	r4, #0
 8015022:	d10f      	bne.n	8015044 <__pow5mult+0x4c>
 8015024:	2010      	movs	r0, #16
 8015026:	f7ff fe17 	bl	8014c58 <malloc>
 801502a:	1e02      	subs	r2, r0, #0
 801502c:	6278      	str	r0, [r7, #36]	; 0x24
 801502e:	d105      	bne.n	801503c <__pow5mult+0x44>
 8015030:	21d7      	movs	r1, #215	; 0xd7
 8015032:	4b1c      	ldr	r3, [pc, #112]	; (80150a4 <__pow5mult+0xac>)
 8015034:	481c      	ldr	r0, [pc, #112]	; (80150a8 <__pow5mult+0xb0>)
 8015036:	0049      	lsls	r1, r1, #1
 8015038:	f000 fa8a 	bl	8015550 <__assert_func>
 801503c:	6044      	str	r4, [r0, #4]
 801503e:	6084      	str	r4, [r0, #8]
 8015040:	6004      	str	r4, [r0, #0]
 8015042:	60c4      	str	r4, [r0, #12]
 8015044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015046:	689c      	ldr	r4, [r3, #8]
 8015048:	9301      	str	r3, [sp, #4]
 801504a:	2c00      	cmp	r4, #0
 801504c:	d108      	bne.n	8015060 <__pow5mult+0x68>
 801504e:	0038      	movs	r0, r7
 8015050:	4916      	ldr	r1, [pc, #88]	; (80150ac <__pow5mult+0xb4>)
 8015052:	f7ff ff0b 	bl	8014e6c <__i2b>
 8015056:	9b01      	ldr	r3, [sp, #4]
 8015058:	0004      	movs	r4, r0
 801505a:	6098      	str	r0, [r3, #8]
 801505c:	2300      	movs	r3, #0
 801505e:	6003      	str	r3, [r0, #0]
 8015060:	2301      	movs	r3, #1
 8015062:	421d      	tst	r5, r3
 8015064:	d00a      	beq.n	801507c <__pow5mult+0x84>
 8015066:	0031      	movs	r1, r6
 8015068:	0022      	movs	r2, r4
 801506a:	0038      	movs	r0, r7
 801506c:	f7ff ff14 	bl	8014e98 <__multiply>
 8015070:	0031      	movs	r1, r6
 8015072:	9001      	str	r0, [sp, #4]
 8015074:	0038      	movs	r0, r7
 8015076:	f7ff fe49 	bl	8014d0c <_Bfree>
 801507a:	9e01      	ldr	r6, [sp, #4]
 801507c:	106d      	asrs	r5, r5, #1
 801507e:	d00c      	beq.n	801509a <__pow5mult+0xa2>
 8015080:	6820      	ldr	r0, [r4, #0]
 8015082:	2800      	cmp	r0, #0
 8015084:	d107      	bne.n	8015096 <__pow5mult+0x9e>
 8015086:	0022      	movs	r2, r4
 8015088:	0021      	movs	r1, r4
 801508a:	0038      	movs	r0, r7
 801508c:	f7ff ff04 	bl	8014e98 <__multiply>
 8015090:	2300      	movs	r3, #0
 8015092:	6020      	str	r0, [r4, #0]
 8015094:	6003      	str	r3, [r0, #0]
 8015096:	0004      	movs	r4, r0
 8015098:	e7e2      	b.n	8015060 <__pow5mult+0x68>
 801509a:	0030      	movs	r0, r6
 801509c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801509e:	46c0      	nop			; (mov r8, r8)
 80150a0:	08016858 	.word	0x08016858
 80150a4:	08016681 	.word	0x08016681
 80150a8:	08016708 	.word	0x08016708
 80150ac:	00000271 	.word	0x00000271

080150b0 <__lshift>:
 80150b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150b2:	000c      	movs	r4, r1
 80150b4:	0017      	movs	r7, r2
 80150b6:	6923      	ldr	r3, [r4, #16]
 80150b8:	1155      	asrs	r5, r2, #5
 80150ba:	b087      	sub	sp, #28
 80150bc:	18eb      	adds	r3, r5, r3
 80150be:	9302      	str	r3, [sp, #8]
 80150c0:	3301      	adds	r3, #1
 80150c2:	9301      	str	r3, [sp, #4]
 80150c4:	6849      	ldr	r1, [r1, #4]
 80150c6:	68a3      	ldr	r3, [r4, #8]
 80150c8:	9004      	str	r0, [sp, #16]
 80150ca:	9a01      	ldr	r2, [sp, #4]
 80150cc:	4293      	cmp	r3, r2
 80150ce:	db11      	blt.n	80150f4 <__lshift+0x44>
 80150d0:	9804      	ldr	r0, [sp, #16]
 80150d2:	f7ff fdd7 	bl	8014c84 <_Balloc>
 80150d6:	0002      	movs	r2, r0
 80150d8:	2300      	movs	r3, #0
 80150da:	3214      	adds	r2, #20
 80150dc:	0006      	movs	r6, r0
 80150de:	0011      	movs	r1, r2
 80150e0:	9203      	str	r2, [sp, #12]
 80150e2:	4298      	cmp	r0, r3
 80150e4:	d10d      	bne.n	8015102 <__lshift+0x52>
 80150e6:	21da      	movs	r1, #218	; 0xda
 80150e8:	0002      	movs	r2, r0
 80150ea:	4b27      	ldr	r3, [pc, #156]	; (8015188 <__lshift+0xd8>)
 80150ec:	4827      	ldr	r0, [pc, #156]	; (801518c <__lshift+0xdc>)
 80150ee:	31ff      	adds	r1, #255	; 0xff
 80150f0:	f000 fa2e 	bl	8015550 <__assert_func>
 80150f4:	3101      	adds	r1, #1
 80150f6:	005b      	lsls	r3, r3, #1
 80150f8:	e7e7      	b.n	80150ca <__lshift+0x1a>
 80150fa:	2200      	movs	r2, #0
 80150fc:	0098      	lsls	r0, r3, #2
 80150fe:	500a      	str	r2, [r1, r0]
 8015100:	3301      	adds	r3, #1
 8015102:	42ab      	cmp	r3, r5
 8015104:	dbf9      	blt.n	80150fa <__lshift+0x4a>
 8015106:	43eb      	mvns	r3, r5
 8015108:	17db      	asrs	r3, r3, #31
 801510a:	401d      	ands	r5, r3
 801510c:	9b03      	ldr	r3, [sp, #12]
 801510e:	00ad      	lsls	r5, r5, #2
 8015110:	211f      	movs	r1, #31
 8015112:	0038      	movs	r0, r7
 8015114:	195d      	adds	r5, r3, r5
 8015116:	0023      	movs	r3, r4
 8015118:	6922      	ldr	r2, [r4, #16]
 801511a:	3314      	adds	r3, #20
 801511c:	0092      	lsls	r2, r2, #2
 801511e:	4008      	ands	r0, r1
 8015120:	4684      	mov	ip, r0
 8015122:	189a      	adds	r2, r3, r2
 8015124:	420f      	tst	r7, r1
 8015126:	d02a      	beq.n	801517e <__lshift+0xce>
 8015128:	3101      	adds	r1, #1
 801512a:	1a09      	subs	r1, r1, r0
 801512c:	9105      	str	r1, [sp, #20]
 801512e:	2100      	movs	r1, #0
 8015130:	9503      	str	r5, [sp, #12]
 8015132:	4667      	mov	r7, ip
 8015134:	6818      	ldr	r0, [r3, #0]
 8015136:	40b8      	lsls	r0, r7
 8015138:	4301      	orrs	r1, r0
 801513a:	9803      	ldr	r0, [sp, #12]
 801513c:	c002      	stmia	r0!, {r1}
 801513e:	cb02      	ldmia	r3!, {r1}
 8015140:	9003      	str	r0, [sp, #12]
 8015142:	9805      	ldr	r0, [sp, #20]
 8015144:	40c1      	lsrs	r1, r0
 8015146:	429a      	cmp	r2, r3
 8015148:	d8f3      	bhi.n	8015132 <__lshift+0x82>
 801514a:	0020      	movs	r0, r4
 801514c:	3015      	adds	r0, #21
 801514e:	2304      	movs	r3, #4
 8015150:	4282      	cmp	r2, r0
 8015152:	d304      	bcc.n	801515e <__lshift+0xae>
 8015154:	1b13      	subs	r3, r2, r4
 8015156:	3b15      	subs	r3, #21
 8015158:	089b      	lsrs	r3, r3, #2
 801515a:	3301      	adds	r3, #1
 801515c:	009b      	lsls	r3, r3, #2
 801515e:	50e9      	str	r1, [r5, r3]
 8015160:	2900      	cmp	r1, #0
 8015162:	d002      	beq.n	801516a <__lshift+0xba>
 8015164:	9b02      	ldr	r3, [sp, #8]
 8015166:	3302      	adds	r3, #2
 8015168:	9301      	str	r3, [sp, #4]
 801516a:	9b01      	ldr	r3, [sp, #4]
 801516c:	9804      	ldr	r0, [sp, #16]
 801516e:	3b01      	subs	r3, #1
 8015170:	0021      	movs	r1, r4
 8015172:	6133      	str	r3, [r6, #16]
 8015174:	f7ff fdca 	bl	8014d0c <_Bfree>
 8015178:	0030      	movs	r0, r6
 801517a:	b007      	add	sp, #28
 801517c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801517e:	cb02      	ldmia	r3!, {r1}
 8015180:	c502      	stmia	r5!, {r1}
 8015182:	429a      	cmp	r2, r3
 8015184:	d8fb      	bhi.n	801517e <__lshift+0xce>
 8015186:	e7f0      	b.n	801516a <__lshift+0xba>
 8015188:	080166f7 	.word	0x080166f7
 801518c:	08016708 	.word	0x08016708

08015190 <__mcmp>:
 8015190:	6902      	ldr	r2, [r0, #16]
 8015192:	690b      	ldr	r3, [r1, #16]
 8015194:	b530      	push	{r4, r5, lr}
 8015196:	0004      	movs	r4, r0
 8015198:	1ad0      	subs	r0, r2, r3
 801519a:	429a      	cmp	r2, r3
 801519c:	d10d      	bne.n	80151ba <__mcmp+0x2a>
 801519e:	009b      	lsls	r3, r3, #2
 80151a0:	3414      	adds	r4, #20
 80151a2:	3114      	adds	r1, #20
 80151a4:	18e2      	adds	r2, r4, r3
 80151a6:	18c9      	adds	r1, r1, r3
 80151a8:	3a04      	subs	r2, #4
 80151aa:	3904      	subs	r1, #4
 80151ac:	6815      	ldr	r5, [r2, #0]
 80151ae:	680b      	ldr	r3, [r1, #0]
 80151b0:	429d      	cmp	r5, r3
 80151b2:	d003      	beq.n	80151bc <__mcmp+0x2c>
 80151b4:	2001      	movs	r0, #1
 80151b6:	429d      	cmp	r5, r3
 80151b8:	d303      	bcc.n	80151c2 <__mcmp+0x32>
 80151ba:	bd30      	pop	{r4, r5, pc}
 80151bc:	4294      	cmp	r4, r2
 80151be:	d3f3      	bcc.n	80151a8 <__mcmp+0x18>
 80151c0:	e7fb      	b.n	80151ba <__mcmp+0x2a>
 80151c2:	4240      	negs	r0, r0
 80151c4:	e7f9      	b.n	80151ba <__mcmp+0x2a>
	...

080151c8 <__mdiff>:
 80151c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151ca:	000e      	movs	r6, r1
 80151cc:	0007      	movs	r7, r0
 80151ce:	0011      	movs	r1, r2
 80151d0:	0030      	movs	r0, r6
 80151d2:	b087      	sub	sp, #28
 80151d4:	0014      	movs	r4, r2
 80151d6:	f7ff ffdb 	bl	8015190 <__mcmp>
 80151da:	1e05      	subs	r5, r0, #0
 80151dc:	d110      	bne.n	8015200 <__mdiff+0x38>
 80151de:	0001      	movs	r1, r0
 80151e0:	0038      	movs	r0, r7
 80151e2:	f7ff fd4f 	bl	8014c84 <_Balloc>
 80151e6:	1e02      	subs	r2, r0, #0
 80151e8:	d104      	bne.n	80151f4 <__mdiff+0x2c>
 80151ea:	4b40      	ldr	r3, [pc, #256]	; (80152ec <__mdiff+0x124>)
 80151ec:	4940      	ldr	r1, [pc, #256]	; (80152f0 <__mdiff+0x128>)
 80151ee:	4841      	ldr	r0, [pc, #260]	; (80152f4 <__mdiff+0x12c>)
 80151f0:	f000 f9ae 	bl	8015550 <__assert_func>
 80151f4:	2301      	movs	r3, #1
 80151f6:	6145      	str	r5, [r0, #20]
 80151f8:	6103      	str	r3, [r0, #16]
 80151fa:	0010      	movs	r0, r2
 80151fc:	b007      	add	sp, #28
 80151fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015200:	2301      	movs	r3, #1
 8015202:	9301      	str	r3, [sp, #4]
 8015204:	2800      	cmp	r0, #0
 8015206:	db04      	blt.n	8015212 <__mdiff+0x4a>
 8015208:	0023      	movs	r3, r4
 801520a:	0034      	movs	r4, r6
 801520c:	001e      	movs	r6, r3
 801520e:	2300      	movs	r3, #0
 8015210:	9301      	str	r3, [sp, #4]
 8015212:	0038      	movs	r0, r7
 8015214:	6861      	ldr	r1, [r4, #4]
 8015216:	f7ff fd35 	bl	8014c84 <_Balloc>
 801521a:	1e02      	subs	r2, r0, #0
 801521c:	d103      	bne.n	8015226 <__mdiff+0x5e>
 801521e:	2190      	movs	r1, #144	; 0x90
 8015220:	4b32      	ldr	r3, [pc, #200]	; (80152ec <__mdiff+0x124>)
 8015222:	0089      	lsls	r1, r1, #2
 8015224:	e7e3      	b.n	80151ee <__mdiff+0x26>
 8015226:	9b01      	ldr	r3, [sp, #4]
 8015228:	2700      	movs	r7, #0
 801522a:	60c3      	str	r3, [r0, #12]
 801522c:	6920      	ldr	r0, [r4, #16]
 801522e:	3414      	adds	r4, #20
 8015230:	9401      	str	r4, [sp, #4]
 8015232:	9b01      	ldr	r3, [sp, #4]
 8015234:	0084      	lsls	r4, r0, #2
 8015236:	191b      	adds	r3, r3, r4
 8015238:	0034      	movs	r4, r6
 801523a:	9302      	str	r3, [sp, #8]
 801523c:	6933      	ldr	r3, [r6, #16]
 801523e:	3414      	adds	r4, #20
 8015240:	0099      	lsls	r1, r3, #2
 8015242:	1863      	adds	r3, r4, r1
 8015244:	9303      	str	r3, [sp, #12]
 8015246:	0013      	movs	r3, r2
 8015248:	3314      	adds	r3, #20
 801524a:	469c      	mov	ip, r3
 801524c:	9305      	str	r3, [sp, #20]
 801524e:	9b01      	ldr	r3, [sp, #4]
 8015250:	9304      	str	r3, [sp, #16]
 8015252:	9b04      	ldr	r3, [sp, #16]
 8015254:	cc02      	ldmia	r4!, {r1}
 8015256:	cb20      	ldmia	r3!, {r5}
 8015258:	9304      	str	r3, [sp, #16]
 801525a:	b2ab      	uxth	r3, r5
 801525c:	19df      	adds	r7, r3, r7
 801525e:	b28b      	uxth	r3, r1
 8015260:	1afb      	subs	r3, r7, r3
 8015262:	0c2d      	lsrs	r5, r5, #16
 8015264:	0c09      	lsrs	r1, r1, #16
 8015266:	1a69      	subs	r1, r5, r1
 8015268:	141d      	asrs	r5, r3, #16
 801526a:	1949      	adds	r1, r1, r5
 801526c:	140f      	asrs	r7, r1, #16
 801526e:	b29b      	uxth	r3, r3
 8015270:	0409      	lsls	r1, r1, #16
 8015272:	430b      	orrs	r3, r1
 8015274:	4661      	mov	r1, ip
 8015276:	c108      	stmia	r1!, {r3}
 8015278:	9b03      	ldr	r3, [sp, #12]
 801527a:	468c      	mov	ip, r1
 801527c:	42a3      	cmp	r3, r4
 801527e:	d8e8      	bhi.n	8015252 <__mdiff+0x8a>
 8015280:	0031      	movs	r1, r6
 8015282:	9c03      	ldr	r4, [sp, #12]
 8015284:	3115      	adds	r1, #21
 8015286:	2304      	movs	r3, #4
 8015288:	428c      	cmp	r4, r1
 801528a:	d304      	bcc.n	8015296 <__mdiff+0xce>
 801528c:	1ba3      	subs	r3, r4, r6
 801528e:	3b15      	subs	r3, #21
 8015290:	089b      	lsrs	r3, r3, #2
 8015292:	3301      	adds	r3, #1
 8015294:	009b      	lsls	r3, r3, #2
 8015296:	9901      	ldr	r1, [sp, #4]
 8015298:	18cc      	adds	r4, r1, r3
 801529a:	9905      	ldr	r1, [sp, #20]
 801529c:	0026      	movs	r6, r4
 801529e:	18cb      	adds	r3, r1, r3
 80152a0:	469c      	mov	ip, r3
 80152a2:	9902      	ldr	r1, [sp, #8]
 80152a4:	428e      	cmp	r6, r1
 80152a6:	d310      	bcc.n	80152ca <__mdiff+0x102>
 80152a8:	9e02      	ldr	r6, [sp, #8]
 80152aa:	1ee5      	subs	r5, r4, #3
 80152ac:	2100      	movs	r1, #0
 80152ae:	42ae      	cmp	r6, r5
 80152b0:	d304      	bcc.n	80152bc <__mdiff+0xf4>
 80152b2:	0031      	movs	r1, r6
 80152b4:	3103      	adds	r1, #3
 80152b6:	1b09      	subs	r1, r1, r4
 80152b8:	0889      	lsrs	r1, r1, #2
 80152ba:	0089      	lsls	r1, r1, #2
 80152bc:	185b      	adds	r3, r3, r1
 80152be:	3b04      	subs	r3, #4
 80152c0:	6819      	ldr	r1, [r3, #0]
 80152c2:	2900      	cmp	r1, #0
 80152c4:	d00f      	beq.n	80152e6 <__mdiff+0x11e>
 80152c6:	6110      	str	r0, [r2, #16]
 80152c8:	e797      	b.n	80151fa <__mdiff+0x32>
 80152ca:	ce02      	ldmia	r6!, {r1}
 80152cc:	b28d      	uxth	r5, r1
 80152ce:	19ed      	adds	r5, r5, r7
 80152d0:	0c0f      	lsrs	r7, r1, #16
 80152d2:	1429      	asrs	r1, r5, #16
 80152d4:	1879      	adds	r1, r7, r1
 80152d6:	140f      	asrs	r7, r1, #16
 80152d8:	b2ad      	uxth	r5, r5
 80152da:	0409      	lsls	r1, r1, #16
 80152dc:	430d      	orrs	r5, r1
 80152de:	4661      	mov	r1, ip
 80152e0:	c120      	stmia	r1!, {r5}
 80152e2:	468c      	mov	ip, r1
 80152e4:	e7dd      	b.n	80152a2 <__mdiff+0xda>
 80152e6:	3801      	subs	r0, #1
 80152e8:	e7e9      	b.n	80152be <__mdiff+0xf6>
 80152ea:	46c0      	nop			; (mov r8, r8)
 80152ec:	080166f7 	.word	0x080166f7
 80152f0:	00000232 	.word	0x00000232
 80152f4:	08016708 	.word	0x08016708

080152f8 <__d2b>:
 80152f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80152fa:	2101      	movs	r1, #1
 80152fc:	0014      	movs	r4, r2
 80152fe:	001e      	movs	r6, r3
 8015300:	9f08      	ldr	r7, [sp, #32]
 8015302:	f7ff fcbf 	bl	8014c84 <_Balloc>
 8015306:	1e05      	subs	r5, r0, #0
 8015308:	d105      	bne.n	8015316 <__d2b+0x1e>
 801530a:	0002      	movs	r2, r0
 801530c:	4b26      	ldr	r3, [pc, #152]	; (80153a8 <__d2b+0xb0>)
 801530e:	4927      	ldr	r1, [pc, #156]	; (80153ac <__d2b+0xb4>)
 8015310:	4827      	ldr	r0, [pc, #156]	; (80153b0 <__d2b+0xb8>)
 8015312:	f000 f91d 	bl	8015550 <__assert_func>
 8015316:	0333      	lsls	r3, r6, #12
 8015318:	0076      	lsls	r6, r6, #1
 801531a:	0b1b      	lsrs	r3, r3, #12
 801531c:	0d76      	lsrs	r6, r6, #21
 801531e:	d124      	bne.n	801536a <__d2b+0x72>
 8015320:	9301      	str	r3, [sp, #4]
 8015322:	2c00      	cmp	r4, #0
 8015324:	d027      	beq.n	8015376 <__d2b+0x7e>
 8015326:	4668      	mov	r0, sp
 8015328:	9400      	str	r4, [sp, #0]
 801532a:	f7ff fd71 	bl	8014e10 <__lo0bits>
 801532e:	9c00      	ldr	r4, [sp, #0]
 8015330:	2800      	cmp	r0, #0
 8015332:	d01e      	beq.n	8015372 <__d2b+0x7a>
 8015334:	9b01      	ldr	r3, [sp, #4]
 8015336:	2120      	movs	r1, #32
 8015338:	001a      	movs	r2, r3
 801533a:	1a09      	subs	r1, r1, r0
 801533c:	408a      	lsls	r2, r1
 801533e:	40c3      	lsrs	r3, r0
 8015340:	4322      	orrs	r2, r4
 8015342:	616a      	str	r2, [r5, #20]
 8015344:	9301      	str	r3, [sp, #4]
 8015346:	9c01      	ldr	r4, [sp, #4]
 8015348:	61ac      	str	r4, [r5, #24]
 801534a:	1e63      	subs	r3, r4, #1
 801534c:	419c      	sbcs	r4, r3
 801534e:	3401      	adds	r4, #1
 8015350:	612c      	str	r4, [r5, #16]
 8015352:	2e00      	cmp	r6, #0
 8015354:	d018      	beq.n	8015388 <__d2b+0x90>
 8015356:	4b17      	ldr	r3, [pc, #92]	; (80153b4 <__d2b+0xbc>)
 8015358:	18f6      	adds	r6, r6, r3
 801535a:	2335      	movs	r3, #53	; 0x35
 801535c:	1836      	adds	r6, r6, r0
 801535e:	1a18      	subs	r0, r3, r0
 8015360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015362:	603e      	str	r6, [r7, #0]
 8015364:	6018      	str	r0, [r3, #0]
 8015366:	0028      	movs	r0, r5
 8015368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801536a:	2280      	movs	r2, #128	; 0x80
 801536c:	0352      	lsls	r2, r2, #13
 801536e:	4313      	orrs	r3, r2
 8015370:	e7d6      	b.n	8015320 <__d2b+0x28>
 8015372:	616c      	str	r4, [r5, #20]
 8015374:	e7e7      	b.n	8015346 <__d2b+0x4e>
 8015376:	a801      	add	r0, sp, #4
 8015378:	f7ff fd4a 	bl	8014e10 <__lo0bits>
 801537c:	2401      	movs	r4, #1
 801537e:	9b01      	ldr	r3, [sp, #4]
 8015380:	612c      	str	r4, [r5, #16]
 8015382:	616b      	str	r3, [r5, #20]
 8015384:	3020      	adds	r0, #32
 8015386:	e7e4      	b.n	8015352 <__d2b+0x5a>
 8015388:	4b0b      	ldr	r3, [pc, #44]	; (80153b8 <__d2b+0xc0>)
 801538a:	18c0      	adds	r0, r0, r3
 801538c:	4b0b      	ldr	r3, [pc, #44]	; (80153bc <__d2b+0xc4>)
 801538e:	6038      	str	r0, [r7, #0]
 8015390:	18e3      	adds	r3, r4, r3
 8015392:	009b      	lsls	r3, r3, #2
 8015394:	18eb      	adds	r3, r5, r3
 8015396:	6958      	ldr	r0, [r3, #20]
 8015398:	f7ff fd20 	bl	8014ddc <__hi0bits>
 801539c:	0164      	lsls	r4, r4, #5
 801539e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153a0:	1a24      	subs	r4, r4, r0
 80153a2:	601c      	str	r4, [r3, #0]
 80153a4:	e7df      	b.n	8015366 <__d2b+0x6e>
 80153a6:	46c0      	nop			; (mov r8, r8)
 80153a8:	080166f7 	.word	0x080166f7
 80153ac:	0000030a 	.word	0x0000030a
 80153b0:	08016708 	.word	0x08016708
 80153b4:	fffffbcd 	.word	0xfffffbcd
 80153b8:	fffffbce 	.word	0xfffffbce
 80153bc:	3fffffff 	.word	0x3fffffff

080153c0 <_calloc_r>:
 80153c0:	434a      	muls	r2, r1
 80153c2:	b570      	push	{r4, r5, r6, lr}
 80153c4:	0011      	movs	r1, r2
 80153c6:	0015      	movs	r5, r2
 80153c8:	f000 f852 	bl	8015470 <_malloc_r>
 80153cc:	1e04      	subs	r4, r0, #0
 80153ce:	d003      	beq.n	80153d8 <_calloc_r+0x18>
 80153d0:	002a      	movs	r2, r5
 80153d2:	2100      	movs	r1, #0
 80153d4:	f7fe f8fb 	bl	80135ce <memset>
 80153d8:	0020      	movs	r0, r4
 80153da:	bd70      	pop	{r4, r5, r6, pc}

080153dc <_free_r>:
 80153dc:	b570      	push	{r4, r5, r6, lr}
 80153de:	0005      	movs	r5, r0
 80153e0:	2900      	cmp	r1, #0
 80153e2:	d010      	beq.n	8015406 <_free_r+0x2a>
 80153e4:	1f0c      	subs	r4, r1, #4
 80153e6:	6823      	ldr	r3, [r4, #0]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	da00      	bge.n	80153ee <_free_r+0x12>
 80153ec:	18e4      	adds	r4, r4, r3
 80153ee:	0028      	movs	r0, r5
 80153f0:	f000 f8ee 	bl	80155d0 <__malloc_lock>
 80153f4:	4a1d      	ldr	r2, [pc, #116]	; (801546c <_free_r+0x90>)
 80153f6:	6813      	ldr	r3, [r2, #0]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d105      	bne.n	8015408 <_free_r+0x2c>
 80153fc:	6063      	str	r3, [r4, #4]
 80153fe:	6014      	str	r4, [r2, #0]
 8015400:	0028      	movs	r0, r5
 8015402:	f000 f8ed 	bl	80155e0 <__malloc_unlock>
 8015406:	bd70      	pop	{r4, r5, r6, pc}
 8015408:	42a3      	cmp	r3, r4
 801540a:	d908      	bls.n	801541e <_free_r+0x42>
 801540c:	6821      	ldr	r1, [r4, #0]
 801540e:	1860      	adds	r0, r4, r1
 8015410:	4283      	cmp	r3, r0
 8015412:	d1f3      	bne.n	80153fc <_free_r+0x20>
 8015414:	6818      	ldr	r0, [r3, #0]
 8015416:	685b      	ldr	r3, [r3, #4]
 8015418:	1841      	adds	r1, r0, r1
 801541a:	6021      	str	r1, [r4, #0]
 801541c:	e7ee      	b.n	80153fc <_free_r+0x20>
 801541e:	001a      	movs	r2, r3
 8015420:	685b      	ldr	r3, [r3, #4]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d001      	beq.n	801542a <_free_r+0x4e>
 8015426:	42a3      	cmp	r3, r4
 8015428:	d9f9      	bls.n	801541e <_free_r+0x42>
 801542a:	6811      	ldr	r1, [r2, #0]
 801542c:	1850      	adds	r0, r2, r1
 801542e:	42a0      	cmp	r0, r4
 8015430:	d10b      	bne.n	801544a <_free_r+0x6e>
 8015432:	6820      	ldr	r0, [r4, #0]
 8015434:	1809      	adds	r1, r1, r0
 8015436:	1850      	adds	r0, r2, r1
 8015438:	6011      	str	r1, [r2, #0]
 801543a:	4283      	cmp	r3, r0
 801543c:	d1e0      	bne.n	8015400 <_free_r+0x24>
 801543e:	6818      	ldr	r0, [r3, #0]
 8015440:	685b      	ldr	r3, [r3, #4]
 8015442:	1841      	adds	r1, r0, r1
 8015444:	6011      	str	r1, [r2, #0]
 8015446:	6053      	str	r3, [r2, #4]
 8015448:	e7da      	b.n	8015400 <_free_r+0x24>
 801544a:	42a0      	cmp	r0, r4
 801544c:	d902      	bls.n	8015454 <_free_r+0x78>
 801544e:	230c      	movs	r3, #12
 8015450:	602b      	str	r3, [r5, #0]
 8015452:	e7d5      	b.n	8015400 <_free_r+0x24>
 8015454:	6821      	ldr	r1, [r4, #0]
 8015456:	1860      	adds	r0, r4, r1
 8015458:	4283      	cmp	r3, r0
 801545a:	d103      	bne.n	8015464 <_free_r+0x88>
 801545c:	6818      	ldr	r0, [r3, #0]
 801545e:	685b      	ldr	r3, [r3, #4]
 8015460:	1841      	adds	r1, r0, r1
 8015462:	6021      	str	r1, [r4, #0]
 8015464:	6063      	str	r3, [r4, #4]
 8015466:	6054      	str	r4, [r2, #4]
 8015468:	e7ca      	b.n	8015400 <_free_r+0x24>
 801546a:	46c0      	nop			; (mov r8, r8)
 801546c:	20000468 	.word	0x20000468

08015470 <_malloc_r>:
 8015470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015472:	2303      	movs	r3, #3
 8015474:	1ccd      	adds	r5, r1, #3
 8015476:	439d      	bics	r5, r3
 8015478:	3508      	adds	r5, #8
 801547a:	0006      	movs	r6, r0
 801547c:	2d0c      	cmp	r5, #12
 801547e:	d21f      	bcs.n	80154c0 <_malloc_r+0x50>
 8015480:	250c      	movs	r5, #12
 8015482:	42a9      	cmp	r1, r5
 8015484:	d81e      	bhi.n	80154c4 <_malloc_r+0x54>
 8015486:	0030      	movs	r0, r6
 8015488:	f000 f8a2 	bl	80155d0 <__malloc_lock>
 801548c:	4925      	ldr	r1, [pc, #148]	; (8015524 <_malloc_r+0xb4>)
 801548e:	680a      	ldr	r2, [r1, #0]
 8015490:	0014      	movs	r4, r2
 8015492:	2c00      	cmp	r4, #0
 8015494:	d11a      	bne.n	80154cc <_malloc_r+0x5c>
 8015496:	4f24      	ldr	r7, [pc, #144]	; (8015528 <_malloc_r+0xb8>)
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d104      	bne.n	80154a8 <_malloc_r+0x38>
 801549e:	0021      	movs	r1, r4
 80154a0:	0030      	movs	r0, r6
 80154a2:	f000 f843 	bl	801552c <_sbrk_r>
 80154a6:	6038      	str	r0, [r7, #0]
 80154a8:	0029      	movs	r1, r5
 80154aa:	0030      	movs	r0, r6
 80154ac:	f000 f83e 	bl	801552c <_sbrk_r>
 80154b0:	1c43      	adds	r3, r0, #1
 80154b2:	d12b      	bne.n	801550c <_malloc_r+0x9c>
 80154b4:	230c      	movs	r3, #12
 80154b6:	0030      	movs	r0, r6
 80154b8:	6033      	str	r3, [r6, #0]
 80154ba:	f000 f891 	bl	80155e0 <__malloc_unlock>
 80154be:	e003      	b.n	80154c8 <_malloc_r+0x58>
 80154c0:	2d00      	cmp	r5, #0
 80154c2:	dade      	bge.n	8015482 <_malloc_r+0x12>
 80154c4:	230c      	movs	r3, #12
 80154c6:	6033      	str	r3, [r6, #0]
 80154c8:	2000      	movs	r0, #0
 80154ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154cc:	6823      	ldr	r3, [r4, #0]
 80154ce:	1b5b      	subs	r3, r3, r5
 80154d0:	d419      	bmi.n	8015506 <_malloc_r+0x96>
 80154d2:	2b0b      	cmp	r3, #11
 80154d4:	d903      	bls.n	80154de <_malloc_r+0x6e>
 80154d6:	6023      	str	r3, [r4, #0]
 80154d8:	18e4      	adds	r4, r4, r3
 80154da:	6025      	str	r5, [r4, #0]
 80154dc:	e003      	b.n	80154e6 <_malloc_r+0x76>
 80154de:	6863      	ldr	r3, [r4, #4]
 80154e0:	42a2      	cmp	r2, r4
 80154e2:	d10e      	bne.n	8015502 <_malloc_r+0x92>
 80154e4:	600b      	str	r3, [r1, #0]
 80154e6:	0030      	movs	r0, r6
 80154e8:	f000 f87a 	bl	80155e0 <__malloc_unlock>
 80154ec:	0020      	movs	r0, r4
 80154ee:	2207      	movs	r2, #7
 80154f0:	300b      	adds	r0, #11
 80154f2:	1d23      	adds	r3, r4, #4
 80154f4:	4390      	bics	r0, r2
 80154f6:	1ac2      	subs	r2, r0, r3
 80154f8:	4298      	cmp	r0, r3
 80154fa:	d0e6      	beq.n	80154ca <_malloc_r+0x5a>
 80154fc:	1a1b      	subs	r3, r3, r0
 80154fe:	50a3      	str	r3, [r4, r2]
 8015500:	e7e3      	b.n	80154ca <_malloc_r+0x5a>
 8015502:	6053      	str	r3, [r2, #4]
 8015504:	e7ef      	b.n	80154e6 <_malloc_r+0x76>
 8015506:	0022      	movs	r2, r4
 8015508:	6864      	ldr	r4, [r4, #4]
 801550a:	e7c2      	b.n	8015492 <_malloc_r+0x22>
 801550c:	2303      	movs	r3, #3
 801550e:	1cc4      	adds	r4, r0, #3
 8015510:	439c      	bics	r4, r3
 8015512:	42a0      	cmp	r0, r4
 8015514:	d0e1      	beq.n	80154da <_malloc_r+0x6a>
 8015516:	1a21      	subs	r1, r4, r0
 8015518:	0030      	movs	r0, r6
 801551a:	f000 f807 	bl	801552c <_sbrk_r>
 801551e:	1c43      	adds	r3, r0, #1
 8015520:	d1db      	bne.n	80154da <_malloc_r+0x6a>
 8015522:	e7c7      	b.n	80154b4 <_malloc_r+0x44>
 8015524:	20000468 	.word	0x20000468
 8015528:	2000046c 	.word	0x2000046c

0801552c <_sbrk_r>:
 801552c:	2300      	movs	r3, #0
 801552e:	b570      	push	{r4, r5, r6, lr}
 8015530:	4d06      	ldr	r5, [pc, #24]	; (801554c <_sbrk_r+0x20>)
 8015532:	0004      	movs	r4, r0
 8015534:	0008      	movs	r0, r1
 8015536:	602b      	str	r3, [r5, #0]
 8015538:	f7f0 ff74 	bl	8006424 <_sbrk>
 801553c:	1c43      	adds	r3, r0, #1
 801553e:	d103      	bne.n	8015548 <_sbrk_r+0x1c>
 8015540:	682b      	ldr	r3, [r5, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d000      	beq.n	8015548 <_sbrk_r+0x1c>
 8015546:	6023      	str	r3, [r4, #0]
 8015548:	bd70      	pop	{r4, r5, r6, pc}
 801554a:	46c0      	nop			; (mov r8, r8)
 801554c:	2000382c 	.word	0x2000382c

08015550 <__assert_func>:
 8015550:	b530      	push	{r4, r5, lr}
 8015552:	0014      	movs	r4, r2
 8015554:	001a      	movs	r2, r3
 8015556:	4b09      	ldr	r3, [pc, #36]	; (801557c <__assert_func+0x2c>)
 8015558:	0005      	movs	r5, r0
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	b085      	sub	sp, #20
 801555e:	68d8      	ldr	r0, [r3, #12]
 8015560:	4b07      	ldr	r3, [pc, #28]	; (8015580 <__assert_func+0x30>)
 8015562:	2c00      	cmp	r4, #0
 8015564:	d101      	bne.n	801556a <__assert_func+0x1a>
 8015566:	4b07      	ldr	r3, [pc, #28]	; (8015584 <__assert_func+0x34>)
 8015568:	001c      	movs	r4, r3
 801556a:	9301      	str	r3, [sp, #4]
 801556c:	9100      	str	r1, [sp, #0]
 801556e:	002b      	movs	r3, r5
 8015570:	4905      	ldr	r1, [pc, #20]	; (8015588 <__assert_func+0x38>)
 8015572:	9402      	str	r4, [sp, #8]
 8015574:	f000 f80a 	bl	801558c <fiprintf>
 8015578:	f000 fa78 	bl	8015a6c <abort>
 801557c:	20000268 	.word	0x20000268
 8015580:	08016864 	.word	0x08016864
 8015584:	0801689f 	.word	0x0801689f
 8015588:	08016871 	.word	0x08016871

0801558c <fiprintf>:
 801558c:	b40e      	push	{r1, r2, r3}
 801558e:	b503      	push	{r0, r1, lr}
 8015590:	0001      	movs	r1, r0
 8015592:	ab03      	add	r3, sp, #12
 8015594:	4804      	ldr	r0, [pc, #16]	; (80155a8 <fiprintf+0x1c>)
 8015596:	cb04      	ldmia	r3!, {r2}
 8015598:	6800      	ldr	r0, [r0, #0]
 801559a:	9301      	str	r3, [sp, #4]
 801559c:	f000 f850 	bl	8015640 <_vfiprintf_r>
 80155a0:	b002      	add	sp, #8
 80155a2:	bc08      	pop	{r3}
 80155a4:	b003      	add	sp, #12
 80155a6:	4718      	bx	r3
 80155a8:	20000268 	.word	0x20000268

080155ac <__ascii_mbtowc>:
 80155ac:	b082      	sub	sp, #8
 80155ae:	2900      	cmp	r1, #0
 80155b0:	d100      	bne.n	80155b4 <__ascii_mbtowc+0x8>
 80155b2:	a901      	add	r1, sp, #4
 80155b4:	1e10      	subs	r0, r2, #0
 80155b6:	d006      	beq.n	80155c6 <__ascii_mbtowc+0x1a>
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d006      	beq.n	80155ca <__ascii_mbtowc+0x1e>
 80155bc:	7813      	ldrb	r3, [r2, #0]
 80155be:	600b      	str	r3, [r1, #0]
 80155c0:	7810      	ldrb	r0, [r2, #0]
 80155c2:	1e43      	subs	r3, r0, #1
 80155c4:	4198      	sbcs	r0, r3
 80155c6:	b002      	add	sp, #8
 80155c8:	4770      	bx	lr
 80155ca:	2002      	movs	r0, #2
 80155cc:	4240      	negs	r0, r0
 80155ce:	e7fa      	b.n	80155c6 <__ascii_mbtowc+0x1a>

080155d0 <__malloc_lock>:
 80155d0:	b510      	push	{r4, lr}
 80155d2:	4802      	ldr	r0, [pc, #8]	; (80155dc <__malloc_lock+0xc>)
 80155d4:	f000 fc21 	bl	8015e1a <__retarget_lock_acquire_recursive>
 80155d8:	bd10      	pop	{r4, pc}
 80155da:	46c0      	nop			; (mov r8, r8)
 80155dc:	20003834 	.word	0x20003834

080155e0 <__malloc_unlock>:
 80155e0:	b510      	push	{r4, lr}
 80155e2:	4802      	ldr	r0, [pc, #8]	; (80155ec <__malloc_unlock+0xc>)
 80155e4:	f000 fc1a 	bl	8015e1c <__retarget_lock_release_recursive>
 80155e8:	bd10      	pop	{r4, pc}
 80155ea:	46c0      	nop			; (mov r8, r8)
 80155ec:	20003834 	.word	0x20003834

080155f0 <__sfputc_r>:
 80155f0:	6893      	ldr	r3, [r2, #8]
 80155f2:	b510      	push	{r4, lr}
 80155f4:	3b01      	subs	r3, #1
 80155f6:	6093      	str	r3, [r2, #8]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	da04      	bge.n	8015606 <__sfputc_r+0x16>
 80155fc:	6994      	ldr	r4, [r2, #24]
 80155fe:	42a3      	cmp	r3, r4
 8015600:	db07      	blt.n	8015612 <__sfputc_r+0x22>
 8015602:	290a      	cmp	r1, #10
 8015604:	d005      	beq.n	8015612 <__sfputc_r+0x22>
 8015606:	6813      	ldr	r3, [r2, #0]
 8015608:	1c58      	adds	r0, r3, #1
 801560a:	6010      	str	r0, [r2, #0]
 801560c:	7019      	strb	r1, [r3, #0]
 801560e:	0008      	movs	r0, r1
 8015610:	bd10      	pop	{r4, pc}
 8015612:	f000 f94f 	bl	80158b4 <__swbuf_r>
 8015616:	0001      	movs	r1, r0
 8015618:	e7f9      	b.n	801560e <__sfputc_r+0x1e>

0801561a <__sfputs_r>:
 801561a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801561c:	0006      	movs	r6, r0
 801561e:	000f      	movs	r7, r1
 8015620:	0014      	movs	r4, r2
 8015622:	18d5      	adds	r5, r2, r3
 8015624:	42ac      	cmp	r4, r5
 8015626:	d101      	bne.n	801562c <__sfputs_r+0x12>
 8015628:	2000      	movs	r0, #0
 801562a:	e007      	b.n	801563c <__sfputs_r+0x22>
 801562c:	7821      	ldrb	r1, [r4, #0]
 801562e:	003a      	movs	r2, r7
 8015630:	0030      	movs	r0, r6
 8015632:	f7ff ffdd 	bl	80155f0 <__sfputc_r>
 8015636:	3401      	adds	r4, #1
 8015638:	1c43      	adds	r3, r0, #1
 801563a:	d1f3      	bne.n	8015624 <__sfputs_r+0xa>
 801563c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015640 <_vfiprintf_r>:
 8015640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015642:	b0a1      	sub	sp, #132	; 0x84
 8015644:	0006      	movs	r6, r0
 8015646:	000c      	movs	r4, r1
 8015648:	001f      	movs	r7, r3
 801564a:	9203      	str	r2, [sp, #12]
 801564c:	2800      	cmp	r0, #0
 801564e:	d004      	beq.n	801565a <_vfiprintf_r+0x1a>
 8015650:	6983      	ldr	r3, [r0, #24]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d101      	bne.n	801565a <_vfiprintf_r+0x1a>
 8015656:	f000 fb3f 	bl	8015cd8 <__sinit>
 801565a:	4b8e      	ldr	r3, [pc, #568]	; (8015894 <_vfiprintf_r+0x254>)
 801565c:	429c      	cmp	r4, r3
 801565e:	d11c      	bne.n	801569a <_vfiprintf_r+0x5a>
 8015660:	6874      	ldr	r4, [r6, #4]
 8015662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015664:	07db      	lsls	r3, r3, #31
 8015666:	d405      	bmi.n	8015674 <_vfiprintf_r+0x34>
 8015668:	89a3      	ldrh	r3, [r4, #12]
 801566a:	059b      	lsls	r3, r3, #22
 801566c:	d402      	bmi.n	8015674 <_vfiprintf_r+0x34>
 801566e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015670:	f000 fbd3 	bl	8015e1a <__retarget_lock_acquire_recursive>
 8015674:	89a3      	ldrh	r3, [r4, #12]
 8015676:	071b      	lsls	r3, r3, #28
 8015678:	d502      	bpl.n	8015680 <_vfiprintf_r+0x40>
 801567a:	6923      	ldr	r3, [r4, #16]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d11d      	bne.n	80156bc <_vfiprintf_r+0x7c>
 8015680:	0021      	movs	r1, r4
 8015682:	0030      	movs	r0, r6
 8015684:	f000 f97a 	bl	801597c <__swsetup_r>
 8015688:	2800      	cmp	r0, #0
 801568a:	d017      	beq.n	80156bc <_vfiprintf_r+0x7c>
 801568c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801568e:	07db      	lsls	r3, r3, #31
 8015690:	d50d      	bpl.n	80156ae <_vfiprintf_r+0x6e>
 8015692:	2001      	movs	r0, #1
 8015694:	4240      	negs	r0, r0
 8015696:	b021      	add	sp, #132	; 0x84
 8015698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801569a:	4b7f      	ldr	r3, [pc, #508]	; (8015898 <_vfiprintf_r+0x258>)
 801569c:	429c      	cmp	r4, r3
 801569e:	d101      	bne.n	80156a4 <_vfiprintf_r+0x64>
 80156a0:	68b4      	ldr	r4, [r6, #8]
 80156a2:	e7de      	b.n	8015662 <_vfiprintf_r+0x22>
 80156a4:	4b7d      	ldr	r3, [pc, #500]	; (801589c <_vfiprintf_r+0x25c>)
 80156a6:	429c      	cmp	r4, r3
 80156a8:	d1db      	bne.n	8015662 <_vfiprintf_r+0x22>
 80156aa:	68f4      	ldr	r4, [r6, #12]
 80156ac:	e7d9      	b.n	8015662 <_vfiprintf_r+0x22>
 80156ae:	89a3      	ldrh	r3, [r4, #12]
 80156b0:	059b      	lsls	r3, r3, #22
 80156b2:	d4ee      	bmi.n	8015692 <_vfiprintf_r+0x52>
 80156b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80156b6:	f000 fbb1 	bl	8015e1c <__retarget_lock_release_recursive>
 80156ba:	e7ea      	b.n	8015692 <_vfiprintf_r+0x52>
 80156bc:	2300      	movs	r3, #0
 80156be:	ad08      	add	r5, sp, #32
 80156c0:	616b      	str	r3, [r5, #20]
 80156c2:	3320      	adds	r3, #32
 80156c4:	766b      	strb	r3, [r5, #25]
 80156c6:	3310      	adds	r3, #16
 80156c8:	76ab      	strb	r3, [r5, #26]
 80156ca:	9707      	str	r7, [sp, #28]
 80156cc:	9f03      	ldr	r7, [sp, #12]
 80156ce:	783b      	ldrb	r3, [r7, #0]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d001      	beq.n	80156d8 <_vfiprintf_r+0x98>
 80156d4:	2b25      	cmp	r3, #37	; 0x25
 80156d6:	d14e      	bne.n	8015776 <_vfiprintf_r+0x136>
 80156d8:	9b03      	ldr	r3, [sp, #12]
 80156da:	1afb      	subs	r3, r7, r3
 80156dc:	9305      	str	r3, [sp, #20]
 80156de:	9b03      	ldr	r3, [sp, #12]
 80156e0:	429f      	cmp	r7, r3
 80156e2:	d00d      	beq.n	8015700 <_vfiprintf_r+0xc0>
 80156e4:	9b05      	ldr	r3, [sp, #20]
 80156e6:	0021      	movs	r1, r4
 80156e8:	0030      	movs	r0, r6
 80156ea:	9a03      	ldr	r2, [sp, #12]
 80156ec:	f7ff ff95 	bl	801561a <__sfputs_r>
 80156f0:	1c43      	adds	r3, r0, #1
 80156f2:	d100      	bne.n	80156f6 <_vfiprintf_r+0xb6>
 80156f4:	e0b5      	b.n	8015862 <_vfiprintf_r+0x222>
 80156f6:	696a      	ldr	r2, [r5, #20]
 80156f8:	9b05      	ldr	r3, [sp, #20]
 80156fa:	4694      	mov	ip, r2
 80156fc:	4463      	add	r3, ip
 80156fe:	616b      	str	r3, [r5, #20]
 8015700:	783b      	ldrb	r3, [r7, #0]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d100      	bne.n	8015708 <_vfiprintf_r+0xc8>
 8015706:	e0ac      	b.n	8015862 <_vfiprintf_r+0x222>
 8015708:	2201      	movs	r2, #1
 801570a:	1c7b      	adds	r3, r7, #1
 801570c:	9303      	str	r3, [sp, #12]
 801570e:	2300      	movs	r3, #0
 8015710:	4252      	negs	r2, r2
 8015712:	606a      	str	r2, [r5, #4]
 8015714:	a904      	add	r1, sp, #16
 8015716:	3254      	adds	r2, #84	; 0x54
 8015718:	1852      	adds	r2, r2, r1
 801571a:	602b      	str	r3, [r5, #0]
 801571c:	60eb      	str	r3, [r5, #12]
 801571e:	60ab      	str	r3, [r5, #8]
 8015720:	7013      	strb	r3, [r2, #0]
 8015722:	65ab      	str	r3, [r5, #88]	; 0x58
 8015724:	9b03      	ldr	r3, [sp, #12]
 8015726:	2205      	movs	r2, #5
 8015728:	7819      	ldrb	r1, [r3, #0]
 801572a:	485d      	ldr	r0, [pc, #372]	; (80158a0 <_vfiprintf_r+0x260>)
 801572c:	f7ff fa9e 	bl	8014c6c <memchr>
 8015730:	9b03      	ldr	r3, [sp, #12]
 8015732:	1c5f      	adds	r7, r3, #1
 8015734:	2800      	cmp	r0, #0
 8015736:	d120      	bne.n	801577a <_vfiprintf_r+0x13a>
 8015738:	682a      	ldr	r2, [r5, #0]
 801573a:	06d3      	lsls	r3, r2, #27
 801573c:	d504      	bpl.n	8015748 <_vfiprintf_r+0x108>
 801573e:	2353      	movs	r3, #83	; 0x53
 8015740:	a904      	add	r1, sp, #16
 8015742:	185b      	adds	r3, r3, r1
 8015744:	2120      	movs	r1, #32
 8015746:	7019      	strb	r1, [r3, #0]
 8015748:	0713      	lsls	r3, r2, #28
 801574a:	d504      	bpl.n	8015756 <_vfiprintf_r+0x116>
 801574c:	2353      	movs	r3, #83	; 0x53
 801574e:	a904      	add	r1, sp, #16
 8015750:	185b      	adds	r3, r3, r1
 8015752:	212b      	movs	r1, #43	; 0x2b
 8015754:	7019      	strb	r1, [r3, #0]
 8015756:	9b03      	ldr	r3, [sp, #12]
 8015758:	781b      	ldrb	r3, [r3, #0]
 801575a:	2b2a      	cmp	r3, #42	; 0x2a
 801575c:	d016      	beq.n	801578c <_vfiprintf_r+0x14c>
 801575e:	2100      	movs	r1, #0
 8015760:	68eb      	ldr	r3, [r5, #12]
 8015762:	9f03      	ldr	r7, [sp, #12]
 8015764:	783a      	ldrb	r2, [r7, #0]
 8015766:	1c78      	adds	r0, r7, #1
 8015768:	3a30      	subs	r2, #48	; 0x30
 801576a:	4684      	mov	ip, r0
 801576c:	2a09      	cmp	r2, #9
 801576e:	d94f      	bls.n	8015810 <_vfiprintf_r+0x1d0>
 8015770:	2900      	cmp	r1, #0
 8015772:	d111      	bne.n	8015798 <_vfiprintf_r+0x158>
 8015774:	e017      	b.n	80157a6 <_vfiprintf_r+0x166>
 8015776:	3701      	adds	r7, #1
 8015778:	e7a9      	b.n	80156ce <_vfiprintf_r+0x8e>
 801577a:	4b49      	ldr	r3, [pc, #292]	; (80158a0 <_vfiprintf_r+0x260>)
 801577c:	682a      	ldr	r2, [r5, #0]
 801577e:	1ac0      	subs	r0, r0, r3
 8015780:	2301      	movs	r3, #1
 8015782:	4083      	lsls	r3, r0
 8015784:	4313      	orrs	r3, r2
 8015786:	602b      	str	r3, [r5, #0]
 8015788:	9703      	str	r7, [sp, #12]
 801578a:	e7cb      	b.n	8015724 <_vfiprintf_r+0xe4>
 801578c:	9b07      	ldr	r3, [sp, #28]
 801578e:	1d19      	adds	r1, r3, #4
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	9107      	str	r1, [sp, #28]
 8015794:	2b00      	cmp	r3, #0
 8015796:	db01      	blt.n	801579c <_vfiprintf_r+0x15c>
 8015798:	930b      	str	r3, [sp, #44]	; 0x2c
 801579a:	e004      	b.n	80157a6 <_vfiprintf_r+0x166>
 801579c:	425b      	negs	r3, r3
 801579e:	60eb      	str	r3, [r5, #12]
 80157a0:	2302      	movs	r3, #2
 80157a2:	4313      	orrs	r3, r2
 80157a4:	602b      	str	r3, [r5, #0]
 80157a6:	783b      	ldrb	r3, [r7, #0]
 80157a8:	2b2e      	cmp	r3, #46	; 0x2e
 80157aa:	d10a      	bne.n	80157c2 <_vfiprintf_r+0x182>
 80157ac:	787b      	ldrb	r3, [r7, #1]
 80157ae:	2b2a      	cmp	r3, #42	; 0x2a
 80157b0:	d137      	bne.n	8015822 <_vfiprintf_r+0x1e2>
 80157b2:	9b07      	ldr	r3, [sp, #28]
 80157b4:	3702      	adds	r7, #2
 80157b6:	1d1a      	adds	r2, r3, #4
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	9207      	str	r2, [sp, #28]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	db2d      	blt.n	801581c <_vfiprintf_r+0x1dc>
 80157c0:	9309      	str	r3, [sp, #36]	; 0x24
 80157c2:	2203      	movs	r2, #3
 80157c4:	7839      	ldrb	r1, [r7, #0]
 80157c6:	4837      	ldr	r0, [pc, #220]	; (80158a4 <_vfiprintf_r+0x264>)
 80157c8:	f7ff fa50 	bl	8014c6c <memchr>
 80157cc:	2800      	cmp	r0, #0
 80157ce:	d007      	beq.n	80157e0 <_vfiprintf_r+0x1a0>
 80157d0:	4b34      	ldr	r3, [pc, #208]	; (80158a4 <_vfiprintf_r+0x264>)
 80157d2:	682a      	ldr	r2, [r5, #0]
 80157d4:	1ac0      	subs	r0, r0, r3
 80157d6:	2340      	movs	r3, #64	; 0x40
 80157d8:	4083      	lsls	r3, r0
 80157da:	4313      	orrs	r3, r2
 80157dc:	3701      	adds	r7, #1
 80157de:	602b      	str	r3, [r5, #0]
 80157e0:	7839      	ldrb	r1, [r7, #0]
 80157e2:	1c7b      	adds	r3, r7, #1
 80157e4:	2206      	movs	r2, #6
 80157e6:	4830      	ldr	r0, [pc, #192]	; (80158a8 <_vfiprintf_r+0x268>)
 80157e8:	9303      	str	r3, [sp, #12]
 80157ea:	7629      	strb	r1, [r5, #24]
 80157ec:	f7ff fa3e 	bl	8014c6c <memchr>
 80157f0:	2800      	cmp	r0, #0
 80157f2:	d045      	beq.n	8015880 <_vfiprintf_r+0x240>
 80157f4:	4b2d      	ldr	r3, [pc, #180]	; (80158ac <_vfiprintf_r+0x26c>)
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d127      	bne.n	801584a <_vfiprintf_r+0x20a>
 80157fa:	2207      	movs	r2, #7
 80157fc:	9b07      	ldr	r3, [sp, #28]
 80157fe:	3307      	adds	r3, #7
 8015800:	4393      	bics	r3, r2
 8015802:	3308      	adds	r3, #8
 8015804:	9307      	str	r3, [sp, #28]
 8015806:	696b      	ldr	r3, [r5, #20]
 8015808:	9a04      	ldr	r2, [sp, #16]
 801580a:	189b      	adds	r3, r3, r2
 801580c:	616b      	str	r3, [r5, #20]
 801580e:	e75d      	b.n	80156cc <_vfiprintf_r+0x8c>
 8015810:	210a      	movs	r1, #10
 8015812:	434b      	muls	r3, r1
 8015814:	4667      	mov	r7, ip
 8015816:	189b      	adds	r3, r3, r2
 8015818:	3909      	subs	r1, #9
 801581a:	e7a3      	b.n	8015764 <_vfiprintf_r+0x124>
 801581c:	2301      	movs	r3, #1
 801581e:	425b      	negs	r3, r3
 8015820:	e7ce      	b.n	80157c0 <_vfiprintf_r+0x180>
 8015822:	2300      	movs	r3, #0
 8015824:	001a      	movs	r2, r3
 8015826:	3701      	adds	r7, #1
 8015828:	606b      	str	r3, [r5, #4]
 801582a:	7839      	ldrb	r1, [r7, #0]
 801582c:	1c78      	adds	r0, r7, #1
 801582e:	3930      	subs	r1, #48	; 0x30
 8015830:	4684      	mov	ip, r0
 8015832:	2909      	cmp	r1, #9
 8015834:	d903      	bls.n	801583e <_vfiprintf_r+0x1fe>
 8015836:	2b00      	cmp	r3, #0
 8015838:	d0c3      	beq.n	80157c2 <_vfiprintf_r+0x182>
 801583a:	9209      	str	r2, [sp, #36]	; 0x24
 801583c:	e7c1      	b.n	80157c2 <_vfiprintf_r+0x182>
 801583e:	230a      	movs	r3, #10
 8015840:	435a      	muls	r2, r3
 8015842:	4667      	mov	r7, ip
 8015844:	1852      	adds	r2, r2, r1
 8015846:	3b09      	subs	r3, #9
 8015848:	e7ef      	b.n	801582a <_vfiprintf_r+0x1ea>
 801584a:	ab07      	add	r3, sp, #28
 801584c:	9300      	str	r3, [sp, #0]
 801584e:	0022      	movs	r2, r4
 8015850:	0029      	movs	r1, r5
 8015852:	0030      	movs	r0, r6
 8015854:	4b16      	ldr	r3, [pc, #88]	; (80158b0 <_vfiprintf_r+0x270>)
 8015856:	f7fd ff6d 	bl	8013734 <_printf_float>
 801585a:	9004      	str	r0, [sp, #16]
 801585c:	9b04      	ldr	r3, [sp, #16]
 801585e:	3301      	adds	r3, #1
 8015860:	d1d1      	bne.n	8015806 <_vfiprintf_r+0x1c6>
 8015862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015864:	07db      	lsls	r3, r3, #31
 8015866:	d405      	bmi.n	8015874 <_vfiprintf_r+0x234>
 8015868:	89a3      	ldrh	r3, [r4, #12]
 801586a:	059b      	lsls	r3, r3, #22
 801586c:	d402      	bmi.n	8015874 <_vfiprintf_r+0x234>
 801586e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015870:	f000 fad4 	bl	8015e1c <__retarget_lock_release_recursive>
 8015874:	89a3      	ldrh	r3, [r4, #12]
 8015876:	065b      	lsls	r3, r3, #25
 8015878:	d500      	bpl.n	801587c <_vfiprintf_r+0x23c>
 801587a:	e70a      	b.n	8015692 <_vfiprintf_r+0x52>
 801587c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801587e:	e70a      	b.n	8015696 <_vfiprintf_r+0x56>
 8015880:	ab07      	add	r3, sp, #28
 8015882:	9300      	str	r3, [sp, #0]
 8015884:	0022      	movs	r2, r4
 8015886:	0029      	movs	r1, r5
 8015888:	0030      	movs	r0, r6
 801588a:	4b09      	ldr	r3, [pc, #36]	; (80158b0 <_vfiprintf_r+0x270>)
 801588c:	f7fe fa10 	bl	8013cb0 <_printf_i>
 8015890:	e7e3      	b.n	801585a <_vfiprintf_r+0x21a>
 8015892:	46c0      	nop			; (mov r8, r8)
 8015894:	080169dc 	.word	0x080169dc
 8015898:	080169fc 	.word	0x080169fc
 801589c:	080169bc 	.word	0x080169bc
 80158a0:	080168aa 	.word	0x080168aa
 80158a4:	080168b0 	.word	0x080168b0
 80158a8:	080168b4 	.word	0x080168b4
 80158ac:	08013735 	.word	0x08013735
 80158b0:	0801561b 	.word	0x0801561b

080158b4 <__swbuf_r>:
 80158b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158b6:	0005      	movs	r5, r0
 80158b8:	000e      	movs	r6, r1
 80158ba:	0014      	movs	r4, r2
 80158bc:	2800      	cmp	r0, #0
 80158be:	d004      	beq.n	80158ca <__swbuf_r+0x16>
 80158c0:	6983      	ldr	r3, [r0, #24]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d101      	bne.n	80158ca <__swbuf_r+0x16>
 80158c6:	f000 fa07 	bl	8015cd8 <__sinit>
 80158ca:	4b22      	ldr	r3, [pc, #136]	; (8015954 <__swbuf_r+0xa0>)
 80158cc:	429c      	cmp	r4, r3
 80158ce:	d12e      	bne.n	801592e <__swbuf_r+0x7a>
 80158d0:	686c      	ldr	r4, [r5, #4]
 80158d2:	69a3      	ldr	r3, [r4, #24]
 80158d4:	60a3      	str	r3, [r4, #8]
 80158d6:	89a3      	ldrh	r3, [r4, #12]
 80158d8:	071b      	lsls	r3, r3, #28
 80158da:	d532      	bpl.n	8015942 <__swbuf_r+0x8e>
 80158dc:	6923      	ldr	r3, [r4, #16]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d02f      	beq.n	8015942 <__swbuf_r+0x8e>
 80158e2:	6823      	ldr	r3, [r4, #0]
 80158e4:	6922      	ldr	r2, [r4, #16]
 80158e6:	b2f7      	uxtb	r7, r6
 80158e8:	1a98      	subs	r0, r3, r2
 80158ea:	6963      	ldr	r3, [r4, #20]
 80158ec:	b2f6      	uxtb	r6, r6
 80158ee:	4283      	cmp	r3, r0
 80158f0:	dc05      	bgt.n	80158fe <__swbuf_r+0x4a>
 80158f2:	0021      	movs	r1, r4
 80158f4:	0028      	movs	r0, r5
 80158f6:	f000 f94d 	bl	8015b94 <_fflush_r>
 80158fa:	2800      	cmp	r0, #0
 80158fc:	d127      	bne.n	801594e <__swbuf_r+0x9a>
 80158fe:	68a3      	ldr	r3, [r4, #8]
 8015900:	3001      	adds	r0, #1
 8015902:	3b01      	subs	r3, #1
 8015904:	60a3      	str	r3, [r4, #8]
 8015906:	6823      	ldr	r3, [r4, #0]
 8015908:	1c5a      	adds	r2, r3, #1
 801590a:	6022      	str	r2, [r4, #0]
 801590c:	701f      	strb	r7, [r3, #0]
 801590e:	6963      	ldr	r3, [r4, #20]
 8015910:	4283      	cmp	r3, r0
 8015912:	d004      	beq.n	801591e <__swbuf_r+0x6a>
 8015914:	89a3      	ldrh	r3, [r4, #12]
 8015916:	07db      	lsls	r3, r3, #31
 8015918:	d507      	bpl.n	801592a <__swbuf_r+0x76>
 801591a:	2e0a      	cmp	r6, #10
 801591c:	d105      	bne.n	801592a <__swbuf_r+0x76>
 801591e:	0021      	movs	r1, r4
 8015920:	0028      	movs	r0, r5
 8015922:	f000 f937 	bl	8015b94 <_fflush_r>
 8015926:	2800      	cmp	r0, #0
 8015928:	d111      	bne.n	801594e <__swbuf_r+0x9a>
 801592a:	0030      	movs	r0, r6
 801592c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801592e:	4b0a      	ldr	r3, [pc, #40]	; (8015958 <__swbuf_r+0xa4>)
 8015930:	429c      	cmp	r4, r3
 8015932:	d101      	bne.n	8015938 <__swbuf_r+0x84>
 8015934:	68ac      	ldr	r4, [r5, #8]
 8015936:	e7cc      	b.n	80158d2 <__swbuf_r+0x1e>
 8015938:	4b08      	ldr	r3, [pc, #32]	; (801595c <__swbuf_r+0xa8>)
 801593a:	429c      	cmp	r4, r3
 801593c:	d1c9      	bne.n	80158d2 <__swbuf_r+0x1e>
 801593e:	68ec      	ldr	r4, [r5, #12]
 8015940:	e7c7      	b.n	80158d2 <__swbuf_r+0x1e>
 8015942:	0021      	movs	r1, r4
 8015944:	0028      	movs	r0, r5
 8015946:	f000 f819 	bl	801597c <__swsetup_r>
 801594a:	2800      	cmp	r0, #0
 801594c:	d0c9      	beq.n	80158e2 <__swbuf_r+0x2e>
 801594e:	2601      	movs	r6, #1
 8015950:	4276      	negs	r6, r6
 8015952:	e7ea      	b.n	801592a <__swbuf_r+0x76>
 8015954:	080169dc 	.word	0x080169dc
 8015958:	080169fc 	.word	0x080169fc
 801595c:	080169bc 	.word	0x080169bc

08015960 <__ascii_wctomb>:
 8015960:	0003      	movs	r3, r0
 8015962:	1e08      	subs	r0, r1, #0
 8015964:	d005      	beq.n	8015972 <__ascii_wctomb+0x12>
 8015966:	2aff      	cmp	r2, #255	; 0xff
 8015968:	d904      	bls.n	8015974 <__ascii_wctomb+0x14>
 801596a:	228a      	movs	r2, #138	; 0x8a
 801596c:	2001      	movs	r0, #1
 801596e:	601a      	str	r2, [r3, #0]
 8015970:	4240      	negs	r0, r0
 8015972:	4770      	bx	lr
 8015974:	2001      	movs	r0, #1
 8015976:	700a      	strb	r2, [r1, #0]
 8015978:	e7fb      	b.n	8015972 <__ascii_wctomb+0x12>
	...

0801597c <__swsetup_r>:
 801597c:	4b37      	ldr	r3, [pc, #220]	; (8015a5c <__swsetup_r+0xe0>)
 801597e:	b570      	push	{r4, r5, r6, lr}
 8015980:	681d      	ldr	r5, [r3, #0]
 8015982:	0006      	movs	r6, r0
 8015984:	000c      	movs	r4, r1
 8015986:	2d00      	cmp	r5, #0
 8015988:	d005      	beq.n	8015996 <__swsetup_r+0x1a>
 801598a:	69ab      	ldr	r3, [r5, #24]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d102      	bne.n	8015996 <__swsetup_r+0x1a>
 8015990:	0028      	movs	r0, r5
 8015992:	f000 f9a1 	bl	8015cd8 <__sinit>
 8015996:	4b32      	ldr	r3, [pc, #200]	; (8015a60 <__swsetup_r+0xe4>)
 8015998:	429c      	cmp	r4, r3
 801599a:	d10f      	bne.n	80159bc <__swsetup_r+0x40>
 801599c:	686c      	ldr	r4, [r5, #4]
 801599e:	230c      	movs	r3, #12
 80159a0:	5ee2      	ldrsh	r2, [r4, r3]
 80159a2:	b293      	uxth	r3, r2
 80159a4:	0711      	lsls	r1, r2, #28
 80159a6:	d42d      	bmi.n	8015a04 <__swsetup_r+0x88>
 80159a8:	06d9      	lsls	r1, r3, #27
 80159aa:	d411      	bmi.n	80159d0 <__swsetup_r+0x54>
 80159ac:	2309      	movs	r3, #9
 80159ae:	2001      	movs	r0, #1
 80159b0:	6033      	str	r3, [r6, #0]
 80159b2:	3337      	adds	r3, #55	; 0x37
 80159b4:	4313      	orrs	r3, r2
 80159b6:	81a3      	strh	r3, [r4, #12]
 80159b8:	4240      	negs	r0, r0
 80159ba:	bd70      	pop	{r4, r5, r6, pc}
 80159bc:	4b29      	ldr	r3, [pc, #164]	; (8015a64 <__swsetup_r+0xe8>)
 80159be:	429c      	cmp	r4, r3
 80159c0:	d101      	bne.n	80159c6 <__swsetup_r+0x4a>
 80159c2:	68ac      	ldr	r4, [r5, #8]
 80159c4:	e7eb      	b.n	801599e <__swsetup_r+0x22>
 80159c6:	4b28      	ldr	r3, [pc, #160]	; (8015a68 <__swsetup_r+0xec>)
 80159c8:	429c      	cmp	r4, r3
 80159ca:	d1e8      	bne.n	801599e <__swsetup_r+0x22>
 80159cc:	68ec      	ldr	r4, [r5, #12]
 80159ce:	e7e6      	b.n	801599e <__swsetup_r+0x22>
 80159d0:	075b      	lsls	r3, r3, #29
 80159d2:	d513      	bpl.n	80159fc <__swsetup_r+0x80>
 80159d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159d6:	2900      	cmp	r1, #0
 80159d8:	d008      	beq.n	80159ec <__swsetup_r+0x70>
 80159da:	0023      	movs	r3, r4
 80159dc:	3344      	adds	r3, #68	; 0x44
 80159de:	4299      	cmp	r1, r3
 80159e0:	d002      	beq.n	80159e8 <__swsetup_r+0x6c>
 80159e2:	0030      	movs	r0, r6
 80159e4:	f7ff fcfa 	bl	80153dc <_free_r>
 80159e8:	2300      	movs	r3, #0
 80159ea:	6363      	str	r3, [r4, #52]	; 0x34
 80159ec:	2224      	movs	r2, #36	; 0x24
 80159ee:	89a3      	ldrh	r3, [r4, #12]
 80159f0:	4393      	bics	r3, r2
 80159f2:	81a3      	strh	r3, [r4, #12]
 80159f4:	2300      	movs	r3, #0
 80159f6:	6063      	str	r3, [r4, #4]
 80159f8:	6923      	ldr	r3, [r4, #16]
 80159fa:	6023      	str	r3, [r4, #0]
 80159fc:	2308      	movs	r3, #8
 80159fe:	89a2      	ldrh	r2, [r4, #12]
 8015a00:	4313      	orrs	r3, r2
 8015a02:	81a3      	strh	r3, [r4, #12]
 8015a04:	6923      	ldr	r3, [r4, #16]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d10b      	bne.n	8015a22 <__swsetup_r+0xa6>
 8015a0a:	21a0      	movs	r1, #160	; 0xa0
 8015a0c:	2280      	movs	r2, #128	; 0x80
 8015a0e:	89a3      	ldrh	r3, [r4, #12]
 8015a10:	0089      	lsls	r1, r1, #2
 8015a12:	0092      	lsls	r2, r2, #2
 8015a14:	400b      	ands	r3, r1
 8015a16:	4293      	cmp	r3, r2
 8015a18:	d003      	beq.n	8015a22 <__swsetup_r+0xa6>
 8015a1a:	0021      	movs	r1, r4
 8015a1c:	0030      	movs	r0, r6
 8015a1e:	f000 fa27 	bl	8015e70 <__smakebuf_r>
 8015a22:	220c      	movs	r2, #12
 8015a24:	5ea3      	ldrsh	r3, [r4, r2]
 8015a26:	2001      	movs	r0, #1
 8015a28:	001a      	movs	r2, r3
 8015a2a:	b299      	uxth	r1, r3
 8015a2c:	4002      	ands	r2, r0
 8015a2e:	4203      	tst	r3, r0
 8015a30:	d00f      	beq.n	8015a52 <__swsetup_r+0xd6>
 8015a32:	2200      	movs	r2, #0
 8015a34:	60a2      	str	r2, [r4, #8]
 8015a36:	6962      	ldr	r2, [r4, #20]
 8015a38:	4252      	negs	r2, r2
 8015a3a:	61a2      	str	r2, [r4, #24]
 8015a3c:	2000      	movs	r0, #0
 8015a3e:	6922      	ldr	r2, [r4, #16]
 8015a40:	4282      	cmp	r2, r0
 8015a42:	d1ba      	bne.n	80159ba <__swsetup_r+0x3e>
 8015a44:	060a      	lsls	r2, r1, #24
 8015a46:	d5b8      	bpl.n	80159ba <__swsetup_r+0x3e>
 8015a48:	2240      	movs	r2, #64	; 0x40
 8015a4a:	4313      	orrs	r3, r2
 8015a4c:	81a3      	strh	r3, [r4, #12]
 8015a4e:	3801      	subs	r0, #1
 8015a50:	e7b3      	b.n	80159ba <__swsetup_r+0x3e>
 8015a52:	0788      	lsls	r0, r1, #30
 8015a54:	d400      	bmi.n	8015a58 <__swsetup_r+0xdc>
 8015a56:	6962      	ldr	r2, [r4, #20]
 8015a58:	60a2      	str	r2, [r4, #8]
 8015a5a:	e7ef      	b.n	8015a3c <__swsetup_r+0xc0>
 8015a5c:	20000268 	.word	0x20000268
 8015a60:	080169dc 	.word	0x080169dc
 8015a64:	080169fc 	.word	0x080169fc
 8015a68:	080169bc 	.word	0x080169bc

08015a6c <abort>:
 8015a6c:	2006      	movs	r0, #6
 8015a6e:	b510      	push	{r4, lr}
 8015a70:	f000 fa6c 	bl	8015f4c <raise>
 8015a74:	2001      	movs	r0, #1
 8015a76:	f7f0 fc63 	bl	8006340 <_exit>
	...

08015a7c <__sflush_r>:
 8015a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a7e:	898b      	ldrh	r3, [r1, #12]
 8015a80:	0005      	movs	r5, r0
 8015a82:	000c      	movs	r4, r1
 8015a84:	071a      	lsls	r2, r3, #28
 8015a86:	d45f      	bmi.n	8015b48 <__sflush_r+0xcc>
 8015a88:	684a      	ldr	r2, [r1, #4]
 8015a8a:	2a00      	cmp	r2, #0
 8015a8c:	dc04      	bgt.n	8015a98 <__sflush_r+0x1c>
 8015a8e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8015a90:	2a00      	cmp	r2, #0
 8015a92:	dc01      	bgt.n	8015a98 <__sflush_r+0x1c>
 8015a94:	2000      	movs	r0, #0
 8015a96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015a98:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8015a9a:	2f00      	cmp	r7, #0
 8015a9c:	d0fa      	beq.n	8015a94 <__sflush_r+0x18>
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	2180      	movs	r1, #128	; 0x80
 8015aa2:	682e      	ldr	r6, [r5, #0]
 8015aa4:	602a      	str	r2, [r5, #0]
 8015aa6:	001a      	movs	r2, r3
 8015aa8:	0149      	lsls	r1, r1, #5
 8015aaa:	400a      	ands	r2, r1
 8015aac:	420b      	tst	r3, r1
 8015aae:	d034      	beq.n	8015b1a <__sflush_r+0x9e>
 8015ab0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015ab2:	89a3      	ldrh	r3, [r4, #12]
 8015ab4:	075b      	lsls	r3, r3, #29
 8015ab6:	d506      	bpl.n	8015ac6 <__sflush_r+0x4a>
 8015ab8:	6863      	ldr	r3, [r4, #4]
 8015aba:	1ac0      	subs	r0, r0, r3
 8015abc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d001      	beq.n	8015ac6 <__sflush_r+0x4a>
 8015ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015ac4:	1ac0      	subs	r0, r0, r3
 8015ac6:	0002      	movs	r2, r0
 8015ac8:	6a21      	ldr	r1, [r4, #32]
 8015aca:	2300      	movs	r3, #0
 8015acc:	0028      	movs	r0, r5
 8015ace:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8015ad0:	47b8      	blx	r7
 8015ad2:	89a1      	ldrh	r1, [r4, #12]
 8015ad4:	1c43      	adds	r3, r0, #1
 8015ad6:	d106      	bne.n	8015ae6 <__sflush_r+0x6a>
 8015ad8:	682b      	ldr	r3, [r5, #0]
 8015ada:	2b1d      	cmp	r3, #29
 8015adc:	d831      	bhi.n	8015b42 <__sflush_r+0xc6>
 8015ade:	4a2c      	ldr	r2, [pc, #176]	; (8015b90 <__sflush_r+0x114>)
 8015ae0:	40da      	lsrs	r2, r3
 8015ae2:	07d3      	lsls	r3, r2, #31
 8015ae4:	d52d      	bpl.n	8015b42 <__sflush_r+0xc6>
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	6063      	str	r3, [r4, #4]
 8015aea:	6923      	ldr	r3, [r4, #16]
 8015aec:	6023      	str	r3, [r4, #0]
 8015aee:	04cb      	lsls	r3, r1, #19
 8015af0:	d505      	bpl.n	8015afe <__sflush_r+0x82>
 8015af2:	1c43      	adds	r3, r0, #1
 8015af4:	d102      	bne.n	8015afc <__sflush_r+0x80>
 8015af6:	682b      	ldr	r3, [r5, #0]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d100      	bne.n	8015afe <__sflush_r+0x82>
 8015afc:	6560      	str	r0, [r4, #84]	; 0x54
 8015afe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b00:	602e      	str	r6, [r5, #0]
 8015b02:	2900      	cmp	r1, #0
 8015b04:	d0c6      	beq.n	8015a94 <__sflush_r+0x18>
 8015b06:	0023      	movs	r3, r4
 8015b08:	3344      	adds	r3, #68	; 0x44
 8015b0a:	4299      	cmp	r1, r3
 8015b0c:	d002      	beq.n	8015b14 <__sflush_r+0x98>
 8015b0e:	0028      	movs	r0, r5
 8015b10:	f7ff fc64 	bl	80153dc <_free_r>
 8015b14:	2000      	movs	r0, #0
 8015b16:	6360      	str	r0, [r4, #52]	; 0x34
 8015b18:	e7bd      	b.n	8015a96 <__sflush_r+0x1a>
 8015b1a:	2301      	movs	r3, #1
 8015b1c:	0028      	movs	r0, r5
 8015b1e:	6a21      	ldr	r1, [r4, #32]
 8015b20:	47b8      	blx	r7
 8015b22:	1c43      	adds	r3, r0, #1
 8015b24:	d1c5      	bne.n	8015ab2 <__sflush_r+0x36>
 8015b26:	682b      	ldr	r3, [r5, #0]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d0c2      	beq.n	8015ab2 <__sflush_r+0x36>
 8015b2c:	2b1d      	cmp	r3, #29
 8015b2e:	d001      	beq.n	8015b34 <__sflush_r+0xb8>
 8015b30:	2b16      	cmp	r3, #22
 8015b32:	d101      	bne.n	8015b38 <__sflush_r+0xbc>
 8015b34:	602e      	str	r6, [r5, #0]
 8015b36:	e7ad      	b.n	8015a94 <__sflush_r+0x18>
 8015b38:	2340      	movs	r3, #64	; 0x40
 8015b3a:	89a2      	ldrh	r2, [r4, #12]
 8015b3c:	4313      	orrs	r3, r2
 8015b3e:	81a3      	strh	r3, [r4, #12]
 8015b40:	e7a9      	b.n	8015a96 <__sflush_r+0x1a>
 8015b42:	2340      	movs	r3, #64	; 0x40
 8015b44:	430b      	orrs	r3, r1
 8015b46:	e7fa      	b.n	8015b3e <__sflush_r+0xc2>
 8015b48:	690f      	ldr	r7, [r1, #16]
 8015b4a:	2f00      	cmp	r7, #0
 8015b4c:	d0a2      	beq.n	8015a94 <__sflush_r+0x18>
 8015b4e:	680a      	ldr	r2, [r1, #0]
 8015b50:	600f      	str	r7, [r1, #0]
 8015b52:	1bd2      	subs	r2, r2, r7
 8015b54:	9201      	str	r2, [sp, #4]
 8015b56:	2200      	movs	r2, #0
 8015b58:	079b      	lsls	r3, r3, #30
 8015b5a:	d100      	bne.n	8015b5e <__sflush_r+0xe2>
 8015b5c:	694a      	ldr	r2, [r1, #20]
 8015b5e:	60a2      	str	r2, [r4, #8]
 8015b60:	9b01      	ldr	r3, [sp, #4]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	dc00      	bgt.n	8015b68 <__sflush_r+0xec>
 8015b66:	e795      	b.n	8015a94 <__sflush_r+0x18>
 8015b68:	003a      	movs	r2, r7
 8015b6a:	0028      	movs	r0, r5
 8015b6c:	9b01      	ldr	r3, [sp, #4]
 8015b6e:	6a21      	ldr	r1, [r4, #32]
 8015b70:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015b72:	47b0      	blx	r6
 8015b74:	2800      	cmp	r0, #0
 8015b76:	dc06      	bgt.n	8015b86 <__sflush_r+0x10a>
 8015b78:	2340      	movs	r3, #64	; 0x40
 8015b7a:	2001      	movs	r0, #1
 8015b7c:	89a2      	ldrh	r2, [r4, #12]
 8015b7e:	4240      	negs	r0, r0
 8015b80:	4313      	orrs	r3, r2
 8015b82:	81a3      	strh	r3, [r4, #12]
 8015b84:	e787      	b.n	8015a96 <__sflush_r+0x1a>
 8015b86:	9b01      	ldr	r3, [sp, #4]
 8015b88:	183f      	adds	r7, r7, r0
 8015b8a:	1a1b      	subs	r3, r3, r0
 8015b8c:	9301      	str	r3, [sp, #4]
 8015b8e:	e7e7      	b.n	8015b60 <__sflush_r+0xe4>
 8015b90:	20400001 	.word	0x20400001

08015b94 <_fflush_r>:
 8015b94:	690b      	ldr	r3, [r1, #16]
 8015b96:	b570      	push	{r4, r5, r6, lr}
 8015b98:	0005      	movs	r5, r0
 8015b9a:	000c      	movs	r4, r1
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d102      	bne.n	8015ba6 <_fflush_r+0x12>
 8015ba0:	2500      	movs	r5, #0
 8015ba2:	0028      	movs	r0, r5
 8015ba4:	bd70      	pop	{r4, r5, r6, pc}
 8015ba6:	2800      	cmp	r0, #0
 8015ba8:	d004      	beq.n	8015bb4 <_fflush_r+0x20>
 8015baa:	6983      	ldr	r3, [r0, #24]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d101      	bne.n	8015bb4 <_fflush_r+0x20>
 8015bb0:	f000 f892 	bl	8015cd8 <__sinit>
 8015bb4:	4b14      	ldr	r3, [pc, #80]	; (8015c08 <_fflush_r+0x74>)
 8015bb6:	429c      	cmp	r4, r3
 8015bb8:	d11b      	bne.n	8015bf2 <_fflush_r+0x5e>
 8015bba:	686c      	ldr	r4, [r5, #4]
 8015bbc:	220c      	movs	r2, #12
 8015bbe:	5ea3      	ldrsh	r3, [r4, r2]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d0ed      	beq.n	8015ba0 <_fflush_r+0xc>
 8015bc4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015bc6:	07d2      	lsls	r2, r2, #31
 8015bc8:	d404      	bmi.n	8015bd4 <_fflush_r+0x40>
 8015bca:	059b      	lsls	r3, r3, #22
 8015bcc:	d402      	bmi.n	8015bd4 <_fflush_r+0x40>
 8015bce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015bd0:	f000 f923 	bl	8015e1a <__retarget_lock_acquire_recursive>
 8015bd4:	0028      	movs	r0, r5
 8015bd6:	0021      	movs	r1, r4
 8015bd8:	f7ff ff50 	bl	8015a7c <__sflush_r>
 8015bdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015bde:	0005      	movs	r5, r0
 8015be0:	07db      	lsls	r3, r3, #31
 8015be2:	d4de      	bmi.n	8015ba2 <_fflush_r+0xe>
 8015be4:	89a3      	ldrh	r3, [r4, #12]
 8015be6:	059b      	lsls	r3, r3, #22
 8015be8:	d4db      	bmi.n	8015ba2 <_fflush_r+0xe>
 8015bea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015bec:	f000 f916 	bl	8015e1c <__retarget_lock_release_recursive>
 8015bf0:	e7d7      	b.n	8015ba2 <_fflush_r+0xe>
 8015bf2:	4b06      	ldr	r3, [pc, #24]	; (8015c0c <_fflush_r+0x78>)
 8015bf4:	429c      	cmp	r4, r3
 8015bf6:	d101      	bne.n	8015bfc <_fflush_r+0x68>
 8015bf8:	68ac      	ldr	r4, [r5, #8]
 8015bfa:	e7df      	b.n	8015bbc <_fflush_r+0x28>
 8015bfc:	4b04      	ldr	r3, [pc, #16]	; (8015c10 <_fflush_r+0x7c>)
 8015bfe:	429c      	cmp	r4, r3
 8015c00:	d1dc      	bne.n	8015bbc <_fflush_r+0x28>
 8015c02:	68ec      	ldr	r4, [r5, #12]
 8015c04:	e7da      	b.n	8015bbc <_fflush_r+0x28>
 8015c06:	46c0      	nop			; (mov r8, r8)
 8015c08:	080169dc 	.word	0x080169dc
 8015c0c:	080169fc 	.word	0x080169fc
 8015c10:	080169bc 	.word	0x080169bc

08015c14 <std>:
 8015c14:	2300      	movs	r3, #0
 8015c16:	b510      	push	{r4, lr}
 8015c18:	0004      	movs	r4, r0
 8015c1a:	6003      	str	r3, [r0, #0]
 8015c1c:	6043      	str	r3, [r0, #4]
 8015c1e:	6083      	str	r3, [r0, #8]
 8015c20:	8181      	strh	r1, [r0, #12]
 8015c22:	6643      	str	r3, [r0, #100]	; 0x64
 8015c24:	0019      	movs	r1, r3
 8015c26:	81c2      	strh	r2, [r0, #14]
 8015c28:	6103      	str	r3, [r0, #16]
 8015c2a:	6143      	str	r3, [r0, #20]
 8015c2c:	6183      	str	r3, [r0, #24]
 8015c2e:	2208      	movs	r2, #8
 8015c30:	305c      	adds	r0, #92	; 0x5c
 8015c32:	f7fd fccc 	bl	80135ce <memset>
 8015c36:	4b05      	ldr	r3, [pc, #20]	; (8015c4c <std+0x38>)
 8015c38:	6263      	str	r3, [r4, #36]	; 0x24
 8015c3a:	4b05      	ldr	r3, [pc, #20]	; (8015c50 <std+0x3c>)
 8015c3c:	6224      	str	r4, [r4, #32]
 8015c3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8015c40:	4b04      	ldr	r3, [pc, #16]	; (8015c54 <std+0x40>)
 8015c42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015c44:	4b04      	ldr	r3, [pc, #16]	; (8015c58 <std+0x44>)
 8015c46:	6323      	str	r3, [r4, #48]	; 0x30
 8015c48:	bd10      	pop	{r4, pc}
 8015c4a:	46c0      	nop			; (mov r8, r8)
 8015c4c:	08015f8d 	.word	0x08015f8d
 8015c50:	08015fb5 	.word	0x08015fb5
 8015c54:	08015fed 	.word	0x08015fed
 8015c58:	08016019 	.word	0x08016019

08015c5c <_cleanup_r>:
 8015c5c:	b510      	push	{r4, lr}
 8015c5e:	4902      	ldr	r1, [pc, #8]	; (8015c68 <_cleanup_r+0xc>)
 8015c60:	f000 f8ba 	bl	8015dd8 <_fwalk_reent>
 8015c64:	bd10      	pop	{r4, pc}
 8015c66:	46c0      	nop			; (mov r8, r8)
 8015c68:	08015b95 	.word	0x08015b95

08015c6c <__sfmoreglue>:
 8015c6c:	b570      	push	{r4, r5, r6, lr}
 8015c6e:	2568      	movs	r5, #104	; 0x68
 8015c70:	1e4a      	subs	r2, r1, #1
 8015c72:	4355      	muls	r5, r2
 8015c74:	000e      	movs	r6, r1
 8015c76:	0029      	movs	r1, r5
 8015c78:	3174      	adds	r1, #116	; 0x74
 8015c7a:	f7ff fbf9 	bl	8015470 <_malloc_r>
 8015c7e:	1e04      	subs	r4, r0, #0
 8015c80:	d008      	beq.n	8015c94 <__sfmoreglue+0x28>
 8015c82:	2100      	movs	r1, #0
 8015c84:	002a      	movs	r2, r5
 8015c86:	6001      	str	r1, [r0, #0]
 8015c88:	6046      	str	r6, [r0, #4]
 8015c8a:	300c      	adds	r0, #12
 8015c8c:	60a0      	str	r0, [r4, #8]
 8015c8e:	3268      	adds	r2, #104	; 0x68
 8015c90:	f7fd fc9d 	bl	80135ce <memset>
 8015c94:	0020      	movs	r0, r4
 8015c96:	bd70      	pop	{r4, r5, r6, pc}

08015c98 <__sfp_lock_acquire>:
 8015c98:	b510      	push	{r4, lr}
 8015c9a:	4802      	ldr	r0, [pc, #8]	; (8015ca4 <__sfp_lock_acquire+0xc>)
 8015c9c:	f000 f8bd 	bl	8015e1a <__retarget_lock_acquire_recursive>
 8015ca0:	bd10      	pop	{r4, pc}
 8015ca2:	46c0      	nop			; (mov r8, r8)
 8015ca4:	20003838 	.word	0x20003838

08015ca8 <__sfp_lock_release>:
 8015ca8:	b510      	push	{r4, lr}
 8015caa:	4802      	ldr	r0, [pc, #8]	; (8015cb4 <__sfp_lock_release+0xc>)
 8015cac:	f000 f8b6 	bl	8015e1c <__retarget_lock_release_recursive>
 8015cb0:	bd10      	pop	{r4, pc}
 8015cb2:	46c0      	nop			; (mov r8, r8)
 8015cb4:	20003838 	.word	0x20003838

08015cb8 <__sinit_lock_acquire>:
 8015cb8:	b510      	push	{r4, lr}
 8015cba:	4802      	ldr	r0, [pc, #8]	; (8015cc4 <__sinit_lock_acquire+0xc>)
 8015cbc:	f000 f8ad 	bl	8015e1a <__retarget_lock_acquire_recursive>
 8015cc0:	bd10      	pop	{r4, pc}
 8015cc2:	46c0      	nop			; (mov r8, r8)
 8015cc4:	20003833 	.word	0x20003833

08015cc8 <__sinit_lock_release>:
 8015cc8:	b510      	push	{r4, lr}
 8015cca:	4802      	ldr	r0, [pc, #8]	; (8015cd4 <__sinit_lock_release+0xc>)
 8015ccc:	f000 f8a6 	bl	8015e1c <__retarget_lock_release_recursive>
 8015cd0:	bd10      	pop	{r4, pc}
 8015cd2:	46c0      	nop			; (mov r8, r8)
 8015cd4:	20003833 	.word	0x20003833

08015cd8 <__sinit>:
 8015cd8:	b513      	push	{r0, r1, r4, lr}
 8015cda:	0004      	movs	r4, r0
 8015cdc:	f7ff ffec 	bl	8015cb8 <__sinit_lock_acquire>
 8015ce0:	69a3      	ldr	r3, [r4, #24]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d002      	beq.n	8015cec <__sinit+0x14>
 8015ce6:	f7ff ffef 	bl	8015cc8 <__sinit_lock_release>
 8015cea:	bd13      	pop	{r0, r1, r4, pc}
 8015cec:	64a3      	str	r3, [r4, #72]	; 0x48
 8015cee:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015cf0:	6523      	str	r3, [r4, #80]	; 0x50
 8015cf2:	4b13      	ldr	r3, [pc, #76]	; (8015d40 <__sinit+0x68>)
 8015cf4:	4a13      	ldr	r2, [pc, #76]	; (8015d44 <__sinit+0x6c>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	62a2      	str	r2, [r4, #40]	; 0x28
 8015cfa:	9301      	str	r3, [sp, #4]
 8015cfc:	42a3      	cmp	r3, r4
 8015cfe:	d101      	bne.n	8015d04 <__sinit+0x2c>
 8015d00:	2301      	movs	r3, #1
 8015d02:	61a3      	str	r3, [r4, #24]
 8015d04:	0020      	movs	r0, r4
 8015d06:	f000 f81f 	bl	8015d48 <__sfp>
 8015d0a:	6060      	str	r0, [r4, #4]
 8015d0c:	0020      	movs	r0, r4
 8015d0e:	f000 f81b 	bl	8015d48 <__sfp>
 8015d12:	60a0      	str	r0, [r4, #8]
 8015d14:	0020      	movs	r0, r4
 8015d16:	f000 f817 	bl	8015d48 <__sfp>
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	2104      	movs	r1, #4
 8015d1e:	60e0      	str	r0, [r4, #12]
 8015d20:	6860      	ldr	r0, [r4, #4]
 8015d22:	f7ff ff77 	bl	8015c14 <std>
 8015d26:	2201      	movs	r2, #1
 8015d28:	2109      	movs	r1, #9
 8015d2a:	68a0      	ldr	r0, [r4, #8]
 8015d2c:	f7ff ff72 	bl	8015c14 <std>
 8015d30:	2202      	movs	r2, #2
 8015d32:	2112      	movs	r1, #18
 8015d34:	68e0      	ldr	r0, [r4, #12]
 8015d36:	f7ff ff6d 	bl	8015c14 <std>
 8015d3a:	2301      	movs	r3, #1
 8015d3c:	61a3      	str	r3, [r4, #24]
 8015d3e:	e7d2      	b.n	8015ce6 <__sinit+0xe>
 8015d40:	0801663c 	.word	0x0801663c
 8015d44:	08015c5d 	.word	0x08015c5d

08015d48 <__sfp>:
 8015d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d4a:	0007      	movs	r7, r0
 8015d4c:	f7ff ffa4 	bl	8015c98 <__sfp_lock_acquire>
 8015d50:	4b1f      	ldr	r3, [pc, #124]	; (8015dd0 <__sfp+0x88>)
 8015d52:	681e      	ldr	r6, [r3, #0]
 8015d54:	69b3      	ldr	r3, [r6, #24]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d102      	bne.n	8015d60 <__sfp+0x18>
 8015d5a:	0030      	movs	r0, r6
 8015d5c:	f7ff ffbc 	bl	8015cd8 <__sinit>
 8015d60:	3648      	adds	r6, #72	; 0x48
 8015d62:	68b4      	ldr	r4, [r6, #8]
 8015d64:	6873      	ldr	r3, [r6, #4]
 8015d66:	3b01      	subs	r3, #1
 8015d68:	d504      	bpl.n	8015d74 <__sfp+0x2c>
 8015d6a:	6833      	ldr	r3, [r6, #0]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d022      	beq.n	8015db6 <__sfp+0x6e>
 8015d70:	6836      	ldr	r6, [r6, #0]
 8015d72:	e7f6      	b.n	8015d62 <__sfp+0x1a>
 8015d74:	220c      	movs	r2, #12
 8015d76:	5ea5      	ldrsh	r5, [r4, r2]
 8015d78:	2d00      	cmp	r5, #0
 8015d7a:	d11a      	bne.n	8015db2 <__sfp+0x6a>
 8015d7c:	0020      	movs	r0, r4
 8015d7e:	4b15      	ldr	r3, [pc, #84]	; (8015dd4 <__sfp+0x8c>)
 8015d80:	3058      	adds	r0, #88	; 0x58
 8015d82:	60e3      	str	r3, [r4, #12]
 8015d84:	6665      	str	r5, [r4, #100]	; 0x64
 8015d86:	f000 f847 	bl	8015e18 <__retarget_lock_init_recursive>
 8015d8a:	f7ff ff8d 	bl	8015ca8 <__sfp_lock_release>
 8015d8e:	0020      	movs	r0, r4
 8015d90:	2208      	movs	r2, #8
 8015d92:	0029      	movs	r1, r5
 8015d94:	6025      	str	r5, [r4, #0]
 8015d96:	60a5      	str	r5, [r4, #8]
 8015d98:	6065      	str	r5, [r4, #4]
 8015d9a:	6125      	str	r5, [r4, #16]
 8015d9c:	6165      	str	r5, [r4, #20]
 8015d9e:	61a5      	str	r5, [r4, #24]
 8015da0:	305c      	adds	r0, #92	; 0x5c
 8015da2:	f7fd fc14 	bl	80135ce <memset>
 8015da6:	6365      	str	r5, [r4, #52]	; 0x34
 8015da8:	63a5      	str	r5, [r4, #56]	; 0x38
 8015daa:	64a5      	str	r5, [r4, #72]	; 0x48
 8015dac:	64e5      	str	r5, [r4, #76]	; 0x4c
 8015dae:	0020      	movs	r0, r4
 8015db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015db2:	3468      	adds	r4, #104	; 0x68
 8015db4:	e7d7      	b.n	8015d66 <__sfp+0x1e>
 8015db6:	2104      	movs	r1, #4
 8015db8:	0038      	movs	r0, r7
 8015dba:	f7ff ff57 	bl	8015c6c <__sfmoreglue>
 8015dbe:	1e04      	subs	r4, r0, #0
 8015dc0:	6030      	str	r0, [r6, #0]
 8015dc2:	d1d5      	bne.n	8015d70 <__sfp+0x28>
 8015dc4:	f7ff ff70 	bl	8015ca8 <__sfp_lock_release>
 8015dc8:	230c      	movs	r3, #12
 8015dca:	603b      	str	r3, [r7, #0]
 8015dcc:	e7ef      	b.n	8015dae <__sfp+0x66>
 8015dce:	46c0      	nop			; (mov r8, r8)
 8015dd0:	0801663c 	.word	0x0801663c
 8015dd4:	ffff0001 	.word	0xffff0001

08015dd8 <_fwalk_reent>:
 8015dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015dda:	0004      	movs	r4, r0
 8015ddc:	0006      	movs	r6, r0
 8015dde:	2700      	movs	r7, #0
 8015de0:	9101      	str	r1, [sp, #4]
 8015de2:	3448      	adds	r4, #72	; 0x48
 8015de4:	6863      	ldr	r3, [r4, #4]
 8015de6:	68a5      	ldr	r5, [r4, #8]
 8015de8:	9300      	str	r3, [sp, #0]
 8015dea:	9b00      	ldr	r3, [sp, #0]
 8015dec:	3b01      	subs	r3, #1
 8015dee:	9300      	str	r3, [sp, #0]
 8015df0:	d504      	bpl.n	8015dfc <_fwalk_reent+0x24>
 8015df2:	6824      	ldr	r4, [r4, #0]
 8015df4:	2c00      	cmp	r4, #0
 8015df6:	d1f5      	bne.n	8015de4 <_fwalk_reent+0xc>
 8015df8:	0038      	movs	r0, r7
 8015dfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015dfc:	89ab      	ldrh	r3, [r5, #12]
 8015dfe:	2b01      	cmp	r3, #1
 8015e00:	d908      	bls.n	8015e14 <_fwalk_reent+0x3c>
 8015e02:	220e      	movs	r2, #14
 8015e04:	5eab      	ldrsh	r3, [r5, r2]
 8015e06:	3301      	adds	r3, #1
 8015e08:	d004      	beq.n	8015e14 <_fwalk_reent+0x3c>
 8015e0a:	0029      	movs	r1, r5
 8015e0c:	0030      	movs	r0, r6
 8015e0e:	9b01      	ldr	r3, [sp, #4]
 8015e10:	4798      	blx	r3
 8015e12:	4307      	orrs	r7, r0
 8015e14:	3568      	adds	r5, #104	; 0x68
 8015e16:	e7e8      	b.n	8015dea <_fwalk_reent+0x12>

08015e18 <__retarget_lock_init_recursive>:
 8015e18:	4770      	bx	lr

08015e1a <__retarget_lock_acquire_recursive>:
 8015e1a:	4770      	bx	lr

08015e1c <__retarget_lock_release_recursive>:
 8015e1c:	4770      	bx	lr
	...

08015e20 <__swhatbuf_r>:
 8015e20:	b570      	push	{r4, r5, r6, lr}
 8015e22:	000e      	movs	r6, r1
 8015e24:	001d      	movs	r5, r3
 8015e26:	230e      	movs	r3, #14
 8015e28:	5ec9      	ldrsh	r1, [r1, r3]
 8015e2a:	0014      	movs	r4, r2
 8015e2c:	b096      	sub	sp, #88	; 0x58
 8015e2e:	2900      	cmp	r1, #0
 8015e30:	da07      	bge.n	8015e42 <__swhatbuf_r+0x22>
 8015e32:	2300      	movs	r3, #0
 8015e34:	602b      	str	r3, [r5, #0]
 8015e36:	89b3      	ldrh	r3, [r6, #12]
 8015e38:	061b      	lsls	r3, r3, #24
 8015e3a:	d411      	bmi.n	8015e60 <__swhatbuf_r+0x40>
 8015e3c:	2380      	movs	r3, #128	; 0x80
 8015e3e:	00db      	lsls	r3, r3, #3
 8015e40:	e00f      	b.n	8015e62 <__swhatbuf_r+0x42>
 8015e42:	466a      	mov	r2, sp
 8015e44:	f000 f914 	bl	8016070 <_fstat_r>
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	dbf2      	blt.n	8015e32 <__swhatbuf_r+0x12>
 8015e4c:	23f0      	movs	r3, #240	; 0xf0
 8015e4e:	9901      	ldr	r1, [sp, #4]
 8015e50:	021b      	lsls	r3, r3, #8
 8015e52:	4019      	ands	r1, r3
 8015e54:	4b05      	ldr	r3, [pc, #20]	; (8015e6c <__swhatbuf_r+0x4c>)
 8015e56:	18c9      	adds	r1, r1, r3
 8015e58:	424b      	negs	r3, r1
 8015e5a:	4159      	adcs	r1, r3
 8015e5c:	6029      	str	r1, [r5, #0]
 8015e5e:	e7ed      	b.n	8015e3c <__swhatbuf_r+0x1c>
 8015e60:	2340      	movs	r3, #64	; 0x40
 8015e62:	2000      	movs	r0, #0
 8015e64:	6023      	str	r3, [r4, #0]
 8015e66:	b016      	add	sp, #88	; 0x58
 8015e68:	bd70      	pop	{r4, r5, r6, pc}
 8015e6a:	46c0      	nop			; (mov r8, r8)
 8015e6c:	ffffe000 	.word	0xffffe000

08015e70 <__smakebuf_r>:
 8015e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e72:	2602      	movs	r6, #2
 8015e74:	898b      	ldrh	r3, [r1, #12]
 8015e76:	0005      	movs	r5, r0
 8015e78:	000c      	movs	r4, r1
 8015e7a:	4233      	tst	r3, r6
 8015e7c:	d006      	beq.n	8015e8c <__smakebuf_r+0x1c>
 8015e7e:	0023      	movs	r3, r4
 8015e80:	3347      	adds	r3, #71	; 0x47
 8015e82:	6023      	str	r3, [r4, #0]
 8015e84:	6123      	str	r3, [r4, #16]
 8015e86:	2301      	movs	r3, #1
 8015e88:	6163      	str	r3, [r4, #20]
 8015e8a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8015e8c:	466a      	mov	r2, sp
 8015e8e:	ab01      	add	r3, sp, #4
 8015e90:	f7ff ffc6 	bl	8015e20 <__swhatbuf_r>
 8015e94:	9900      	ldr	r1, [sp, #0]
 8015e96:	0007      	movs	r7, r0
 8015e98:	0028      	movs	r0, r5
 8015e9a:	f7ff fae9 	bl	8015470 <_malloc_r>
 8015e9e:	2800      	cmp	r0, #0
 8015ea0:	d108      	bne.n	8015eb4 <__smakebuf_r+0x44>
 8015ea2:	220c      	movs	r2, #12
 8015ea4:	5ea3      	ldrsh	r3, [r4, r2]
 8015ea6:	059a      	lsls	r2, r3, #22
 8015ea8:	d4ef      	bmi.n	8015e8a <__smakebuf_r+0x1a>
 8015eaa:	2203      	movs	r2, #3
 8015eac:	4393      	bics	r3, r2
 8015eae:	431e      	orrs	r6, r3
 8015eb0:	81a6      	strh	r6, [r4, #12]
 8015eb2:	e7e4      	b.n	8015e7e <__smakebuf_r+0xe>
 8015eb4:	4b0f      	ldr	r3, [pc, #60]	; (8015ef4 <__smakebuf_r+0x84>)
 8015eb6:	62ab      	str	r3, [r5, #40]	; 0x28
 8015eb8:	2380      	movs	r3, #128	; 0x80
 8015eba:	89a2      	ldrh	r2, [r4, #12]
 8015ebc:	6020      	str	r0, [r4, #0]
 8015ebe:	4313      	orrs	r3, r2
 8015ec0:	81a3      	strh	r3, [r4, #12]
 8015ec2:	9b00      	ldr	r3, [sp, #0]
 8015ec4:	6120      	str	r0, [r4, #16]
 8015ec6:	6163      	str	r3, [r4, #20]
 8015ec8:	9b01      	ldr	r3, [sp, #4]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d00d      	beq.n	8015eea <__smakebuf_r+0x7a>
 8015ece:	0028      	movs	r0, r5
 8015ed0:	230e      	movs	r3, #14
 8015ed2:	5ee1      	ldrsh	r1, [r4, r3]
 8015ed4:	f000 f8de 	bl	8016094 <_isatty_r>
 8015ed8:	2800      	cmp	r0, #0
 8015eda:	d006      	beq.n	8015eea <__smakebuf_r+0x7a>
 8015edc:	2203      	movs	r2, #3
 8015ede:	89a3      	ldrh	r3, [r4, #12]
 8015ee0:	4393      	bics	r3, r2
 8015ee2:	001a      	movs	r2, r3
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	4313      	orrs	r3, r2
 8015ee8:	81a3      	strh	r3, [r4, #12]
 8015eea:	89a0      	ldrh	r0, [r4, #12]
 8015eec:	4307      	orrs	r7, r0
 8015eee:	81a7      	strh	r7, [r4, #12]
 8015ef0:	e7cb      	b.n	8015e8a <__smakebuf_r+0x1a>
 8015ef2:	46c0      	nop			; (mov r8, r8)
 8015ef4:	08015c5d 	.word	0x08015c5d

08015ef8 <_raise_r>:
 8015ef8:	b570      	push	{r4, r5, r6, lr}
 8015efa:	0004      	movs	r4, r0
 8015efc:	000d      	movs	r5, r1
 8015efe:	291f      	cmp	r1, #31
 8015f00:	d904      	bls.n	8015f0c <_raise_r+0x14>
 8015f02:	2316      	movs	r3, #22
 8015f04:	6003      	str	r3, [r0, #0]
 8015f06:	2001      	movs	r0, #1
 8015f08:	4240      	negs	r0, r0
 8015f0a:	bd70      	pop	{r4, r5, r6, pc}
 8015f0c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d004      	beq.n	8015f1c <_raise_r+0x24>
 8015f12:	008a      	lsls	r2, r1, #2
 8015f14:	189b      	adds	r3, r3, r2
 8015f16:	681a      	ldr	r2, [r3, #0]
 8015f18:	2a00      	cmp	r2, #0
 8015f1a:	d108      	bne.n	8015f2e <_raise_r+0x36>
 8015f1c:	0020      	movs	r0, r4
 8015f1e:	f000 f831 	bl	8015f84 <_getpid_r>
 8015f22:	002a      	movs	r2, r5
 8015f24:	0001      	movs	r1, r0
 8015f26:	0020      	movs	r0, r4
 8015f28:	f000 f81a 	bl	8015f60 <_kill_r>
 8015f2c:	e7ed      	b.n	8015f0a <_raise_r+0x12>
 8015f2e:	2000      	movs	r0, #0
 8015f30:	2a01      	cmp	r2, #1
 8015f32:	d0ea      	beq.n	8015f0a <_raise_r+0x12>
 8015f34:	1c51      	adds	r1, r2, #1
 8015f36:	d103      	bne.n	8015f40 <_raise_r+0x48>
 8015f38:	2316      	movs	r3, #22
 8015f3a:	3001      	adds	r0, #1
 8015f3c:	6023      	str	r3, [r4, #0]
 8015f3e:	e7e4      	b.n	8015f0a <_raise_r+0x12>
 8015f40:	2400      	movs	r4, #0
 8015f42:	0028      	movs	r0, r5
 8015f44:	601c      	str	r4, [r3, #0]
 8015f46:	4790      	blx	r2
 8015f48:	0020      	movs	r0, r4
 8015f4a:	e7de      	b.n	8015f0a <_raise_r+0x12>

08015f4c <raise>:
 8015f4c:	b510      	push	{r4, lr}
 8015f4e:	4b03      	ldr	r3, [pc, #12]	; (8015f5c <raise+0x10>)
 8015f50:	0001      	movs	r1, r0
 8015f52:	6818      	ldr	r0, [r3, #0]
 8015f54:	f7ff ffd0 	bl	8015ef8 <_raise_r>
 8015f58:	bd10      	pop	{r4, pc}
 8015f5a:	46c0      	nop			; (mov r8, r8)
 8015f5c:	20000268 	.word	0x20000268

08015f60 <_kill_r>:
 8015f60:	2300      	movs	r3, #0
 8015f62:	b570      	push	{r4, r5, r6, lr}
 8015f64:	4d06      	ldr	r5, [pc, #24]	; (8015f80 <_kill_r+0x20>)
 8015f66:	0004      	movs	r4, r0
 8015f68:	0008      	movs	r0, r1
 8015f6a:	0011      	movs	r1, r2
 8015f6c:	602b      	str	r3, [r5, #0]
 8015f6e:	f7f0 f9d7 	bl	8006320 <_kill>
 8015f72:	1c43      	adds	r3, r0, #1
 8015f74:	d103      	bne.n	8015f7e <_kill_r+0x1e>
 8015f76:	682b      	ldr	r3, [r5, #0]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d000      	beq.n	8015f7e <_kill_r+0x1e>
 8015f7c:	6023      	str	r3, [r4, #0]
 8015f7e:	bd70      	pop	{r4, r5, r6, pc}
 8015f80:	2000382c 	.word	0x2000382c

08015f84 <_getpid_r>:
 8015f84:	b510      	push	{r4, lr}
 8015f86:	f7f0 f9c5 	bl	8006314 <_getpid>
 8015f8a:	bd10      	pop	{r4, pc}

08015f8c <__sread>:
 8015f8c:	b570      	push	{r4, r5, r6, lr}
 8015f8e:	000c      	movs	r4, r1
 8015f90:	250e      	movs	r5, #14
 8015f92:	5f49      	ldrsh	r1, [r1, r5]
 8015f94:	f000 f8a4 	bl	80160e0 <_read_r>
 8015f98:	2800      	cmp	r0, #0
 8015f9a:	db03      	blt.n	8015fa4 <__sread+0x18>
 8015f9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8015f9e:	181b      	adds	r3, r3, r0
 8015fa0:	6563      	str	r3, [r4, #84]	; 0x54
 8015fa2:	bd70      	pop	{r4, r5, r6, pc}
 8015fa4:	89a3      	ldrh	r3, [r4, #12]
 8015fa6:	4a02      	ldr	r2, [pc, #8]	; (8015fb0 <__sread+0x24>)
 8015fa8:	4013      	ands	r3, r2
 8015faa:	81a3      	strh	r3, [r4, #12]
 8015fac:	e7f9      	b.n	8015fa2 <__sread+0x16>
 8015fae:	46c0      	nop			; (mov r8, r8)
 8015fb0:	ffffefff 	.word	0xffffefff

08015fb4 <__swrite>:
 8015fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fb6:	001f      	movs	r7, r3
 8015fb8:	898b      	ldrh	r3, [r1, #12]
 8015fba:	0005      	movs	r5, r0
 8015fbc:	000c      	movs	r4, r1
 8015fbe:	0016      	movs	r6, r2
 8015fc0:	05db      	lsls	r3, r3, #23
 8015fc2:	d505      	bpl.n	8015fd0 <__swrite+0x1c>
 8015fc4:	230e      	movs	r3, #14
 8015fc6:	5ec9      	ldrsh	r1, [r1, r3]
 8015fc8:	2200      	movs	r2, #0
 8015fca:	2302      	movs	r3, #2
 8015fcc:	f000 f874 	bl	80160b8 <_lseek_r>
 8015fd0:	89a3      	ldrh	r3, [r4, #12]
 8015fd2:	4a05      	ldr	r2, [pc, #20]	; (8015fe8 <__swrite+0x34>)
 8015fd4:	0028      	movs	r0, r5
 8015fd6:	4013      	ands	r3, r2
 8015fd8:	81a3      	strh	r3, [r4, #12]
 8015fda:	0032      	movs	r2, r6
 8015fdc:	230e      	movs	r3, #14
 8015fde:	5ee1      	ldrsh	r1, [r4, r3]
 8015fe0:	003b      	movs	r3, r7
 8015fe2:	f000 f81f 	bl	8016024 <_write_r>
 8015fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fe8:	ffffefff 	.word	0xffffefff

08015fec <__sseek>:
 8015fec:	b570      	push	{r4, r5, r6, lr}
 8015fee:	000c      	movs	r4, r1
 8015ff0:	250e      	movs	r5, #14
 8015ff2:	5f49      	ldrsh	r1, [r1, r5]
 8015ff4:	f000 f860 	bl	80160b8 <_lseek_r>
 8015ff8:	89a3      	ldrh	r3, [r4, #12]
 8015ffa:	1c42      	adds	r2, r0, #1
 8015ffc:	d103      	bne.n	8016006 <__sseek+0x1a>
 8015ffe:	4a05      	ldr	r2, [pc, #20]	; (8016014 <__sseek+0x28>)
 8016000:	4013      	ands	r3, r2
 8016002:	81a3      	strh	r3, [r4, #12]
 8016004:	bd70      	pop	{r4, r5, r6, pc}
 8016006:	2280      	movs	r2, #128	; 0x80
 8016008:	0152      	lsls	r2, r2, #5
 801600a:	4313      	orrs	r3, r2
 801600c:	81a3      	strh	r3, [r4, #12]
 801600e:	6560      	str	r0, [r4, #84]	; 0x54
 8016010:	e7f8      	b.n	8016004 <__sseek+0x18>
 8016012:	46c0      	nop			; (mov r8, r8)
 8016014:	ffffefff 	.word	0xffffefff

08016018 <__sclose>:
 8016018:	b510      	push	{r4, lr}
 801601a:	230e      	movs	r3, #14
 801601c:	5ec9      	ldrsh	r1, [r1, r3]
 801601e:	f000 f815 	bl	801604c <_close_r>
 8016022:	bd10      	pop	{r4, pc}

08016024 <_write_r>:
 8016024:	b570      	push	{r4, r5, r6, lr}
 8016026:	0004      	movs	r4, r0
 8016028:	0008      	movs	r0, r1
 801602a:	0011      	movs	r1, r2
 801602c:	001a      	movs	r2, r3
 801602e:	2300      	movs	r3, #0
 8016030:	4d05      	ldr	r5, [pc, #20]	; (8016048 <_write_r+0x24>)
 8016032:	602b      	str	r3, [r5, #0]
 8016034:	f7f0 f9ad 	bl	8006392 <_write>
 8016038:	1c43      	adds	r3, r0, #1
 801603a:	d103      	bne.n	8016044 <_write_r+0x20>
 801603c:	682b      	ldr	r3, [r5, #0]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d000      	beq.n	8016044 <_write_r+0x20>
 8016042:	6023      	str	r3, [r4, #0]
 8016044:	bd70      	pop	{r4, r5, r6, pc}
 8016046:	46c0      	nop			; (mov r8, r8)
 8016048:	2000382c 	.word	0x2000382c

0801604c <_close_r>:
 801604c:	2300      	movs	r3, #0
 801604e:	b570      	push	{r4, r5, r6, lr}
 8016050:	4d06      	ldr	r5, [pc, #24]	; (801606c <_close_r+0x20>)
 8016052:	0004      	movs	r4, r0
 8016054:	0008      	movs	r0, r1
 8016056:	602b      	str	r3, [r5, #0]
 8016058:	f7f0 f9b7 	bl	80063ca <_close>
 801605c:	1c43      	adds	r3, r0, #1
 801605e:	d103      	bne.n	8016068 <_close_r+0x1c>
 8016060:	682b      	ldr	r3, [r5, #0]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d000      	beq.n	8016068 <_close_r+0x1c>
 8016066:	6023      	str	r3, [r4, #0]
 8016068:	bd70      	pop	{r4, r5, r6, pc}
 801606a:	46c0      	nop			; (mov r8, r8)
 801606c:	2000382c 	.word	0x2000382c

08016070 <_fstat_r>:
 8016070:	2300      	movs	r3, #0
 8016072:	b570      	push	{r4, r5, r6, lr}
 8016074:	4d06      	ldr	r5, [pc, #24]	; (8016090 <_fstat_r+0x20>)
 8016076:	0004      	movs	r4, r0
 8016078:	0008      	movs	r0, r1
 801607a:	0011      	movs	r1, r2
 801607c:	602b      	str	r3, [r5, #0]
 801607e:	f7f0 f9ae 	bl	80063de <_fstat>
 8016082:	1c43      	adds	r3, r0, #1
 8016084:	d103      	bne.n	801608e <_fstat_r+0x1e>
 8016086:	682b      	ldr	r3, [r5, #0]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d000      	beq.n	801608e <_fstat_r+0x1e>
 801608c:	6023      	str	r3, [r4, #0]
 801608e:	bd70      	pop	{r4, r5, r6, pc}
 8016090:	2000382c 	.word	0x2000382c

08016094 <_isatty_r>:
 8016094:	2300      	movs	r3, #0
 8016096:	b570      	push	{r4, r5, r6, lr}
 8016098:	4d06      	ldr	r5, [pc, #24]	; (80160b4 <_isatty_r+0x20>)
 801609a:	0004      	movs	r4, r0
 801609c:	0008      	movs	r0, r1
 801609e:	602b      	str	r3, [r5, #0]
 80160a0:	f7f0 f9ab 	bl	80063fa <_isatty>
 80160a4:	1c43      	adds	r3, r0, #1
 80160a6:	d103      	bne.n	80160b0 <_isatty_r+0x1c>
 80160a8:	682b      	ldr	r3, [r5, #0]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d000      	beq.n	80160b0 <_isatty_r+0x1c>
 80160ae:	6023      	str	r3, [r4, #0]
 80160b0:	bd70      	pop	{r4, r5, r6, pc}
 80160b2:	46c0      	nop			; (mov r8, r8)
 80160b4:	2000382c 	.word	0x2000382c

080160b8 <_lseek_r>:
 80160b8:	b570      	push	{r4, r5, r6, lr}
 80160ba:	0004      	movs	r4, r0
 80160bc:	0008      	movs	r0, r1
 80160be:	0011      	movs	r1, r2
 80160c0:	001a      	movs	r2, r3
 80160c2:	2300      	movs	r3, #0
 80160c4:	4d05      	ldr	r5, [pc, #20]	; (80160dc <_lseek_r+0x24>)
 80160c6:	602b      	str	r3, [r5, #0]
 80160c8:	f7f0 f9a0 	bl	800640c <_lseek>
 80160cc:	1c43      	adds	r3, r0, #1
 80160ce:	d103      	bne.n	80160d8 <_lseek_r+0x20>
 80160d0:	682b      	ldr	r3, [r5, #0]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d000      	beq.n	80160d8 <_lseek_r+0x20>
 80160d6:	6023      	str	r3, [r4, #0]
 80160d8:	bd70      	pop	{r4, r5, r6, pc}
 80160da:	46c0      	nop			; (mov r8, r8)
 80160dc:	2000382c 	.word	0x2000382c

080160e0 <_read_r>:
 80160e0:	b570      	push	{r4, r5, r6, lr}
 80160e2:	0004      	movs	r4, r0
 80160e4:	0008      	movs	r0, r1
 80160e6:	0011      	movs	r1, r2
 80160e8:	001a      	movs	r2, r3
 80160ea:	2300      	movs	r3, #0
 80160ec:	4d05      	ldr	r5, [pc, #20]	; (8016104 <_read_r+0x24>)
 80160ee:	602b      	str	r3, [r5, #0]
 80160f0:	f7f0 f932 	bl	8006358 <_read>
 80160f4:	1c43      	adds	r3, r0, #1
 80160f6:	d103      	bne.n	8016100 <_read_r+0x20>
 80160f8:	682b      	ldr	r3, [r5, #0]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d000      	beq.n	8016100 <_read_r+0x20>
 80160fe:	6023      	str	r3, [r4, #0]
 8016100:	bd70      	pop	{r4, r5, r6, pc}
 8016102:	46c0      	nop			; (mov r8, r8)
 8016104:	2000382c 	.word	0x2000382c

08016108 <_init>:
 8016108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801610a:	46c0      	nop			; (mov r8, r8)
 801610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801610e:	bc08      	pop	{r3}
 8016110:	469e      	mov	lr, r3
 8016112:	4770      	bx	lr

08016114 <_fini>:
 8016114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016116:	46c0      	nop			; (mov r8, r8)
 8016118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801611a:	bc08      	pop	{r3}
 801611c:	469e      	mov	lr, r3
 801611e:	4770      	bx	lr
